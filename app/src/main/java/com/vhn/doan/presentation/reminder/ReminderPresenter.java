package com.vhn.doan.presentation.reminder;

import com.vhn.doan.data.Reminder;
import com.vhn.doan.data.repository.ReminderRepository;
import com.vhn.doan.presentation.base.BasePresenter;
import com.vhn.doan.services.ReminderService;
import com.vhn.doan.utils.UserSessionManager;

import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;

/**
 * Presenter cho ch·ª©c nƒÉng Reminder theo ki·∫øn tr√∫c MVP
 */
public class ReminderPresenter extends BasePresenter<ReminderContract.View> implements ReminderContract.Presenter {

    private ReminderRepository reminderRepository;
    private UserSessionManager userSessionManager;

    private List<Reminder> allReminders;
    private List<Reminder> filteredReminders;
    private boolean isLoading = false;
    private String currentSearchQuery = "";
    private boolean showActiveOnly = false;

    @Inject
    public ReminderPresenter(ReminderRepository reminderRepository, UserSessionManager userSessionManager) {
        this.reminderRepository = reminderRepository;
        this.userSessionManager = userSessionManager;
        this.allReminders = new ArrayList<>();
        this.filteredReminders = new ArrayList<>();
    }

    @Override
    public void attachView(ReminderContract.View view) {
        super.attachView(view);
    }

    @Override
    public void start() {
        loadReminders();
    }

    @Override
    public void loadReminders() {
        if (isLoading) {
            return;
        }

        if (!isViewAttached()) {
            return;
        }

        String userId = userSessionManager.getCurrentUserId();
        if (userId == null || userId.isEmpty()) {
            view.showError("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem nh·∫Øc nh·ªü");
            return;
        }

        isLoading = true;
        view.showLoading();

        reminderRepository.getUserReminders(userId, new ReminderRepository.RepositoryCallback<List<Reminder>>() {
            @Override
            public void onSuccess(List<Reminder> reminders) {
                isLoading = false;
                if (isViewAttached()) {
                    view.hideLoading();
                    allReminders.clear();
                    allReminders.addAll(reminders);

                    applyFiltersAndSearch();

                    // C·∫¨P NH·∫¨T S·ªê L∆Ø·ª¢NG NH·∫ÆC NH·ªû ƒêANG HO·∫†T ƒê·ªòNG
                    updateActiveReminderCount();

                    if (filteredReminders.isEmpty()) {
                        view.showEmptyState();
                    } else {
                        view.hideEmptyState();
                        view.showReminders(filteredReminders);
                    }
                }
            }

            @Override
            public void onError(String error) {
                isLoading = false;
                if (isViewAttached()) {
                    view.hideLoading();
                    view.showError("L·ªói khi t·∫£i nh·∫Øc nh·ªü: " + error);
                }
            }
        });
    }

    /**
     * C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng nh·∫Øc nh·ªü ƒëang ho·∫°t ƒë·ªông
     */
    private void updateActiveReminderCount() {
        if (!isViewAttached()) return;

        int activeCount = 0;
        for (Reminder reminder : allReminders) {
            if (reminder.isActive()) {
                activeCount++;
            }
        }

        // C·∫≠p nh·∫≠t UI hi·ªÉn th·ªã s·ªë l∆∞·ª£ng nh·∫Øc nh·ªü ƒëang ho·∫°t ƒë·ªông
        view.updateActiveReminderCount(activeCount);

        android.util.Log.d("ReminderPresenter", "üìä S·ªë nh·∫Øc nh·ªü ƒëang ho·∫°t ƒë·ªông: " + activeCount + "/" + allReminders.size());
    }

    @Override
    public void createReminder() {
        if (isViewAttached()) {
            view.showReminderDialog(null);
        }
    }

    @Override
    public void editReminder(Reminder reminder) {
        if (isViewAttached() && reminder != null) {
            view.showReminderDialog(reminder);
        }
    }

    @Override
    public void deleteReminder(Reminder reminder) {
        if (isViewAttached() && reminder != null) {
            view.showDeleteConfirmDialog(reminder);
        }
    }

    @Override
    public void saveReminder(Reminder reminder) {
        if (!isViewAttached() || reminder == null) {
            return;
        }

        String userId = userSessionManager.getCurrentUserId();
        if (userId == null || userId.isEmpty()) {
            view.showError("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ l∆∞u nh·∫Øc nh·ªü");
            return;
        }

        reminder.setUserId(userId);
        view.showLoading();

        if (reminder.getId() == null || reminder.getId().isEmpty()) {
            // T·∫°o m·ªõi
            reminderRepository.addReminder(reminder, new ReminderRepository.RepositoryCallback<String>() {
                @Override
                public void onSuccess(String reminderId) {
                    if (isViewAttached()) {
                        view.hideLoading();
                        view.showSuccess("T·∫°o nh·∫Øc nh·ªü th√†nh c√¥ng");
                        reminder.setId(reminderId);
                        addReminderToList(reminder);

                        // ‚úÖ TH√äM: L√™n l·ªãch th√¥ng b√°o cho nh·∫Øc nh·ªü m·ªõi
                        scheduleReminderNotification(reminder);
                    }
                }

                @Override
                public void onError(String error) {
                    if (isViewAttached()) {
                        view.hideLoading();
                        view.showError("L·ªói khi t·∫°o nh·∫Øc nh·ªü: " + error);
                    }
                }
            });
        } else {
            // C·∫≠p nh·∫≠t
            reminderRepository.updateReminder(reminder, new ReminderRepository.RepositoryCallback<Void>() {
                @Override
                public void onSuccess(Void result) {
                    if (isViewAttached()) {
                        view.hideLoading();
                        view.showSuccess("C·∫≠p nh·∫≠t nh·∫Øc nh·ªü th√†nh c√¥ng");
                        updateReminderInList(reminder);

                        // ‚úÖ TH√äM: C·∫≠p nh·∫≠t l·ªãch th√¥ng b√°o cho nh·∫Øc nh·ªü ƒë√£ ch·ªânh s·ª≠a
                        scheduleReminderNotification(reminder);
                    }
                }

                @Override
                public void onError(String error) {
                    if (isViewAttached()) {
                        view.hideLoading();
                        view.showError("L·ªói khi c·∫≠p nh·∫≠t nh·∫Øc nh·ªü: " + error);
                    }
                }
            });
        }
    }

    @Override
    public void toggleReminder(Reminder reminder) {
        if (!isViewAttached() || reminder == null) {
            return;
        }

        boolean newStatus = !reminder.isActive();

        reminderRepository.toggleReminder(reminder.getId(), newStatus, new ReminderRepository.RepositoryCallback<Void>() {
            @Override
            public void onSuccess(Void result) {
                if (isViewAttached()) {
                    reminder.setActive(newStatus);
                    updateReminderInList(reminder);

                    String message = newStatus ? "ƒê√£ b·∫≠t nh·∫Øc nh·ªü" : "ƒê√£ t·∫Øt nh·∫Øc nh·ªü";
                    view.showSuccess(message);

                    // ‚úÖ TH√äM: C·∫≠p nh·∫≠t l·ªãch th√¥ng b√°o khi b·∫≠t/t·∫Øt
                    scheduleReminderNotification(reminder);
                }
            }

            @Override
            public void onError(String error) {
                if (isViewAttached()) {
                    view.showError("L·ªói khi thay ƒë·ªïi tr·∫°ng th√°i nh·∫Øc nh·ªü: " + error);
                }
            }
        });
    }

    /**
     * ‚úÖ TH√äM: Method ƒë·ªÉ l√™n l·ªãch th√¥ng b√°o cho nh·∫Øc nh·ªü
     */
    private void scheduleReminderNotification(Reminder reminder) {
        if (!isViewAttached() || reminder == null) {
            return;
        }

        // L·∫•y context t·ª´ view ƒë·ªÉ t·∫°o ReminderService
        android.content.Context context = getContextFromView();
        if (context == null) {
            android.util.Log.w("ReminderPresenter", "Kh√¥ng th·ªÉ l·∫•y context ƒë·ªÉ schedule reminder");
            return;
        }

        try {
            ReminderService reminderService = new ReminderService(context);

            if (reminder.isActive()) {
                // L√™n l·ªãch th√¥ng b√°o n·∫øu reminder ƒëang b·∫≠t
                reminderService.scheduleReminder(reminder);
                android.util.Log.d("ReminderPresenter", "‚úÖ ƒê√£ l√™n l·ªãch th√¥ng b√°o cho reminder: " + reminder.getTitle());
            } else {
                // H·ªßy th√¥ng b√°o n·∫øu reminder b·ªã t·∫Øt
                reminderService.cancelReminder(reminder.getId());
                android.util.Log.d("ReminderPresenter", "‚ùå ƒê√£ h·ªßy th√¥ng b√°o cho reminder: " + reminder.getTitle());
            }
        } catch (Exception e) {
            android.util.Log.e("ReminderPresenter", "L·ªói khi schedule reminder: " + e.getMessage());
            if (isViewAttached()) {
                view.showError("L·ªói khi thi·∫øt l·∫≠p th√¥ng b√°o: " + e.getMessage());
            }
        }
    }

    /**
     * ‚úÖ TH√äM: L·∫•y context t·ª´ view (gi·∫£ s·ª≠ view l√† Fragment ho·∫∑c Activity)
     */
    private android.content.Context getContextFromView() {
        if (!isViewAttached()) {
            return null;
        }

        // Th·ª≠ cast view th√†nh c√°c lo·∫°i c√≥ th·ªÉ c√≥ context
        if (view instanceof androidx.fragment.app.Fragment) {
            return ((androidx.fragment.app.Fragment) view).getContext();
        } else if (view instanceof android.app.Activity) {
            return (android.app.Activity) view;
        } else if (view instanceof ReminderFragment) {
            return ((ReminderFragment) view).getContext();
        }

        // N·∫øu kh√¥ng th·ªÉ l·∫•y context tr·ª±c ti·∫øp, th·ª≠ c√°ch kh√°c
        return null;
    }

    @Override
    public void refreshReminders() {
        loadReminders();
    }

    @Override
    public void searchReminders(String query) {
        currentSearchQuery = query != null ? query.trim() : "";
        applyFiltersAndSearch();

        if (isViewAttached()) {
            if (filteredReminders.isEmpty() && !allReminders.isEmpty()) {
                view.showEmptyState();
            } else {
                view.hideEmptyState();
                view.showReminders(filteredReminders);
            }
        }
    }

    @Override
    public void filterReminders(boolean activeOnly) {
        showActiveOnly = activeOnly;
        applyFiltersAndSearch();

        if (isViewAttached()) {
            if (filteredReminders.isEmpty() && !allReminders.isEmpty()) {
                view.showEmptyState();
            } else {
                view.hideEmptyState();
                view.showReminders(filteredReminders);
            }
        }
    }

    /**
     * X√≥a nh·∫Øc nh·ªü sau khi x√°c nh·∫≠n
     */
    public void confirmDeleteReminder(Reminder reminder) {
        if (!isViewAttached() || reminder == null) {
            return;
        }

        view.showLoading();

        reminderRepository.deleteReminder(reminder.getId(), new ReminderRepository.RepositoryCallback<Void>() {
            @Override
            public void onSuccess(Void result) {
                if (isViewAttached()) {
                    view.hideLoading();
                    view.showSuccess("X√≥a nh·∫Øc nh·ªü th√†nh c√¥ng");
                    removeReminderFromList(reminder);
                }
            }

            @Override
            public void onError(String error) {
                if (isViewAttached()) {
                    view.hideLoading();
                    view.showError("L·ªói khi x√≥a nh·∫Øc nh·ªü: " + error);
                }
            }
        });
    }

    /**
     * S·∫Øp x·∫øp danh s√°ch nh·∫Øc nh·ªü theo ti√™u ch√≠
     */
    public void sortReminders(String sortType) {
        if (allReminders == null || allReminders.isEmpty()) {
            return;
        }

        List<Reminder> sortedList = new ArrayList<>(filteredReminders);

        switch (sortType) {
            case "created_desc":
                sortedList.sort((r1, r2) -> {
                    Long time1 = r1.getCreatedAt();
                    Long time2 = r2.getCreatedAt();
                    if (time1 == null && time2 == null) return 0;
                    if (time1 == null) return 1;
                    if (time2 == null) return -1;
                    return time2.compareTo(time1);
                });
                break;
            case "created_asc":
                sortedList.sort((r1, r2) -> {
                    Long time1 = r1.getCreatedAt();
                    Long time2 = r2.getCreatedAt();
                    if (time1 == null && time2 == null) return 0;
                    if (time1 == null) return 1;
                    if (time2 == null) return -1;
                    return time1.compareTo(time2);
                });
                break;
            case "datetime_asc":
                sortedList.sort((r1, r2) -> {
                    Long time1 = r1.getReminderTime();
                    Long time2 = r2.getReminderTime();
                    if (time1 == null && time2 == null) return 0;
                    if (time1 == null) return 1;
                    if (time2 == null) return -1;
                    return time1.compareTo(time2);
                });
                break;
            case "datetime_desc":
                sortedList.sort((r1, r2) -> {
                    Long time1 = r1.getReminderTime();
                    Long time2 = r2.getReminderTime();
                    if (time1 == null && time2 == null) return 0;
                    if (time1 == null) return 1;
                    if (time2 == null) return -1;
                    return time2.compareTo(time1);
                });
                break;
            case "name_asc":
                sortedList.sort((r1, r2) -> {
                    String title1 = r1.getTitle() != null ? r1.getTitle() : "";
                    String title2 = r2.getTitle() != null ? r2.getTitle() : "";
                    return title1.compareToIgnoreCase(title2);
                });
                break;
            case "name_desc":
                sortedList.sort((r1, r2) -> {
                    String title1 = r1.getTitle() != null ? r1.getTitle() : "";
                    String title2 = r2.getTitle() != null ? r2.getTitle() : "";
                    return title2.compareToIgnoreCase(title1);
                });
                break;
            case "active_first":
                sortedList.sort((r1, r2) -> {
                    boolean active1 = r1.isActive();
                    boolean active2 = r2.isActive();
                    if (active1 && !active2) return -1;
                    if (!active1 && active2) return 1;
                    return 0;
                });
                break;
            default:
                // Default sort by created time desc
                sortedList.sort((r1, r2) -> {
                    Long time1 = r1.getCreatedAt();
                    Long time2 = r2.getCreatedAt();
                    if (time1 == null && time2 == null) return 0;
                    if (time1 == null) return 1;
                    if (time2 == null) return -1;
                    return time2.compareTo(time1);
                });
                break;
        }

        this.filteredReminders = sortedList;

        // C·∫≠p nh·∫≠t view thay v√¨ g·ªçi updateView()
        if (isViewAttached()) {
            if (filteredReminders.isEmpty() && !allReminders.isEmpty()) {
                view.showEmptyState();
            } else {
                view.hideEmptyState();
                view.showReminders(filteredReminders);
            }
        }
    }

    /**
     * Xu·∫•t danh s√°ch nh·∫Øc nh·ªü
     */
    public void exportReminders() {
        if (getView() == null) return;

        try {
            if (allReminders == null || allReminders.isEmpty()) {
                getView().showError("Kh√¥ng c√≥ d·ªØ li·ªáu nh·∫Øc nh·ªü ƒë·ªÉ xu·∫•t");
                return;
            }

            // T·∫°o n·ªôi dung xu·∫•t
            StringBuilder exportContent = new StringBuilder();
            exportContent.append("DANH S√ÅCH NH·∫ÆC NH·ªû S·ª®C KH·ªéE\n");
            exportContent.append("============================\n\n");

            for (int i = 0; i < allReminders.size(); i++) {
                Reminder reminder = allReminders.get(i);
                exportContent.append(String.format("%d. %s\n", i + 1,
                        reminder.getTitle() != null ? reminder.getTitle() : "Kh√¥ng c√≥ ti√™u ƒë·ªÅ"));

                if (reminder.getDescription() != null && !reminder.getDescription().trim().isEmpty()) {
                    exportContent.append("   M√¥ t·∫£: ").append(reminder.getDescription()).append("\n");
                }

                if (reminder.getReminderTime() != null) {
                    java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("dd/MM/yyyy HH:mm", java.util.Locale.getDefault());
                    exportContent.append("   Th·ªùi gian: ").append(sdf.format(new java.util.Date(reminder.getReminderTime()))).append("\n");
                }

                String repeatText = getRepeatTypeText(reminder.getRepeatType());
                exportContent.append("   L·∫∑p l·∫°i: ").append(repeatText).append("\n");
                exportContent.append("   Tr·∫°ng th√°i: ").append(reminder.isActive() ? "ƒêang ho·∫°t ƒë·ªông" : "T·∫°m d·ª´ng").append("\n");
                exportContent.append("\n");
            }

            exportContent.append("T·ªïng s·ªë nh·∫Øc nh·ªü: ").append(allReminders.size()).append("\n");
            int activeCount = 0;
            for (Reminder r : allReminders) {
                if (r.isActive()) activeCount++;
            }
            exportContent.append("ƒêang ho·∫°t ƒë·ªông: ").append(activeCount).append("\n");
            exportContent.append("T·∫°m d·ª´ng: ").append(allReminders.size() - activeCount).append("\n");

            // G·ªçi View ƒë·ªÉ x·ª≠ l√Ω vi·ªác xu·∫•t file
            getView().showSuccess("ƒê√£ t·∫°o n·ªôi dung xu·∫•t th√†nh c√¥ng");

            // C√≥ th·ªÉ th√™m logic ƒë·ªÉ l∆∞u file v√†o External Storage ho·∫∑c chia s·∫ª

        } catch (Exception e) {
            android.util.Log.e("ReminderPresenter", "Error exporting reminders: " + e.getMessage());
            if (getView() != null) {
                getView().showError("L·ªói khi xu·∫•t danh s√°ch: " + e.getMessage());
            }
        }
    }

    /**
     * Helper method ƒë·ªÉ convert repeat type int th√†nh text
     */
    private String getRepeatTypeText(int repeatType) {
        switch (repeatType) {
            case Reminder.RepeatType.NO_REPEAT:
                return "Kh√¥ng l·∫∑p l·∫°i";
            case Reminder.RepeatType.DAILY:
                return "H√†ng ng√†y";
            case Reminder.RepeatType.WEEKLY:
                return "H√†ng tu·∫ßn";
            case Reminder.RepeatType.MONTHLY:
                return "H√†ng th√°ng";
            default:
                return "T√πy ch·ªânh";
        }
    }

    /**
     * √Åp d·ª•ng b·ªô l·ªçc v√† t√¨m ki·∫øm
     */
    private void applyFiltersAndSearch() {
        filteredReminders.clear();

        for (Reminder reminder : allReminders) {
            boolean matchesSearch = true;
            boolean matchesFilter = true;

            // Ki·ªÉm tra t√¨m ki·∫øm
            if (!currentSearchQuery.isEmpty()) {
                String title = reminder.getTitle() != null ? reminder.getTitle().toLowerCase() : "";
                String description = reminder.getDescription() != null ? reminder.getDescription().toLowerCase() : "";
                String query = currentSearchQuery.toLowerCase();

                matchesSearch = title.contains(query) || description.contains(query);
            }

            // Ki·ªÉm tra b·ªô l·ªçc
            if (showActiveOnly) {
                matchesFilter = reminder.isActive();
            }

            if (matchesSearch && matchesFilter) {
                filteredReminders.add(reminder);
            }
        }
    }

    /**
     * Th√™m reminder m·ªõi v√†o danh s√°ch
     */
    private void addReminderToList(Reminder reminder) {
        allReminders.add(0, reminder); // Th√™m v√†o ƒë·∫ßu danh s√°ch
        applyFiltersAndSearch();

        // C·∫¨P NH·∫¨T S·ªê L∆Ø·ª¢NG NH·∫ÆC NH·ªû ƒêANG HO·∫†T ƒê·ªòNG SAU KHI TH√äM M·ªöI
        updateActiveReminderCount();

        if (isViewAttached()) {
            if (filteredReminders.isEmpty()) {
                view.showEmptyState();
            } else {
                view.hideEmptyState();
                view.addReminderItem(reminder);
            }
        }
    }

    /**
     * C·∫≠p nh·∫≠t reminder trong danh s√°ch
     */
    private void updateReminderInList(Reminder updatedReminder) {
        for (int i = 0; i < allReminders.size(); i++) {
            if (allReminders.get(i).getId().equals(updatedReminder.getId())) {
                allReminders.set(i, updatedReminder);
                break;
            }
        }

        applyFiltersAndSearch();

        // C·∫¨P NH·∫¨T S·ªê L∆Ø·ª¢NG NH·∫ÆC NH·ªû ƒêANG HO·∫†T ƒê·ªòNG SAU KHI C·∫¨P NH·∫¨T
        updateActiveReminderCount();

        if (isViewAttached()) {
            view.updateReminderItem(updatedReminder);
        }
    }

    /**
     * X√≥a reminder kh·ªèi danh s√°ch
     */
    private void removeReminderFromList(Reminder reminder) {
        allReminders.removeIf(r -> r.getId().equals(reminder.getId()));
        filteredReminders.removeIf(r -> r.getId().equals(reminder.getId()));

        // C·∫¨P NH·∫¨T S·ªê L∆Ø·ª¢NG NH·∫ÆC NH·ªû ƒêANG HO·∫†T ƒê·ªòNG SAU KHI X√ìA
        updateActiveReminderCount();

        if (isViewAttached()) {
            view.removeReminderItem(reminder);

            if (filteredReminders.isEmpty()) {
                view.showEmptyState();
            }
        }
    }

    /**
     * L·∫•y s·ªë l∆∞·ª£ng nh·∫Øc nh·ªü ƒëang ho·∫°t ƒë·ªông
     */
    public int getActiveReminderCount() {
        int count = 0;
        for (Reminder reminder : allReminders) {
            if (reminder.isActive()) {
                count++;
            }
        }
        return count;
    }

    /**
     * L·∫•y s·ªë l∆∞·ª£ng nh·∫Øc nh·ªü t·ªïng c·ªông
     */
    public int getTotalReminderCount() {
        return allReminders.size();
    }
}
