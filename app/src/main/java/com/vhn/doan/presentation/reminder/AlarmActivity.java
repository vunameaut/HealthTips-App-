package com.vhn.doan.presentation.reminder;

import android.app.Activity;
import android.app.KeyguardManager;
import android.content.Context;
import android.content.Intent;
import android.media.AudioManager;
import android.media.MediaPlayer;
import android.media.RingtoneManager;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Vibrator;
import android.util.Log;
import android.view.View;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.appcompat.app.AppCompatActivity;

import com.vhn.doan.R;
import com.vhn.doan.data.Reminder;
import com.vhn.doan.data.repository.ReminderRepository;
import com.vhn.doan.data.repository.ReminderRepositoryImpl;
import com.vhn.doan.services.ReminderService;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

/**
 * Activity hi·ªÉn th·ªã giao di·ªán b√°o th·ª©c khi ƒë·∫øn gi·ªù nh·∫Øc nh·ªü
 * Thi·∫øt k·∫ø nh∆∞ m·ªôt ·ª©ng d·ª•ng b√°o th·ª©c th·ª±c s·ª±
 */
public class AlarmActivity extends AppCompatActivity {

    private static final String TAG = "AlarmActivity";

    // Constants cho Intent extras
    public static final String EXTRA_REMINDER_ID = "reminder_id";
    public static final String EXTRA_TITLE = "title";
    public static final String EXTRA_MESSAGE = "message";

    private TextView tvTitle, tvDescription, tvTime, tvDate;
    private Button btnDismiss, btnSnooze;
    private ImageView ivAlarmIcon;

    private MediaPlayer mediaPlayer;
    private Vibrator vibrator;
    private Handler handler;
    private Runnable dismissRunnable;

    private String reminderId;
    private String title;
    private String message;
    private ReminderService reminderService;
    private ReminderRepository reminderRepository;

    private static final int AUTO_DISMISS_DELAY = 60000; // T·ª± ƒë·ªông t·∫Øt sau 1 ph√∫t

    /**
     * Static method ƒë·ªÉ kh·ªüi ƒë·ªông AlarmActivity t·ª´ c√°c component kh√°c
     */
    public static void startAlarm(Context context, String reminderId, String title, String message) {
        try {
            Log.d(TAG, "üö® Kh·ªüi ƒë·ªông AlarmActivity: " + title);

            Intent intent = new Intent(context, AlarmActivity.class);
            intent.putExtra(EXTRA_REMINDER_ID, reminderId);
            intent.putExtra(EXTRA_TITLE, title);
            intent.putExtra(EXTRA_MESSAGE, message);

            // ƒê·∫£m b·∫£o Activity c√≥ th·ªÉ kh·ªüi ƒë·ªông t·ª´ background
            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK |
                           Intent.FLAG_ACTIVITY_CLEAR_TOP |
                           Intent.FLAG_ACTIVITY_SINGLE_TOP);

            context.startActivity(intent);

        } catch (Exception e) {
            Log.e(TAG, "‚ùå L·ªói khi kh·ªüi ƒë·ªông AlarmActivity", e);
        }
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        // C·∫•u h√¨nh ƒë·ªÉ hi·ªÉn th·ªã tr√™n m√†n h√¨nh kh√≥a
        setupWindowFlags();

        setContentView(R.layout.activity_alarm);

        // Kh·ªüi t·∫°o repository
        reminderRepository = new ReminderRepositoryImpl();
        reminderService = new ReminderService(this);

        initializeViews();
        setupReminder();
        setupButtons();
        startAlarmSound();
        startVibration();
        setupAutoDismiss();
    }

    private void setupWindowFlags() {
        // Hi·ªÉn th·ªã tr√™n m√†n h√¨nh kh√≥a v√† ƒë√°nh th·ª©c thi·∫øt b·ªã
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O_MR1) {
            setShowWhenLocked(true);
            setTurnScreenOn(true);
        } else {
            getWindow().addFlags(
                WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED |
                WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD |
                WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON |
                WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON
            );
        }

        // ƒê·∫£m b·∫£o activity hi·ªÉn th·ªã ƒë·∫ßy m√†n h√¨nh
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
    }

    private void initializeViews() {
        tvTitle = findViewById(R.id.tv_alarm_title);
        tvDescription = findViewById(R.id.tv_alarm_description);
        tvTime = findViewById(R.id.tv_alarm_time);
        tvDate = findViewById(R.id.tv_alarm_date);
        btnDismiss = findViewById(R.id.btn_dismiss);
        btnSnooze = findViewById(R.id.btn_snooze);
        ivAlarmIcon = findViewById(R.id.iv_alarm_icon);
    }

    private void setupReminder() {
        // L·∫•y th√¥ng tin reminder t·ª´ Intent
        Intent intent = getIntent();
        reminderId = intent.getStringExtra(EXTRA_REMINDER_ID);
        title = intent.getStringExtra(EXTRA_TITLE);
        message = intent.getStringExtra(EXTRA_MESSAGE);

        Log.d(TAG, "üì± AlarmActivity nh·∫≠n d·ªØ li·ªáu: " + title + " (ID: " + reminderId + ")");

        // Hi·ªÉn th·ªã th√¥ng tin
        tvTitle.setText(title != null ? title : getString(R.string.reminder_title_default));
        tvDescription.setText(message != null ? message : getString(R.string.reminder_message_default));

        // Hi·ªÉn th·ªã th·ªùi gian hi·ªán t·∫°i
        Date now = new Date();
        SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm", Locale.getDefault());
        SimpleDateFormat dateFormat = new SimpleDateFormat("EEEE, dd/MM/yyyy", Locale.getDefault());

        tvTime.setText(timeFormat.format(now));
        tvDate.setText(dateFormat.format(now));
    }

    private void setupButtons() {
        btnDismiss.setOnClickListener(v -> dismissAlarm());
        btnSnooze.setOnClickListener(v -> snoozeAlarm());
    }

    private void startAlarmSound() {
        try {
            // L·∫•y URI √¢m thanh t·ª´ reminder ho·∫∑c s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh
            Uri soundUri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM);
            if (soundUri == null) {
                soundUri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);
            }

            mediaPlayer = new MediaPlayer();
            mediaPlayer.setDataSource(this, soundUri);
            mediaPlayer.setAudioStreamType(AudioManager.STREAM_ALARM);
            mediaPlayer.setLooping(true);
            mediaPlayer.prepare();
            mediaPlayer.start();

            // Thi·∫øt l·∫≠p √¢m l∆∞·ª£ng
            AudioManager audioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
            int maxVolume = audioManager.getStreamMaxVolume(AudioManager.STREAM_ALARM);
            int volume = (int) (maxVolume * 0.8); // 80% √¢m l∆∞·ª£ng
            audioManager.setStreamVolume(AudioManager.STREAM_ALARM, volume, 0);

        } catch (Exception e) {
            Log.e(TAG, "‚ùå L·ªói khi ph√°t √¢m thanh b√°o th·ª©c", e);
        }
    }

    private void startVibration() {
        vibrator = (Vibrator) getSystemService(Context.VIBRATOR_SERVICE);
        if (vibrator != null && vibrator.hasVibrator()) {
            // T·∫°o pattern rung: rung 1s, ngh·ªâ 0.5s, l·∫∑p l·∫°i
            long[] pattern = {0, 1000, 500};
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                vibrator.vibrate(android.os.VibrationEffect.createWaveform(pattern, 0));
            } else {
                vibrator.vibrate(pattern, 0);
            }
        }
    }

    private void setupAutoDismiss() {
        handler = new Handler();
        dismissRunnable = this::dismissAlarm;
        handler.postDelayed(dismissRunnable, AUTO_DISMISS_DELAY);
    }

    /**
     * FIXED: T·∫Øt th·ª±c s·ª± nh·∫Øc nh·ªü trong database khi ·∫•n n√∫t "T·∫Øt"
     */
    private void dismissAlarm() {
        Log.d(TAG, "‚úÖ Ng∆∞·ªùi d√πng ·∫•n T·∫Øt - B·∫Øt ƒë·∫ßu t·∫Øt nh·∫Øc nh·ªü: " + reminderId);

        stopAlarmSound();
        stopVibration();

        if (handler != null && dismissRunnable != null) {
            handler.removeCallbacks(dismissRunnable);
        }

        // QUAN TR·ªåNG: T·∫Øt nh·∫Øc nh·ªü trong database
        if (reminderId != null && reminderRepository != null) {
            disableReminderInDatabase();
        } else {
            Log.w(TAG, "‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫Øt nh·∫Øc nh·ªü - thi·∫øu reminderId ho·∫∑c repository");
            finish();
        }
    }

    /**
     * T·∫Øt nh·∫Øc nh·ªü trong database v√† g·ª≠i broadcast c·∫≠p nh·∫≠t UI
     */
    private void disableReminderInDatabase() {
        Log.d(TAG, "üîÑ B·∫Øt ƒë·∫ßu t·∫Øt nh·∫Øc nh·ªü trong database: " + reminderId);

        reminderRepository.getReminderById(reminderId, new ReminderRepository.RepositoryCallback<Reminder>() {
            @Override
            public void onSuccess(Reminder reminder) {
                if (reminder != null) {
                    Log.d(TAG, "üìã T√¨m th·∫•y reminder: " + reminder.getTitle() + " - Current active: " + reminder.isActive());

                    // T·∫Øt nh·∫Øc nh·ªü
                    reminder.setActive(false);
                    reminder.setUpdatedAt(System.currentTimeMillis());

                    // C·∫≠p nh·∫≠t trong database
                    reminderRepository.updateReminder(reminder, new ReminderRepository.RepositoryCallback<Void>() {
                        @Override
                        public void onSuccess(Void result) {
                            Log.d(TAG, "‚úÖ ƒê√£ t·∫Øt nh·∫Øc nh·ªü th√†nh c√¥ng trong database");

                            // H·ªßy scheduling
                            if (reminderService != null) {
                                reminderService.cancelReminder(reminderId);
                                Log.d(TAG, "‚úÖ ƒê√£ h·ªßy scheduling alarm");
                            }

                            // G·ª≠i broadcast ƒë·ªÉ c·∫≠p nh·∫≠t UI danh s√°ch nh·∫Øc nh·ªü
                            sendReminderStatusBroadcast(reminder, "dismissed_by_user");

                            // ƒê√≥ng activity
                            finish();
                        }

                        @Override
                        public void onError(String error) {
                            Log.e(TAG, "‚ùå L·ªói khi c·∫≠p nh·∫≠t reminder trong database: " + error);
                            // V·∫´n ƒë√≥ng activity d√π c√≥ l·ªói
                            finish();
                        }
                    });
                } else {
                    Log.w(TAG, "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y reminder ƒë·ªÉ t·∫Øt");
                    finish();
                }
            }

            @Override
            public void onError(String error) {
                Log.e(TAG, "‚ùå L·ªói khi l·∫•y th√¥ng tin reminder: " + error);
                // V·∫´n ƒë√≥ng activity d√π c√≥ l·ªói
                finish();
            }
        });
    }

    /**
     * G·ª≠i broadcast ƒë·ªÉ th√¥ng b√°o thay ƒë·ªïi tr·∫°ng th√°i reminder
     */
    private void sendReminderStatusBroadcast(Reminder reminder, String reason) {
        try {
            Intent intent = new Intent("REMINDER_STATUS_CHANGED");
            intent.putExtra("reminder_id", reminder.getId());
            intent.putExtra("reminder_title", reminder.getTitle());
            intent.putExtra("is_active", reminder.isActive());
            intent.putExtra("reason", reason);

            sendBroadcast(intent);
            Log.d(TAG, "üì° ƒê√£ g·ª≠i broadcast REMINDER_STATUS_CHANGED: " + reason);

            // G·ª≠i th√™m broadcast force refresh UI
            Intent refreshIntent = new Intent("REMINDER_LIST_REFRESH");
            refreshIntent.putExtra("refresh_reason", "reminder_dismissed");
            sendBroadcast(refreshIntent);
            Log.d(TAG, "üì° ƒê√£ g·ª≠i broadcast REMINDER_LIST_REFRESH");

        } catch (Exception e) {
            Log.e(TAG, "‚ùå L·ªói khi g·ª≠i broadcast: " + e.getMessage());
        }
    }

    private void snoozeAlarm() {
        Log.d(TAG, "‚è∞ Ng∆∞·ªùi d√πng ·∫•n B√°o l·∫°i - Snooze 5 ph√∫t");

        stopAlarmSound();
        stopVibration();

        // L√™n l·ªãch b√°o l·∫°i sau 5 ph√∫t
        if (reminderId != null && title != null) {
            long snoozeTime = System.currentTimeMillis() + (5 * 60 * 1000); // 5 ph√∫t

            // T·∫°o reminder m·ªõi cho snooze
            Reminder snoozeReminder = new Reminder();
            snoozeReminder.setId(reminderId + "_snooze_" + System.currentTimeMillis());
            snoozeReminder.setTitle(title + " (B√°o l·∫°i)");
            snoozeReminder.setDescription(message);
            snoozeReminder.setReminderTime(snoozeTime);
            snoozeReminder.setActive(true);
            snoozeReminder.setRepeatType(Reminder.RepeatType.NO_REPEAT); // Snooze kh√¥ng l·∫∑p l·∫°i

            if (reminderService != null) {
                reminderService.scheduleReminder(snoozeReminder);
                Log.d(TAG, "‚úÖ ƒê√£ l√™n l·ªãch snooze sau 5 ph√∫t");
            }
        }

        finish();
    }

    private void stopAlarmSound() {
        try {
            if (mediaPlayer != null && mediaPlayer.isPlaying()) {
                mediaPlayer.stop();
                mediaPlayer.release();
                mediaPlayer = null;
            }
        } catch (Exception e) {
            Log.e(TAG, "‚ùå L·ªói khi d·ª´ng √¢m thanh", e);
        }
    }

    private void stopVibration() {
        try {
            if (vibrator != null) {
                vibrator.cancel();
            }
        } catch (Exception e) {
            Log.e(TAG, "‚ùå L·ªói khi d·ª´ng rung", e);
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        stopAlarmSound();
        stopVibration();

        if (handler != null && dismissRunnable != null) {
            handler.removeCallbacks(dismissRunnable);
        }

        Log.d(TAG, "üîö AlarmActivity ƒë√£ ƒë∆∞·ª£c destroy");
    }

    @Override
    public void onBackPressed() {
        // NgƒÉn ng∆∞·ªùi d√πng tho√°t b·∫±ng n√∫t back - ph·∫£i b·∫•m dismiss ho·∫∑c snooze
        Log.d(TAG, "üîô Ng∆∞·ªùi d√πng ·∫•n back - Kh√¥ng cho ph√©p tho√°t");
    }
}
