package com.vhn.doan.receivers;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.os.PowerManager;
import android.util.Log;

import com.vhn.doan.data.Reminder;
import com.vhn.doan.data.repository.ReminderRepository;
import com.vhn.doan.data.repository.ReminderRepositoryImpl;
import com.vhn.doan.services.ReminderService;

/**
 * BroadcastReceiver ƒë·ªÉ x·ª≠ l√Ω khi th·ªùi gian nh·∫Øc nh·ªü ƒë√£ ƒë·∫øn
 */
public class ReminderBroadcastReceiver extends BroadcastReceiver {

    private static final String TAG = "ReminderBroadcastReceiver";

    @Override
    public void onReceive(Context context, Intent intent) {
        // Acquire wake lock ƒë·ªÉ ƒë·∫£m b·∫£o thi·∫øt b·ªã kh√¥ng sleep trong qu√° tr√¨nh x·ª≠ l√Ω
        PowerManager powerManager = (PowerManager) context.getSystemService(Context.POWER_SERVICE);
        PowerManager.WakeLock wakeLock = powerManager.newWakeLock(
            PowerManager.PARTIAL_WAKE_LOCK,
            "HealthTips:ReminderReceiver"
        );

        try {
            // Acquire wake lock v·ªõi timeout 30 gi√¢y (tƒÉng t·ª´ 10 gi√¢y)
            wakeLock.acquire(30 * 1000);

            Log.d(TAG, "üîÑ ReminderBroadcastReceiver triggered");

            String action = intent.getAction();
            if (action == null) {
                Log.w(TAG, "‚ùå Action is null");
                return;
            }

            switch (action) {
                case ReminderService.ACTION_REMINDER_TRIGGER:
                    handleReminderTrigger(context, intent);
                    break;
                case "REMINDER_STATUS_CHANGED":
                    handleReminderStatusChanged(context, intent);
                    break;
                default:
                    Log.w(TAG, "‚ö†Ô∏è Unknown action: " + action);
                    break;
            }
        } catch (Exception e) {
            Log.e(TAG, "‚ùå Error in onReceive", e);
        } finally {
            // Lu√¥n release wake lock
            if (wakeLock.isHeld()) {
                wakeLock.release();
            }
        }
    }

    private void handleReminderTrigger(Context context, Intent intent) {
        String reminderId = intent.getStringExtra("reminder_id");
        String title = intent.getStringExtra("title");
        String message = intent.getStringExtra("message");

        Log.d(TAG, "üîÑ Handling reminder trigger - ID: " + reminderId + ", Title: " + title);

        if (reminderId == null || title == null || message == null) {
            Log.w(TAG, "‚ùå Missing reminder data");
            return;
        }

        // ‚úÖ TH√äM: Hi·ªÉn th·ªã notification ngay l·∫≠p t·ª©c tr∆∞·ªõc khi x·ª≠ l√Ω database
        showNotificationImmediately(context, reminderId, title, message);

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i reminder
        updateReminderStatus(context, reminderId, title, message);
    }

    /**
     * Hi·ªÉn th·ªã notification ngay l·∫≠p t·ª©c
     */
    private void showNotificationImmediately(Context context, String reminderId, String title, String message) {
        try {
            Log.d(TAG, "üîÑ Hi·ªÉn th·ªã notification ngay l·∫≠p t·ª©c: " + title);
            
            // S·ª≠ d·ª•ng Foreground Service ƒë·ªÉ ƒë·∫£m b·∫£o th√¥ng b√°o hi·ªÉn th·ªã
            com.vhn.doan.services.ReminderForegroundService.showReminder(context, reminderId, title, message);
            
            Log.d(TAG, "‚úÖ ƒê√£ g·ª≠i y√™u c·∫ßu hi·ªÉn th·ªã notification");
        } catch (Exception e) {
            Log.e(TAG, "‚ùå L·ªói khi hi·ªÉn th·ªã notification", e);
            
            // Fallback: hi·ªÉn th·ªã notification tr·ª±c ti·∫øp
            try {
                com.vhn.doan.services.NotificationService.showReminderNotification(context, title, message, reminderId);
                Log.d(TAG, "‚úÖ ƒê√£ hi·ªÉn th·ªã notification qua fallback");
            } catch (Exception fallbackError) {
                Log.e(TAG, "‚ùå L·ªói khi hi·ªÉn th·ªã notification qua fallback", fallbackError);
            }
        }
    }

    /**
     * C·∫≠p nh·∫≠t tr·∫°ng th√°i reminder
     */
    private void updateReminderStatus(Context context, String reminderId, String title, String message) {
        ReminderRepository reminderRepository = new ReminderRepositoryImpl();
        reminderRepository.getReminderById(reminderId, new ReminderRepository.RepositoryCallback<Reminder>() {
            @Override
            public void onSuccess(Reminder reminder) {
                if (reminder != null) {
                    Log.d(TAG, "‚úÖ Successfully retrieved reminder: " + reminder.getTitle());

                    // C·∫≠p nh·∫≠t l·∫ßn th√¥ng b√°o cu·ªëi
                    reminder.setLastNotified(System.currentTimeMillis());

                    // N·∫øu kh√¥ng ph·∫£i reminder l·∫∑p l·∫°i, ƒë√°nh d·∫•u l√† ƒë√£ ho√†n th√†nh
                    if (!reminder.isRepeating()) {
                        reminder.setCompleted(true);
                        reminder.setActive(false);
                    }

                    reminderRepository.updateReminder(reminder, new ReminderRepository.RepositoryCallback<Void>() {
                        @Override
                        public void onSuccess(Void result) {
                            Log.d(TAG, "‚úÖ Reminder updated successfully");
                        }

                        @Override
                        public void onError(String error) {
                            Log.e(TAG, "‚ùå Failed to update reminder: " + error);
                        }
                    });
                } else {
                    Log.w(TAG, "‚ö†Ô∏è Reminder not found in database, but notification was shown");
                }
            }

            @Override
            public void onError(String error) {
                Log.e(TAG, "‚ùå Failed to get reminder: " + error);
                // V·∫´n hi·ªÉn th·ªã th√¥ng b√°o ngay c·∫£ khi kh√¥ng l·∫•y ƒë∆∞·ª£c reminder t·ª´ database
                // (ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω trong showNotificationImmediately)
            }
        });
    }

    private void handleReminderStatusChanged(Context context, Intent intent) {
        String reminderId = intent.getStringExtra("reminder_id");
        boolean isActive = intent.getBooleanExtra("is_active", false);

        Log.d(TAG, "üîÑ Reminder status changed - ID: " + reminderId + ", Active: " + isActive);

        // X·ª≠ l√Ω thay ƒë·ªïi tr·∫°ng th√°i reminder n·∫øu c·∫ßn
        if (!isActive) {
            // H·ªßy alarm n·∫øu reminder b·ªã t·∫Øt
            ReminderService.cancelReminder(context, reminderId);
            Log.d(TAG, "‚úÖ ƒê√£ h·ªßy reminder: " + reminderId);
        }
    }
}
