<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/Reminder.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/Reminder.java" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.data;&#10;&#10;import java.util.Calendar;&#10;import java.util.Date;&#10;&#10;/**&#10; * Model class đại diện cho một nhắc nhở sức khỏe&#10; */&#10;public class Reminder {&#10;    private String id;&#10;    private String userId;&#10;    private String title;&#10;    private String description;&#10;    private Date reminderTime;&#10;    private int repeatType; // 0: Không lặp, 1: Hàng ngày, 2: Hàng tuần, 3: Hàng tháng&#10;    private boolean isActive;&#10;    private Date createdAt;&#10;    private Date updatedAt;&#10;    private String healthTipId; // ID của mẹo sức khỏe liên quan (nếu có)&#10;    &#10;    // Enum cho loại lặp lại&#10;    public static class RepeatType {&#10;        public static final int NO_REPEAT = 0;&#10;        public static final int DAILY = 1;&#10;        public static final int WEEKLY = 2;&#10;        public static final int MONTHLY = 3;&#10;    }&#10;    &#10;    // Constructor mặc định (cần thiết cho Firebase)&#10;    public Reminder() {&#10;        this.createdAt = new Date();&#10;        this.updatedAt = new Date();&#10;        this.isActive = true;&#10;        this.repeatType = RepeatType.NO_REPEAT;&#10;    }&#10;    &#10;    // Constructor đầy đủ&#10;    public Reminder(String id, String userId, String title, String description, &#10;                   Date reminderTime, int repeatType, boolean isActive, String healthTipId) {&#10;        this.id = id;&#10;        this.userId = userId;&#10;        this.title = title;&#10;        this.description = description;&#10;        this.reminderTime = reminderTime;&#10;        this.repeatType = repeatType;&#10;        this.isActive = isActive;&#10;        this.healthTipId = healthTipId;&#10;        this.createdAt = new Date();&#10;        this.updatedAt = new Date();&#10;    }&#10;    &#10;    // Getters&#10;    public String getId() {&#10;        return id;&#10;    }&#10;    &#10;    public String getUserId() {&#10;        return userId;&#10;    }&#10;    &#10;    public String getTitle() {&#10;        return title;&#10;    }&#10;    &#10;    public String getDescription() {&#10;        return description;&#10;    }&#10;    &#10;    public Date getReminderTime() {&#10;        return reminderTime;&#10;    }&#10;    &#10;    public int getRepeatType() {&#10;        return repeatType;&#10;    }&#10;    &#10;    public boolean isActive() {&#10;        return isActive;&#10;    }&#10;    &#10;    public Date getCreatedAt() {&#10;        return createdAt;&#10;    }&#10;    &#10;    public Date getUpdatedAt() {&#10;        return updatedAt;&#10;    }&#10;    &#10;    public String getHealthTipId() {&#10;        return healthTipId;&#10;    }&#10;    &#10;    // Setters&#10;    public void setId(String id) {&#10;        this.id = id;&#10;    }&#10;    &#10;    public void setUserId(String userId) {&#10;        this.userId = userId;&#10;    }&#10;    &#10;    public void setTitle(String title) {&#10;        this.title = title;&#10;        this.updatedAt = new Date();&#10;    }&#10;    &#10;    public void setDescription(String description) {&#10;        this.description = description;&#10;        this.updatedAt = new Date();&#10;    }&#10;    &#10;    public void setReminderTime(Date reminderTime) {&#10;        this.reminderTime = reminderTime;&#10;        this.updatedAt = new Date();&#10;    }&#10;    &#10;    public void setRepeatType(int repeatType) {&#10;        this.repeatType = repeatType;&#10;        this.updatedAt = new Date();&#10;    }&#10;    &#10;    public void setActive(boolean active) {&#10;        isActive = active;&#10;        this.updatedAt = new Date();&#10;    }&#10;    &#10;    public void setCreatedAt(Date createdAt) {&#10;        this.createdAt = createdAt;&#10;    }&#10;    &#10;    public void setUpdatedAt(Date updatedAt) {&#10;        this.updatedAt = updatedAt;&#10;    }&#10;    &#10;    public void setHealthTipId(String healthTipId) {&#10;        this.healthTipId = healthTipId;&#10;        this.updatedAt = new Date();&#10;    }&#10;    &#10;    /**&#10;     * Tính toán thời gian nhắc nhở tiếp theo dựa trên loại lặp lại&#10;     */&#10;    public Date getNextReminderTime() {&#10;        if (reminderTime == null || repeatType == RepeatType.NO_REPEAT) {&#10;            return reminderTime;&#10;        }&#10;        &#10;        Calendar calendar = Calendar.getInstance();&#10;        calendar.setTime(reminderTime);&#10;        &#10;        switch (repeatType) {&#10;            case RepeatType.DAILY:&#10;                calendar.add(Calendar.DAY_OF_MONTH, 1);&#10;                break;&#10;            case RepeatType.WEEKLY:&#10;                calendar.add(Calendar.WEEK_OF_YEAR, 1);&#10;                break;&#10;            case RepeatType.MONTHLY:&#10;                calendar.add(Calendar.MONTH, 1);&#10;                break;&#10;        }&#10;        &#10;        return calendar.getTime();&#10;    }&#10;    &#10;    /**&#10;     * Lấy tên hiển thị cho loại lặp lại&#10;     */&#10;    public String getRepeatTypeDisplayName() {&#10;        switch (repeatType) {&#10;            case RepeatType.DAILY:&#10;                return &quot;Hàng ngày&quot;;&#10;            case RepeatType.WEEKLY:&#10;                return &quot;Hàng tuần&quot;;&#10;            case RepeatType.MONTHLY:&#10;                return &quot;Hàng tháng&quot;;&#10;            case RepeatType.NO_REPEAT:&#10;            default:&#10;                return &quot;Không lặp&quot;;&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Kiểm tra xem nhắc nhở có đã đến thời gian hay chưa&#10;     */&#10;    public boolean isDue() {&#10;        if (reminderTime == null || !isActive) {&#10;            return false;&#10;        }&#10;        &#10;        Date now = new Date();&#10;        return now.getTime() &gt;= reminderTime.getTime();&#10;    }&#10;    &#10;    @Override&#10;    public String toString() {&#10;        return &quot;Reminder{&quot; +&#10;                &quot;id='&quot; + id + '\'' +&#10;                &quot;, userId='&quot; + userId + '\'' +&#10;                &quot;, title='&quot; + title + '\'' +&#10;                &quot;, description='&quot; + description + '\'' +&#10;                &quot;, reminderTime=&quot; + reminderTime +&#10;                &quot;, repeatType=&quot; + repeatType +&#10;                &quot;, isActive=&quot; + isActive +&#10;                &quot;, createdAt=&quot; + createdAt +&#10;                &quot;, updatedAt=&quot; + updatedAt +&#10;                &quot;, healthTipId='&quot; + healthTipId + '\'' +&#10;                '}';&#10;    }&#10;    &#10;    /**&#10;     * Chuyển đổi object thành Map để lưu vào Firebase&#10;     */&#10;    public java.util.Map&lt;String, Object&gt; toMap() {&#10;        java.util.Map&lt;String, Object&gt; result = new java.util.HashMap&lt;&gt;();&#10;        result.put(&quot;id&quot;, id);&#10;        result.put(&quot;userId&quot;, userId);&#10;        result.put(&quot;title&quot;, title);&#10;        result.put(&quot;description&quot;, description);&#10;        result.put(&quot;reminderTime&quot;, reminderTime != null ? reminderTime.getTime() : null);&#10;        result.put(&quot;repeatType&quot;, repeatType);&#10;        result.put(&quot;active&quot;, isActive);&#10;        result.put(&quot;createdAt&quot;, createdAt != null ? createdAt.getTime() : null);&#10;        result.put(&quot;updatedAt&quot;, updatedAt != null ? updatedAt.getTime() : null);&#10;        result.put(&quot;healthTipId&quot;, healthTipId);&#10;        return result;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/repository/ReminderRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/repository/ReminderRepository.java" />
              <option name="updatedContent" value="package com.vhn.doan.data.repository;&#10;&#10;import com.vhn.doan.data.Reminder;&#10;&#10;import java.util.List;&#10;&#10;/**&#10; * Interface định nghĩa các phương thức để làm việc với dữ liệu Reminder&#10; */&#10;public interface ReminderRepository {&#10;    &#10;    /**&#10;     * Thêm một nhắc nhở mới&#10;     * @param reminder Nhắc nhở cần thêm&#10;     * @param callback Callback xử lý kết quả&#10;     */&#10;    void addReminder(Reminder reminder, RepositoryCallback&lt;String&gt; callback);&#10;    &#10;    /**&#10;     * Cập nhật thông tin nhắc nhở&#10;     * @param reminder Nhắc nhở cần cập nhật&#10;     * @param callback Callback xử lý kết quả&#10;     */&#10;    void updateReminder(Reminder reminder, RepositoryCallback&lt;Void&gt; callback);&#10;    &#10;    /**&#10;     * Xóa nhắc nhở&#10;     * @param reminderId ID của nhắc nhở cần xóa&#10;     * @param callback Callback xử lý kết quả&#10;     */&#10;    void deleteReminder(String reminderId, RepositoryCallback&lt;Void&gt; callback);&#10;    &#10;    /**&#10;     * Lấy tất cả nhắc nhở của một người dùng&#10;     * @param userId ID của người dùng&#10;     * @param callback Callback xử lý kết quả&#10;     */&#10;    void getUserReminders(String userId, RepositoryCallback&lt;List&lt;Reminder&gt;&gt; callback);&#10;    &#10;    /**&#10;     * Lấy nhắc nhở theo ID&#10;     * @param reminderId ID của nhắc nhở&#10;     * @param callback Callback xử lý kết quả&#10;     */&#10;    void getReminderById(String reminderId, RepositoryCallback&lt;Reminder&gt; callback);&#10;    &#10;    /**&#10;     * Lấy tất cả nhắc nhở đang hoạt động của một người dùng&#10;     * @param userId ID của người dùng&#10;     * @param callback Callback xử lý kết quả&#10;     */&#10;    void getActiveReminders(String userId, RepositoryCallback&lt;List&lt;Reminder&gt;&gt; callback);&#10;    &#10;    /**&#10;     * Bật/tắt nhắc nhở&#10;     * @param reminderId ID của nhắc nhở&#10;     * @param isActive Trạng thái hoạt động&#10;     * @param callback Callback xử lý kết quả&#10;     */&#10;    void toggleReminder(String reminderId, boolean isActive, RepositoryCallback&lt;Void&gt; callback);&#10;    &#10;    /**&#10;     * Lấy các nhắc nhở theo mẹo sức khỏe&#10;     * @param healthTipId ID của mẹo sức khỏe&#10;     * @param callback Callback xử lý kết quả&#10;     */&#10;    void getRemindersByHealthTip(String healthTipId, RepositoryCallback&lt;List&lt;Reminder&gt;&gt; callback);&#10;    &#10;    /**&#10;     * Interface callback cho các thao tác repository&#10;     */&#10;    interface RepositoryCallback&lt;T&gt; {&#10;        void onSuccess(T result);&#10;        void onError(String error);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/repository/ReminderRepositoryImpl.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/repository/ReminderRepositoryImpl.java" />
              <option name="updatedContent" value="package com.vhn.doan.data.repository;&#10;&#10;import com.google.firebase.database.DataSnapshot;&#10;import com.google.firebase.database.DatabaseError;&#10;import com.google.firebase.database.DatabaseReference;&#10;import com.google.firebase.database.FirebaseDatabase;&#10;import com.google.firebase.database.ValueEventListener;&#10;import com.google.firebase.database.Query;&#10;import com.vhn.doan.data.Reminder;&#10;&#10;import java.util.ArrayList;&#10;import java.util.Date;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;import javax.inject.Inject;&#10;import javax.inject.Singleton;&#10;&#10;/**&#10; * Triển khai ReminderRepository sử dụng Firebase Realtime Database&#10; */&#10;@Singleton&#10;public class ReminderRepositoryImpl implements ReminderRepository {&#10;    &#10;    private static final String REMINDERS_NODE = &quot;reminders&quot;;&#10;    private static final String USER_REMINDERS_NODE = &quot;user_reminders&quot;;&#10;    &#10;    private final DatabaseReference database;&#10;    private final DatabaseReference remindersRef;&#10;    private final DatabaseReference userRemindersRef;&#10;    &#10;    @Inject&#10;    public ReminderRepositoryImpl() {&#10;        this.database = FirebaseDatabase.getInstance().getReference();&#10;        this.remindersRef = database.child(REMINDERS_NODE);&#10;        this.userRemindersRef = database.child(USER_REMINDERS_NODE);&#10;    }&#10;    &#10;    @Override&#10;    public void addReminder(Reminder reminder, RepositoryCallback&lt;String&gt; callback) {&#10;        try {&#10;            if (reminder.getId() == null || reminder.getId().isEmpty()) {&#10;                reminder.setId(remindersRef.push().getKey());&#10;            }&#10;            &#10;            reminder.setUpdatedAt(new Date());&#10;            &#10;            Map&lt;String, Object&gt; reminderValues = reminder.toMap();&#10;            Map&lt;String, Object&gt; childUpdates = new HashMap&lt;&gt;();&#10;            &#10;            // Lưu vào node reminders&#10;            childUpdates.put(&quot;/&quot; + REMINDERS_NODE + &quot;/&quot; + reminder.getId(), reminderValues);&#10;            &#10;            // Lưu vào node user_reminders để query nhanh&#10;            childUpdates.put(&quot;/&quot; + USER_REMINDERS_NODE + &quot;/&quot; + reminder.getUserId() + &quot;/&quot; + reminder.getId(), true);&#10;            &#10;            database.updateChildren(childUpdates)&#10;                    .addOnSuccessListener(aVoid -&gt; callback.onSuccess(reminder.getId()))&#10;                    .addOnFailureListener(e -&gt; callback.onError(&quot;Lỗi khi thêm nhắc nhở: &quot; + e.getMessage()));&#10;                    &#10;        } catch (Exception e) {&#10;            callback.onError(&quot;Lỗi khi thêm nhắc nhở: &quot; + e.getMessage());&#10;        }&#10;    }&#10;    &#10;    @Override&#10;    public void updateReminder(Reminder reminder, RepositoryCallback&lt;Void&gt; callback) {&#10;        try {&#10;            if (reminder.getId() == null || reminder.getId().isEmpty()) {&#10;                callback.onError(&quot;ID nhắc nhở không hợp lệ&quot;);&#10;                return;&#10;            }&#10;            &#10;            reminder.setUpdatedAt(new Date());&#10;            Map&lt;String, Object&gt; reminderValues = reminder.toMap();&#10;            &#10;            remindersRef.child(reminder.getId())&#10;                    .updateChildren(reminderValues)&#10;                    .addOnSuccessListener(aVoid -&gt; callback.onSuccess(null))&#10;                    .addOnFailureListener(e -&gt; callback.onError(&quot;Lỗi khi cập nhật nhắc nhở: &quot; + e.getMessage()));&#10;                    &#10;        } catch (Exception e) {&#10;            callback.onError(&quot;Lỗi khi cập nhật nhắc nhở: &quot; + e.getMessage());&#10;        }&#10;    }&#10;    &#10;    @Override&#10;    public void deleteReminder(String reminderId, RepositoryCallback&lt;Void&gt; callback) {&#10;        try {&#10;            if (reminderId == null || reminderId.isEmpty()) {&#10;                callback.onError(&quot;ID nhắc nhở không hợp lệ&quot;);&#10;                return;&#10;            }&#10;            &#10;            // Lấy thông tin reminder trước khi xóa để có userId&#10;            remindersRef.child(reminderId).addListenerForSingleValueEvent(new ValueEventListener() {&#10;                @Override&#10;                public void onDataChange(DataSnapshot dataSnapshot) {&#10;                    if (dataSnapshot.exists()) {&#10;                        Reminder reminder = dataSnapshot.getValue(Reminder.class);&#10;                        if (reminder != null) {&#10;                            Map&lt;String, Object&gt; childUpdates = new HashMap&lt;&gt;();&#10;                            childUpdates.put(&quot;/&quot; + REMINDERS_NODE + &quot;/&quot; + reminderId, null);&#10;                            childUpdates.put(&quot;/&quot; + USER_REMINDERS_NODE + &quot;/&quot; + reminder.getUserId() + &quot;/&quot; + reminderId, null);&#10;                            &#10;                            database.updateChildren(childUpdates)&#10;                                    .addOnSuccessListener(aVoid -&gt; callback.onSuccess(null))&#10;                                    .addOnFailureListener(e -&gt; callback.onError(&quot;Lỗi khi xóa nhắc nhở: &quot; + e.getMessage()));&#10;                        } else {&#10;                            callback.onError(&quot;Không tìm thấy nhắc nhở&quot;);&#10;                        }&#10;                    } else {&#10;                        callback.onError(&quot;Không tìm thấy nhắc nhở&quot;);&#10;                    }&#10;                }&#10;                &#10;                @Override&#10;                public void onCancelled(DatabaseError databaseError) {&#10;                    callback.onError(&quot;Lỗi khi xóa nhắc nhở: &quot; + databaseError.getMessage());&#10;                }&#10;            });&#10;            &#10;        } catch (Exception e) {&#10;            callback.onError(&quot;Lỗi khi xóa nhắc nhở: &quot; + e.getMessage());&#10;        }&#10;    }&#10;    &#10;    @Override&#10;    public void getUserReminders(String userId, RepositoryCallback&lt;List&lt;Reminder&gt;&gt; callback) {&#10;        try {&#10;            if (userId == null || userId.isEmpty()) {&#10;                callback.onError(&quot;ID người dùng không hợp lệ&quot;);&#10;                return;&#10;            }&#10;            &#10;            userRemindersRef.child(userId).addListenerForSingleValueEvent(new ValueEventListener() {&#10;                @Override&#10;                public void onDataChange(DataSnapshot dataSnapshot) {&#10;                    List&lt;String&gt; reminderIds = new ArrayList&lt;&gt;();&#10;                    for (DataSnapshot child : dataSnapshot.getChildren()) {&#10;                        reminderIds.add(child.getKey());&#10;                    }&#10;                    &#10;                    if (reminderIds.isEmpty()) {&#10;                        callback.onSuccess(new ArrayList&lt;&gt;());&#10;                        return;&#10;                    }&#10;                    &#10;                    // Lấy chi tiết từng reminder&#10;                    fetchRemindersByIds(reminderIds, callback);&#10;                }&#10;                &#10;                @Override&#10;                public void onCancelled(DatabaseError databaseError) {&#10;                    callback.onError(&quot;Lỗi khi lấy danh sách nhắc nhở: &quot; + databaseError.getMessage());&#10;                }&#10;            });&#10;            &#10;        } catch (Exception e) {&#10;            callback.onError(&quot;Lỗi khi lấy danh sách nhắc nhở: &quot; + e.getMessage());&#10;        }&#10;    }&#10;    &#10;    @Override&#10;    public void getReminderById(String reminderId, RepositoryCallback&lt;Reminder&gt; callback) {&#10;        try {&#10;            if (reminderId == null || reminderId.isEmpty()) {&#10;                callback.onError(&quot;ID nhắc nhở không hợp lệ&quot;);&#10;                return;&#10;            }&#10;            &#10;            remindersRef.child(reminderId).addListenerForSingleValueEvent(new ValueEventListener() {&#10;                @Override&#10;                public void onDataChange(DataSnapshot dataSnapshot) {&#10;                    if (dataSnapshot.exists()) {&#10;                        Reminder reminder = dataSnapshot.getValue(Reminder.class);&#10;                        if (reminder != null) {&#10;                            callback.onSuccess(reminder);&#10;                        } else {&#10;                            callback.onError(&quot;Không thể chuyển đổi dữ liệu nhắc nhở&quot;);&#10;                        }&#10;                    } else {&#10;                        callback.onError(&quot;Không tìm thấy nhắc nhở&quot;);&#10;                    }&#10;                }&#10;                &#10;                @Override&#10;                public void onCancelled(DatabaseError databaseError) {&#10;                    callback.onError(&quot;Lỗi khi lấy nhắc nhở: &quot; + databaseError.getMessage());&#10;                }&#10;            });&#10;            &#10;        } catch (Exception e) {&#10;            callback.onError(&quot;Lỗi khi lấy nhắc nhở: &quot; + e.getMessage());&#10;        }&#10;    }&#10;    &#10;    @Override&#10;    public void getActiveReminders(String userId, RepositoryCallback&lt;List&lt;Reminder&gt;&gt; callback) {&#10;        getUserReminders(userId, new RepositoryCallback&lt;List&lt;Reminder&gt;&gt;() {&#10;            @Override&#10;            public void onSuccess(List&lt;Reminder&gt; reminders) {&#10;                List&lt;Reminder&gt; activeReminders = new ArrayList&lt;&gt;();&#10;                for (Reminder reminder : reminders) {&#10;                    if (reminder.isActive()) {&#10;                        activeReminders.add(reminder);&#10;                    }&#10;                }&#10;                callback.onSuccess(activeReminders);&#10;            }&#10;            &#10;            @Override&#10;            public void onError(String error) {&#10;                callback.onError(error);&#10;            }&#10;        });&#10;    }&#10;    &#10;    @Override&#10;    public void toggleReminder(String reminderId, boolean isActive, RepositoryCallback&lt;Void&gt; callback) {&#10;        try {&#10;            if (reminderId == null || reminderId.isEmpty()) {&#10;                callback.onError(&quot;ID nhắc nhở không hợp lệ&quot;);&#10;                return;&#10;            }&#10;            &#10;            Map&lt;String, Object&gt; updates = new HashMap&lt;&gt;();&#10;            updates.put(&quot;active&quot;, isActive);&#10;            updates.put(&quot;updatedAt&quot;, new Date().getTime());&#10;            &#10;            remindersRef.child(reminderId)&#10;                    .updateChildren(updates)&#10;                    .addOnSuccessListener(aVoid -&gt; callback.onSuccess(null))&#10;                    .addOnFailureListener(e -&gt; callback.onError(&quot;Lỗi khi cập nhật trạng thái nhắc nhở: &quot; + e.getMessage()));&#10;                    &#10;        } catch (Exception e) {&#10;            callback.onError(&quot;Lỗi khi cập nhật trạng thái nhắc nhở: &quot; + e.getMessage());&#10;        }&#10;    }&#10;    &#10;    @Override&#10;    public void getRemindersByHealthTip(String healthTipId, RepositoryCallback&lt;List&lt;Reminder&gt;&gt; callback) {&#10;        try {&#10;            if (healthTipId == null || healthTipId.isEmpty()) {&#10;                callback.onError(&quot;ID mẹo sức khỏe không hợp lệ&quot;);&#10;                return;&#10;            }&#10;            &#10;            Query query = remindersRef.orderByChild(&quot;healthTipId&quot;).equalTo(healthTipId);&#10;            query.addListenerForSingleValueEvent(new ValueEventListener() {&#10;                @Override&#10;                public void onDataChange(DataSnapshot dataSnapshot) {&#10;                    List&lt;Reminder&gt; reminders = new ArrayList&lt;&gt;();&#10;                    for (DataSnapshot child : dataSnapshot.getChildren()) {&#10;                        Reminder reminder = child.getValue(Reminder.class);&#10;                        if (reminder != null) {&#10;                            reminders.add(reminder);&#10;                        }&#10;                    }&#10;                    callback.onSuccess(reminders);&#10;                }&#10;                &#10;                @Override&#10;                public void onCancelled(DatabaseError databaseError) {&#10;                    callback.onError(&quot;Lỗi khi lấy nhắc nhở theo mẹo sức khỏe: &quot; + databaseError.getMessage());&#10;                }&#10;            });&#10;            &#10;        } catch (Exception e) {&#10;            callback.onError(&quot;Lỗi khi lấy nhắc nhở theo mẹo sức khỏe: &quot; + e.getMessage());&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Phương thức hỗ trợ lấy nhiều reminder theo danh sách ID&#10;     */&#10;    private void fetchRemindersByIds(List&lt;String&gt; reminderIds, RepositoryCallback&lt;List&lt;Reminder&gt;&gt; callback) {&#10;        List&lt;Reminder&gt; reminders = new ArrayList&lt;&gt;();&#10;        int[] counter = {0};&#10;        &#10;        for (String reminderId : reminderIds) {&#10;            remindersRef.child(reminderId).addListenerForSingleValueEvent(new ValueEventListener() {&#10;                @Override&#10;                public void onDataChange(DataSnapshot dataSnapshot) {&#10;                    if (dataSnapshot.exists()) {&#10;                        Reminder reminder = dataSnapshot.getValue(Reminder.class);&#10;                        if (reminder != null) {&#10;                            reminders.add(reminder);&#10;                        }&#10;                    }&#10;                    &#10;                    counter[0]++;&#10;                    if (counter[0] == reminderIds.size()) {&#10;                        // Sắp xếp theo thời gian tạo (mới nhất trước)&#10;                        reminders.sort((r1, r2) -&gt; r2.getCreatedAt().compareTo(r1.getCreatedAt()));&#10;                        callback.onSuccess(reminders);&#10;                    }&#10;                }&#10;                &#10;                @Override&#10;                public void onCancelled(DatabaseError databaseError) {&#10;                    counter[0]++;&#10;                    if (counter[0] == reminderIds.size()) {&#10;                        callback.onSuccess(reminders);&#10;                    }&#10;                }&#10;            });&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/base/BaseFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/base/BaseFragment.java" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.base;&#10;&#10;import android.os.Bundle;&#10;import android.view.View;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;&#10;/**&#10; * Base Fragment cho tất cả Fragment trong ứng dụng&#10; * Cung cấp các phương thức chung và lifecycle management&#10; */&#10;public abstract class BaseFragment extends Fragment {&#10;    &#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;        initViews(view);&#10;        setupListeners();&#10;    }&#10;    &#10;    /**&#10;     * Khởi tạo các View components&#10;     * @param view Root view của fragment&#10;     */&#10;    protected abstract void initViews(View view);&#10;    &#10;    /**&#10;     * Thiết lập các event listeners&#10;     */&#10;    protected abstract void setupListeners();&#10;    &#10;    /**&#10;     * Hiển thị loading state&#10;     */&#10;    public void showLoading() {&#10;        // Override trong các fragment con nếu cần&#10;    }&#10;    &#10;    /**&#10;     * Ẩn loading state&#10;     */&#10;    public void hideLoading() {&#10;        // Override trong các fragment con nếu cần&#10;    }&#10;    &#10;    /**&#10;     * Hiển thị thông báo lỗi&#10;     */&#10;    public void showError(String message) {&#10;        // Override trong các fragment con nếu cần&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/base/BasePresenter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/base/BasePresenter.java" />
              <option name="originalContent" value="package com.vhn.doan.presentation.base;&#10;&#10;/**&#10; * Base interface cho tất cả Presenter trong kiến trúc MVP&#10; */&#10;public interface BasePresenter {&#10;&#10;    /**&#10;     * Gán view cho presenter&#10;     */&#10;    void takeView(BaseView view);&#10;&#10;    /**&#10;     * Gỡ bỏ view khỏi presenter&#10;     */&#10;    void dropView();&#10;&#10;    /**&#10;     * Khởi tạo presenter&#10;     */&#10;    void start();&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.base;&#10;&#10;/**&#10; * Base class cho tất cả Presenter trong kiến trúc MVP&#10; * Hỗ trợ generic type cho View&#10; */&#10;public abstract class BasePresenter&lt;V extends BaseView&gt; {&#10;    &#10;    protected V view;&#10;    &#10;    /**&#10;     * Gắn view vào presenter&#10;     */&#10;    public void attachView(V view) {&#10;        this.view = view;&#10;    }&#10;    &#10;    /**&#10;     * Gỡ bỏ view khỏi presenter&#10;     */&#10;    public void detachView() {&#10;        this.view = null;&#10;    }&#10;    &#10;    /**&#10;     * Kiểm tra xem view có được gắn vào hay không&#10;     */&#10;    public boolean isViewAttached() {&#10;        return view != null;&#10;    }&#10;    &#10;    /**&#10;     * Lấy view hiện tại&#10;     */&#10;    public V getView() {&#10;        return view;&#10;    }&#10;    &#10;    /**&#10;     * Phương thức khởi tạo - override trong các presenter con&#10;     */&#10;    public abstract void start();&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/base/BaseView.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/base/BaseView.java" />
              <option name="originalContent" value="package com.vhn.doan.presentation.base;&#10;&#10;/**&#10; * Base interface cho tất cả View trong kiến trúc MVP&#10; * Tương thích với cách sử dụng hiện có trong dự án&#10; */&#10;public interface BaseView {&#10;&#10;    /**&#10;     * Hiển thị loading&#10;     */&#10;    void showLoading();&#10;&#10;    /**&#10;     * Ẩn loading&#10;     */&#10;    void hideLoading();&#10;&#10;    /**&#10;     * Hiển thị thông báo lỗi&#10;     */&#10;    void showError(String message);&#10;&#10;    /**&#10;     * Hiển thị thông báo (compatibility method)&#10;     */&#10;    default void showMessage(String message) {&#10;        // Default implementation - có thể override trong các view con&#10;    }&#10;&#10;    /**&#10;     * Hiển thị loading với tham số boolean (compatibility method)&#10;     */&#10;    default void showLoading(boolean loading) {&#10;        if (loading) {&#10;            showLoading();&#10;        } else {&#10;            hideLoading();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.base;&#13;&#10;&#13;&#10;/**&#13;&#10; * Base interface cho tất cả View trong kiến trúc MVP&#13;&#10; * Tương thích với cách sử dụng hiện có trong dự án&#13;&#10; */&#13;&#10;public interface BaseView {&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Hiển thị loading&#13;&#10;     */&#13;&#10;    default void showLoading() {&#13;&#10;        // Default implementation - có thể override trong các view con&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Ẩn loading  &#13;&#10;     */&#13;&#10;    default void hideLoading() {&#13;&#10;        // Default implementation - có thể override trong các view con&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Hiển thị thông báo lỗi&#13;&#10;     */&#13;&#10;    default void showError(String message) {&#13;&#10;        // Default implementation - có thể override trong các view con&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Hiển thị thông báo (compatibility method)&#13;&#10;     */&#13;&#10;    default void showMessage(String message) {&#13;&#10;        // Default implementation - có thể override trong các view con&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Hiển thị loading với tham số boolean (compatibility method)&#13;&#10;     */&#13;&#10;    default void showLoading(boolean loading) {&#13;&#10;        if (loading) {&#13;&#10;            showLoading();&#13;&#10;        } else {&#13;&#10;            hideLoading();&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/category/CategoryFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/category/CategoryFragment.java" />
              <option name="originalContent" value="package com.vhn.doan.presentation.category;&#10;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.LinearLayout;&#10;import android.widget.ProgressBar;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.recyclerview.widget.GridLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.data.Category;&#10;import com.vhn.doan.data.repository.CategoryRepository;&#10;import com.vhn.doan.data.repository.CategoryRepositoryImpl;&#10;import com.vhn.doan.utils.Constants;&#10;&#10;import java.util.List;&#10;&#10;/**&#10; * Fragment hiển thị tất cả các chủ đề sức khỏe&#10; */&#10;public class CategoryFragment extends Fragment implements CategoryView, CategoryAdapter.OnCategoryClickListener {&#10;&#10;    // Views&#10;    private RecyclerView recyclerViewCategories;&#10;    private ProgressBar progressBar;&#10;    private LinearLayout layoutEmpty;&#10;    private TextView textViewError;&#10;&#10;    // Adapter và Presenter&#10;    private CategoryAdapter adapter;&#10;    private CategoryPresenter presenter;&#10;&#10;    public CategoryFragment() {&#10;        // Required empty public constructor&#10;    }&#10;&#10;    /**&#10;     * Tạo instance mới của CategoryFragment&#10;     */&#10;    public static CategoryFragment newInstance() {&#10;        return new CategoryFragment();&#10;    }&#10;&#10;    @Override&#10;    public View onCreateView(LayoutInflater inflater, ViewGroup container,&#10;                             Bundle savedInstanceState) {&#10;        // Inflate layout cho fragment&#10;        return inflater.inflate(R.layout.fragment_category, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;&#10;        // Khởi tạo các views&#10;        initViews(view);&#10;&#10;        // Khởi tạo adapter&#10;        setupRecyclerView();&#10;&#10;        // Khởi tạo presenter&#10;        initPresenter();&#10;&#10;        // Tải dữ liệu&#10;        loadData();&#10;    }&#10;&#10;    /**&#10;     * Khởi tạo các views trong fragment&#10;     */&#10;    private void initViews(View view) {&#10;        recyclerViewCategories = view.findViewById(R.id.recyclerViewCategories);&#10;        progressBar = view.findViewById(R.id.progressBar);&#10;        layoutEmpty = view.findViewById(R.id.layoutEmpty);&#10;        textViewError = view.findViewById(R.id.textViewError);&#10;    }&#10;&#10;    /**&#10;     * Thiết lập RecyclerView và Adapter&#10;     */&#10;    private void setupRecyclerView() {&#10;        // Sử dụng GridLayoutManager với 2 cột&#10;        GridLayoutManager layoutManager = new GridLayoutManager(requireContext(), 2);&#10;        recyclerViewCategories.setLayoutManager(layoutManager);&#10;&#10;        // Khởi tạo adapter và gắn vào recyclerView&#10;        adapter = new CategoryAdapter(requireContext(), this);&#10;        recyclerViewCategories.setAdapter(adapter);&#10;    }&#10;&#10;    /**&#10;     * Khởi tạo presenter&#10;     */&#10;    private void initPresenter() {&#10;        CategoryRepository categoryRepository = new CategoryRepositoryImpl();&#10;        presenter = new CategoryPresenter(this, categoryRepository);&#10;    }&#10;&#10;    /**&#10;     * Tải dữ liệu danh mục&#10;     */&#10;    private void loadData() {&#10;        // Hiển thị loading và tải dữ liệu&#10;        presenter.loadCategories();&#10;        // Đăng ký lắng nghe thay đổi dữ liệu realtime&#10;        presenter.startListeningToCategories();&#10;    }&#10;&#10;    @Override&#10;    public void displayCategories(List&lt;Category&gt; categories) {&#10;        if (isAdded()) {&#10;            recyclerViewCategories.setVisibility(View.VISIBLE);&#10;            layoutEmpty.setVisibility(View.GONE);&#10;            textViewError.setVisibility(View.GONE);&#10;&#10;            // Cập nhật adapter với dữ liệu mới&#10;            adapter.setCategories(categories);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showEmptyView() {&#10;        if (isAdded()) {&#10;            recyclerViewCategories.setVisibility(View.GONE);&#10;            layoutEmpty.setVisibility(View.VISIBLE);&#10;            textViewError.setVisibility(View.GONE);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Phương thức cập nhật trạng thái loading từ BaseView&#10;     * @param loading true để hiển thị loading, false để ẩn&#10;     */&#10;    @Override&#10;    public void showLoading(boolean loading) {&#10;        if (isAdded()) {&#10;            progressBar.setVisibility(loading ? View.VISIBLE : View.GONE);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showLoading() {&#10;        showLoading(true);&#10;    }&#10;&#10;    @Override&#10;    public void hideLoading() {&#10;        showLoading(false);&#10;    }&#10;&#10;    @Override&#10;    public void showError(String message) {&#10;        if (isAdded()) {&#10;            recyclerViewCategories.setVisibility(View.GONE);&#10;            layoutEmpty.setVisibility(View.GONE);&#10;            textViewError.setVisibility(View.VISIBLE);&#10;            textViewError.setText(message);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showMessage(String message) {&#10;        if (isAdded()) {&#10;            Toast.makeText(requireContext(), message, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void navigateToCategoryDetail(Category category) {&#10;        if (isAdded()) {&#10;            // Tạo bundle với thông tin danh mục&#10;            Bundle args = new Bundle();&#10;            args.putString(Constants.INTENT_CATEGORY_ID, category.getId());&#10;&#10;            // TODO: Thực hiện điều hướng đến màn hình chi tiết danh mục&#10;            // Navigation Component hoặc Fragment Transaction có thể được sử dụng ở đây&#10;&#10;            // Ví dụ sử dụng Navigation Component:&#10;            // Navigation.findNavController(requireView())&#10;            //         .navigate(R.id.action_categoryFragment_to_categoryDetailFragment, args);&#10;&#10;            // Tạm thời hiển thị thông báo&#10;            showMessage(&quot;Đã chọn danh mục: &quot; + category.getName());&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onCategoryClick(Category category) {&#10;        // Chuyển sự kiện click đến presenter&#10;        presenter.onCategorySelected(category);&#10;    }&#10;&#10;    @Override&#10;    public void onDestroyView() {&#10;        super.onDestroyView();&#10;        // Dọn dẹp resources&#10;        if (presenter != null) {&#10;            presenter.onDestroy();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.category;&#10;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.LinearLayout;&#10;import android.widget.ProgressBar;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.recyclerview.widget.GridLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.data.Category;&#10;import com.vhn.doan.data.repository.CategoryRepository;&#10;import com.vhn.doan.data.repository.CategoryRepositoryImpl;&#10;import com.vhn.doan.utils.Constants;&#10;&#10;import java.util.List;&#10;&#10;/**&#10; * Fragment hiển thị tất cả các chủ đề sức khỏe&#10; */&#10;public class CategoryFragment extends Fragment implements CategoryView, CategoryAdapter.OnCategoryClickListener {&#10;&#10;    // Views&#10;    private RecyclerView recyclerViewCategories;&#10;    private ProgressBar progressBar;&#10;    private LinearLayout layoutEmpty;&#10;    private TextView textViewError;&#10;&#10;    // Adapter và Presenter&#10;    private CategoryAdapter adapter;&#10;    private CategoryPresenter presenter;&#10;&#10;    public CategoryFragment() {&#10;        // Required empty public constructor&#10;    }&#10;&#10;    /**&#10;     * Tạo instance mới của CategoryFragment&#10;     */&#10;    public static CategoryFragment newInstance() {&#10;        return new CategoryFragment();&#10;    }&#10;&#10;    @Override&#10;    public View onCreateView(LayoutInflater inflater, ViewGroup container,&#10;                             Bundle savedInstanceState) {&#10;        // Inflate layout cho fragment&#10;        return inflater.inflate(R.layout.fragment_category, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;&#10;        // Khởi tạo các views&#10;        initViews(view);&#10;&#10;        // Khởi tạo adapter&#10;        setupRecyclerView();&#10;&#10;        // Khởi tạo presenter&#10;        initPresenter();&#10;&#10;        // Tải dữ liệu&#10;        loadData();&#10;    }&#10;&#10;    /**&#10;     * Khởi tạo các views trong fragment&#10;     */&#10;    private void initViews(View view) {&#10;        recyclerViewCategories = view.findViewById(R.id.recyclerViewCategories);&#10;        progressBar = view.findViewById(R.id.progressBar);&#10;        layoutEmpty = view.findViewById(R.id.layoutEmpty);&#10;        textViewError = view.findViewById(R.id.textViewError);&#10;    }&#10;&#10;    /**&#10;     * Thiết lập RecyclerView và Adapter&#10;     */&#10;    private void setupRecyclerView() {&#10;        // Sử dụng GridLayoutManager với 2 cột&#10;        GridLayoutManager layoutManager = new GridLayoutManager(requireContext(), 2);&#10;        recyclerViewCategories.setLayoutManager(layoutManager);&#10;&#10;        // Khởi tạo adapter và gắn vào recyclerView&#10;        adapter = new CategoryAdapter(requireContext(), this);&#10;        recyclerViewCategories.setAdapter(adapter);&#10;    }&#10;&#10;    /**&#10;     * Khởi tạo presenter&#10;     */&#10;    private void initPresenter() {&#10;        CategoryRepository categoryRepository = new CategoryRepositoryImpl();&#10;        presenter = new CategoryPresenter(this, categoryRepository);&#10;    }&#10;&#10;    /**&#10;     * Tải dữ liệu danh mục&#10;     */&#10;    private void loadData() {&#10;        // Hiển thị loading và tải dữ liệu&#10;        presenter.loadCategories();&#10;        // Đăng ký lắng nghe thay đổi dữ liệu realtime&#10;        presenter.startListeningToCategories();&#10;    }&#10;&#10;    @Override&#10;    public void displayCategories(List&lt;Category&gt; categories) {&#10;        if (isAdded()) {&#10;            recyclerViewCategories.setVisibility(View.VISIBLE);&#10;            layoutEmpty.setVisibility(View.GONE);&#10;            textViewError.setVisibility(View.GONE);&#10;&#10;            // Cập nhật adapter với dữ liệu mới&#10;            adapter.setCategories(categories);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showEmptyView() {&#10;        if (isAdded()) {&#10;            recyclerViewCategories.setVisibility(View.GONE);&#10;            layoutEmpty.setVisibility(View.VISIBLE);&#10;            textViewError.setVisibility(View.GONE);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Phương thức cập nhật trạng thái loading từ BaseView&#10;     */&#10;    @Override&#10;    public void showLoading() {&#10;        if (isAdded()) {&#10;            progressBar.setVisibility(View.VISIBLE);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void hideLoading() {&#10;        if (isAdded()) {&#10;            progressBar.setVisibility(View.GONE);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showError(String message) {&#10;        if (isAdded()) {&#10;            recyclerViewCategories.setVisibility(View.GONE);&#10;            layoutEmpty.setVisibility(View.GONE);&#10;            textViewError.setVisibility(View.VISIBLE);&#10;            textViewError.setText(message);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void navigateToCategoryDetail(Category category) {&#10;        if (isAdded()) {&#10;            // Tạo bundle với thông tin danh mục&#10;            Bundle args = new Bundle();&#10;            args.putString(&quot;CATEGORY_ID&quot;, category.getId());&#10;&#10;            // TODO: Thực hiện điều hướng đến màn hình chi tiết danh mục&#10;            // Navigation Component hoặc Fragment Transaction có thể được sử dụng ở đây&#10;&#10;            // Tạm thời hiển thị thông báo&#10;            Toast.makeText(requireContext(), &quot;Đã chọn danh mục: &quot; + category.getName(), Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onCategoryClick(Category category) {&#10;        // Chuyển sự kiện click đến presenter&#10;        presenter.onCategorySelected(category);&#10;    }&#10;&#10;    @Override&#10;    public void onDestroyView() {&#10;        super.onDestroyView();&#10;        // Dọn dẹp resources&#10;        if (presenter != null) {&#10;            presenter.onDestroy();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/category/CategoryPresenter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/category/CategoryPresenter.java" />
              <option name="originalContent" value="package com.vhn.doan.presentation.category;&#10;&#10;import com.vhn.doan.data.Category;&#10;import com.vhn.doan.data.repository.CategoryRepository;&#10;import com.vhn.doan.presentation.base.BasePresenter;&#10;&#10;import java.util.List;&#10;&#10;/**&#10; * Presenter xử lý logic cho màn hình danh sách danh mục&#10; */&#10;public class CategoryPresenter extends BasePresenter&lt;CategoryView&gt; {&#10;&#10;    private final CategoryRepository categoryRepository;&#10;    private Object categoryListener;&#10;&#10;    /**&#10;     * Constructor&#10;     * @param view Interface view cung cấp phương thức hiển thị&#10;     * @param categoryRepository Repository cung cấp dữ liệu danh mục&#10;     */&#10;    public CategoryPresenter(CategoryView view, CategoryRepository categoryRepository) {&#10;        this.categoryRepository = categoryRepository;&#10;        attachView(view);&#10;    }&#10;&#10;    /**&#10;     * Tải danh sách danh mục từ repository&#10;     */&#10;    public void loadCategories() {&#10;        if (isViewAttached()) {&#10;            view.showLoading();&#10;        }&#10;&#10;        categoryRepository.getAllCategories(new CategoryRepository.CategoryCallback() {&#10;            @Override&#10;            public void onSuccess(List&lt;Category&gt; categories) {&#10;                if (isViewAttached()) {&#10;                    view.hideLoading();&#10;                    if (categories != null &amp;&amp; !categories.isEmpty()) {&#10;                        view.displayCategories(categories);&#10;                    } else {&#10;                        view.showEmptyView();&#10;                    }&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onSingleCategoryLoaded(Category category) {&#10;                // Không sử dụng trong trường hợp này&#10;            }&#10;&#10;            @Override&#10;            public void onError(String errorMessage) {&#10;                if (isViewAttached()) {&#10;                    view.hideLoading();&#10;                    view.showError(errorMessage);&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    /**&#10;     * Lắng nghe thay đổi từ danh sách danh mục real-time&#10;     */&#10;    public void startListeningToCategories() {&#10;        categoryListener = categoryRepository.listenToCategories(new CategoryRepository.CategoryCallback() {&#10;            @Override&#10;            public void onSuccess(List&lt;Category&gt; categories) {&#10;                if (isViewAttached()) {&#10;                    view.hideLoading();&#10;                    if (categories != null &amp;&amp; !categories.isEmpty()) {&#10;                        view.displayCategories(categories);&#10;                    } else {&#10;                        view.showEmptyView();&#10;                    }&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onSingleCategoryLoaded(Category category) {&#10;                // Không sử dụng trong trường hợp này&#10;            }&#10;&#10;            @Override&#10;            public void onError(String errorMessage) {&#10;                if (isViewAttached()) {&#10;                    view.hideLoading();&#10;                    view.showError(errorMessage);&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    /**&#10;     * Xử lý khi người dùng chọn một danh mục&#10;     * @param category Danh mục được chọn&#10;     */&#10;    public void onCategorySelected(Category category) {&#10;        if (isViewAttached()) {&#10;            view.navigateToCategoryDetail(category);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Dọn dẹp tài nguyên khi presenter không còn được sử dụng&#10;     */&#10;    public void onDestroy() {&#10;        if (categoryListener != null) {&#10;            categoryRepository.removeListener(categoryListener);&#10;            categoryListener = null;&#10;        }&#10;        detachView();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.category;&#10;&#10;import com.vhn.doan.data.Category;&#10;import com.vhn.doan.data.repository.CategoryRepository;&#10;import com.vhn.doan.presentation.base.BasePresenter;&#10;&#10;import java.util.List;&#10;&#10;/**&#10; * Presenter xử lý logic cho màn hình danh sách danh mục&#10; */&#10;public class CategoryPresenter extends BasePresenter&lt;CategoryView&gt; {&#10;&#10;    private final CategoryRepository categoryRepository;&#10;    private Object categoryListener;&#10;&#10;    /**&#10;     * Constructor&#10;     * @param view Interface view cung cấp phương thức hiển thị&#10;     * @param categoryRepository Repository cung cấp dữ liệu danh mục&#10;     */&#10;    public CategoryPresenter(CategoryView view, CategoryRepository categoryRepository) {&#10;        this.categoryRepository = categoryRepository;&#10;        attachView(view);&#10;    }&#10;&#10;    /**&#10;     * Tải danh sách danh mục từ repository&#10;     */&#10;    public void loadCategories() {&#10;        if (isViewAttached()) {&#10;            view.showLoading();&#10;        }&#10;&#10;        categoryRepository.getAllCategories(new CategoryRepository.CategoryCallback() {&#10;            @Override&#10;            public void onSuccess(List&lt;Category&gt; categories) {&#10;                if (isViewAttached()) {&#10;                    view.hideLoading();&#10;                    if (categories != null &amp;&amp; !categories.isEmpty()) {&#10;                        view.displayCategories(categories);&#10;                    } else {&#10;                        view.showEmptyView();&#10;                    }&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onSingleCategoryLoaded(Category category) {&#10;                // Không sử dụng trong trường hợp này&#10;            }&#10;&#10;            @Override&#10;            public void onError(String errorMessage) {&#10;                if (isViewAttached()) {&#10;                    view.hideLoading();&#10;                    view.showError(errorMessage);&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    /**&#10;     * Lắng nghe thay đổi từ danh sách danh mục real-time&#10;     */&#10;    public void startListeningToCategories() {&#10;        categoryListener = categoryRepository.listenToCategories(new CategoryRepository.CategoryCallback() {&#10;            @Override&#10;            public void onSuccess(List&lt;Category&gt; categories) {&#10;                if (isViewAttached()) {&#10;                    view.hideLoading();&#10;                    if (categories != null &amp;&amp; !categories.isEmpty()) {&#10;                        view.displayCategories(categories);&#10;                    } else {&#10;                        view.showEmptyView();&#10;                    }&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onSingleCategoryLoaded(Category category) {&#10;                // Không sử dụng trong trường hợp này&#10;            }&#10;&#10;            @Override&#10;            public void onError(String errorMessage) {&#10;                if (isViewAttached()) {&#10;                    view.hideLoading();&#10;                    view.showError(errorMessage);&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    /**&#10;     * Xử lý khi người dùng chọn một danh mục&#10;     * @param category Danh mục được chọn&#10;     */&#10;    public void onCategorySelected(Category category) {&#10;        if (isViewAttached()) {&#10;            view.navigateToCategoryDetail(category);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Dọn dẹp tài nguyên khi presenter không còn được sử dụng&#10;     */&#10;    @Override&#10;    public void start() {&#10;        // Khởi tạo presenter - tự động tải dữ liệu&#10;        loadCategories();&#10;    }&#10;&#10;    /**&#10;     * Dọn dẹp tài nguyên khi presenter không còn được sử dụng&#10;     */&#10;    public void onDestroy() {&#10;        if (categoryListener != null) {&#10;            categoryRepository.removeListener(categoryListener);&#10;            categoryListener = null;&#10;        }&#10;        detachView();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/category/CategoryView.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/category/CategoryView.java" />
              <option name="originalContent" value="package com.vhn.doan.presentation.category;&#10;&#10;import com.vhn.doan.data.Category;&#10;import com.vhn.doan.presentation.base.BaseView;&#10;&#10;import java.util.List;&#10;&#10;/**&#10; * Interface định nghĩa các phương thức của view cho màn hình danh mục&#10; */&#10;public interface CategoryView extends BaseView {&#10;&#10;    /**&#10;     * Hiển thị danh sách các danh mục&#10;     * @param categories Danh sách các danh mục&#10;     */&#10;    void displayCategories(List&lt;Category&gt; categories);&#10;&#10;    /**&#10;     * Hiển thị thông báo khi không có danh mục nào&#10;     */&#10;    void showEmptyView();&#10;&#10;    /**&#10;     * Hiển thị loading trong quá trình tải dữ liệu&#10;     */&#10;    void showLoading();&#10;&#10;    /**&#10;     * Ẩn loading khi tải dữ liệu xong&#10;     */&#10;    void hideLoading();&#10;&#10;    /**&#10;     * Hiển thị lỗi khi tải dữ liệu thất bại&#10;     * @param message Thông báo lỗi&#10;     */&#10;    void showError(String message);&#10;&#10;    /**&#10;     * Chuyển đến màn hình chi tiết của danh mục&#10;     * @param category Danh mục được chọn&#10;     */&#10;    void navigateToCategoryDetail(Category category);&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.category;&#13;&#10;&#13;&#10;import com.vhn.doan.data.Category;&#13;&#10;import com.vhn.doan.presentation.base.BaseView;&#13;&#10;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;/**&#13;&#10; * Interface định nghĩa các phương thức của view cho màn hình danh mục&#13;&#10; */&#13;&#10;public interface CategoryView extends BaseView {&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Hiển thị danh sách các danh mục&#13;&#10;     * @param categories Danh sách các danh mục&#13;&#10;     */&#13;&#10;    void displayCategories(List&lt;Category&gt; categories);&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Hiển thị thông báo khi không có danh mục nào&#13;&#10;     */&#13;&#10;    void showEmptyView();&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Chuyển đến màn hình chi tiết của danh mục&#13;&#10;     * @param category Danh mục được chọn&#13;&#10;     */&#13;&#10;    void navigateToCategoryDetail(Category category);&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/favorite/FavoritePresenter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/favorite/FavoritePresenter.java" />
              <option name="originalContent" value="package com.vhn.doan.presentation.favorite;&#10;&#10;import android.content.Context;&#10;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.auth.FirebaseUser;&#10;import com.vhn.doan.data.HealthTip;&#10;import com.vhn.doan.data.repository.FavoriteRepository;&#10;import com.vhn.doan.data.repository.HealthTipRepository;&#10;import com.vhn.doan.presentation.base.BasePresenter;&#10;&#10;import java.util.List;&#10;&#10;/**&#10; * Presenter cho màn hình yêu thích&#10; * Xử lý logic nghiệp vụ và giao tiếp giữa View và Model&#10; */&#10;public class FavoritePresenter extends BasePresenter&lt;FavoriteView&gt; {&#10;&#10;    private final Context context;&#10;    private final FavoriteRepository favoriteRepository;&#10;    private final HealthTipRepository healthTipRepository;&#10;    private final FirebaseAuth firebaseAuth;&#10;&#10;    public FavoritePresenter(Context context,&#10;                           FavoriteRepository favoriteRepository,&#10;                           HealthTipRepository healthTipRepository) {&#10;        this.context = context;&#10;        this.favoriteRepository = favoriteRepository;&#10;        this.healthTipRepository = healthTipRepository;&#10;        this.firebaseAuth = FirebaseAuth.getInstance();&#10;    }&#10;&#10;    /**&#10;     * Lấy view hiện tại&#10;     */&#10;    protected FavoriteView getView() {&#10;        return view;&#10;    }&#10;&#10;    /**&#10;     * Tải danh sách mẹo sức khỏe yêu thích&#10;     */&#10;    public void loadFavoriteHealthTips() {&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#10;        if (currentUser == null) {&#10;            if (isViewAttached()) {&#10;                getView().showError(&quot;Vui lòng đăng nhập để xem danh sách yêu thích&quot;);&#10;            }&#10;            return;&#10;        }&#10;&#10;        if (isViewAttached()) {&#10;            getView().showLoading(true);&#10;        }&#10;&#10;        favoriteRepository.getFavoriteHealthTipIds(currentUser.getUid(), new FavoriteRepository.FavoriteListCallback() {&#10;            @Override&#10;            public void onSuccess(List&lt;HealthTip&gt; favoriteHealthTips) {&#10;                if (isViewAttached()) {&#10;                    getView().showLoading(false);&#10;&#10;                    if (favoriteHealthTips.isEmpty()) {&#10;                        getView().showEmptyFavorites();&#10;                    } else {&#10;                        getView().showFavoriteHealthTips(favoriteHealthTips);&#10;                    }&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                if (isViewAttached()) {&#10;                    getView().showLoading(false);&#10;                    getView().showError(&quot;Không thể tải danh sách yêu thích: &quot; + error);&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    /**&#10;     * Xử lý khi người dùng chọn một mẹo sức khỏe&#10;     */&#10;    public void onHealthTipSelected(HealthTip healthTip) {&#10;        if (isViewAttached()) {&#10;            getView().navigateToHealthTipDetail(healthTip);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Xóa mẹo sức khỏe khỏi danh sách yêu thích&#10;     */&#10;    public void removeFromFavorites(HealthTip healthTip) {&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#10;        if (currentUser == null) {&#10;            if (isViewAttached()) {&#10;                getView().showError(&quot;Vui lòng đăng nhập để thực hiện thao tác này&quot;);&#10;            }&#10;            return;&#10;        }&#10;&#10;        favoriteRepository.removeFromFavorites(currentUser.getUid(), healthTip.getId(),&#10;            new FavoriteRepository.FavoriteActionCallback() {&#10;                @Override&#10;                public void onSuccess() {&#10;                    if (isViewAttached()) {&#10;                        getView().showRemovedFromFavorites(healthTip.getTitle());&#10;                        // Tải lại danh sách sau khi xóa&#10;                        loadFavoriteHealthTips();&#10;                    }&#10;                }&#10;&#10;                @Override&#10;                public void onError(String error) {&#10;                    if (isViewAttached()) {&#10;                        getView().showError(&quot;Không thể xóa khỏi yêu thích: &quot; + error);&#10;                    }&#10;                }&#10;            });&#10;    }&#10;&#10;    /**&#10;     * Refresh danh sách yêu thích&#10;     */&#10;    public void refreshFavorites() {&#10;        loadFavoriteHealthTips();&#10;    }&#10;&#10;    @Override&#10;    public void start() {&#10;        loadFavoriteHealthTips();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.favorite;&#13;&#10;&#13;&#10;import android.content.Context;&#13;&#10;&#13;&#10;import com.google.firebase.auth.FirebaseAuth;&#13;&#10;import com.google.firebase.auth.FirebaseUser;&#13;&#10;import com.vhn.doan.data.HealthTip;&#13;&#10;import com.vhn.doan.data.repository.FavoriteRepository;&#13;&#10;import com.vhn.doan.data.repository.HealthTipRepository;&#13;&#10;import com.vhn.doan.presentation.base.BasePresenter;&#13;&#10;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;/**&#13;&#10; * Presenter cho màn hình yêu thích&#13;&#10; * Xử lý logic nghiệp vụ và giao tiếp giữa View và Model&#13;&#10; */&#13;&#10;public class FavoritePresenter extends BasePresenter&lt;FavoriteView&gt; {&#13;&#10;&#13;&#10;    private final Context context;&#13;&#10;    private final FavoriteRepository favoriteRepository;&#13;&#10;    private final HealthTipRepository healthTipRepository;&#13;&#10;    private final FirebaseAuth firebaseAuth;&#13;&#10;&#13;&#10;    public FavoritePresenter(Context context,&#13;&#10;                           FavoriteRepository favoriteRepository,&#13;&#10;                           HealthTipRepository healthTipRepository) {&#13;&#10;        this.context = context;&#13;&#10;        this.favoriteRepository = favoriteRepository;&#13;&#10;        this.healthTipRepository = healthTipRepository;&#13;&#10;        this.firebaseAuth = FirebaseAuth.getInstance();&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Lấy view hiện tại&#13;&#10;     */&#13;&#10;    public FavoriteView getView() {&#13;&#10;        return view;&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Tải danh sách mẹo sức khỏe yêu thích&#13;&#10;     */&#13;&#10;    public void loadFavoriteHealthTips() {&#13;&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#13;&#10;        if (currentUser == null) {&#13;&#10;            if (isViewAttached()) {&#13;&#10;                getView().showError(&quot;Vui lòng đăng nhập để xem danh sách yêu thích&quot;);&#13;&#10;            }&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        if (isViewAttached()) {&#13;&#10;            getView().showLoading(true);&#13;&#10;        }&#13;&#10;&#13;&#10;        favoriteRepository.getFavoriteHealthTipIds(currentUser.getUid(), new FavoriteRepository.FavoriteListCallback() {&#13;&#10;            @Override&#13;&#10;            public void onSuccess(List&lt;HealthTip&gt; favoriteHealthTips) {&#13;&#10;                if (isViewAttached()) {&#13;&#10;                    getView().showLoading(false);&#13;&#10;&#13;&#10;                    if (favoriteHealthTips.isEmpty()) {&#13;&#10;                        getView().showEmptyFavorites();&#13;&#10;                    } else {&#13;&#10;                        getView().showFavoriteHealthTips(favoriteHealthTips);&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;&#13;&#10;            @Override&#13;&#10;            public void onError(String error) {&#13;&#10;                if (isViewAttached()) {&#13;&#10;                    getView().showLoading(false);&#13;&#10;                    getView().showError(&quot;Không thể tải danh sách yêu thích: &quot; + error);&#13;&#10;                }&#13;&#10;            }&#13;&#10;        });&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Xử lý khi người dùng chọn một mẹo sức khỏe&#13;&#10;     */&#13;&#10;    public void onHealthTipSelected(HealthTip healthTip) {&#13;&#10;        if (isViewAttached()) {&#13;&#10;            getView().navigateToHealthTipDetail(healthTip);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Xóa mẹo sức khỏe khỏi danh sách yêu thích&#13;&#10;     */&#13;&#10;    public void removeFromFavorites(HealthTip healthTip) {&#13;&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#13;&#10;        if (currentUser == null) {&#13;&#10;            if (isViewAttached()) {&#13;&#10;                getView().showError(&quot;Vui lòng đăng nhập để thực hiện thao tác này&quot;);&#13;&#10;            }&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        favoriteRepository.removeFromFavorites(currentUser.getUid(), healthTip.getId(),&#13;&#10;            new FavoriteRepository.FavoriteActionCallback() {&#13;&#10;                @Override&#13;&#10;                public void onSuccess() {&#13;&#10;                    if (isViewAttached()) {&#13;&#10;                        getView().showRemovedFromFavorites(healthTip.getTitle());&#13;&#10;                        // Tải lại danh sách sau khi xóa&#13;&#10;                        loadFavoriteHealthTips();&#13;&#10;                    }&#13;&#10;                }&#13;&#10;&#13;&#10;                @Override&#13;&#10;                public void onError(String error) {&#13;&#10;                    if (isViewAttached()) {&#13;&#10;                        getView().showError(&quot;Không thể xóa khỏi yêu thích: &quot; + error);&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            });&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Refresh danh sách yêu thích&#13;&#10;     */&#13;&#10;    public void refreshFavorites() {&#13;&#10;        loadFavoriteHealthTips();&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void start() {&#13;&#10;        loadFavoriteHealthTips();&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/home/HomeActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/home/HomeActivity.java" />
              <option name="originalContent" value="package com.vhn.doan.presentation.home;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.MenuItem;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.fragment.app.Fragment;&#10;&#10;import com.google.android.material.bottomnavigation.BottomNavigationView;&#10;import com.google.android.material.navigation.NavigationBarView;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.presentation.auth.LoginActivity;&#10;import com.vhn.doan.presentation.favorite.FavoriteFragment;&#10;import com.vhn.doan.presentation.profile.ProfileFragment;&#10;import com.vhn.doan.presentation.reminder.ReminderFragment;&#10;import com.vhn.doan.services.AuthManager;&#10;&#10;/**&#10; * HomeActivity là màn hình chính của ứng dụng sau khi đăng nhập&#10; * Chứa HomeFragment và các Fragment khác thông qua BottomNavigationView&#10; */&#10;public class HomeActivity extends AppCompatActivity {&#10;&#10;    private BottomNavigationView bottomNavigationView;&#10;    private AuthManager authManager;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_home);&#10;&#10;        // Khởi tạo AuthManager&#10;        authManager = new AuthManager(this);&#10;&#10;        // Kiểm tra đăng nhập&#10;        if (!authManager.isUserLoggedIn()) {&#10;            // Chuyển về màn hình đăng nhập nếu chưa đăng nhập&#10;            Intent intent = new Intent(this, LoginActivity.class);&#10;            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);&#10;            startActivity(intent);&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        // Khởi tạo và thiết lập BottomNavigationView&#10;        setupBottomNavigation();&#10;&#10;        // Mặc định hiển thị HomeFragment khi khởi động&#10;        if (savedInstanceState == null) {&#10;            loadFragment(HomeFragment.newInstance());&#10;        }&#10;    }&#10;&#10;    private void setupBottomNavigation() {&#10;        bottomNavigationView = findViewById(R.id.bottom_navigation);&#10;        bottomNavigationView.setOnItemSelectedListener(new NavigationBarView.OnItemSelectedListener() {&#10;            @Override&#10;            public boolean onNavigationItemSelected(@NonNull MenuItem item) {&#10;                Fragment fragment = null;&#10;                int itemId = item.getItemId();&#10;&#10;                if (itemId == R.id.nav_home) {&#10;                    fragment = HomeFragment.newInstance();&#10;                } else if (itemId == R.id.nav_reminders) {&#10;                    fragment = ReminderFragment.newInstance();&#10;                    // fragment = RemindersFragment.newInstance();&#10;                } else if (itemId == R.id.nav_videos) {&#10;                    // Tạm thời vẫn dùng HomeFragment&#10;                    // Sẽ thay thế bằng ShortVideoFragment khi phát triển&#10;                    fragment = HomeFragment.newInstance();&#10;                    // fragment = ShortVideoFragment.newInstance();&#10;                } else if (itemId == R.id.nav_favorites) {&#10;                    // Kích hoạt FavoriteFragment&#10;                    fragment = FavoriteFragment.newInstance();&#10;                } else if (itemId == R.id.nav_profile) {&#10;                    // Sử dụng ProfileFragment thay vì HomeFragment&#10;                    fragment = ProfileFragment.newInstance();&#10;                }&#10;&#10;                return loadFragment(fragment);&#10;            }&#10;        });&#10;    }&#10;&#10;    private boolean loadFragment(Fragment fragment) {&#10;        if (fragment != null) {&#10;            getSupportFragmentManager()&#10;                    .beginTransaction()&#10;                    .replace(R.id.fragment_container, fragment)&#10;                    .commit();&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.home;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.MenuItem;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.fragment.app.Fragment;&#10;&#10;import com.google.android.material.bottomnavigation.BottomNavigationView;&#10;import com.google.android.material.navigation.NavigationBarView;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.presentation.auth.LoginActivity;&#10;import com.vhn.doan.presentation.favorite.FavoriteFragment;&#10;import com.vhn.doan.presentation.profile.ProfileFragment;&#10;import com.vhn.doan.presentation.reminder.ReminderFragment;&#10;import com.vhn.doan.services.AuthManager;&#10;&#10;/**&#10; * HomeActivity là màn hình chính của ứng dụng sau khi đăng nhập&#10; * Chứa HomeFragment và các Fragment khác thông qua BottomNavigationView&#10; */&#10;public class HomeActivity extends AppCompatActivity {&#10;&#10;    private BottomNavigationView bottomNavigationView;&#10;    private AuthManager authManager;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_home);&#10;&#10;        // Khởi tạo AuthManager&#10;        authManager = new AuthManager(this);&#10;&#10;        // Kiểm tra đăng nhập&#10;        if (!authManager.isUserLoggedIn()) {&#10;            // Chuyển về màn hình đăng nhập nếu chưa đăng nhập&#10;            Intent intent = new Intent(this, LoginActivity.class);&#10;            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);&#10;            startActivity(intent);&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        // Khởi tạo và thiết lập BottomNavigationView&#10;        setupBottomNavigation();&#10;&#10;        // Mặc định hiển thị HomeFragment khi khởi động&#10;        if (savedInstanceState == null) {&#10;            loadFragment(HomeFragment.newInstance());&#10;        }&#10;    }&#10;&#10;    private void setupBottomNavigation() {&#10;        bottomNavigationView = findViewById(R.id.bottom_navigation);&#10;        bottomNavigationView.setOnItemSelectedListener(new NavigationBarView.OnItemSelectedListener() {&#10;            @Override&#10;            public boolean onNavigationItemSelected(@NonNull MenuItem item) {&#10;                Fragment fragment = null;&#10;                int itemId = item.getItemId();&#10;&#10;                if (itemId == R.id.nav_home) {&#10;                    fragment = HomeFragment.newInstance();&#10;                } else if (itemId == R.id.nav_reminders) {&#10;                    // Kích hoạt ReminderFragment&#10;                    fragment = ReminderFragment.newInstance();&#10;                } else if (itemId == R.id.nav_videos) {&#10;                    // Tạm thời vẫn dùng HomeFragment&#10;                    // Sẽ thay thế bằng ShortVideoFragment khi phát triển&#10;                    fragment = HomeFragment.newInstance();&#10;                    // fragment = ShortVideoFragment.newInstance();&#10;                } else if (itemId == R.id.nav_favorites) {&#10;                    // Kích hoạt FavoriteFragment&#10;                    fragment = FavoriteFragment.newInstance();&#10;                } else if (itemId == R.id.nav_profile) {&#10;                    // Sử dụng ProfileFragment thay vì HomeFragment&#10;                    fragment = ProfileFragment.newInstance();&#10;                }&#10;&#10;                return loadFragment(fragment);&#10;            }&#10;        });&#10;    }&#10;&#10;    private boolean loadFragment(Fragment fragment) {&#10;        if (fragment != null) {&#10;            getSupportFragmentManager()&#10;                    .beginTransaction()&#10;                    .replace(R.id.fragment_container, fragment)&#10;                    .commit();&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/profile/SimpleProfileFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/profile/SimpleProfileFragment.java" />
              <option name="originalContent" value="package com.vhn.doan.presentation.profile;&#10;&#10;import android.app.AlertDialog;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;&#10;import com.google.android.material.button.MaterialButton;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.auth.FirebaseUser;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.presentation.auth.LoginActivity;&#10;import com.vhn.doan.presentation.base.BaseFragment;&#10;&#10;/**&#10; * Fragment đơn giản cho test chức năng đăng xuất&#10; */&#10;public class SimpleProfileFragment extends BaseFragment {&#10;&#10;    private TextView tvUserInfo;&#10;    private MaterialButton btnLogout;&#10;    private FirebaseAuth firebaseAuth;&#10;&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,&#10;                             Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_simple_profile, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;        initFirebase();&#10;        loadUserInfo();&#10;    }&#10;&#10;    private void initFirebase() {&#10;        firebaseAuth = FirebaseAuth.getInstance();&#10;    }&#10;&#10;    @Override&#10;    protected void initViews(View view) {&#10;        tvUserInfo = view.findViewById(R.id.tvUserInfo);&#10;        btnLogout = view.findViewById(R.id.btnLogout);&#10;    }&#10;&#10;    @Override&#10;    protected void setupListeners() {&#10;        btnLogout.setOnClickListener(v -&gt; showLogoutConfirmDialog());&#10;    }&#10;&#10;    private void loadUserInfo() {&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#10;        if (currentUser != null) {&#10;            String userInfo = &quot;Tên: &quot; + (currentUser.getDisplayName() != null ? currentUser.getDisplayName() : &quot;Chưa có tên&quot;) +&#10;                            &quot;\nEmail: &quot; + currentUser.getEmail();&#10;            tvUserInfo.setText(userInfo);&#10;        } else {&#10;            tvUserInfo.setText(&quot;Chưa đăng nhập&quot;);&#10;        }&#10;    }&#10;&#10;    private void showLogoutConfirmDialog() {&#10;        if (getContext() != null) {&#10;            new AlertDialog.Builder(getContext())&#10;                    .setTitle(&quot;Xác nhận đăng xuất&quot;)&#10;                    .setMessage(&quot;Bạn có chắc chắn muốn đăng xuất không?&quot;)&#10;                    .setPositiveButton(&quot;Đăng xuất&quot;, (dialog, which) -&gt; performLogout())&#10;                    .setNegativeButton(&quot;Hủy&quot;, (dialog, which) -&gt; dialog.dismiss())&#10;                    .show();&#10;        }&#10;    }&#10;&#10;    private void performLogout() {&#10;        try {&#10;            // Hiển thị loading&#10;            showLoading(true);&#10;&#10;            // Đăng xuất Firebase&#10;            firebaseAuth.signOut();&#10;&#10;            // Ẩn loading&#10;            showLoading(false);&#10;&#10;            // Hiển thị thông báo thành công&#10;            if (getContext() != null) {&#10;                Toast.makeText(getContext(), &quot;Đăng xuất thành công&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;&#10;            // Chuyển về màn hình đăng nhập&#10;            navigateToLogin();&#10;&#10;        } catch (Exception e) {&#10;            showLoading(false);&#10;            if (getContext() != null) {&#10;                Toast.makeText(getContext(), &quot;Lỗi đăng xuất: &quot; + e.getMessage(), Toast.LENGTH_LONG).show();&#10;            }&#10;        }&#10;    }&#10;&#10;    private void navigateToLogin() {&#10;        if (getActivity() != null) {&#10;            Intent intent = new Intent(getActivity(), LoginActivity.class);&#10;            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);&#10;            startActivity(intent);&#10;            getActivity().finish();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showLoading(boolean loading) {&#10;        // Implement loading indicator với UI feedback&#10;        if (btnLogout != null) {&#10;            btnLogout.setEnabled(!loading);&#10;            btnLogout.setText(loading ? &quot;Đang đăng xuất...&quot; : &quot;Đăng xuất&quot;);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.profile;&#13;&#10;&#13;&#10;import android.app.AlertDialog;&#13;&#10;import android.content.Intent;&#13;&#10;import android.os.Bundle;&#13;&#10;import android.view.LayoutInflater;&#13;&#10;import android.view.View;&#13;&#10;import android.view.ViewGroup;&#13;&#10;import android.widget.TextView;&#13;&#10;import android.widget.Toast;&#13;&#10;&#13;&#10;import androidx.annotation.NonNull;&#13;&#10;import androidx.annotation.Nullable;&#13;&#10;&#13;&#10;import com.google.android.material.button.MaterialButton;&#13;&#10;import com.google.firebase.auth.FirebaseAuth;&#13;&#10;import com.google.firebase.auth.FirebaseUser;&#13;&#10;import com.vhn.doan.R;&#13;&#10;import com.vhn.doan.presentation.auth.LoginActivity;&#13;&#10;import com.vhn.doan.presentation.base.BaseFragment;&#13;&#10;&#13;&#10;/**&#13;&#10; * Fragment đơn giản cho test chức năng đăng xuất&#13;&#10; */&#13;&#10;public class SimpleProfileFragment extends BaseFragment {&#13;&#10;&#13;&#10;    private TextView tvUserInfo;&#13;&#10;    private MaterialButton btnLogout;&#13;&#10;    private FirebaseAuth firebaseAuth;&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,&#13;&#10;                             Bundle savedInstanceState) {&#13;&#10;        return inflater.inflate(R.layout.fragment_simple_profile, container, false);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#13;&#10;        super.onViewCreated(view, savedInstanceState);&#13;&#10;        initFirebase();&#13;&#10;        loadUserInfo();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void initFirebase() {&#13;&#10;        firebaseAuth = FirebaseAuth.getInstance();&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    protected void initViews(View view) {&#13;&#10;        tvUserInfo = view.findViewById(R.id.tvUserInfo);&#13;&#10;        btnLogout = view.findViewById(R.id.btnLogout);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    protected void setupListeners() {&#13;&#10;        btnLogout.setOnClickListener(v -&gt; showLogoutConfirmDialog());&#13;&#10;    }&#13;&#10;&#13;&#10;    private void loadUserInfo() {&#13;&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#13;&#10;        if (currentUser != null) {&#13;&#10;            String userInfo = &quot;Tên: &quot; + (currentUser.getDisplayName() != null ? currentUser.getDisplayName() : &quot;Chưa có tên&quot;) +&#13;&#10;                            &quot;\nEmail: &quot; + currentUser.getEmail();&#13;&#10;            tvUserInfo.setText(userInfo);&#13;&#10;        } else {&#13;&#10;            tvUserInfo.setText(&quot;Chưa đăng nhập&quot;);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void showLogoutConfirmDialog() {&#13;&#10;        if (getContext() != null) {&#13;&#10;            new AlertDialog.Builder(getContext())&#13;&#10;                    .setTitle(&quot;Xác nhận đăng xuất&quot;)&#13;&#10;                    .setMessage(&quot;Bạn có chắc chắn muốn đăng xuất không?&quot;)&#13;&#10;                    .setPositiveButton(&quot;Đăng xuất&quot;, (dialog, which) -&gt; performLogout())&#13;&#10;                    .setNegativeButton(&quot;Hủy&quot;, (dialog, which) -&gt; dialog.dismiss())&#13;&#10;                    .show();&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void performLogout() {&#13;&#10;        try {&#13;&#10;            // Hiển thị loading&#13;&#10;            showLoading(true);&#13;&#10;&#13;&#10;            // Đăng xuất Firebase&#13;&#10;            firebaseAuth.signOut();&#13;&#10;&#13;&#10;            // Ẩn loading&#13;&#10;            showLoading(false);&#13;&#10;&#13;&#10;            // Hiển thị thông báo thành công&#13;&#10;            if (getContext() != null) {&#13;&#10;                Toast.makeText(getContext(), &quot;Đăng xuất thành công&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;            }&#13;&#10;&#13;&#10;            // Chuyển về màn hình đăng nhập&#13;&#10;            navigateToLogin();&#13;&#10;&#13;&#10;        } catch (Exception e) {&#13;&#10;            showLoading(false);&#13;&#10;            if (getContext() != null) {&#13;&#10;                Toast.makeText(getContext(), &quot;Lỗi đăng xuất: &quot; + e.getMessage(), Toast.LENGTH_LONG).show();&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void navigateToLogin() {&#13;&#10;        if (getActivity() != null) {&#13;&#10;            Intent intent = new Intent(getActivity(), LoginActivity.class);&#13;&#10;            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);&#13;&#10;            startActivity(intent);&#13;&#10;            getActivity().finish();&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public void showLoading(boolean loading) {&#13;&#10;        // Implement loading indicator với UI feedback&#13;&#10;        if (btnLogout != null) {&#13;&#10;            btnLogout.setEnabled(!loading);&#13;&#10;            btnLogout.setText(loading ? &quot;Đang đăng xuất...&quot; : &quot;Đăng xuất&quot;);&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/reminder/ReminderAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/reminder/ReminderAdapter.java" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.reminder;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.ImageButton;&#10;import android.widget.Switch;&#10;import android.widget.TextView;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.data.Reminder;&#10;&#10;import java.text.SimpleDateFormat;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;/**&#10; * Adapter cho RecyclerView hiển thị danh sách nhắc nhở&#10; */&#10;public class ReminderAdapter extends RecyclerView.Adapter&lt;ReminderAdapter.ReminderViewHolder&gt; {&#10;    &#10;    private List&lt;Reminder&gt; reminders;&#10;    private OnReminderItemClickListener listener;&#10;    private SimpleDateFormat dateTimeFormat;&#10;    &#10;    public interface OnReminderItemClickListener {&#10;        void onReminderClick(Reminder reminder);&#10;        void onToggleClick(Reminder reminder);&#10;        void onDeleteClick(Reminder reminder);&#10;    }&#10;    &#10;    public ReminderAdapter(List&lt;Reminder&gt; reminders, OnReminderItemClickListener listener) {&#10;        this.reminders = reminders;&#10;        this.listener = listener;&#10;        this.dateTimeFormat = new SimpleDateFormat(&quot;dd/MM/yyyy HH:mm&quot;, Locale.getDefault());&#10;    }&#10;    &#10;    @NonNull&#10;    @Override&#10;    public ReminderViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(parent.getContext())&#10;                .inflate(R.layout.item_reminder, parent, false);&#10;        return new ReminderViewHolder(view);&#10;    }&#10;    &#10;    @Override&#10;    public void onBindViewHolder(@NonNull ReminderViewHolder holder, int position) {&#10;        Reminder reminder = reminders.get(position);&#10;        holder.bind(reminder);&#10;    }&#10;    &#10;    @Override&#10;    public int getItemCount() {&#10;        return reminders.size();&#10;    }&#10;    &#10;    public void updateReminders(List&lt;Reminder&gt; newReminders) {&#10;        this.reminders.clear();&#10;        this.reminders.addAll(newReminders);&#10;        notifyDataSetChanged();&#10;    }&#10;    &#10;    public void addReminder(Reminder reminder) {&#10;        reminders.add(0, reminder);&#10;        notifyItemInserted(0);&#10;    }&#10;    &#10;    public void updateReminder(Reminder updatedReminder) {&#10;        for (int i = 0; i &lt; reminders.size(); i++) {&#10;            if (reminders.get(i).getId().equals(updatedReminder.getId())) {&#10;                reminders.set(i, updatedReminder);&#10;                notifyItemChanged(i);&#10;                break;&#10;            }&#10;        }&#10;    }&#10;    &#10;    public void removeReminder(Reminder reminder) {&#10;        for (int i = 0; i &lt; reminders.size(); i++) {&#10;            if (reminders.get(i).getId().equals(reminder.getId())) {&#10;                reminders.remove(i);&#10;                notifyItemRemoved(i);&#10;                break;&#10;            }&#10;        }&#10;    }&#10;    &#10;    public class ReminderViewHolder extends RecyclerView.ViewHolder {&#10;        &#10;        private TextView tvTitle;&#10;        private TextView tvDescription;&#10;        private TextView tvDateTime;&#10;        private TextView tvRepeatType;&#10;        private Switch swActive;&#10;        private ImageButton btnDelete;&#10;        private View statusIndicator;&#10;        &#10;        public ReminderViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            &#10;            tvTitle = itemView.findViewById(R.id.tv_reminder_title);&#10;            tvDescription = itemView.findViewById(R.id.tv_reminder_description);&#10;            tvDateTime = itemView.findViewById(R.id.tv_reminder_datetime);&#10;            tvRepeatType = itemView.findViewById(R.id.tv_repeat_type);&#10;            swActive = itemView.findViewById(R.id.sw_reminder_active);&#10;            btnDelete = itemView.findViewById(R.id.btn_delete_reminder);&#10;            statusIndicator = itemView.findViewById(R.id.view_status_indicator);&#10;            &#10;            setupClickListeners();&#10;        }&#10;        &#10;        private void setupClickListeners() {&#10;            itemView.setOnClickListener(v -&gt; {&#10;                int position = getAdapterPosition();&#10;                if (position != RecyclerView.NO_POSITION &amp;&amp; listener != null) {&#10;                    listener.onReminderClick(reminders.get(position));&#10;                }&#10;            });&#10;            &#10;            swActive.setOnClickListener(v -&gt; {&#10;                int position = getAdapterPosition();&#10;                if (position != RecyclerView.NO_POSITION &amp;&amp; listener != null) {&#10;                    listener.onToggleClick(reminders.get(position));&#10;                }&#10;            });&#10;            &#10;            btnDelete.setOnClickListener(v -&gt; {&#10;                int position = getAdapterPosition();&#10;                if (position != RecyclerView.NO_POSITION &amp;&amp; listener != null) {&#10;                    listener.onDeleteClick(reminders.get(position));&#10;                }&#10;            });&#10;        }&#10;        &#10;        public void bind(Reminder reminder) {&#10;            // Hiển thị tiêu đề&#10;            tvTitle.setText(reminder.getTitle());&#10;            &#10;            // Hiển thị mô tả&#10;            if (reminder.getDescription() != null &amp;&amp; !reminder.getDescription().trim().isEmpty()) {&#10;                tvDescription.setText(reminder.getDescription());&#10;                tvDescription.setVisibility(View.VISIBLE);&#10;            } else {&#10;                tvDescription.setVisibility(View.GONE);&#10;            }&#10;            &#10;            // Hiển thị thời gian&#10;            if (reminder.getReminderTime() != null) {&#10;                tvDateTime.setText(dateTimeFormat.format(reminder.getReminderTime()));&#10;            } else {&#10;                tvDateTime.setText(&quot;Chưa đặt thời gian&quot;);&#10;            }&#10;            &#10;            // Hiển thị loại lặp lại&#10;            tvRepeatType.setText(reminder.getRepeatTypeDisplayName());&#10;            &#10;            // Cập nhật trạng thái switch&#10;            swActive.setChecked(reminder.isActive());&#10;            &#10;            // Cập nhật indicator trạng thái&#10;            updateStatusIndicator(reminder);&#10;            &#10;            // Cập nhật giao diện dựa trên trạng thái&#10;            updateItemAppearance(reminder);&#10;        }&#10;        &#10;        private void updateStatusIndicator(Reminder reminder) {&#10;            if (reminder.isActive()) {&#10;                if (reminder.isDue()) {&#10;                    // Nhắc nhở đã đến giờ&#10;                    statusIndicator.setBackgroundResource(R.color.status_due);&#10;                } else {&#10;                    // Nhắc nhở đang hoạt động&#10;                    statusIndicator.setBackgroundResource(R.color.status_active);&#10;                }&#10;            } else {&#10;                // Nhắc nhở đã tắt&#10;                statusIndicator.setBackgroundResource(R.color.status_inactive);&#10;            }&#10;        }&#10;        &#10;        private void updateItemAppearance(Reminder reminder) {&#10;            float alpha = reminder.isActive() ? 1.0f : 0.6f;&#10;            &#10;            tvTitle.setAlpha(alpha);&#10;            tvDescription.setAlpha(alpha);&#10;            tvDateTime.setAlpha(alpha);&#10;            tvRepeatType.setAlpha(alpha);&#10;            &#10;            // Highlight nếu nhắc nhở đã đến giờ và đang hoạt động&#10;            if (reminder.isActive() &amp;&amp; reminder.isDue()) {&#10;                itemView.setBackgroundResource(R.drawable.bg_reminder_due);&#10;            } else {&#10;                itemView.setBackgroundResource(R.drawable.bg_reminder_normal);&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/reminder/ReminderContract.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/reminder/ReminderContract.java" />
              <option name="originalContent" value="package com.vhn.doan.presentation.reminder;&#10;&#10;import com.vhn.doan.data.Reminder;&#10;import com.vhn.doan.presentation.base.BasePresenter;&#10;import com.vhn.doan.presentation.base.BaseView;&#10;&#10;import java.util.List;&#10;&#10;/**&#10; * Contract interface định nghĩa các phương thức cho Reminder MVP&#10; */&#10;public interface ReminderContract {&#10;&#10;    interface View extends BaseView&lt;Presenter&gt; {&#10;        /**&#10;         * Hiển thị danh sách nhắc nhở&#10;         */&#10;        void showReminders(List&lt;Reminder&gt; reminders);&#10;&#10;        /**&#10;         * Hiển thị thông báo thành công&#10;         */&#10;        void showSuccess(String message);&#10;&#10;        /**&#10;         * Hiển thị dialog tạo/chỉnh sửa nhắc nhở&#10;         */&#10;        void showReminderDialog(Reminder reminder);&#10;&#10;        /**&#10;         * Hiển thị dialog xác nhận xóa&#10;         */&#10;        void showDeleteConfirmDialog(Reminder reminder);&#10;&#10;        /**&#10;         * Cập nhật một item trong danh sách&#10;         */&#10;        void updateReminderItem(Reminder reminder);&#10;&#10;        /**&#10;         * Xóa một item khỏi danh sách&#10;         */&#10;        void removeReminderItem(Reminder reminder);&#10;&#10;        /**&#10;         * Thêm một item mới vào danh sách&#10;         */&#10;        void addReminderItem(Reminder reminder);&#10;&#10;        /**&#10;         * Hiển thị trạng thái empty&#10;         */&#10;        void showEmptyState();&#10;&#10;        /**&#10;         * Ẩn trạng thái empty&#10;         */&#10;        void hideEmptyState();&#10;    }&#10;&#10;    interface Presenter extends BasePresenter {&#10;        /**&#10;         * Tải danh sách nhắc nhở&#10;         */&#10;        void loadReminders();&#10;&#10;        /**&#10;         * Tạo nhắc nhở mới&#10;         */&#10;        void createReminder();&#10;&#10;        /**&#10;         * Chỉnh sửa nhắc nhở&#10;         */&#10;        void editReminder(Reminder reminder);&#10;&#10;        /**&#10;         * Xóa nhắc nhở&#10;         */&#10;        void deleteReminder(Reminder reminder);&#10;&#10;        /**&#10;         * Lưu nhắc nhở (tạo mới hoặc cập nhật)&#10;         */&#10;        void saveReminder(Reminder reminder);&#10;&#10;        /**&#10;         * Bật/tắt nhắc nhở&#10;         */&#10;        void toggleReminder(Reminder reminder);&#10;&#10;        /**&#10;         * Làm mới danh sách&#10;         */&#10;        void refreshReminders();&#10;&#10;        /**&#10;         * Tìm kiếm nhắc nhở&#10;         */&#10;        void searchReminders(String query);&#10;&#10;        /**&#10;         * Lọc nhắc nhở theo trạng thái&#10;         */&#10;        void filterReminders(boolean activeOnly);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.reminder;&#13;&#10;&#13;&#10;import com.vhn.doan.data.Reminder;&#13;&#10;import com.vhn.doan.presentation.base.BaseView;&#13;&#10;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;/**&#13;&#10; * Contract interface định nghĩa các phương thức cho Reminder MVP&#13;&#10; */&#13;&#10;public interface ReminderContract {&#13;&#10;&#13;&#10;    interface View extends BaseView {&#13;&#10;        /**&#13;&#10;         * Hiển thị danh sách nhắc nhở&#13;&#10;         */&#13;&#10;        void showReminders(List&lt;Reminder&gt; reminders);&#13;&#10;&#13;&#10;        /**&#13;&#10;         * Hiển thị thông báo thành công&#13;&#10;         */&#13;&#10;        void showSuccess(String message);&#13;&#10;&#13;&#10;        /**&#13;&#10;         * Hiển thị dialog tạo/chỉnh sửa nhắc nhở&#13;&#10;         */&#13;&#10;        void showReminderDialog(Reminder reminder);&#13;&#10;&#13;&#10;        /**&#13;&#10;         * Hiển thị dialog xác nhận xóa&#13;&#10;         */&#13;&#10;        void showDeleteConfirmDialog(Reminder reminder);&#13;&#10;&#13;&#10;        /**&#13;&#10;         * Cập nhật một item trong danh sách&#13;&#10;         */&#13;&#10;        void updateReminderItem(Reminder reminder);&#13;&#10;&#13;&#10;        /**&#13;&#10;         * Xóa một item khỏi danh sách&#13;&#10;         */&#13;&#10;        void removeReminderItem(Reminder reminder);&#13;&#10;&#13;&#10;        /**&#13;&#10;         * Thêm một item mới vào danh sách&#13;&#10;         */&#13;&#10;        void addReminderItem(Reminder reminder);&#13;&#10;&#13;&#10;        /**&#13;&#10;         * Hiển thị trạng thái empty&#13;&#10;         */&#13;&#10;        void showEmptyState();&#13;&#10;&#13;&#10;        /**&#13;&#10;         * Ẩn trạng thái empty&#13;&#10;         */&#13;&#10;        void hideEmptyState();&#13;&#10;    }&#13;&#10;&#13;&#10;    interface Presenter {&#13;&#10;        /**&#13;&#10;         * Gắn view vào presenter&#13;&#10;         */&#13;&#10;        void attachView(View view);&#13;&#10;&#13;&#10;        /**&#13;&#10;         * Gỡ bỏ view khỏi presenter&#13;&#10;         */&#13;&#10;        void detachView();&#13;&#10;&#13;&#10;        /**&#13;&#10;         * Khởi tạo presenter&#13;&#10;         */&#13;&#10;        void start();&#13;&#10;&#13;&#10;        /**&#13;&#10;         * Tải danh sách nhắc nhở&#13;&#10;         */&#13;&#10;        void loadReminders();&#13;&#10;&#13;&#10;        /**&#13;&#10;         * Tạo nhắc nhở mới&#13;&#10;         */&#13;&#10;        void createReminder();&#13;&#10;&#13;&#10;        /**&#13;&#10;         * Chỉnh sửa nhắc nhở&#13;&#10;         */&#13;&#10;        void editReminder(Reminder reminder);&#13;&#10;&#13;&#10;        /**&#13;&#10;         * Xóa nhắc nhở&#13;&#10;         */&#13;&#10;        void deleteReminder(Reminder reminder);&#13;&#10;&#13;&#10;        /**&#13;&#10;         * Lưu nhắc nhở (tạo mới hoặc cập nhật)&#13;&#10;         */&#13;&#10;        void saveReminder(Reminder reminder);&#13;&#10;&#13;&#10;        /**&#13;&#10;         * Bật/tắt nhắc nhở&#13;&#10;         */&#13;&#10;        void toggleReminder(Reminder reminder);&#13;&#10;&#13;&#10;        /**&#13;&#10;         * Làm mới danh sách&#13;&#10;         */&#13;&#10;        void refreshReminders();&#13;&#10;&#13;&#10;        /**&#13;&#10;         * Tìm kiếm nhắc nhở&#13;&#10;         */&#13;&#10;        void searchReminders(String query);&#13;&#10;&#13;&#10;        /**&#13;&#10;         * Lọc nhắc nhở theo trạng thái&#13;&#10;         */&#13;&#10;        void filterReminders(boolean activeOnly);&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/reminder/ReminderDialog.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/reminder/ReminderDialog.java" />
              <option name="originalContent" value="package com.vhn.doan.presentation.reminder;&#10;&#10;import android.app.AlertDialog;&#10;import android.app.DatePickerDialog;&#10;import android.app.TimePickerDialog;&#10;import android.content.Context;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.widget.ArrayAdapter;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.Spinner;&#10;import android.widget.Switch;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.data.Reminder;&#10;&#10;import java.text.SimpleDateFormat;&#10;import java.util.Calendar;&#10;import java.util.Date;&#10;import java.util.Locale;&#10;&#10;/**&#10; * Dialog để tạo hoặc chỉnh sửa nhắc nhở&#10; */&#10;public class ReminderDialog {&#10;&#10;    private Context context;&#10;    private OnReminderDialogListener listener;&#10;    private AlertDialog dialog;&#10;    private Reminder reminder;&#10;    private boolean isEditMode;&#10;&#10;    // UI Components&#10;    private EditText etTitle;&#10;    private EditText etDescription;&#10;    private TextView tvSelectedDate;&#10;    private TextView tvSelectedTime;&#10;    private Spinner spRepeatType;&#10;    private Switch swActive;&#10;    private Button btnSelectDate;&#10;    private Button btnSelectTime;&#10;    private Button btnSave;&#10;    private Button btnCancel;&#10;&#10;    // Date and Time&#10;    private Calendar selectedDateTime;&#10;    private SimpleDateFormat dateFormat;&#10;    private SimpleDateFormat timeFormat;&#10;&#10;    // Repeat types&#10;    private String[] repeatTypes = {&#10;        &quot;Không lặp&quot;,&#10;        &quot;Hàng ngày&quot;,&#10;        &quot;Hàng tuần&quot;,&#10;        &quot;Hàng tháng&quot;&#10;    };&#10;&#10;    public interface OnReminderDialogListener {&#10;        void onReminderSaved(Reminder reminder);&#10;        void onReminderCanceled();&#10;    }&#10;&#10;    public ReminderDialog(Context context, OnReminderDialogListener listener) {&#10;        this.context = context;&#10;        this.listener = listener;&#10;        this.isEditMode = false;&#10;        this.selectedDateTime = Calendar.getInstance();&#10;        this.dateFormat = new SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault());&#10;        this.timeFormat = new SimpleDateFormat(&quot;HH:mm&quot;, Locale.getDefault());&#10;&#10;        // Đặt thời gian mặc định là 1 giờ sau thời điểm hiện tại&#10;        selectedDateTime.add(Calendar.HOUR_OF_DAY, 1);&#10;    }&#10;&#10;    public ReminderDialog(Context context, Reminder reminder, OnReminderDialogListener listener) {&#10;        this(context, listener);&#10;        this.reminder = reminder;&#10;        this.isEditMode = true;&#10;&#10;        if (reminder.getReminderTime() != null) {&#10;            selectedDateTime.setTime(reminder.getReminderTime());&#10;        }&#10;    }&#10;&#10;    public void show() {&#10;        View dialogView = LayoutInflater.from(context).inflate(R.layout.dialog_reminder, null);&#10;&#10;        initViews(dialogView);&#10;        setupSpinner();&#10;        setupClickListeners();&#10;        populateData();&#10;&#10;        AlertDialog.Builder builder = new AlertDialog.Builder(context);&#10;        builder.setView(dialogView);&#10;        builder.setTitle(isEditMode ? &quot;Chỉnh sửa nhắc nhở&quot; : &quot;Tạo nhắc nhở mới&quot;);&#10;&#10;        dialog = builder.create();&#10;        dialog.show();&#10;    }&#10;&#10;    private void initViews(View view) {&#10;        etTitle = view.findViewById(R.id.et_reminder_title);&#10;        etDescription = view.findViewById(R.id.et_reminder_description);&#10;        tvSelectedDate = view.findViewById(R.id.tv_selected_date);&#10;        tvSelectedTime = view.findViewById(R.id.tv_selected_time);&#10;        spRepeatType = view.findViewById(R.id.sp_repeat_type);&#10;        swActive = view.findViewById(R.id.sw_reminder_active);&#10;        btnSelectDate = view.findViewById(R.id.btn_select_date);&#10;        btnSelectTime = view.findViewById(R.id.btn_select_time);&#10;        btnSave = view.findViewById(R.id.btn_save_reminder);&#10;        btnCancel = view.findViewById(R.id.btn_cancel_reminder);&#10;&#10;        // Hiển thị thời gian đã chọn&#10;        updateDateTimeDisplay();&#10;    }&#10;&#10;    private void setupSpinner() {&#10;        ArrayAdapter&lt;String&gt; adapter = new ArrayAdapter&lt;&gt;(&#10;            context,&#10;            android.R.layout.simple_spinner_item,&#10;            repeatTypes&#10;        );&#10;        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spRepeatType.setAdapter(adapter);&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        btnSelectDate.setOnClickListener(v -&gt; showDatePicker());&#10;        btnSelectTime.setOnClickListener(v -&gt; showTimePicker());&#10;        btnSave.setOnClickListener(v -&gt; saveReminder());&#10;        btnCancel.setOnClickListener(v -&gt; cancelDialog());&#10;    }&#10;&#10;    private void populateData() {&#10;        if (isEditMode &amp;&amp; reminder != null) {&#10;            etTitle.setText(reminder.getTitle());&#10;            etDescription.setText(reminder.getDescription());&#10;            spRepeatType.setSelection(reminder.getRepeatType());&#10;            swActive.setChecked(reminder.isActive());&#10;        } else {&#10;            // Giá trị mặc định cho reminder mới&#10;            swActive.setChecked(true);&#10;            spRepeatType.setSelection(0); // Không lặp&#10;        }&#10;    }&#10;&#10;    private void showDatePicker() {&#10;        DatePickerDialog datePickerDialog = new DatePickerDialog(&#10;            context,&#10;            (view, year, month, dayOfMonth) -&gt; {&#10;                selectedDateTime.set(Calendar.YEAR, year);&#10;                selectedDateTime.set(Calendar.MONTH, month);&#10;                selectedDateTime.set(Calendar.DAY_OF_MONTH, dayOfMonth);&#10;                updateDateTimeDisplay();&#10;            },&#10;            selectedDateTime.get(Calendar.YEAR),&#10;            selectedDateTime.get(Calendar.MONTH),&#10;            selectedDateTime.get(Calendar.DAY_OF_MONTH)&#10;        );&#10;&#10;        // Không cho phép chọn ngày trong quá khứ&#10;        datePickerDialog.getDatePicker().setMinDate(System.currentTimeMillis());&#10;        datePickerDialog.show();&#10;    }&#10;&#10;    private void showTimePicker() {&#10;        TimePickerDialog timePickerDialog = new TimePickerDialog(&#10;            context,&#10;            (view, hourOfDay, minute) -&gt; {&#10;                selectedDateTime.set(Calendar.HOUR_OF_DAY, hourOfDay);&#10;                selectedDateTime.set(Calendar.MINUTE, minute);&#10;                selectedDateTime.set(Calendar.SECOND, 0);&#10;                updateDateTimeDisplay();&#10;            },&#10;            selectedDateTime.get(Calendar.HOUR_OF_DAY),&#10;            selectedDateTime.get(Calendar.MINUTE),&#10;            true&#10;        );&#10;        timePickerDialog.show();&#10;    }&#10;&#10;    private void updateDateTimeDisplay() {&#10;        tvSelectedDate.setText(dateFormat.format(selectedDateTime.getTime()));&#10;        tvSelectedTime.setText(timeFormat.format(selectedDateTime.getTime()));&#10;    }&#10;&#10;    private void saveReminder() {&#10;        String title = etTitle.getText().toString().trim();&#10;        String description = etDescription.getText().toString().trim();&#10;&#10;        // Validation&#10;        if (title.isEmpty()) {&#10;            etTitle.setError(&quot;Vui lòng nhập tiêu đề nhắc nhở&quot;);&#10;            etTitle.requestFocus();&#10;            return;&#10;        }&#10;&#10;        // Kiểm tra thời gian không được trong quá khứ&#10;        if (selectedDateTime.getTimeInMillis() &lt;= System.currentTimeMillis()) {&#10;            Toast.makeText(context, &quot;Thời gian nhắc nhở phải sau thời điểm hiện tại&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        // Tạo hoặc cập nhật reminder&#10;        if (reminder == null) {&#10;            reminder = new Reminder();&#10;        }&#10;&#10;        reminder.setTitle(title);&#10;        reminder.setDescription(description);&#10;        reminder.setReminderTime(selectedDateTime.getTime());&#10;        reminder.setRepeatType(spRepeatType.getSelectedItemPosition());&#10;        reminder.setActive(swActive.isChecked());&#10;&#10;        if (listener != null) {&#10;            listener.onReminderSaved(reminder);&#10;        }&#10;&#10;        dialog.dismiss();&#10;    }&#10;&#10;    private void cancelDialog() {&#10;        if (listener != null) {&#10;            listener.onReminderCanceled();&#10;        }&#10;        dialog.dismiss();&#10;    }&#10;&#10;    public void dismiss() {&#10;        if (dialog != null &amp;&amp; dialog.isShowing()) {&#10;            dialog.dismiss();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.reminder;&#13;&#10;&#13;&#10;import android.app.AlertDialog;&#13;&#10;import android.app.DatePickerDialog;&#13;&#10;import android.app.TimePickerDialog;&#13;&#10;import android.content.Context;&#13;&#10;import android.view.LayoutInflater;&#13;&#10;import android.view.View;&#13;&#10;import android.widget.ArrayAdapter;&#13;&#10;import android.widget.Button;&#13;&#10;import android.widget.EditText;&#13;&#10;import android.widget.Spinner;&#13;&#10;import android.widget.Switch;&#13;&#10;import android.widget.TextView;&#13;&#10;import android.widget.Toast;&#13;&#10;&#13;&#10;import com.vhn.doan.R;&#13;&#10;import com.vhn.doan.data.Reminder;&#13;&#10;&#13;&#10;import java.text.SimpleDateFormat;&#13;&#10;import java.util.Calendar;&#13;&#10;import java.util.Date;&#13;&#10;import java.util.Locale;&#13;&#10;&#13;&#10;/**&#13;&#10; * Dialog để tạo hoặc chỉnh sửa nhắc nhở&#13;&#10; */&#13;&#10;public class ReminderDialog {&#13;&#10;&#13;&#10;    private Context context;&#13;&#10;    private OnReminderDialogListener listener;&#13;&#10;    private AlertDialog dialog;&#13;&#10;    private Reminder reminder;&#13;&#10;    private boolean isEditMode;&#13;&#10;&#13;&#10;    // UI Components&#13;&#10;    private EditText etTitle;&#13;&#10;    private EditText etDescription;&#13;&#10;    private TextView tvSelectedDate;&#13;&#10;    private TextView tvSelectedTime;&#13;&#10;    private Spinner spRepeatType;&#13;&#10;    private Switch swActive;&#13;&#10;    private Button btnSelectDate;&#13;&#10;    private Button btnSelectTime;&#13;&#10;    private Button btnSave;&#13;&#10;    private Button btnCancel;&#13;&#10;&#13;&#10;    // Date and Time&#13;&#10;    private Calendar selectedDateTime;&#13;&#10;    private SimpleDateFormat dateFormat;&#13;&#10;    private SimpleDateFormat timeFormat;&#13;&#10;&#13;&#10;    // Repeat types&#13;&#10;    private String[] repeatTypes = {&#13;&#10;        &quot;Không lặp&quot;,&#13;&#10;        &quot;Hàng ngày&quot;,&#13;&#10;        &quot;Hàng tuần&quot;,&#13;&#10;        &quot;Hàng tháng&quot;&#13;&#10;    };&#13;&#10;&#13;&#10;    public interface OnReminderDialogListener {&#13;&#10;        void onReminderSaved(Reminder reminder);&#13;&#10;        void onReminderCanceled();&#13;&#10;    }&#13;&#10;&#13;&#10;    public ReminderDialog(Context context, OnReminderDialogListener listener) {&#13;&#10;        this.context = context;&#13;&#10;        this.listener = listener;&#13;&#10;        this.isEditMode = false;&#13;&#10;        this.selectedDateTime = Calendar.getInstance();&#13;&#10;        this.dateFormat = new SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault());&#13;&#10;        this.timeFormat = new SimpleDateFormat(&quot;HH:mm&quot;, Locale.getDefault());&#13;&#10;&#13;&#10;        // Đặt thời gian mặc định là 1 giờ sau thời điểm hiện tại&#13;&#10;        selectedDateTime.add(Calendar.HOUR_OF_DAY, 1);&#13;&#10;    }&#13;&#10;&#13;&#10;    public ReminderDialog(Context context, Reminder reminder, OnReminderDialogListener listener) {&#13;&#10;        this(context, listener);&#13;&#10;        this.reminder = reminder;&#13;&#10;        this.isEditMode = reminder != null; // Chỉ set edit mode khi reminder không null&#13;&#10;&#13;&#10;        // Kiểm tra reminder không null trước khi truy cập properties&#13;&#10;        if (reminder != null &amp;&amp; reminder.getReminderTime() != null) {&#13;&#10;            selectedDateTime.setTime(reminder.getReminderTime());&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public void show() {&#13;&#10;        View dialogView = LayoutInflater.from(context).inflate(R.layout.dialog_reminder, null);&#13;&#10;&#13;&#10;        initViews(dialogView);&#13;&#10;        setupSpinner();&#13;&#10;        setupClickListeners();&#13;&#10;        populateData();&#13;&#10;&#13;&#10;        AlertDialog.Builder builder = new AlertDialog.Builder(context);&#13;&#10;        builder.setView(dialogView);&#13;&#10;        builder.setTitle(isEditMode ? &quot;Chỉnh sửa nhắc nhở&quot; : &quot;Tạo nhắc nhở mới&quot;);&#13;&#10;&#13;&#10;        dialog = builder.create();&#13;&#10;        dialog.show();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void initViews(View view) {&#13;&#10;        etTitle = view.findViewById(R.id.et_reminder_title);&#13;&#10;        etDescription = view.findViewById(R.id.et_reminder_description);&#13;&#10;        tvSelectedDate = view.findViewById(R.id.tv_selected_date);&#13;&#10;        tvSelectedTime = view.findViewById(R.id.tv_selected_time);&#13;&#10;        spRepeatType = view.findViewById(R.id.sp_repeat_type);&#13;&#10;        swActive = view.findViewById(R.id.sw_reminder_active);&#13;&#10;        btnSelectDate = view.findViewById(R.id.btn_select_date);&#13;&#10;        btnSelectTime = view.findViewById(R.id.btn_select_time);&#13;&#10;        btnSave = view.findViewById(R.id.btn_save_reminder);&#13;&#10;        btnCancel = view.findViewById(R.id.btn_cancel_reminder);&#13;&#10;&#13;&#10;        // Hiển thị thời gian đã chọn&#13;&#10;        updateDateTimeDisplay();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupSpinner() {&#13;&#10;        ArrayAdapter&lt;String&gt; adapter = new ArrayAdapter&lt;&gt;(&#13;&#10;            context,&#13;&#10;            android.R.layout.simple_spinner_item,&#13;&#10;            repeatTypes&#13;&#10;        );&#13;&#10;        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#13;&#10;        spRepeatType.setAdapter(adapter);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupClickListeners() {&#13;&#10;        btnSelectDate.setOnClickListener(v -&gt; showDatePicker());&#13;&#10;        btnSelectTime.setOnClickListener(v -&gt; showTimePicker());&#13;&#10;        btnSave.setOnClickListener(v -&gt; saveReminder());&#13;&#10;        btnCancel.setOnClickListener(v -&gt; cancelDialog());&#13;&#10;    }&#13;&#10;&#13;&#10;    private void populateData() {&#13;&#10;        if (isEditMode &amp;&amp; reminder != null) {&#13;&#10;            etTitle.setText(reminder.getTitle());&#13;&#10;            etDescription.setText(reminder.getDescription());&#13;&#10;            spRepeatType.setSelection(reminder.getRepeatType());&#13;&#10;            swActive.setChecked(reminder.isActive());&#13;&#10;        } else {&#13;&#10;            // Giá trị mặc định cho reminder mới&#13;&#10;            swActive.setChecked(true);&#13;&#10;            spRepeatType.setSelection(0); // Không lặp&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void showDatePicker() {&#13;&#10;        DatePickerDialog datePickerDialog = new DatePickerDialog(&#13;&#10;            context,&#13;&#10;            (view, year, month, dayOfMonth) -&gt; {&#13;&#10;                selectedDateTime.set(Calendar.YEAR, year);&#13;&#10;                selectedDateTime.set(Calendar.MONTH, month);&#13;&#10;                selectedDateTime.set(Calendar.DAY_OF_MONTH, dayOfMonth);&#13;&#10;                updateDateTimeDisplay();&#13;&#10;            },&#13;&#10;            selectedDateTime.get(Calendar.YEAR),&#13;&#10;            selectedDateTime.get(Calendar.MONTH),&#13;&#10;            selectedDateTime.get(Calendar.DAY_OF_MONTH)&#13;&#10;        );&#13;&#10;&#13;&#10;        // Không cho phép chọn ngày trong quá khứ&#13;&#10;        datePickerDialog.getDatePicker().setMinDate(System.currentTimeMillis());&#13;&#10;        datePickerDialog.show();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void showTimePicker() {&#13;&#10;        TimePickerDialog timePickerDialog = new TimePickerDialog(&#13;&#10;            context,&#13;&#10;            (view, hourOfDay, minute) -&gt; {&#13;&#10;                selectedDateTime.set(Calendar.HOUR_OF_DAY, hourOfDay);&#13;&#10;                selectedDateTime.set(Calendar.MINUTE, minute);&#13;&#10;                selectedDateTime.set(Calendar.SECOND, 0);&#13;&#10;                updateDateTimeDisplay();&#13;&#10;            },&#13;&#10;            selectedDateTime.get(Calendar.HOUR_OF_DAY),&#13;&#10;            selectedDateTime.get(Calendar.MINUTE),&#13;&#10;            true&#13;&#10;        );&#13;&#10;        timePickerDialog.show();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void updateDateTimeDisplay() {&#13;&#10;        tvSelectedDate.setText(dateFormat.format(selectedDateTime.getTime()));&#13;&#10;        tvSelectedTime.setText(timeFormat.format(selectedDateTime.getTime()));&#13;&#10;    }&#13;&#10;&#13;&#10;    private void saveReminder() {&#13;&#10;        String title = etTitle.getText().toString().trim();&#13;&#10;        String description = etDescription.getText().toString().trim();&#13;&#10;&#13;&#10;        // Validation&#13;&#10;        if (title.isEmpty()) {&#13;&#10;            etTitle.setError(&quot;Vui lòng nhập tiêu đề nhắc nhở&quot;);&#13;&#10;            etTitle.requestFocus();&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        // Kiểm tra thời gian không được trong quá khứ&#13;&#10;        if (selectedDateTime.getTimeInMillis() &lt;= System.currentTimeMillis()) {&#13;&#10;            Toast.makeText(context, &quot;Thời gian nhắc nhở phải sau thời điểm hiện tại&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        // Tạo hoặc cập nhật reminder&#13;&#10;        if (reminder == null) {&#13;&#10;            reminder = new Reminder();&#13;&#10;        }&#13;&#10;&#13;&#10;        reminder.setTitle(title);&#13;&#10;        reminder.setDescription(description);&#13;&#10;        reminder.setReminderTime(selectedDateTime.getTime());&#13;&#10;        reminder.setRepeatType(spRepeatType.getSelectedItemPosition());&#13;&#10;        reminder.setActive(swActive.isChecked());&#13;&#10;&#13;&#10;        if (listener != null) {&#13;&#10;            listener.onReminderSaved(reminder);&#13;&#10;        }&#13;&#10;&#13;&#10;        dialog.dismiss();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void cancelDialog() {&#13;&#10;        if (listener != null) {&#13;&#10;            listener.onReminderCanceled();&#13;&#10;        }&#13;&#10;        dialog.dismiss();&#13;&#10;    }&#13;&#10;&#13;&#10;    public void dismiss() {&#13;&#10;        if (dialog != null &amp;&amp; dialog.isShowing()) {&#13;&#10;            dialog.dismiss();&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/reminder/ReminderFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/reminder/ReminderFragment.java" />
              <option name="originalContent" value="package com.vhn.doan.presentation.reminder;&#10;&#10;import android.app.AlertDialog;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.Menu;&#10;import android.view.MenuInflater;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.appcompat.widget.SearchView;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;&#10;&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.data.Reminder;&#10;import com.vhn.doan.data.repository.ReminderRepository;&#10;import com.vhn.doan.data.repository.ReminderRepositoryImpl;&#10;import com.vhn.doan.utils.UserSessionManager;&#10;import com.vhn.doan.presentation.base.BaseFragment;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;import javax.inject.Inject;&#10;&#10;/**&#10; * Fragment hiển thị danh sách nhắc nhở theo kiến trúc MVP&#10; */&#10;public class ReminderFragment extends BaseFragment implements ReminderContract.View {&#10;&#10;    private ReminderPresenter presenter;&#10;&#10;    // UI Components&#10;    private RecyclerView recyclerView;&#10;    private SwipeRefreshLayout swipeRefresh;&#10;    private FloatingActionButton fabAdd;&#10;    private View emptyStateView;&#10;    private View loadingView;&#10;&#10;    // Adapter&#10;    private ReminderAdapter adapter;&#10;&#10;    // Search&#10;    private SearchView searchView;&#10;    private boolean showActiveOnly = false;&#10;&#10;    public static ReminderFragment newInstance() {&#10;        return new ReminderFragment();&#10;    }&#10;&#10;    @Override&#10;    public void onCreate(@Nullable Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setHasOptionsMenu(true);&#10;&#10;        // Khởi tạo presenter thủ công thay vì dùng @Inject&#10;        initPresenter();&#10;    }&#10;&#10;    /**&#10;     * Khởi tạo presenter với các dependencies cần thiết&#10;     */&#10;    private void initPresenter() {&#10;        ReminderRepository reminderRepository = new ReminderRepositoryImpl();&#10;        UserSessionManager userSessionManager = new UserSessionManager(requireContext());&#10;        presenter = new ReminderPresenter(reminderRepository, userSessionManager);&#10;    }&#10;&#10;    @Nullable&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,&#10;                           @Nullable Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_reminder, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;&#10;        initViews(view);&#10;        setupRecyclerView();&#10;        setupListeners();&#10;&#10;        presenter.attachView(this);&#10;        presenter.start();&#10;    }&#10;&#10;    @Override&#10;    public void onDestroyView() {&#10;        super.onDestroyView();&#10;        if (presenter != null) {&#10;            presenter.detachView();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onCreateOptionsMenu(@NonNull Menu menu, @NonNull MenuInflater inflater) {&#10;        inflater.inflate(R.menu.menu_reminder, menu);&#10;&#10;        MenuItem searchItem = menu.findItem(R.id.action_search);&#10;        searchView = (SearchView) searchItem.getActionView();&#10;&#10;        setupSearchView();&#10;        super.onCreateOptionsMenu(menu, inflater);&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        int itemId = item.getItemId();&#10;&#10;        if (itemId == R.id.action_filter_active) {&#10;            showActiveOnly = !showActiveOnly;&#10;            updateFilterMenuItem(item);&#10;            presenter.filterReminders(showActiveOnly);&#10;            return true;&#10;        } else if (itemId == R.id.action_refresh) {&#10;            presenter.refreshReminders();&#10;            return true;&#10;        }&#10;&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;&#10;    @Override&#10;    protected void initViews(View view) {&#10;        recyclerView = view.findViewById(R.id.recycler_view_reminders);&#10;        swipeRefresh = view.findViewById(R.id.swipe_refresh_reminders);&#10;        fabAdd = view.findViewById(R.id.fab_add_reminder);&#10;        emptyStateView = view.findViewById(R.id.layout_empty_state);&#10;        loadingView = view.findViewById(R.id.layout_loading);&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        adapter = new ReminderAdapter(new ArrayList&lt;&gt;(), new ReminderAdapter.OnReminderItemClickListener() {&#10;            @Override&#10;            public void onReminderClick(Reminder reminder) {&#10;                presenter.editReminder(reminder);&#10;            }&#10;&#10;            @Override&#10;            public void onToggleClick(Reminder reminder) {&#10;                presenter.toggleReminder(reminder);&#10;            }&#10;&#10;            @Override&#10;            public void onDeleteClick(Reminder reminder) {&#10;                presenter.deleteReminder(reminder);&#10;            }&#10;        });&#10;&#10;        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));&#10;        recyclerView.setAdapter(adapter);&#10;    }&#10;&#10;    @Override&#10;    protected void setupListeners() {&#10;        // Setup các listeners cụ thể&#10;        setupSwipeRefresh();&#10;        setupFab();&#10;        if (searchView != null) {&#10;            setupSearchView();&#10;        }&#10;    }&#10;&#10;    private void setupSwipeRefresh() {&#10;        swipeRefresh.setOnRefreshListener(() -&gt; presenter.refreshReminders());&#10;        swipeRefresh.setColorSchemeResources(&#10;            R.color.primary_color,&#10;            R.color.primary_dark,&#10;            R.color.accent_color&#10;        );&#10;    }&#10;&#10;    private void setupFab() {&#10;        fabAdd.setOnClickListener(v -&gt; presenter.createReminder());&#10;    }&#10;&#10;    private void setupSearchView() {&#10;        if (searchView != null) {&#10;            searchView.setQueryHint(&quot;Tìm kiếm nhắc nhở...&quot;);&#10;            searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {&#10;                @Override&#10;                public boolean onQueryTextSubmit(String query) {&#10;                    presenter.searchReminders(query);&#10;                    return true;&#10;                }&#10;&#10;                @Override&#10;                public boolean onQueryTextChange(String newText) {&#10;                    presenter.searchReminders(newText);&#10;                    return true;&#10;                }&#10;            });&#10;        }&#10;    }&#10;&#10;    private void updateFilterMenuItem(MenuItem item) {&#10;        if (showActiveOnly) {&#10;            item.setTitle(&quot;Hiển thị tất cả&quot;);&#10;            item.setIcon(R.drawable.ic_filter_list);&#10;        } else {&#10;            item.setTitle(&quot;Chỉ hiển thị đang hoạt động&quot;);&#10;            item.setIcon(R.drawable.ic_filter_list_off);&#10;        }&#10;    }&#10;&#10;    // Implement ReminderContract.View methods&#10;&#10;    @Override&#10;    public void showReminders(List&lt;Reminder&gt; reminders) {&#10;        if (adapter != null) {&#10;            adapter.updateReminders(reminders);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showLoading() {&#10;        if (loadingView != null) {&#10;            loadingView.setVisibility(View.VISIBLE);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void hideLoading() {&#10;        if (loadingView != null) {&#10;            loadingView.setVisibility(View.GONE);&#10;        }&#10;&#10;        if (swipeRefresh != null &amp;&amp; swipeRefresh.isRefreshing()) {&#10;            swipeRefresh.setRefreshing(false);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showError(String message) {&#10;        if (getContext() != null) {&#10;            Toast.makeText(getContext(), message, Toast.LENGTH_LONG).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showSuccess(String message) {&#10;        if (getContext() != null) {&#10;            Toast.makeText(getContext(), message, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showReminderDialog(Reminder reminder) {&#10;        ReminderDialog dialog = new ReminderDialog(getContext(), reminder, new ReminderDialog.OnReminderDialogListener() {&#10;            @Override&#10;            public void onReminderSaved(Reminder savedReminder) {&#10;                presenter.saveReminder(savedReminder);&#10;            }&#10;&#10;            @Override&#10;            public void onReminderCanceled() {&#10;                // Không làm gì&#10;            }&#10;        });&#10;        dialog.show();&#10;    }&#10;&#10;    @Override&#10;    public void showDeleteConfirmDialog(Reminder reminder) {&#10;        if (getContext() == null) return;&#10;&#10;        new AlertDialog.Builder(getContext())&#10;            .setTitle(&quot;Xác nhận xóa&quot;)&#10;            .setMessage(&quot;Bạn có chắc chắn muốn xóa nhắc nhở \&quot;&quot; + reminder.getTitle() + &quot;\&quot;?&quot;)&#10;            .setPositiveButton(&quot;Xóa&quot;, (dialog, which) -&gt; {&#10;                if (presenter != null) {&#10;                    ((ReminderPresenter) presenter).confirmDeleteReminder(reminder);&#10;                }&#10;            })&#10;            .setNegativeButton(&quot;Hủy&quot;, null)&#10;            .show();&#10;    }&#10;&#10;    @Override&#10;    public void updateReminderItem(Reminder reminder) {&#10;        if (adapter != null) {&#10;            adapter.updateReminder(reminder);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void removeReminderItem(Reminder reminder) {&#10;        if (adapter != null) {&#10;            adapter.removeReminder(reminder);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void addReminderItem(Reminder reminder) {&#10;        if (adapter != null) {&#10;            adapter.addReminder(reminder);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showEmptyState() {&#10;        if (emptyStateView != null) {&#10;            emptyStateView.setVisibility(View.VISIBLE);&#10;        }&#10;        if (recyclerView != null) {&#10;            recyclerView.setVisibility(View.GONE);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void hideEmptyState() {&#10;        if (emptyStateView != null) {&#10;            emptyStateView.setVisibility(View.GONE);&#10;        }&#10;        if (recyclerView != null) {&#10;            recyclerView.setVisibility(View.VISIBLE);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.reminder;&#10;&#10;import android.app.AlertDialog;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.Menu;&#10;import android.view.MenuInflater;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.Button;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.appcompat.widget.SearchView;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;&#10;&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.data.Reminder;&#10;import com.vhn.doan.data.repository.ReminderRepository;&#10;import com.vhn.doan.data.repository.ReminderRepositoryImpl;&#10;import com.vhn.doan.utils.UserSessionManager;&#10;import com.vhn.doan.presentation.base.BaseFragment;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;import javax.inject.Inject;&#10;&#10;/**&#10; * Fragment hiển thị danh sách nhắc nhở theo kiến trúc MVP&#10; */&#10;public class ReminderFragment extends BaseFragment implements ReminderContract.View {&#10;&#10;    private ReminderPresenter presenter;&#10;&#10;    // UI Components&#10;    private RecyclerView recyclerView;&#10;    private SwipeRefreshLayout swipeRefresh;&#10;    private FloatingActionButton fabAdd;&#10;    private View emptyStateView;&#10;    private View loadingView;&#10;&#10;    // Adapter&#10;    private ReminderAdapter adapter;&#10;&#10;    // Search&#10;    private SearchView searchView;&#10;    private boolean showActiveOnly = false;&#10;&#10;    public static ReminderFragment newInstance() {&#10;        return new ReminderFragment();&#10;    }&#10;&#10;    @Override&#10;    public void onCreate(@Nullable Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setHasOptionsMenu(true);&#10;&#10;        // Khởi tạo presenter thủ công thay vì dùng @Inject&#10;        initPresenter();&#10;    }&#10;&#10;    /**&#10;     * Khởi tạo presenter với các dependencies cần thiết&#10;     */&#10;    private void initPresenter() {&#10;        ReminderRepository reminderRepository = new ReminderRepositoryImpl();&#10;        UserSessionManager userSessionManager = new UserSessionManager(requireContext());&#10;        presenter = new ReminderPresenter(reminderRepository, userSessionManager);&#10;    }&#10;&#10;    @Nullable&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,&#10;                           @Nullable Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_reminder, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;&#10;        initViews(view);&#10;        setupRecyclerView();&#10;        setupListeners();&#10;&#10;        presenter.attachView(this);&#10;        presenter.start();&#10;    }&#10;&#10;    @Override&#10;    public void onDestroyView() {&#10;        super.onDestroyView();&#10;        if (presenter != null) {&#10;            presenter.detachView();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onCreateOptionsMenu(@NonNull Menu menu, @NonNull MenuInflater inflater) {&#10;        inflater.inflate(R.menu.menu_reminder, menu);&#10;&#10;        MenuItem searchItem = menu.findItem(R.id.action_search);&#10;        searchView = (SearchView) searchItem.getActionView();&#10;&#10;        setupSearchView();&#10;        super.onCreateOptionsMenu(menu, inflater);&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        int itemId = item.getItemId();&#10;&#10;        if (itemId == R.id.action_filter_active) {&#10;            showActiveOnly = !showActiveOnly;&#10;            updateFilterMenuItem(item);&#10;            presenter.filterReminders(showActiveOnly);&#10;            return true;&#10;        } else if (itemId == R.id.action_refresh) {&#10;            presenter.refreshReminders();&#10;            return true;&#10;        }&#10;&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;&#10;    @Override&#10;    protected void initViews(View view) {&#10;        recyclerView = view.findViewById(R.id.recycler_view_reminders);&#10;        swipeRefresh = view.findViewById(R.id.swipe_refresh_reminders);&#10;        fabAdd = view.findViewById(R.id.fab_add_reminder);&#10;        emptyStateView = view.findViewById(R.id.layout_empty_state);&#10;        loadingView = view.findViewById(R.id.layout_loading);&#10;        &#10;        // Setup button trong Empty State&#10;        Button btnCreateFirstReminder = view.findViewById(R.id.btn_create_first_reminder);&#10;        if (btnCreateFirstReminder != null) {&#10;            btnCreateFirstReminder.setOnClickListener(v -&gt; presenter.createReminder());&#10;        }&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        adapter = new ReminderAdapter(new ArrayList&lt;&gt;(), new ReminderAdapter.OnReminderItemClickListener() {&#10;            @Override&#10;            public void onReminderClick(Reminder reminder) {&#10;                presenter.editReminder(reminder);&#10;            }&#10;&#10;            @Override&#10;            public void onToggleClick(Reminder reminder) {&#10;                presenter.toggleReminder(reminder);&#10;            }&#10;&#10;            @Override&#10;            public void onDeleteClick(Reminder reminder) {&#10;                presenter.deleteReminder(reminder);&#10;            }&#10;        });&#10;&#10;        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));&#10;        recyclerView.setAdapter(adapter);&#10;    }&#10;&#10;    @Override&#10;    protected void setupListeners() {&#10;        // Setup các listeners cụ thể&#10;        setupSwipeRefresh();&#10;        setupFab();&#10;        if (searchView != null) {&#10;            setupSearchView();&#10;        }&#10;    }&#10;&#10;    private void setupSwipeRefresh() {&#10;        swipeRefresh.setOnRefreshListener(() -&gt; presenter.refreshReminders());&#10;        swipeRefresh.setColorSchemeResources(&#10;            R.color.primary_color,&#10;            R.color.primary_dark,&#10;            R.color.accent_color&#10;        );&#10;    }&#10;&#10;    private void setupFab() {&#10;        fabAdd.setOnClickListener(v -&gt; presenter.createReminder());&#10;    }&#10;&#10;    private void setupSearchView() {&#10;        if (searchView != null) {&#10;            searchView.setQueryHint(&quot;Tìm kiếm nhắc nhở...&quot;);&#10;            searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {&#10;                @Override&#10;                public boolean onQueryTextSubmit(String query) {&#10;                    presenter.searchReminders(query);&#10;                    return true;&#10;                }&#10;&#10;                @Override&#10;                public boolean onQueryTextChange(String newText) {&#10;                    presenter.searchReminders(newText);&#10;                    return true;&#10;                }&#10;            });&#10;        }&#10;    }&#10;&#10;    private void updateFilterMenuItem(MenuItem item) {&#10;        if (showActiveOnly) {&#10;            item.setTitle(&quot;Hiển thị tất cả&quot;);&#10;            item.setIcon(R.drawable.ic_filter_list);&#10;        } else {&#10;            item.setTitle(&quot;Chỉ hiển thị đang hoạt động&quot;);&#10;            item.setIcon(R.drawable.ic_filter_list_off);&#10;        }&#10;    }&#10;&#10;    // Implement ReminderContract.View methods&#10;&#10;    @Override&#10;    public void showReminders(List&lt;Reminder&gt; reminders) {&#10;        if (adapter != null) {&#10;            adapter.updateReminders(reminders);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showLoading() {&#10;        if (loadingView != null) {&#10;            loadingView.setVisibility(View.VISIBLE);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void hideLoading() {&#10;        if (loadingView != null) {&#10;            loadingView.setVisibility(View.GONE);&#10;        }&#10;&#10;        if (swipeRefresh != null &amp;&amp; swipeRefresh.isRefreshing()) {&#10;            swipeRefresh.setRefreshing(false);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showError(String message) {&#10;        if (getContext() != null) {&#10;            Toast.makeText(getContext(), message, Toast.LENGTH_LONG).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showSuccess(String message) {&#10;        if (getContext() != null) {&#10;            Toast.makeText(getContext(), message, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showReminderDialog(Reminder reminder) {&#10;        ReminderDialog dialog = new ReminderDialog(getContext(), reminder, new ReminderDialog.OnReminderDialogListener() {&#10;            @Override&#10;            public void onReminderSaved(Reminder savedReminder) {&#10;                presenter.saveReminder(savedReminder);&#10;            }&#10;&#10;            @Override&#10;            public void onReminderCanceled() {&#10;                // Không làm gì&#10;            }&#10;        });&#10;        dialog.show();&#10;    }&#10;&#10;    @Override&#10;    public void showDeleteConfirmDialog(Reminder reminder) {&#10;        if (getContext() == null) return;&#10;&#10;        new AlertDialog.Builder(getContext())&#10;            .setTitle(&quot;Xác nhận xóa&quot;)&#10;            .setMessage(&quot;Bạn có chắc chắn muốn xóa nhắc nhở \&quot;&quot; + reminder.getTitle() + &quot;\&quot;?&quot;)&#10;            .setPositiveButton(&quot;Xóa&quot;, (dialog, which) -&gt; {&#10;                if (presenter != null) {&#10;                    ((ReminderPresenter) presenter).confirmDeleteReminder(reminder);&#10;                }&#10;            })&#10;            .setNegativeButton(&quot;Hủy&quot;, null)&#10;            .show();&#10;    }&#10;&#10;    @Override&#10;    public void updateReminderItem(Reminder reminder) {&#10;        if (adapter != null) {&#10;            adapter.updateReminder(reminder);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void removeReminderItem(Reminder reminder) {&#10;        if (adapter != null) {&#10;            adapter.removeReminder(reminder);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void addReminderItem(Reminder reminder) {&#10;        if (adapter != null) {&#10;            adapter.addReminder(reminder);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showEmptyState() {&#10;        if (emptyStateView != null) {&#10;            emptyStateView.setVisibility(View.VISIBLE);&#10;        }&#10;        if (recyclerView != null) {&#10;            recyclerView.setVisibility(View.GONE);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void hideEmptyState() {&#10;        if (emptyStateView != null) {&#10;            emptyStateView.setVisibility(View.GONE);&#10;        }&#10;        if (recyclerView != null) {&#10;            recyclerView.setVisibility(View.VISIBLE);&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/reminder/ReminderPresenter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/reminder/ReminderPresenter.java" />
              <option name="originalContent" value="package com.vhn.doan.presentation.reminder;&#10;&#10;import com.vhn.doan.data.Reminder;&#10;import com.vhn.doan.data.repository.ReminderRepository;&#10;import com.vhn.doan.presentation.base.BaseView;&#10;import com.vhn.doan.utils.UserSessionManager;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;import javax.inject.Inject;&#10;&#10;/**&#10; * Presenter cho chức năng Reminder theo kiến trúc MVP&#10; */&#10;public class ReminderPresenter implements ReminderContract.Presenter {&#10;&#10;    private ReminderContract.View view;&#10;    private ReminderRepository reminderRepository;&#10;    private UserSessionManager userSessionManager;&#10;&#10;    private List&lt;Reminder&gt; allReminders;&#10;    private List&lt;Reminder&gt; filteredReminders;&#10;    private boolean isLoading = false;&#10;    private String currentSearchQuery = &quot;&quot;;&#10;    private boolean showActiveOnly = false;&#10;&#10;    @Inject&#10;    public ReminderPresenter(ReminderRepository reminderRepository, UserSessionManager userSessionManager) {&#10;        this.reminderRepository = reminderRepository;&#10;        this.userSessionManager = userSessionManager;&#10;        this.allReminders = new ArrayList&lt;&gt;();&#10;        this.filteredReminders = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    @Override&#10;    public void takeView(BaseView view) {&#10;        this.view = (ReminderContract.View) view;&#10;    }&#10;&#10;    @Override&#10;    public void dropView() {&#10;        this.view = null;&#10;    }&#10;&#10;    @Override&#10;    public void start() {&#10;        loadReminders();&#10;    }&#10;&#10;    @Override&#10;    public void loadReminders() {&#10;        if (isLoading) {&#10;            return;&#10;        }&#10;&#10;        if (view == null) {&#10;            return;&#10;        }&#10;&#10;        String userId = userSessionManager.getCurrentUserId();&#10;        if (userId == null || userId.isEmpty()) {&#10;            view.showError(&quot;Vui lòng đăng nhập để xem nhắc nhở&quot;);&#10;            return;&#10;        }&#10;&#10;        isLoading = true;&#10;        view.showLoading();&#10;&#10;        reminderRepository.getUserReminders(userId, new ReminderRepository.RepositoryCallback&lt;List&lt;Reminder&gt;&gt;() {&#10;            @Override&#10;            public void onSuccess(List&lt;Reminder&gt; reminders) {&#10;                isLoading = false;&#10;                if (view != null) {&#10;                    view.hideLoading();&#10;                    allReminders.clear();&#10;                    allReminders.addAll(reminders);&#10;&#10;                    applyFiltersAndSearch();&#10;&#10;                    if (filteredReminders.isEmpty()) {&#10;                        view.showEmptyState();&#10;                    } else {&#10;                        view.hideEmptyState();&#10;                        view.showReminders(filteredReminders);&#10;                    }&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                isLoading = false;&#10;                if (view != null) {&#10;                    view.hideLoading();&#10;                    view.showError(&quot;Lỗi khi tải nhắc nhở: &quot; + error);&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void createReminder() {&#10;        if (view != null) {&#10;            view.showReminderDialog(null);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void editReminder(Reminder reminder) {&#10;        if (view != null &amp;&amp; reminder != null) {&#10;            view.showReminderDialog(reminder);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void deleteReminder(Reminder reminder) {&#10;        if (view != null &amp;&amp; reminder != null) {&#10;            view.showDeleteConfirmDialog(reminder);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void saveReminder(Reminder reminder) {&#10;        if (view == null || reminder == null) {&#10;            return;&#10;        }&#10;&#10;        String userId = userSessionManager.getCurrentUserId();&#10;        if (userId == null || userId.isEmpty()) {&#10;            view.showError(&quot;Vui lòng đăng nhập để lưu nhắc nhở&quot;);&#10;            return;&#10;        }&#10;&#10;        reminder.setUserId(userId);&#10;        view.showLoading();&#10;&#10;        if (reminder.getId() == null || reminder.getId().isEmpty()) {&#10;            // Tạo mới&#10;            reminderRepository.addReminder(reminder, new ReminderRepository.RepositoryCallback&lt;String&gt;() {&#10;                @Override&#10;                public void onSuccess(String reminderId) {&#10;                    if (view != null) {&#10;                        view.hideLoading();&#10;                        view.showSuccess(&quot;Tạo nhắc nhở thành công&quot;);&#10;                        reminder.setId(reminderId);&#10;                        addReminderToList(reminder);&#10;                    }&#10;                }&#10;&#10;                @Override&#10;                public void onError(String error) {&#10;                    if (view != null) {&#10;                        view.hideLoading();&#10;                        view.showError(&quot;Lỗi khi tạo nhắc nhở: &quot; + error);&#10;                    }&#10;                }&#10;            });&#10;        } else {&#10;            // Cập nhật&#10;            reminderRepository.updateReminder(reminder, new ReminderRepository.RepositoryCallback&lt;Void&gt;() {&#10;                @Override&#10;                public void onSuccess(Void result) {&#10;                    if (view != null) {&#10;                        view.hideLoading();&#10;                        view.showSuccess(&quot;Cập nhật nhắc nhở thành công&quot;);&#10;                        updateReminderInList(reminder);&#10;                    }&#10;                }&#10;&#10;                @Override&#10;                public void onError(String error) {&#10;                    if (view != null) {&#10;                        view.hideLoading();&#10;                        view.showError(&quot;Lỗi khi cập nhật nhắc nhở: &quot; + error);&#10;                    }&#10;                }&#10;            });&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void toggleReminder(Reminder reminder) {&#10;        if (view == null || reminder == null) {&#10;            return;&#10;        }&#10;&#10;        boolean newStatus = !reminder.isActive();&#10;&#10;        reminderRepository.toggleReminder(reminder.getId(), newStatus, new ReminderRepository.RepositoryCallback&lt;Void&gt;() {&#10;            @Override&#10;            public void onSuccess(Void result) {&#10;                if (view != null) {&#10;                    reminder.setActive(newStatus);&#10;                    updateReminderInList(reminder);&#10;&#10;                    String message = newStatus ? &quot;Đã bật nhắc nhở&quot; : &quot;Đã tắt nhắc nhở&quot;;&#10;                    view.showSuccess(message);&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                if (view != null) {&#10;                    view.showError(&quot;Lỗi khi thay đổi trạng thái nhắc nhở: &quot; + error);&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void refreshReminders() {&#10;        loadReminders();&#10;    }&#10;&#10;    @Override&#10;    public void searchReminders(String query) {&#10;        currentSearchQuery = query != null ? query.trim() : &quot;&quot;;&#10;        applyFiltersAndSearch();&#10;&#10;        if (view != null) {&#10;            if (filteredReminders.isEmpty() &amp;&amp; !allReminders.isEmpty()) {&#10;                view.showEmptyState();&#10;            } else {&#10;                view.hideEmptyState();&#10;                view.showReminders(filteredReminders);&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void filterReminders(boolean activeOnly) {&#10;        showActiveOnly = activeOnly;&#10;        applyFiltersAndSearch();&#10;&#10;        if (view != null) {&#10;            if (filteredReminders.isEmpty() &amp;&amp; !allReminders.isEmpty()) {&#10;                view.showEmptyState();&#10;            } else {&#10;                view.hideEmptyState();&#10;                view.showReminders(filteredReminders);&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Xóa nhắc nhở sau khi xác nhận&#10;     */&#10;    public void confirmDeleteReminder(Reminder reminder) {&#10;        if (view == null || reminder == null) {&#10;            return;&#10;        }&#10;&#10;        view.showLoading();&#10;&#10;        reminderRepository.deleteReminder(reminder.getId(), new ReminderRepository.RepositoryCallback&lt;Void&gt;() {&#10;            @Override&#10;            public void onSuccess(Void result) {&#10;                if (view != null) {&#10;                    view.hideLoading();&#10;                    view.showSuccess(&quot;Xóa nhắc nhở thành công&quot;);&#10;                    removeReminderFromList(reminder);&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                if (view != null) {&#10;                    view.hideLoading();&#10;                    view.showError(&quot;Lỗi khi xóa nhắc nhở: &quot; + error);&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    /**&#10;     * Áp dụng bộ lọc và tìm kiếm&#10;     */&#10;    private void applyFiltersAndSearch() {&#10;        filteredReminders.clear();&#10;&#10;        for (Reminder reminder : allReminders) {&#10;            boolean matchesSearch = true;&#10;            boolean matchesFilter = true;&#10;&#10;            // Kiểm tra tìm kiếm&#10;            if (!currentSearchQuery.isEmpty()) {&#10;                String title = reminder.getTitle() != null ? reminder.getTitle().toLowerCase() : &quot;&quot;;&#10;                String description = reminder.getDescription() != null ? reminder.getDescription().toLowerCase() : &quot;&quot;;&#10;                String query = currentSearchQuery.toLowerCase();&#10;&#10;                matchesSearch = title.contains(query) || description.contains(query);&#10;            }&#10;&#10;            // Kiểm tra bộ lọc&#10;            if (showActiveOnly) {&#10;                matchesFilter = reminder.isActive();&#10;            }&#10;&#10;            if (matchesSearch &amp;&amp; matchesFilter) {&#10;                filteredReminders.add(reminder);&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Thêm reminder mới vào danh sách&#10;     */&#10;    private void addReminderToList(Reminder reminder) {&#10;        allReminders.add(0, reminder); // Thêm vào đầu danh sách&#10;        applyFiltersAndSearch();&#10;&#10;        if (view != null) {&#10;            if (filteredReminders.isEmpty()) {&#10;                view.showEmptyState();&#10;            } else {&#10;                view.hideEmptyState();&#10;                view.addReminderItem(reminder);&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Cập nhật reminder trong danh sách&#10;     */&#10;    private void updateReminderInList(Reminder updatedReminder) {&#10;        for (int i = 0; i &lt; allReminders.size(); i++) {&#10;            if (allReminders.get(i).getId().equals(updatedReminder.getId())) {&#10;                allReminders.set(i, updatedReminder);&#10;                break;&#10;            }&#10;        }&#10;&#10;        applyFiltersAndSearch();&#10;&#10;        if (view != null) {&#10;            view.updateReminderItem(updatedReminder);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Xóa reminder khỏi danh sách&#10;     */&#10;    private void removeReminderFromList(Reminder reminder) {&#10;        allReminders.removeIf(r -&gt; r.getId().equals(reminder.getId()));&#10;        filteredReminders.removeIf(r -&gt; r.getId().equals(reminder.getId()));&#10;&#10;        if (view != null) {&#10;            view.removeReminderItem(reminder);&#10;&#10;            if (filteredReminders.isEmpty()) {&#10;                view.showEmptyState();&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Lấy số lượng nhắc nhở đang hoạt động&#10;     */&#10;    public int getActiveReminderCount() {&#10;        int count = 0;&#10;        for (Reminder reminder : allReminders) {&#10;            if (reminder.isActive()) {&#10;                count++;&#10;            }&#10;        }&#10;        return count;&#10;    }&#10;&#10;    /**&#10;     * Lấy số lượng nhắc nhở tổng cộng&#10;     */&#10;    public int getTotalReminderCount() {&#10;        return allReminders.size();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.reminder;&#10;&#10;import com.vhn.doan.data.Reminder;&#10;import com.vhn.doan.data.repository.ReminderRepository;&#10;import com.vhn.doan.presentation.base.BasePresenter;&#10;import com.vhn.doan.utils.UserSessionManager;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;import javax.inject.Inject;&#10;&#10;/**&#10; * Presenter cho chức năng Reminder theo kiến trúc MVP&#10; */&#10;public class ReminderPresenter extends BasePresenter&lt;ReminderContract.View&gt; implements ReminderContract.Presenter {&#10;&#10;    private ReminderRepository reminderRepository;&#10;    private UserSessionManager userSessionManager;&#10;&#10;    private List&lt;Reminder&gt; allReminders;&#10;    private List&lt;Reminder&gt; filteredReminders;&#10;    private boolean isLoading = false;&#10;    private String currentSearchQuery = &quot;&quot;;&#10;    private boolean showActiveOnly = false;&#10;&#10;    @Inject&#10;    public ReminderPresenter(ReminderRepository reminderRepository, UserSessionManager userSessionManager) {&#10;        this.reminderRepository = reminderRepository;&#10;        this.userSessionManager = userSessionManager;&#10;        this.allReminders = new ArrayList&lt;&gt;();&#10;        this.filteredReminders = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    @Override&#10;    public void attachView(ReminderContract.View view) {&#10;        super.attachView(view);&#10;    }&#10;&#10;    @Override&#10;    public void start() {&#10;        loadReminders();&#10;    }&#10;&#10;    @Override&#10;    public void loadReminders() {&#10;        if (isLoading) {&#10;            return;&#10;        }&#10;&#10;        if (!isViewAttached()) {&#10;            return;&#10;        }&#10;&#10;        String userId = userSessionManager.getCurrentUserId();&#10;        if (userId == null || userId.isEmpty()) {&#10;            view.showError(&quot;Vui lòng đăng nhập để xem nhắc nhở&quot;);&#10;            return;&#10;        }&#10;&#10;        isLoading = true;&#10;        view.showLoading();&#10;&#10;        reminderRepository.getUserReminders(userId, new ReminderRepository.RepositoryCallback&lt;List&lt;Reminder&gt;&gt;() {&#10;            @Override&#10;            public void onSuccess(List&lt;Reminder&gt; reminders) {&#10;                isLoading = false;&#10;                if (isViewAttached()) {&#10;                    view.hideLoading();&#10;                    allReminders.clear();&#10;                    allReminders.addAll(reminders);&#10;&#10;                    applyFiltersAndSearch();&#10;&#10;                    if (filteredReminders.isEmpty()) {&#10;                        view.showEmptyState();&#10;                    } else {&#10;                        view.hideEmptyState();&#10;                        view.showReminders(filteredReminders);&#10;                    }&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                isLoading = false;&#10;                if (isViewAttached()) {&#10;                    view.hideLoading();&#10;                    view.showError(&quot;Lỗi khi tải nhắc nhở: &quot; + error);&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void createReminder() {&#10;        if (isViewAttached()) {&#10;            view.showReminderDialog(null);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void editReminder(Reminder reminder) {&#10;        if (isViewAttached() &amp;&amp; reminder != null) {&#10;            view.showReminderDialog(reminder);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void deleteReminder(Reminder reminder) {&#10;        if (isViewAttached() &amp;&amp; reminder != null) {&#10;            view.showDeleteConfirmDialog(reminder);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void saveReminder(Reminder reminder) {&#10;        if (!isViewAttached() || reminder == null) {&#10;            return;&#10;        }&#10;&#10;        String userId = userSessionManager.getCurrentUserId();&#10;        if (userId == null || userId.isEmpty()) {&#10;            view.showError(&quot;Vui lòng đăng nhập để lưu nhắc nhở&quot;);&#10;            return;&#10;        }&#10;&#10;        reminder.setUserId(userId);&#10;        view.showLoading();&#10;&#10;        if (reminder.getId() == null || reminder.getId().isEmpty()) {&#10;            // Tạo mới&#10;            reminderRepository.addReminder(reminder, new ReminderRepository.RepositoryCallback&lt;String&gt;() {&#10;                @Override&#10;                public void onSuccess(String reminderId) {&#10;                    if (isViewAttached()) {&#10;                        view.hideLoading();&#10;                        view.showSuccess(&quot;Tạo nhắc nhở thành công&quot;);&#10;                        reminder.setId(reminderId);&#10;                        addReminderToList(reminder);&#10;                    }&#10;                }&#10;&#10;                @Override&#10;                public void onError(String error) {&#10;                    if (isViewAttached()) {&#10;                        view.hideLoading();&#10;                        view.showError(&quot;Lỗi khi tạo nhắc nhở: &quot; + error);&#10;                    }&#10;                }&#10;            });&#10;        } else {&#10;            // Cập nhật&#10;            reminderRepository.updateReminder(reminder, new ReminderRepository.RepositoryCallback&lt;Void&gt;() {&#10;                @Override&#10;                public void onSuccess(Void result) {&#10;                    if (isViewAttached()) {&#10;                        view.hideLoading();&#10;                        view.showSuccess(&quot;Cập nhật nhắc nhở thành công&quot;);&#10;                        updateReminderInList(reminder);&#10;                    }&#10;                }&#10;&#10;                @Override&#10;                public void onError(String error) {&#10;                    if (isViewAttached()) {&#10;                        view.hideLoading();&#10;                        view.showError(&quot;Lỗi khi cập nhật nhắc nhở: &quot; + error);&#10;                    }&#10;                }&#10;            });&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void toggleReminder(Reminder reminder) {&#10;        if (!isViewAttached() || reminder == null) {&#10;            return;&#10;        }&#10;&#10;        boolean newStatus = !reminder.isActive();&#10;&#10;        reminderRepository.toggleReminder(reminder.getId(), newStatus, new ReminderRepository.RepositoryCallback&lt;Void&gt;() {&#10;            @Override&#10;            public void onSuccess(Void result) {&#10;                if (isViewAttached()) {&#10;                    reminder.setActive(newStatus);&#10;                    updateReminderInList(reminder);&#10;&#10;                    String message = newStatus ? &quot;Đã bật nhắc nhở&quot; : &quot;Đã tắt nhắc nhở&quot;;&#10;                    view.showSuccess(message);&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                if (isViewAttached()) {&#10;                    view.showError(&quot;Lỗi khi thay đổi trạng thái nhắc nhở: &quot; + error);&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void refreshReminders() {&#10;        loadReminders();&#10;    }&#10;&#10;    @Override&#10;    public void searchReminders(String query) {&#10;        currentSearchQuery = query != null ? query.trim() : &quot;&quot;;&#10;        applyFiltersAndSearch();&#10;&#10;        if (isViewAttached()) {&#10;            if (filteredReminders.isEmpty() &amp;&amp; !allReminders.isEmpty()) {&#10;                view.showEmptyState();&#10;            } else {&#10;                view.hideEmptyState();&#10;                view.showReminders(filteredReminders);&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void filterReminders(boolean activeOnly) {&#10;        showActiveOnly = activeOnly;&#10;        applyFiltersAndSearch();&#10;&#10;        if (isViewAttached()) {&#10;            if (filteredReminders.isEmpty() &amp;&amp; !allReminders.isEmpty()) {&#10;                view.showEmptyState();&#10;            } else {&#10;                view.hideEmptyState();&#10;                view.showReminders(filteredReminders);&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Xóa nhắc nhở sau khi xác nhận&#10;     */&#10;    public void confirmDeleteReminder(Reminder reminder) {&#10;        if (!isViewAttached() || reminder == null) {&#10;            return;&#10;        }&#10;&#10;        view.showLoading();&#10;&#10;        reminderRepository.deleteReminder(reminder.getId(), new ReminderRepository.RepositoryCallback&lt;Void&gt;() {&#10;            @Override&#10;            public void onSuccess(Void result) {&#10;                if (isViewAttached()) {&#10;                    view.hideLoading();&#10;                    view.showSuccess(&quot;Xóa nhắc nhở thành công&quot;);&#10;                    removeReminderFromList(reminder);&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                if (isViewAttached()) {&#10;                    view.hideLoading();&#10;                    view.showError(&quot;Lỗi khi xóa nhắc nhở: &quot; + error);&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    /**&#10;     * Áp dụng bộ lọc và tìm kiếm&#10;     */&#10;    private void applyFiltersAndSearch() {&#10;        filteredReminders.clear();&#10;&#10;        for (Reminder reminder : allReminders) {&#10;            boolean matchesSearch = true;&#10;            boolean matchesFilter = true;&#10;&#10;            // Kiểm tra tìm kiếm&#10;            if (!currentSearchQuery.isEmpty()) {&#10;                String title = reminder.getTitle() != null ? reminder.getTitle().toLowerCase() : &quot;&quot;;&#10;                String description = reminder.getDescription() != null ? reminder.getDescription().toLowerCase() : &quot;&quot;;&#10;                String query = currentSearchQuery.toLowerCase();&#10;&#10;                matchesSearch = title.contains(query) || description.contains(query);&#10;            }&#10;&#10;            // Kiểm tra bộ lọc&#10;            if (showActiveOnly) {&#10;                matchesFilter = reminder.isActive();&#10;            }&#10;&#10;            if (matchesSearch &amp;&amp; matchesFilter) {&#10;                filteredReminders.add(reminder);&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Thêm reminder mới vào danh sách&#10;     */&#10;    private void addReminderToList(Reminder reminder) {&#10;        allReminders.add(0, reminder); // Thêm vào đầu danh sách&#10;        applyFiltersAndSearch();&#10;&#10;        if (isViewAttached()) {&#10;            if (filteredReminders.isEmpty()) {&#10;                view.showEmptyState();&#10;            } else {&#10;                view.hideEmptyState();&#10;                view.addReminderItem(reminder);&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Cập nhật reminder trong danh sách&#10;     */&#10;    private void updateReminderInList(Reminder updatedReminder) {&#10;        for (int i = 0; i &lt; allReminders.size(); i++) {&#10;            if (allReminders.get(i).getId().equals(updatedReminder.getId())) {&#10;                allReminders.set(i, updatedReminder);&#10;                break;&#10;            }&#10;        }&#10;&#10;        applyFiltersAndSearch();&#10;&#10;        if (isViewAttached()) {&#10;            view.updateReminderItem(updatedReminder);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Xóa reminder khỏi danh sách&#10;     */&#10;    private void removeReminderFromList(Reminder reminder) {&#10;        allReminders.removeIf(r -&gt; r.getId().equals(reminder.getId()));&#10;        filteredReminders.removeIf(r -&gt; r.getId().equals(reminder.getId()));&#10;&#10;        if (isViewAttached()) {&#10;            view.removeReminderItem(reminder);&#10;&#10;            if (filteredReminders.isEmpty()) {&#10;                view.showEmptyState();&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Lấy số lượng nhắc nhở đang hoạt động&#10;     */&#10;    public int getActiveReminderCount() {&#10;        int count = 0;&#10;        for (Reminder reminder : allReminders) {&#10;            if (reminder.isActive()) {&#10;                count++;&#10;            }&#10;        }&#10;        return count;&#10;    }&#10;&#10;    /**&#10;     * Lấy số lượng nhắc nhở tổng cộng&#10;     */&#10;    public int getTotalReminderCount() {&#10;        return allReminders.size();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/utils/UserSessionManager.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/utils/UserSessionManager.java" />
              <option name="updatedContent" value="package com.vhn.doan.utils;&#10;&#10;import android.content.Context;&#10;import android.content.SharedPreferences;&#10;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.auth.FirebaseUser;&#10;&#10;/**&#10; * Quản lý phiên đăng nhập của người dùng&#10; */&#10;public class UserSessionManager {&#10;    &#10;    private static final String PREF_NAME = &quot;user_session&quot;;&#10;    private static final String KEY_USER_ID = &quot;user_id&quot;;&#10;    private static final String KEY_USER_EMAIL = &quot;user_email&quot;;&#10;    private static final String KEY_USER_NAME = &quot;user_name&quot;;&#10;    private static final String KEY_IS_LOGGED_IN = &quot;is_logged_in&quot;;&#10;    &#10;    private SharedPreferences sharedPreferences;&#10;    private SharedPreferences.Editor editor;&#10;    private Context context;&#10;    private FirebaseAuth firebaseAuth;&#10;    &#10;    public UserSessionManager(Context context) {&#10;        this.context = context;&#10;        this.sharedPreferences = context.getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE);&#10;        this.editor = sharedPreferences.edit();&#10;        this.firebaseAuth = FirebaseAuth.getInstance();&#10;    }&#10;    &#10;    /**&#10;     * Lưu thông tin phiên đăng nhập&#10;     */&#10;    public void createLoginSession(String userId, String email, String name) {&#10;        editor.putString(KEY_USER_ID, userId);&#10;        editor.putString(KEY_USER_EMAIL, email);&#10;        editor.putString(KEY_USER_NAME, name);&#10;        editor.putBoolean(KEY_IS_LOGGED_IN, true);&#10;        editor.apply();&#10;    }&#10;    &#10;    /**&#10;     * Kiểm tra trạng thái đăng nhập&#10;     */&#10;    public boolean isLoggedIn() {&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#10;        return currentUser != null &amp;&amp; sharedPreferences.getBoolean(KEY_IS_LOGGED_IN, false);&#10;    }&#10;    &#10;    /**&#10;     * Lấy ID người dùng hiện tại&#10;     */&#10;    public String getCurrentUserId() {&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#10;        if (currentUser != null) {&#10;            return currentUser.getUid();&#10;        }&#10;        return sharedPreferences.getString(KEY_USER_ID, null);&#10;    }&#10;    &#10;    /**&#10;     * Lấy email người dùng hiện tại&#10;     */&#10;    public String getCurrentUserEmail() {&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#10;        if (currentUser != null) {&#10;            return currentUser.getEmail();&#10;        }&#10;        return sharedPreferences.getString(KEY_USER_EMAIL, null);&#10;    }&#10;    &#10;    /**&#10;     * Lấy tên người dùng hiện tại&#10;     */&#10;    public String getCurrentUserName() {&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#10;        if (currentUser != null) {&#10;            return currentUser.getDisplayName();&#10;        }&#10;        return sharedPreferences.getString(KEY_USER_NAME, null);&#10;    }&#10;    &#10;    /**&#10;     * Xóa phiên đăng nhập&#10;     */&#10;    public void logoutUser() {&#10;        editor.clear();&#10;        editor.apply();&#10;        firebaseAuth.signOut();&#10;    }&#10;    &#10;    /**&#10;     * Cập nhật thông tin người dùng&#10;     */&#10;    public void updateUserInfo(String name) {&#10;        editor.putString(KEY_USER_NAME, name);&#10;        editor.apply();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/bg_reminder_due.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/bg_reminder_due.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &#10;    &lt;!-- Màu nền nhấn mạnh cho nhắc nhở đã đến giờ --&gt;&#10;    &lt;solid android:color=&quot;#1AFF5722&quot; /&gt;&#10;    &#10;    &lt;!-- Bo góc --&gt;&#10;    &lt;corners android:radius=&quot;8dp&quot; /&gt;&#10;    &#10;    &lt;!-- Đường viền đỏ cam để làm nổi bật --&gt;&#10;    &lt;stroke&#10;        android:width=&quot;2dp&quot;&#10;        android:color=&quot;@color/status_due&quot; /&gt;&#10;        &#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/bg_reminder_normal.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/bg_reminder_normal.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &#10;    &lt;!-- Màu nền bình thường --&gt;&#10;    &lt;solid android:color=&quot;@android:color/transparent&quot; /&gt;&#10;    &#10;    &lt;!-- Bo góc --&gt;&#10;    &lt;corners android:radius=&quot;8dp&quot; /&gt;&#10;    &#10;    &lt;!-- Đường viền nhẹ --&gt;&#10;    &lt;stroke&#10;        android:width=&quot;1dp&quot;&#10;        android:color=&quot;@color/divider_color&quot; /&gt;&#10;        &#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/bg_repeat_type.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/bg_repeat_type.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &#10;    &lt;!-- Màu nền trong suốt với tông màu chính --&gt;&#10;    &lt;solid android:color=&quot;#1A4CAF50&quot; /&gt;&#10;    &#10;    &lt;!-- Bo góc tròn --&gt;&#10;    &lt;corners android:radius=&quot;12dp&quot; /&gt;&#10;    &#10;    &lt;!-- Đường viền màu chính --&gt;&#10;    &lt;stroke&#10;        android:width=&quot;1dp&quot;&#10;        android:color=&quot;@color/primary_color&quot; /&gt;&#10;        &#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_add.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_add.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M19,13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_delete.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_delete.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M6,19c0,1.1 0.9,2 2,2h8c1.1,0 2,-0.9 2,-2V7H6v12zM19,4h-3.5l-1,-1h-5l-1,1H5v2h14V4z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_filter_list.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_filter_list.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M10,18h4v-2h-4v2zM3,6v2h18L21,6L3,6zM6,13h12v-2L6,11v2z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_filter_list_off.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_filter_list_off.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M10.83,8H21V6H8.83l2,2zM12.83,12H21v-2H10.83l2,2zM14.83,16H21v-2h-4.17l2,2zM2.81,2.81L1.39,4.22l4.44,4.44H3v2h4.83l2,2H6v2h5.83l2,2H10v2h5.83l1.95,1.95l1.41-1.41L2.81,2.81z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_refresh.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_refresh.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M17.65,6.35C16.2,4.9 14.21,4 12,4c-4.42,0 -7.99,3.58 -7.99,8s3.57,8 7.99,8c3.73,0 6.84,-2.55 7.73,-6h-2.08c-0.82,2.33 -3.04,4 -5.65,4 -3.31,0 -6,-2.69 -6,-6s2.69,-6 6,-6c1.66,0 3.14,0.69 4.22,1.78L13,11h7V4l-2.35,2.35z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_reminder_empty.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_reminder_empty.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M22,5.72l-4.6,-3.86 -1.29,1.53 4.6,3.86L22,5.72zM7.88,3.39L6.6,1.86 2,5.71l1.29,1.53 4.59,-3.85zM12.5,8L11,8v6l4.75,2.85 0.75,-1.23 -4,-2.37L12.5,8zM12,4c-4.97,0 -9,4.03 -9,9s4.02,9 9,9c4.97,0 9,-4.03 9,-9s-4.03,-9 -9,-9zM12,20c-3.87,0 -7,-3.13 -7,-7s3.13,-7 7,-7 7,3.13 7,7 -3.13,7 -7,7z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_schedule.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_schedule.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M11.99,2C6.47,2 2,6.48 2,12s4.47,10 9.99,10C17.52,22 22,17.52 22,12S17.52,2 11.99,2zM12,20c-4.42,0 -8,-3.58 -8,-8s3.58,-8 8,-8 8,3.58 8,8 -3.58,8 -8,8zM12.5,7H11v6l5.25,3.15 0.75,-1.23 -4.5,-2.67z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_search.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_search.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M15.5,14h-0.79l-0.28,-0.27C15.41,12.59 16,11.11 16,9.5 16,5.91 13.09,3 9.5,3S3,5.91 3,9.5 5.91,16 9.5,16c1.61,0 3.09,-0.59 4.23,-1.57l0.27,0.28v0.79l5,4.99L20.49,19l-4.99,-5zM9.5,14C7.01,14 5,11.99 5,9.5S7.01,5 9.5,5 14,7.01 14,9.5 11.99,14 9.5,14z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/dialog_reminder.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/dialog_reminder.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:padding=&quot;16dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;        &lt;!-- Tiêu đề nhắc nhở --&gt;&#10;        &lt;com.google.android.material.textfield.TextInputLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            app:boxStrokeColor=&quot;@color/primary_color&quot;&#10;            app:hintTextColor=&quot;@color/primary_color&quot;&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputEditText&#10;                android:id=&quot;@+id/et_reminder_title&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:hint=&quot;Tiêu đề nhắc nhở&quot;&#10;                android:inputType=&quot;text&quot;&#10;                android:maxLines=&quot;1&quot; /&gt;&#10;&#10;        &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;        &lt;!-- Mô tả nhắc nhở --&gt;&#10;        &lt;com.google.android.material.textfield.TextInputLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            app:boxStrokeColor=&quot;@color/primary_color&quot;&#10;            app:hintTextColor=&quot;@color/primary_color&quot;&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputEditText&#10;                android:id=&quot;@+id/et_reminder_description&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:hint=&quot;Mô tả (tùy chọn)&quot;&#10;                android:inputType=&quot;textMultiLine&quot;&#10;                android:maxLines=&quot;3&quot; /&gt;&#10;&#10;        &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;        &lt;!-- Chọn ngày --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;12dp&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;Ngày:&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tv_selected_date&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginEnd=&quot;8dp&quot;&#10;                android:text=&quot;--/--/----&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textColor=&quot;@color/primary_color&quot; /&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btn_select_date&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Button.OutlinedButton&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Chọn&quot;&#10;                android:textSize=&quot;12sp&quot;&#10;                app:strokeColor=&quot;@color/primary_color&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Chọn thời gian --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;Thời gian:&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tv_selected_time&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginEnd=&quot;8dp&quot;&#10;                android:text=&quot;--:--&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textColor=&quot;@color/primary_color&quot; /&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btn_select_time&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Button.OutlinedButton&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Chọn&quot;&#10;                android:textSize=&quot;12sp&quot;&#10;                app:strokeColor=&quot;@color/primary_color&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Loại lặp lại --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;Lặp lại:&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;            &lt;Spinner&#10;                android:id=&quot;@+id/sp_repeat_type&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:minWidth=&quot;120dp&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Trạng thái hoạt động --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;24dp&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;Kích hoạt nhắc nhở:&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;            &lt;Switch&#10;                android:id=&quot;@+id/sw_reminder_active&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:checked=&quot;true&quot;&#10;                android:thumbTint=&quot;@color/primary_color&quot;&#10;                android:trackTint=&quot;@color/primary_light&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Divider --&gt;&#10;        &lt;View&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;1dp&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            android:background=&quot;@color/divider_color&quot; /&gt;&#10;&#10;        &lt;!-- Buttons --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;end&quot;&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btn_cancel_reminder&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Button.TextButton&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginEnd=&quot;8dp&quot;&#10;                android:text=&quot;Hủy&quot;&#10;                android:textColor=&quot;@color/text_secondary&quot; /&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btn_save_reminder&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Button&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Lưu&quot;&#10;                android:backgroundTint=&quot;@color/primary_color&quot;&#10;                android:textColor=&quot;@android:color/white&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/ScrollView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_reminder.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_reminder.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@color/background_color&quot;&gt;&#10;&#10;    &lt;!-- SwipeRefreshLayout chứa RecyclerView --&gt;&#10;    &lt;androidx.swiperefreshlayout.widget.SwipeRefreshLayout&#10;        android:id=&quot;@+id/swipe_refresh_reminders&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;        &lt;!-- RecyclerView hiển thị danh sách nhắc nhở --&gt;&#10;        &lt;androidx.recyclerview.widget.RecyclerView&#10;            android:id=&quot;@+id/recycler_view_reminders&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:clipToPadding=&quot;false&quot;&#10;            android:paddingTop=&quot;8dp&quot;&#10;            android:paddingBottom=&quot;80dp&quot;&#10;            android:scrollbars=&quot;vertical&quot;&#10;            tools:listitem=&quot;@layout/item_reminder&quot; /&gt;&#10;&#10;    &lt;/androidx.swiperefreshlayout.widget.SwipeRefreshLayout&gt;&#10;&#10;    &lt;!-- Loading State --&gt;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/layout_loading&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:visibility=&quot;gone&quot;&gt;&#10;&#10;        &lt;ProgressBar&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:indeterminateTint=&quot;@color/primary_color&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:text=&quot;Đang tải nhắc nhở...&quot;&#10;            android:textColor=&quot;@color/text_secondary&quot;&#10;            android:textSize=&quot;16sp&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Empty State --&gt;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/layout_empty_state&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;32dp&quot;&#10;        android:visibility=&quot;gone&quot;&gt;&#10;&#10;        &lt;ImageView&#10;            android:layout_width=&quot;120dp&quot;&#10;            android:layout_height=&quot;120dp&quot;&#10;            android:layout_marginBottom=&quot;24dp&quot;&#10;            android:alpha=&quot;0.6&quot;&#10;            android:src=&quot;@drawable/ic_reminder_empty&quot;&#10;            android:tint=&quot;@color/text_secondary&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;8dp&quot;&#10;            android:text=&quot;Chưa có nhắc nhở nào&quot;&#10;            android:textColor=&quot;@color/text_primary&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;24dp&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:text=&quot;Tạo nhắc nhở mới để theo dõi các hoạt động sức khỏe của bạn&quot;&#10;            android:textColor=&quot;@color/text_secondary&quot;&#10;            android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;        &lt;Button&#10;            style=&quot;@style/Widget.MaterialComponents.Button&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:backgroundTint=&quot;@color/primary_color&quot;&#10;            android:onClick=&quot;onCreateReminderClick&quot;&#10;            android:text=&quot;Tạo nhắc nhở đầu tiên&quot;&#10;            android:textColor=&quot;@android:color/white&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Floating Action Button --&gt;&#10;    &lt;com.google.android.material.floatingactionbutton.FloatingActionButton&#10;        android:id=&quot;@+id/fab_add_reminder&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_gravity=&quot;bottom|end&quot;&#10;        android:layout_margin=&quot;16dp&quot;&#10;        android:contentDescription=&quot;Thêm nhắc nhở mới&quot;&#10;        android:src=&quot;@drawable/ic_add&quot;&#10;        app:backgroundTint=&quot;@color/primary_color&quot;&#10;        app:tint=&quot;@android:color/white&quot; /&gt;&#10;&#10;&lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#13;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#13;&#10;    android:layout_width=&quot;match_parent&quot;&#13;&#10;    android:layout_height=&quot;match_parent&quot;&#13;&#10;    android:background=&quot;@color/background_color&quot;&gt;&#13;&#10;&#13;&#10;    &lt;!-- SwipeRefreshLayout chứa RecyclerView --&gt;&#13;&#10;    &lt;androidx.swiperefreshlayout.widget.SwipeRefreshLayout&#13;&#10;        android:id=&quot;@+id/swipe_refresh_reminders&quot;&#13;&#10;        android:layout_width=&quot;match_parent&quot;&#13;&#10;        android:layout_height=&quot;match_parent&quot;&gt;&#13;&#10;&#13;&#10;        &lt;!-- RecyclerView hiển thị danh sách nhắc nhở --&gt;&#13;&#10;        &lt;androidx.recyclerview.widget.RecyclerView&#13;&#10;            android:id=&quot;@+id/recycler_view_reminders&quot;&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;match_parent&quot;&#13;&#10;            android:clipToPadding=&quot;false&quot;&#13;&#10;            android:paddingTop=&quot;8dp&quot;&#13;&#10;            android:paddingBottom=&quot;80dp&quot;&#13;&#10;            android:scrollbars=&quot;vertical&quot;&#13;&#10;            tools:listitem=&quot;@layout/item_reminder&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;/androidx.swiperefreshlayout.widget.SwipeRefreshLayout&gt;&#13;&#10;&#13;&#10;    &lt;!-- Loading State --&gt;&#13;&#10;    &lt;LinearLayout&#13;&#10;        android:id=&quot;@+id/layout_loading&quot;&#13;&#10;        android:layout_width=&quot;match_parent&quot;&#13;&#10;        android:layout_height=&quot;match_parent&quot;&#13;&#10;        android:gravity=&quot;center&quot;&#13;&#10;        android:orientation=&quot;vertical&quot;&#13;&#10;        android:visibility=&quot;gone&quot;&gt;&#13;&#10;&#13;&#10;        &lt;ProgressBar&#13;&#10;            android:layout_width=&quot;wrap_content&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:indeterminateTint=&quot;@color/primary_color&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;TextView&#13;&#10;            android:layout_width=&quot;wrap_content&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:layout_marginTop=&quot;16dp&quot;&#13;&#10;            android:text=&quot;Đang tải nhắc nhở...&quot;&#13;&#10;            android:textColor=&quot;@color/text_secondary&quot;&#13;&#10;            android:textSize=&quot;16sp&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;/LinearLayout&gt;&#13;&#10;&#13;&#10;    &lt;!-- Empty State --&gt;&#13;&#10;    &lt;LinearLayout&#13;&#10;        android:id=&quot;@+id/layout_empty_state&quot;&#13;&#10;        android:layout_width=&quot;match_parent&quot;&#13;&#10;        android:layout_height=&quot;match_parent&quot;&#13;&#10;        android:gravity=&quot;center&quot;&#13;&#10;        android:orientation=&quot;vertical&quot;&#13;&#10;        android:padding=&quot;32dp&quot;&#13;&#10;        android:visibility=&quot;gone&quot;&gt;&#13;&#10;&#13;&#10;        &lt;ImageView&#13;&#10;            android:layout_width=&quot;120dp&quot;&#13;&#10;            android:layout_height=&quot;120dp&quot;&#13;&#10;            android:layout_marginBottom=&quot;24dp&quot;&#13;&#10;            android:alpha=&quot;0.6&quot;&#13;&#10;            android:src=&quot;@drawable/ic_reminder_empty&quot;&#13;&#10;            android:tint=&quot;@color/text_secondary&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;TextView&#13;&#10;            android:layout_width=&quot;wrap_content&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:layout_marginBottom=&quot;8dp&quot;&#13;&#10;            android:text=&quot;Chưa có nhắc nhở nào&quot;&#13;&#10;            android:textColor=&quot;@color/text_primary&quot;&#13;&#10;            android:textSize=&quot;18sp&quot;&#13;&#10;            android:textStyle=&quot;bold&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;TextView&#13;&#10;            android:layout_width=&quot;wrap_content&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:layout_marginBottom=&quot;24dp&quot;&#13;&#10;            android:gravity=&quot;center&quot;&#13;&#10;            android:text=&quot;Tạo nhắc nhở mới để theo dõi các hoạt động sức khỏe của bạn&quot;&#13;&#10;            android:textColor=&quot;@color/text_secondary&quot;&#13;&#10;            android:textSize=&quot;14sp&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;Button&#13;&#10;            android:id=&quot;@+id/btn_create_first_reminder&quot;&#13;&#10;            style=&quot;@style/Widget.MaterialComponents.Button&quot;&#13;&#10;            android:layout_width=&quot;wrap_content&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:backgroundTint=&quot;@color/primary_color&quot;&#13;&#10;            android:text=&quot;Tạo nhắc nhở đầu tiên&quot;&#13;&#10;            android:textColor=&quot;@android:color/white&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;/LinearLayout&gt;&#13;&#10;&#13;&#10;    &lt;!-- Floating Action Button --&gt;&#13;&#10;    &lt;com.google.android.material.floatingactionbutton.FloatingActionButton&#13;&#10;        android:id=&quot;@+id/fab_add_reminder&quot;&#13;&#10;        android:layout_width=&quot;wrap_content&quot;&#13;&#10;        android:layout_height=&quot;wrap_content&quot;&#13;&#10;        android:layout_gravity=&quot;bottom|end&quot;&#13;&#10;        android:layout_margin=&quot;16dp&quot;&#13;&#10;        android:contentDescription=&quot;Thêm nhắc nhở mới&quot;&#13;&#10;        android:src=&quot;@drawable/ic_add&quot;&#13;&#10;        app:backgroundTint=&quot;@color/primary_color&quot;&#13;&#10;        app:tint=&quot;@android:color/white&quot; /&gt;&#13;&#10;&#13;&#10;&lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_reminder.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_reminder.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.cardview.widget.CardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_margin=&quot;8dp&quot;&#10;    app:cardCornerRadius=&quot;8dp&quot;&#10;    app:cardElevation=&quot;2dp&quot;&#10;    android:foreground=&quot;?android:attr/selectableItemBackground&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;!-- Status Indicator --&gt;&#10;        &lt;View&#10;            android:id=&quot;@+id/view_status_indicator&quot;&#10;            android:layout_width=&quot;4dp&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:layout_marginEnd=&quot;12dp&quot;&#10;            android:background=&quot;@color/status_active&quot; /&gt;&#10;&#10;        &lt;!-- Content --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:orientation=&quot;vertical&quot;&gt;&#10;&#10;            &lt;!-- Title --&gt;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tv_reminder_title&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginBottom=&quot;4dp&quot;&#10;                android:textColor=&quot;@color/text_primary&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                tools:text=&quot;Uống thuốc huyết áp&quot; /&gt;&#10;&#10;            &lt;!-- Description --&gt;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tv_reminder_description&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot;&#10;                android:textColor=&quot;@color/text_secondary&quot;&#10;                android:textSize=&quot;14sp&quot;&#10;                android:visibility=&quot;gone&quot;&#10;                tools:text=&quot;Nhớ uống thuốc huyết áp sau bữa sáng&quot;&#10;                tools:visibility=&quot;visible&quot; /&gt;&#10;&#10;            &lt;!-- Date Time and Repeat Info --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&#10;                android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;                &lt;ImageView&#10;                    android:layout_width=&quot;16dp&quot;&#10;                    android:layout_height=&quot;16dp&quot;&#10;                    android:layout_marginEnd=&quot;4dp&quot;&#10;                    android:src=&quot;@drawable/ic_schedule&quot;&#10;                    android:tint=&quot;@color/text_secondary&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tv_reminder_datetime&quot;&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:textColor=&quot;@color/text_secondary&quot;&#10;                    android:textSize=&quot;12sp&quot;&#10;                    tools:text=&quot;25/01/2025 08:00&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tv_repeat_type&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginStart=&quot;8dp&quot;&#10;                    android:background=&quot;@drawable/bg_repeat_type&quot;&#10;                    android:paddingHorizontal=&quot;8dp&quot;&#10;                    android:paddingVertical=&quot;2dp&quot;&#10;                    android:textColor=&quot;@color/primary_color&quot;&#10;                    android:textSize=&quot;10sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    tools:text=&quot;HÀNG NGÀY&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Controls --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginStart=&quot;8dp&quot;&#10;            android:gravity=&quot;center_vertical&quot;&#10;            android:orientation=&quot;vertical&quot;&gt;&#10;&#10;            &lt;!-- Active Switch --&gt;&#10;            &lt;Switch&#10;                android:id=&quot;@+id/sw_reminder_active&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot;&#10;                android:thumbTint=&quot;@color/primary_color&quot;&#10;                android:trackTint=&quot;@color/primary_light&quot; /&gt;&#10;&#10;            &lt;!-- Delete Button --&gt;&#10;            &lt;ImageButton&#10;                android:id=&quot;@+id/btn_delete_reminder&quot;&#10;                android:layout_width=&quot;32dp&quot;&#10;                android:layout_height=&quot;32dp&quot;&#10;                android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;                android:contentDescription=&quot;Xóa nhắc nhở&quot;&#10;                android:src=&quot;@drawable/ic_delete&quot;&#10;                android:tint=&quot;@color/error_color&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/androidx.cardview.widget.CardView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/menu/menu_reminder.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/menu/menu_reminder.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;&#10;&#10;    &lt;!-- Search --&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/action_search&quot;&#10;        android:icon=&quot;@drawable/ic_search&quot;&#10;        android:title=&quot;Tìm kiếm&quot;&#10;        app:actionViewClass=&quot;androidx.appcompat.widget.SearchView&quot;&#10;        app:showAsAction=&quot;ifRoom|collapseActionView&quot; /&gt;&#10;&#10;    &lt;!-- Filter Active Only --&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/action_filter_active&quot;&#10;        android:icon=&quot;@drawable/ic_filter_list&quot;&#10;        android:title=&quot;Chỉ hiển thị đang hoạt động&quot;&#10;        app:showAsAction=&quot;ifRoom&quot; /&gt;&#10;&#10;    &lt;!-- Refresh --&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/action_refresh&quot;&#10;        android:icon=&quot;@drawable/ic_refresh&quot;&#10;        android:title=&quot;Làm mới&quot;&#10;        app:showAsAction=&quot;never&quot; /&gt;&#10;&#10;&lt;/menu&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/colors.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/colors.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;!-- Màu cơ bản --&gt;&#10;    &lt;color name=&quot;black&quot;&gt;#FF000000&lt;/color&gt;&#10;    &lt;color name=&quot;white&quot;&gt;#FFFFFFFF&lt;/color&gt;&#10;&#10;    &lt;!-- Màu nền --&gt;&#10;    &lt;color name=&quot;background_dark&quot;&gt;#1A1A1D&lt;/color&gt;&#10;    &lt;color name=&quot;background_dark_alt&quot;&gt;#212124&lt;/color&gt;&#10;&#10;    &lt;!-- Màu text --&gt;&#10;    &lt;color name=&quot;text_primary&quot;&gt;#FFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;text_secondary&quot;&gt;#F0F0F0&lt;/color&gt;&#10;&#10;    &lt;!-- Màu cho nút chính --&gt;&#10;    &lt;color name=&quot;primary_button_start&quot;&gt;#2E7D32&lt;/color&gt; &lt;!-- Xanh lá đậm --&gt;&#10;    &lt;color name=&quot;primary_button_end&quot;&gt;#C0CA33&lt;/color&gt;   &lt;!-- Vàng chanh --&gt;&#10;    &lt;color name=&quot;primary_button_text&quot;&gt;#FFFFFF&lt;/color&gt;  &lt;!-- Trắng --&gt;&#10;&#10;    &lt;!-- Màu cho nút phụ --&gt;&#10;    &lt;color name=&quot;secondary_button_start&quot;&gt;#F57C00&lt;/color&gt; &lt;!-- Cam tươi --&gt;&#10;    &lt;color name=&quot;secondary_button_end&quot;&gt;#D32F2F&lt;/color&gt;   &lt;!-- Đỏ gạch --&gt;&#10;    &lt;color name=&quot;secondary_button_text&quot;&gt;#FFFFFF&lt;/color&gt;  &lt;!-- Trắng --&gt;&#10;&#10;    &lt;!-- Màu điểm nhấn --&gt;&#10;    &lt;color name=&quot;accent&quot;&gt;#00BFFF&lt;/color&gt;  &lt;!-- Xanh dương sáng --&gt;&#10;&#10;    &lt;!-- Màu đường viền/phân cách --&gt;&#10;    &lt;color name=&quot;divider&quot;&gt;#424242&lt;/color&gt; &lt;!-- Xám cho đường phân cách --&gt;&#10;&#10;    &lt;!-- Màu thông báo --&gt;&#10;    &lt;color name=&quot;success&quot;&gt;#4CAF50&lt;/color&gt;&#10;    &lt;color name=&quot;error&quot;&gt;#F44336&lt;/color&gt;&#10;    &lt;color name=&quot;warning&quot;&gt;#FF9800&lt;/color&gt;&#10;    &lt;color name=&quot;info&quot;&gt;#2196F3&lt;/color&gt;&#10;&#10;    &lt;!-- Màu cho chức năng yêu thích --&gt;&#10;    &lt;color name=&quot;favorite_color&quot;&gt;#E91E63&lt;/color&gt;         &lt;!-- Màu hồng cho trái tim yêu thích --&gt;&#10;    &lt;color name=&quot;favorite_outline&quot;&gt;#757575&lt;/color&gt;       &lt;!-- Màu xám cho trái tim chưa yêu thích --&gt;&#10;    &lt;color name=&quot;icon_color&quot;&gt;#757575&lt;/color&gt;             &lt;!-- Màu icon mặc định --&gt;&#10;&#10;    &lt;!-- Màu bị thiếu từ lỗi build --&gt;&#10;    &lt;color name=&quot;disabled&quot;&gt;#757575&lt;/color&gt;               &lt;!-- Màu xám cho trạng thái disabled --&gt;&#10;    &lt;color name=&quot;error_color&quot;&gt;#F44336&lt;/color&gt;            &lt;!-- Màu đỏ cho lỗi --&gt;&#10;    &lt;color name=&quot;progress_color&quot;&gt;#4CAF50&lt;/color&gt;         &lt;!-- Màu xanh cho progress bar --&gt;&#10;&#10;    &lt;!-- Màu cho Material Design 3 - Dark Theme --&gt;&#10;    &lt;color name=&quot;md_theme_dark_primary&quot;&gt;#4CAF50&lt;/color&gt;&#10;    &lt;color name=&quot;md_theme_dark_onPrimary&quot;&gt;#FFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;md_theme_dark_surface&quot;&gt;#1A1A1D&lt;/color&gt;&#10;    &lt;color name=&quot;md_theme_dark_onSurface&quot;&gt;#FFFFFF&lt;/color&gt;&#10;&#10;    &lt;!-- Màu cho Reminder Status --&gt;&#10;    &lt;color name=&quot;status_active&quot;&gt;#4CAF50&lt;/color&gt;          &lt;!-- Xanh lá - nhắc nhở đang hoạt động --&gt;&#10;    &lt;color name=&quot;status_due&quot;&gt;#FF5722&lt;/color&gt;             &lt;!-- Đỏ cam - nhắc nhở đã đến giờ --&gt;&#10;    &lt;color name=&quot;status_inactive&quot;&gt;#757575&lt;/color&gt;        &lt;!-- Xám - nhắc nhở đã tắt --&gt;&#10;&#10;    &lt;!-- Màu bổ sung còn thiếu --&gt;&#10;    &lt;color name=&quot;primary_color&quot;&gt;#4CAF50&lt;/color&gt;          &lt;!-- Màu chính --&gt;&#10;    &lt;color name=&quot;primary_dark&quot;&gt;#2E7D32&lt;/color&gt;           &lt;!-- Màu chính đậm --&gt;&#10;    &lt;color name=&quot;primary_light&quot;&gt;#C8E6C9&lt;/color&gt;          &lt;!-- Màu chính nhạt --&gt;&#10;    &lt;color name=&quot;accent_color&quot;&gt;#FF9800&lt;/color&gt;           &lt;!-- Màu nhấn --&gt;&#10;    &lt;color name=&quot;background_color&quot;&gt;#1A1A1D&lt;/color&gt;       &lt;!-- Màu nền --&gt;&#10;    &lt;color name=&quot;text_primary&quot;&gt;#FFFFFF&lt;/color&gt;           &lt;!-- Màu chữ chính --&gt;&#10;    &lt;color name=&quot;text_secondary&quot;&gt;#B0BEC5&lt;/color&gt;         &lt;!-- Màu chữ phụ --&gt;&#10;    &lt;color name=&quot;divider_color&quot;&gt;#424242&lt;/color&gt;          &lt;!-- Màu đường phân cách --&gt;&#10;&#10;&lt;/resources&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;!-- Màu cơ bản --&gt;&#10;    &lt;color name=&quot;black&quot;&gt;#FF000000&lt;/color&gt;&#10;    &lt;color name=&quot;white&quot;&gt;#FFFFFFFF&lt;/color&gt;&#10;&#10;    &lt;!-- Màu nền --&gt;&#10;    &lt;color name=&quot;background_dark&quot;&gt;#1A1A1D&lt;/color&gt;&#10;    &lt;color name=&quot;background_dark_alt&quot;&gt;#212124&lt;/color&gt;&#10;    &lt;color name=&quot;background_color&quot;&gt;#1A1A1D&lt;/color&gt;       &lt;!-- Alias cho background_dark --&gt;&#10;&#10;    &lt;!-- Màu text --&gt;&#10;    &lt;color name=&quot;text_primary&quot;&gt;#FFFFFF&lt;/color&gt;           &lt;!-- Màu chữ chính - trắng cho dark theme --&gt;&#10;    &lt;color name=&quot;text_secondary&quot;&gt;#B0BEC5&lt;/color&gt;         &lt;!-- Màu chữ phụ - xám nhạt --&gt;&#10;&#10;    &lt;!-- Màu cho nút chính --&gt;&#10;    &lt;color name=&quot;primary_button_start&quot;&gt;#2E7D32&lt;/color&gt;   &lt;!-- Xanh lá đậm --&gt;&#10;    &lt;color name=&quot;primary_button_end&quot;&gt;#C0CA33&lt;/color&gt;     &lt;!-- Vàng chanh --&gt;&#10;    &lt;color name=&quot;primary_button_text&quot;&gt;#FFFFFF&lt;/color&gt;    &lt;!-- Trắng --&gt;&#10;&#10;    &lt;!-- Màu cho nút phụ --&gt;&#10;    &lt;color name=&quot;secondary_button_start&quot;&gt;#F57C00&lt;/color&gt; &lt;!-- Cam tươi --&gt;&#10;    &lt;color name=&quot;secondary_button_end&quot;&gt;#D32F2F&lt;/color&gt;   &lt;!-- Đỏ gạch --&gt;&#10;    &lt;color name=&quot;secondary_button_text&quot;&gt;#FFFFFF&lt;/color&gt;  &lt;!-- Trắng --&gt;&#10;&#10;    &lt;!-- Màu điểm nhấn --&gt;&#10;    &lt;color name=&quot;accent&quot;&gt;#00BFFF&lt;/color&gt;                 &lt;!-- Xanh dương sáng --&gt;&#10;    &lt;color name=&quot;accent_color&quot;&gt;#FF9800&lt;/color&gt;           &lt;!-- Màu nhấn cam --&gt;&#10;&#10;    &lt;!-- Màu đường viền/phân cách --&gt;&#10;    &lt;color name=&quot;divider&quot;&gt;#424242&lt;/color&gt;                &lt;!-- Xám cho đường phân cách --&gt;&#10;    &lt;color name=&quot;divider_color&quot;&gt;#424242&lt;/color&gt;          &lt;!-- Alias cho divider --&gt;&#10;&#10;    &lt;!-- Màu thông báo --&gt;&#10;    &lt;color name=&quot;success&quot;&gt;#4CAF50&lt;/color&gt;&#10;    &lt;color name=&quot;error&quot;&gt;#F44336&lt;/color&gt;&#10;    &lt;color name=&quot;warning&quot;&gt;#FF9800&lt;/color&gt;&#10;    &lt;color name=&quot;info&quot;&gt;#2196F3&lt;/color&gt;&#10;&#10;    &lt;!-- Màu cho chức năng yêu thích --&gt;&#10;    &lt;color name=&quot;favorite_color&quot;&gt;#E91E63&lt;/color&gt;         &lt;!-- Màu hồng cho trái tim yêu thích --&gt;&#10;    &lt;color name=&quot;favorite_outline&quot;&gt;#757575&lt;/color&gt;       &lt;!-- Màu xám cho trái tim chưa yêu thích --&gt;&#10;    &lt;color name=&quot;icon_color&quot;&gt;#757575&lt;/color&gt;             &lt;!-- Màu icon mặc định --&gt;&#10;&#10;    &lt;!-- Màu bổ sung --&gt;&#10;    &lt;color name=&quot;disabled&quot;&gt;#757575&lt;/color&gt;               &lt;!-- Màu xám cho trạng thái disabled --&gt;&#10;    &lt;color name=&quot;error_color&quot;&gt;#F44336&lt;/color&gt;            &lt;!-- Alias cho error --&gt;&#10;    &lt;color name=&quot;progress_color&quot;&gt;#4CAF50&lt;/color&gt;         &lt;!-- Màu xanh cho progress bar --&gt;&#10;&#10;    &lt;!-- Màu chính của ứng dụng --&gt;&#10;    &lt;color name=&quot;primary_color&quot;&gt;#4CAF50&lt;/color&gt;          &lt;!-- Màu chính - xanh lá --&gt;&#10;    &lt;color name=&quot;primary_dark&quot;&gt;#2E7D32&lt;/color&gt;           &lt;!-- Màu chính đậm --&gt;&#10;    &lt;color name=&quot;primary_light&quot;&gt;#C8E6C9&lt;/color&gt;          &lt;!-- Màu chính nhạt --&gt;&#10;&#10;    &lt;!-- Màu cho Material Design 3 - Dark Theme --&gt;&#10;    &lt;color name=&quot;md_theme_dark_primary&quot;&gt;#4CAF50&lt;/color&gt;&#10;    &lt;color name=&quot;md_theme_dark_onPrimary&quot;&gt;#FFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;md_theme_dark_surface&quot;&gt;#1A1A1D&lt;/color&gt;&#10;    &lt;color name=&quot;md_theme_dark_onSurface&quot;&gt;#FFFFFF&lt;/color&gt;&#10;&#10;    &lt;!-- Màu cho Reminder Status --&gt;&#10;    &lt;color name=&quot;status_active&quot;&gt;#4CAF50&lt;/color&gt;          &lt;!-- Xanh lá - nhắc nhở đang hoạt động --&gt;&#10;    &lt;color name=&quot;status_due&quot;&gt;#FF5722&lt;/color&gt;             &lt;!-- Đỏ cam - nhắc nhở đã đến giờ --&gt;&#10;    &lt;color name=&quot;status_inactive&quot;&gt;#757575&lt;/color&gt;        &lt;!-- Xám - nhắc nhở đã tắt --&gt;&#10;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/strings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/strings.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;!-- Tên ứng dụng --&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;HealthTips&lt;/string&gt;&#10;&#10;    &lt;!-- Các chuỗi cho màn hình đăng nhập --&gt;&#10;    &lt;string name=&quot;login&quot;&gt;Đăng nhập&lt;/string&gt;&#10;    &lt;string name=&quot;register&quot;&gt;Đăng ký&lt;/string&gt;&#10;    &lt;string name=&quot;email&quot;&gt;Email&lt;/string&gt;&#10;    &lt;string name=&quot;password&quot;&gt;Mật khẩu&lt;/string&gt;&#10;    &lt;string name=&quot;confirm_password&quot;&gt;Xác nhận mật khẩu&lt;/string&gt;&#10;    &lt;string name=&quot;forgot_password&quot;&gt;Quên mật khẩu?&lt;/string&gt;&#10;    &lt;string name=&quot;dont_have_account&quot;&gt;Chưa có tài khoản? Đăng ký&lt;/string&gt;&#10;    &lt;string name=&quot;already_have_account&quot;&gt;Đã có tài khoản? Đăng nhập&lt;/string&gt;&#10;&#10;    &lt;!-- Các chuỗi cho màn hình quên mật khẩu --&gt;&#10;    &lt;string name=&quot;reset_password&quot;&gt;Đặt lại mật khẩu&lt;/string&gt;&#10;    &lt;string name=&quot;reset_password_instructions&quot;&gt;Nhập email của bạn để nhận hướng dẫn đặt lại mật khẩu&lt;/string&gt;&#10;    &lt;string name=&quot;send_reset_email&quot;&gt;Gửi email đặt lại&lt;/string&gt;&#10;    &lt;string name=&quot;back_to_login&quot;&gt;Quay lại đăng nhập&lt;/string&gt;&#10;&#10;    &lt;!-- Các chuỗi cho màn hình trang chủ --&gt;&#10;    &lt;string name=&quot;categories&quot;&gt;Danh mục&lt;/string&gt;&#10;    &lt;string name=&quot;latest_tips&quot;&gt;Mẹo mới nhất&lt;/string&gt;&#10;    &lt;string name=&quot;most_viewed&quot;&gt;Xem nhiều nhất&lt;/string&gt;&#10;    &lt;string name=&quot;most_liked&quot;&gt;Yêu thích nhất&lt;/string&gt;&#10;    &lt;string name=&quot;see_all&quot;&gt;Xem tất cả&lt;/string&gt;&#10;    &lt;string name=&quot;search&quot;&gt;Tìm kiếm&lt;/string&gt;&#10;    &lt;string name=&quot;offline_mode&quot;&gt;Đang ở chế độ ngoại tuyến&lt;/string&gt;&#10;&#10;    &lt;!-- Các chuỗi cho bottom navigation --&gt;&#10;    &lt;string name=&quot;nav_home&quot;&gt;Trang chủ&lt;/string&gt;&#10;    &lt;string name=&quot;nav_reminders&quot;&gt;Nhắc nhở&lt;/string&gt;&#10;    &lt;string name=&quot;nav_favorites&quot;&gt;Yêu thích&lt;/string&gt;&#10;    &lt;string name=&quot;nav_profile&quot;&gt;Hồ sơ&lt;/string&gt;&#10;&#10;    &lt;!-- Các chuỗi cho màn hình chi tiết --&gt;&#10;    &lt;string name=&quot;related_tips&quot;&gt;Mẹo liên quan&lt;/string&gt;&#10;    &lt;string name=&quot;share&quot;&gt;Chia sẻ&lt;/string&gt;&#10;    &lt;string name=&quot;save&quot;&gt;Lưu&lt;/string&gt;&#10;    &lt;string name=&quot;views&quot;&gt;lượt xem&lt;/string&gt;&#10;    &lt;string name=&quot;likes&quot;&gt;lượt thích&lt;/string&gt;&#10;&#10;    &lt;!-- Thông báo lỗi và thành công --&gt;&#10;    &lt;string name=&quot;error_login&quot;&gt;Đăng nhập thất bại&lt;/string&gt;&#10;    &lt;string name=&quot;error_register&quot;&gt;Đăng ký thất bại&lt;/string&gt;&#10;    &lt;string name=&quot;error_reset_password&quot;&gt;Không thể đặt lại mật khẩu&lt;/string&gt;&#10;    &lt;string name=&quot;success_login&quot;&gt;Đăng nhập thành công&lt;/string&gt;&#10;    &lt;string name=&quot;success_register&quot;&gt;Đăng ký thành công&lt;/string&gt;&#10;    &lt;string name=&quot;success_reset_password&quot;&gt;Đã gửi email đặt lại mật khẩu&lt;/string&gt;&#10;    &lt;string name=&quot;error_network&quot;&gt;Lỗi kết nối mạng&lt;/string&gt;&#10;&#10;    &lt;!-- Chuỗi bổ sung cho màn hình chi tiết bài viết --&gt;&#10;    &lt;string name=&quot;like&quot;&gt;Thích&lt;/string&gt;&#10;    &lt;string name=&quot;unlike&quot;&gt;Bỏ thích&lt;/string&gt;&#10;    &lt;string name=&quot;add_to_favorite&quot;&gt;Thêm vào yêu thích&lt;/string&gt;&#10;    &lt;string name=&quot;remove_from_favorite&quot;&gt;Xóa khỏi yêu thích&lt;/string&gt;&#10;    &lt;string name=&quot;health_tip_image&quot;&gt;Hình ảnh mẹo sức khỏe&lt;/string&gt;&#10;    &lt;string name=&quot;share_tip&quot;&gt;Chia sẻ mẹo sức khỏe&lt;/string&gt;&#10;    &lt;string name=&quot;added_to_favorites&quot;&gt;Đã thêm vào danh sách yêu thích&lt;/string&gt;&#10;    &lt;string name=&quot;removed_from_favorites&quot;&gt;Đã xóa khỏi danh sách yêu thích&lt;/string&gt;&#10;&#10;    &lt;!-- Các chuỗi cho màn hình danh mục --&gt;&#10;    &lt;string name=&quot;categories_title&quot;&gt;Tất cả chủ đề sức khỏe&lt;/string&gt;&#10;    &lt;string name=&quot;categories_subtitle&quot;&gt;Khám phá các chủ đề sức khỏe phong phú&lt;/string&gt;&#10;    &lt;string name=&quot;empty_categories_title&quot;&gt;Không tìm thấy danh mục&lt;/string&gt;&#10;    &lt;string name=&quot;empty_categories_message&quot;&gt;Hiện không có danh mục nào để hiển thị&lt;/string&gt;&#10;    &lt;string name=&quot;empty_categories_description&quot;&gt;Các danh mục sẽ xuất hiện ở đây&lt;/string&gt;&#10;&#10;    &lt;!-- Các chuỗi chung --&gt;&#10;    &lt;string name=&quot;loading&quot;&gt;Đang tải...&lt;/string&gt;&#10;    &lt;string name=&quot;retry&quot;&gt;Thử lại&lt;/string&gt;&#10;    &lt;string name=&quot;error_general&quot;&gt;Đã xảy ra lỗi&lt;/string&gt;&#10;    &lt;string name=&quot;no_data&quot;&gt;Không có dữ liệu&lt;/string&gt;&#10;    &lt;string name=&quot;logout&quot;&gt;Đăng xuất&lt;/string&gt;&#10;    &lt;string name=&quot;back&quot;&gt;Quay lại&lt;/string&gt;&#10;    &lt;string name=&quot;favorite&quot;&gt;Yêu thích&lt;/string&gt;&#10;&#10;    &lt;!-- Các chuỗi cho màn hình chi tiết danh mục --&gt;&#10;    &lt;string name=&quot;empty_tips_description&quot;&gt;Chưa có mẹo nào trong danh mục này&lt;/string&gt;&#10;    &lt;string name=&quot;empty_tips_title&quot;&gt;Danh sách trống&lt;/string&gt;&#10;    &lt;string name=&quot;empty_tips_message&quot;&gt;Danh mục này hiện không có mẹo sức khỏe nào&lt;/string&gt;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;!-- Tên ứng dụng --&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;HealthTips&lt;/string&gt;&#10;&#10;    &lt;!-- Các chuỗi cho màn hình đăng nhập --&gt;&#10;    &lt;string name=&quot;login&quot;&gt;Đăng nhập&lt;/string&gt;&#10;    &lt;string name=&quot;register&quot;&gt;Đăng ký&lt;/string&gt;&#10;    &lt;string name=&quot;email&quot;&gt;Email&lt;/string&gt;&#10;    &lt;string name=&quot;password&quot;&gt;Mật khẩu&lt;/string&gt;&#10;    &lt;string name=&quot;confirm_password&quot;&gt;Xác nhận mật khẩu&lt;/string&gt;&#10;    &lt;string name=&quot;forgot_password&quot;&gt;Quên mật khẩu?&lt;/string&gt;&#10;    &lt;string name=&quot;dont_have_account&quot;&gt;Chưa có tài khoản? Đăng ký&lt;/string&gt;&#10;    &lt;string name=&quot;already_have_account&quot;&gt;Đã có tài khoản? Đăng nhập&lt;/string&gt;&#10;&#10;    &lt;!-- Các chuỗi cho màn hình quên mật khẩu --&gt;&#10;    &lt;string name=&quot;reset_password&quot;&gt;Đặt lại mật khẩu&lt;/string&gt;&#10;    &lt;string name=&quot;reset_password_instructions&quot;&gt;Nhập email của bạn để nhận hướng dẫn đặt lại mật khẩu&lt;/string&gt;&#10;    &lt;string name=&quot;send_reset_email&quot;&gt;Gửi email đặt lại&lt;/string&gt;&#10;    &lt;string name=&quot;back_to_login&quot;&gt;Quay lại đăng nhập&lt;/string&gt;&#10;&#10;    &lt;!-- Các chuỗi cho màn hình trang chủ --&gt;&#10;    &lt;string name=&quot;categories&quot;&gt;Danh mục&lt;/string&gt;&#10;    &lt;string name=&quot;latest_tips&quot;&gt;Mẹo mới nhất&lt;/string&gt;&#10;    &lt;string name=&quot;most_viewed&quot;&gt;Xem nhiều nhất&lt;/string&gt;&#10;    &lt;string name=&quot;most_liked&quot;&gt;Yêu thích nhất&lt;/string&gt;&#10;    &lt;string name=&quot;see_all&quot;&gt;Xem tất cả&lt;/string&gt;&#10;    &lt;string name=&quot;search&quot;&gt;Tìm kiếm&lt;/string&gt;&#10;    &lt;string name=&quot;offline_mode&quot;&gt;Đang ở chế độ ngoại tuyến&lt;/string&gt;&#10;&#10;    &lt;!-- Các chuỗi cho bottom navigation --&gt;&#10;    &lt;string name=&quot;nav_home&quot;&gt;Trang chủ&lt;/string&gt;&#10;    &lt;string name=&quot;nav_reminders&quot;&gt;Nhắc nhở&lt;/string&gt;&#10;    &lt;string name=&quot;nav_videos&quot;&gt;Video ngắn&lt;/string&gt;&#10;    &lt;string name=&quot;nav_favorites&quot;&gt;Yêu thích&lt;/string&gt;&#10;    &lt;string name=&quot;nav_profile&quot;&gt;Hồ sơ&lt;/string&gt;&#10;&#10;    &lt;!-- Các chuỗi cho màn hình chi tiết --&gt;&#10;    &lt;string name=&quot;related_tips&quot;&gt;Mẹo liên quan&lt;/string&gt;&#10;    &lt;string name=&quot;share&quot;&gt;Chia sẻ&lt;/string&gt;&#10;    &lt;string name=&quot;save&quot;&gt;Lưu&lt;/string&gt;&#10;    &lt;string name=&quot;views&quot;&gt;lượt xem&lt;/string&gt;&#10;    &lt;string name=&quot;likes&quot;&gt;lượt thích&lt;/string&gt;&#10;&#10;    &lt;!-- Thông báo lỗi và thành công --&gt;&#10;    &lt;string name=&quot;error_login&quot;&gt;Đăng nhập thất bại&lt;/string&gt;&#10;    &lt;string name=&quot;error_register&quot;&gt;Đăng ký thất bại&lt;/string&gt;&#10;    &lt;string name=&quot;error_reset_password&quot;&gt;Không thể đặt lại mật khẩu&lt;/string&gt;&#10;    &lt;string name=&quot;success_login&quot;&gt;Đăng nhập thành công&lt;/string&gt;&#10;    &lt;string name=&quot;success_register&quot;&gt;Đăng ký thành công&lt;/string&gt;&#10;    &lt;string name=&quot;success_reset_password&quot;&gt;Đã gửi email đặt lại mật khẩu&lt;/string&gt;&#10;    &lt;string name=&quot;error_network&quot;&gt;Lỗi kết nối mạng&lt;/string&gt;&#10;&#10;    &lt;!-- Chuỗi bổ sung cho màn hình chi tiết bài viết --&gt;&#10;    &lt;string name=&quot;like&quot;&gt;Thích&lt;/string&gt;&#10;    &lt;string name=&quot;unlike&quot;&gt;Bỏ thích&lt;/string&gt;&#10;    &lt;string name=&quot;add_to_favorite&quot;&gt;Thêm vào yêu thích&lt;/string&gt;&#10;    &lt;string name=&quot;remove_from_favorite&quot;&gt;Xóa khỏi yêu thích&lt;/string&gt;&#10;    &lt;string name=&quot;health_tip_image&quot;&gt;Hình ảnh mẹo sức khỏe&lt;/string&gt;&#10;    &lt;string name=&quot;share_tip&quot;&gt;Chia sẻ mẹo sức khỏe&lt;/string&gt;&#10;    &lt;string name=&quot;added_to_favorites&quot;&gt;Đã thêm vào danh sách yêu thích&lt;/string&gt;&#10;    &lt;string name=&quot;removed_from_favorites&quot;&gt;Đã xóa khỏi danh sách yêu thích&lt;/string&gt;&#10;&#10;    &lt;!-- Các chuỗi cho màn hình danh mục --&gt;&#10;    &lt;string name=&quot;categories_title&quot;&gt;Tất cả chủ đề sức khỏe&lt;/string&gt;&#10;    &lt;string name=&quot;categories_subtitle&quot;&gt;Khám phá các chủ đề sức khỏe phong phú&lt;/string&gt;&#10;    &lt;string name=&quot;empty_categories_title&quot;&gt;Không tìm thấy danh mục&lt;/string&gt;&#10;    &lt;string name=&quot;empty_categories_message&quot;&gt;Hiện không có danh mục nào để hiển thị&lt;/string&gt;&#10;    &lt;string name=&quot;empty_categories_description&quot;&gt;Các danh mục sẽ xuất hiện ở đây&lt;/string&gt;&#10;&#10;    &lt;!-- Các chuỗi chung --&gt;&#10;    &lt;string name=&quot;loading&quot;&gt;Đang tải...&lt;/string&gt;&#10;    &lt;string name=&quot;retry&quot;&gt;Thử lại&lt;/string&gt;&#10;    &lt;string name=&quot;error_general&quot;&gt;Đã xảy ra lỗi&lt;/string&gt;&#10;    &lt;string name=&quot;no_data&quot;&gt;Không có dữ liệu&lt;/string&gt;&#10;    &lt;string name=&quot;logout&quot;&gt;Đăng xuất&lt;/string&gt;&#10;    &lt;string name=&quot;back&quot;&gt;Quay lại&lt;/string&gt;&#10;    &lt;string name=&quot;favorite&quot;&gt;Yêu thích&lt;/string&gt;&#10;&#10;    &lt;!-- Các chuỗi cho màn hình chi tiết danh mục --&gt;&#10;    &lt;string name=&quot;empty_tips_description&quot;&gt;Chưa có mẹo nào trong danh mục này&lt;/string&gt;&#10;    &lt;string name=&quot;empty_tips_title&quot;&gt;Danh sách trống&lt;/string&gt;&#10;    &lt;string name=&quot;empty_tips_message&quot;&gt;Danh mục này hiện không có mẹo sức khỏe nào&lt;/string&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>