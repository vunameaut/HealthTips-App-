<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;!-- Thêm quyền truy cập Internet --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_logo&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_logo_foreground&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.Doan&quot;&#10;        android:name=&quot;androidx.multidex.MultiDexApplication&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.presentation.auth.LoginActivity&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.presentation.auth.ForgotPasswordActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.presentation.auth.RegisterActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;            android:name=&quot;.presentation.home.HomeActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.presentation.category.detail.CategoryDetailListActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;            android:name=&quot;.presentation.healthtip.detail.HealthTipDetailActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.HealthTipDetail&quot; /&gt;&#10;&#10;        &lt;receiver&#10;            android:name=&quot;.receivers.ReminderBroadcastReceiver&quot;&#10;            android:enabled=&quot;true&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;receiver&#10;            android:name=&quot;.receivers.ReminderActionReceiver&quot;&#10;            android:enabled=&quot;true&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;!-- Receiver để khởi động lại reminder sau khi boot --&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#13;&#10;&#13;&#10;    &lt;!-- Quyền truy cập Internet --&gt;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;!-- Quyền cho thông báo và alarm --&gt;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.POST_NOTIFICATIONS&quot; /&gt;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.SCHEDULE_EXACT_ALARM&quot; /&gt;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.USE_EXACT_ALARM&quot; /&gt;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot; /&gt;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;application&#13;&#10;        android:allowBackup=&quot;true&quot;&#13;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#13;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#13;&#10;        android:icon=&quot;@mipmap/ic_logo&quot;&#13;&#10;        android:label=&quot;@string/app_name&quot;&#13;&#10;        android:roundIcon=&quot;@mipmap/ic_logo_foreground&quot;&#13;&#10;        android:supportsRtl=&quot;true&quot;&#13;&#10;        android:theme=&quot;@style/Theme.Doan&quot;&#13;&#10;        android:name=&quot;androidx.multidex.MultiDexApplication&quot;&#13;&#10;        tools:targetApi=&quot;31&quot;&gt;&#13;&#10;&#13;&#10;        &lt;!-- Activities --&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.presentation.auth.LoginActivity&quot;&#13;&#10;            android:exported=&quot;true&quot;&gt;&#13;&#10;            &lt;intent-filter&gt;&#13;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#13;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#13;&#10;            &lt;/intent-filter&gt;&#13;&#10;        &lt;/activity&gt;&#13;&#10;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.presentation.auth.ForgotPasswordActivity&quot;&#13;&#10;            android:exported=&quot;false&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.presentation.auth.RegisterActivity&quot;&#13;&#10;            android:exported=&quot;false&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.presentation.home.HomeActivity&quot;&#13;&#10;            android:exported=&quot;false&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.presentation.category.detail.CategoryDetailListActivity&quot;&#13;&#10;            android:exported=&quot;false&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.presentation.healthtip.detail.HealthTipDetailActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.HealthTipDetail&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;!-- Debug Activity --&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.presentation.debug.ReminderTestActivity&quot;&#13;&#10;            android:exported=&quot;true&quot;&#13;&#10;            android:label=&quot;Debug Thông Báo&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;!-- Broadcast Receivers cho Reminder --&gt;&#13;&#10;        &lt;receiver&#13;&#10;            android:name=&quot;.receivers.ReminderBroadcastReceiver&quot;&#13;&#10;            android:enabled=&quot;true&quot;&#13;&#10;            android:exported=&quot;false&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;receiver&#13;&#10;            android:name=&quot;.receivers.ReminderActionReceiver&quot;&#13;&#10;            android:enabled=&quot;true&quot;&#13;&#10;            android:exported=&quot;false&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;!-- Receiver để khởi động lại reminder sau khi boot --&gt;&#13;&#10;        &lt;receiver&#13;&#10;            android:name=&quot;.receivers.BootReceiver&quot;&#13;&#10;            android:enabled=&quot;true&quot;&#13;&#10;            android:exported=&quot;true&quot;&gt;&#13;&#10;            &lt;intent-filter android:priority=&quot;1000&quot;&gt;&#13;&#10;                &lt;action android:name=&quot;android.intent.action.BOOT_COMPLETED&quot; /&gt;&#13;&#10;                &lt;action android:name=&quot;android.intent.action.MY_PACKAGE_REPLACED&quot; /&gt;&#13;&#10;                &lt;action android:name=&quot;android.intent.action.PACKAGE_REPLACED&quot; /&gt;&#13;&#10;                &lt;data android:scheme=&quot;package&quot; /&gt;&#13;&#10;            &lt;/intent-filter&gt;&#13;&#10;        &lt;/receiver&gt;&#13;&#10;&#13;&#10;    &lt;/application&gt;&#13;&#10;&#13;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/Reminder.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/Reminder.java" />
              <option name="originalContent" value="package com.vhn.doan.data;&#10;&#10;import com.google.firebase.database.PropertyName;&#10;import com.google.firebase.database.ServerValue;&#10;import java.util.Calendar;&#10;import java.util.Date;&#10;import java.util.Map;&#10;&#10;/**&#10; * Model class đại diện cho một nhắc nhở sức khỏe&#10; * Được tối ưu hóa để tương thích với Firebase Realtime Database&#10; */&#10;public class Reminder {&#10;    private String id;&#10;    private String userId;&#10;    private String title;&#10;    private String description;&#10;    private Long reminderTime; // Sử dụng Long thay vì Date để tương thích Firebase&#10;    private int repeatType; // 0: Không lặp, 1: Hàng ngày, 2: Hàng tuần, 3: Hàng tháng&#10;    private boolean isActive;&#10;    private Long createdAt; // Sử dụng Long thay vì Date&#10;    private Long updatedAt; // Sử dụng Long thay vì Date&#10;    private String healthTipId; // ID của mẹo sức khỏe liên quan (nếu có)&#10;&#10;    // Enum cho loại lặp lại&#10;    public static class RepeatType {&#10;        public static final int NO_REPEAT = 0;&#10;        public static final int DAILY = 1;&#10;        public static final int WEEKLY = 2;&#10;        public static final int MONTHLY = 3;&#10;    }&#10;&#10;    // Constructor mặc định (cần thiết cho Firebase)&#10;    public Reminder() {&#10;        long currentTime = System.currentTimeMillis();&#10;        this.createdAt = currentTime;&#10;        this.updatedAt = currentTime;&#10;        this.isActive = true;&#10;        this.repeatType = RepeatType.NO_REPEAT;&#10;    }&#10;&#10;    // Constructor đầy đủ&#10;    public Reminder(String id, String userId, String title, String description,&#10;                   Date reminderTime, int repeatType, boolean isActive, String healthTipId) {&#10;        this.id = id;&#10;        this.userId = userId;&#10;        this.title = title;&#10;        this.description = description;&#10;        this.reminderTime = reminderTime != null ? reminderTime.getTime() : null;&#10;        this.repeatType = repeatType;&#10;        this.isActive = isActive;&#10;        this.healthTipId = healthTipId;&#10;        long currentTime = System.currentTimeMillis();&#10;        this.createdAt = currentTime;&#10;        this.updatedAt = currentTime;&#10;    }&#10;&#10;    // Getters với Firebase annotations&#10;    public String getId() {&#10;        return id;&#10;    }&#10;&#10;    public String getUserId() {&#10;        return userId;&#10;    }&#10;&#10;    public String getTitle() {&#10;        return title;&#10;    }&#10;&#10;    public String getDescription() {&#10;        return description;&#10;    }&#10;&#10;    // Getter cho Firebase - trả về Long&#10;    @PropertyName(&quot;reminderTime&quot;)&#10;    public Long getReminderTimestamp() {&#10;        return reminderTime;&#10;    }&#10;&#10;    // Getter cho UI - trả về Date&#10;    public Date getReminderTime() {&#10;        return reminderTime != null ? new Date(reminderTime) : null;&#10;    }&#10;&#10;    public int getRepeatType() {&#10;        return repeatType;&#10;    }&#10;&#10;    public boolean isActive() {&#10;        return isActive;&#10;    }&#10;&#10;    // Getter cho Firebase - trả về Long&#10;    @PropertyName(&quot;createdAt&quot;)&#10;    public Long getCreatedAtTimestamp() {&#10;        return createdAt;&#10;    }&#10;&#10;    // Getter cho UI - trả về Date&#10;    public Date getCreatedAt() {&#10;        return createdAt != null ? new Date(createdAt) : null;&#10;    }&#10;&#10;    // Getter cho Firebase - trả về Long&#10;    @PropertyName(&quot;updatedAt&quot;)&#10;    public Long getUpdatedAtTimestamp() {&#10;        return updatedAt;&#10;    }&#10;&#10;    // Getter cho UI - trả về Date&#10;    public Date getUpdatedAt() {&#10;        return updatedAt != null ? new Date(updatedAt) : null;&#10;    }&#10;&#10;    public String getHealthTipId() {&#10;        return healthTipId;&#10;    }&#10;&#10;    // Setters&#10;    public void setId(String id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public void setUserId(String userId) {&#10;        this.userId = userId;&#10;    }&#10;&#10;    public void setTitle(String title) {&#10;        this.title = title;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    public void setDescription(String description) {&#10;        this.description = description;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    // Setter cho Firebase - nhận Long&#10;    @PropertyName(&quot;reminderTime&quot;)&#10;    public void setReminderTimestamp(Long reminderTime) {&#10;        this.reminderTime = reminderTime;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    // Setter cho UI - nhận Date&#10;    public void setReminderTime(Date reminderTime) {&#10;        this.reminderTime = reminderTime != null ? reminderTime.getTime() : null;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    public void setRepeatType(int repeatType) {&#10;        this.repeatType = repeatType;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    public void setActive(boolean active) {&#10;        isActive = active;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    // Setter cho Firebase - nhận Long&#10;    @PropertyName(&quot;createdAt&quot;)&#10;    public void setCreatedAtTimestamp(Long createdAt) {&#10;        this.createdAt = createdAt;&#10;    }&#10;&#10;    // Setter cho UI - nhận Date&#10;    public void setCreatedAt(Date createdAt) {&#10;        this.createdAt = createdAt != null ? createdAt.getTime() : null;&#10;    }&#10;&#10;    // Setter cho Firebase - nhận Long&#10;    @PropertyName(&quot;updatedAt&quot;)&#10;    public void setUpdatedAtTimestamp(Long updatedAt) {&#10;        this.updatedAt = updatedAt;&#10;    }&#10;&#10;    // Setter cho UI - nhận Date&#10;    public void setUpdatedAt(Date updatedAt) {&#10;        this.updatedAt = updatedAt != null ? updatedAt.getTime() : null;&#10;    }&#10;&#10;    public void setHealthTipId(String healthTipId) {&#10;        this.healthTipId = healthTipId;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    /**&#10;     * Tính toán thời gian nhắc nhở tiếp theo dựa trên loại lặp lại&#10;     */&#10;    public Date getNextReminderTime() {&#10;        if (reminderTime == null || repeatType == RepeatType.NO_REPEAT) {&#10;            return getReminderTime();&#10;        }&#10;&#10;        Calendar calendar = Calendar.getInstance();&#10;        calendar.setTime(getReminderTime());&#10;&#10;        switch (repeatType) {&#10;            case RepeatType.DAILY:&#10;                calendar.add(Calendar.DAY_OF_MONTH, 1);&#10;                break;&#10;            case RepeatType.WEEKLY:&#10;                calendar.add(Calendar.WEEK_OF_YEAR, 1);&#10;                break;&#10;            case RepeatType.MONTHLY:&#10;                calendar.add(Calendar.MONTH, 1);&#10;                break;&#10;            default:&#10;                return getReminderTime();&#10;        }&#10;&#10;        return calendar.getTime();&#10;    }&#10;&#10;    /**&#10;     * Kiểm tra xem nhắc nhở có đã đến giờ hay chưa&#10;     */&#10;    public boolean isDue() {&#10;        if (reminderTime == null || !isActive) {&#10;            return false;&#10;        }&#10;        return System.currentTimeMillis() &gt;= reminderTime;&#10;    }&#10;&#10;    /**&#10;     * Lấy tên hiển thị cho loại lặp lại&#10;     */&#10;    public String getRepeatTypeDisplayName() {&#10;        switch (repeatType) {&#10;            case RepeatType.NO_REPEAT:&#10;                return &quot;Không lặp lại&quot;;&#10;            case RepeatType.DAILY:&#10;                return &quot;Hàng ngày&quot;;&#10;            case RepeatType.WEEKLY:&#10;                return &quot;Hàng tuần&quot;;&#10;            case RepeatType.MONTHLY:&#10;                return &quot;Hàng tháng&quot;;&#10;            default:&#10;                return &quot;Không xác định&quot;;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Lấy Map để ghi vào Firebase với ServerValue.TIMESTAMP&#10;     */&#10;    public Map&lt;String, Object&gt; toFirebaseMap() {&#10;        Map&lt;String, Object&gt; map = new java.util.HashMap&lt;&gt;();&#10;        map.put(&quot;id&quot;, id);&#10;        map.put(&quot;userId&quot;, userId);&#10;        map.put(&quot;title&quot;, title);&#10;        map.put(&quot;description&quot;, description);&#10;        map.put(&quot;reminderTime&quot;, reminderTime);&#10;        map.put(&quot;repeatType&quot;, repeatType);&#10;        map.put(&quot;isActive&quot;, isActive);&#10;        map.put(&quot;healthTipId&quot;, healthTipId);&#10;        map.put(&quot;createdAt&quot;, createdAt != null ? createdAt : ServerValue.TIMESTAMP);&#10;        map.put(&quot;updatedAt&quot;, ServerValue.TIMESTAMP);&#10;        return map;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Reminder{&quot; +&#10;                &quot;id='&quot; + id + '\'' +&#10;                &quot;, title='&quot; + title + '\'' +&#10;                &quot;, reminderTime=&quot; + getReminderTime() +&#10;                &quot;, isActive=&quot; + isActive +&#10;                '}';&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.data;&#10;&#10;import com.google.firebase.database.PropertyName;&#10;import com.google.firebase.database.ServerValue;&#10;import com.google.firebase.database.Exclude;&#10;import java.util.Calendar;&#10;import java.util.Date;&#10;import java.util.Map;&#10;&#10;/**&#10; * Model class đại diện cho một nhắc nhở sức khỏe&#10; * Được tối ưu hóa để tương thích với Firebase Realtime Database&#10; */&#10;public class Reminder {&#10;    private String id;&#10;    private String userId;&#10;    private String title;&#10;    private String description;&#10;    private Long reminderTime; // Sử dụng Long thay vì Date để tương thích Firebase&#10;    private int repeatType; // 0: Không lặp, 1: Hàng ngày, 2: Hàng tuần, 3: Hàng tháng&#10;    private boolean isActive;&#10;    private Long createdAt; // Sử dụng Long thay vì Date&#10;    private Long updatedAt; // Sử dụng Long thay vì Date&#10;    private String healthTipId; // ID của mẹo sức khỏe liên quan (nếu có)&#10;&#10;    // Enum cho loại lặp lại&#10;    public static class RepeatType {&#10;        public static final int NO_REPEAT = 0;&#10;        public static final int DAILY = 1;&#10;        public static final int WEEKLY = 2;&#10;        public static final int MONTHLY = 3;&#10;    }&#10;&#10;    // Constructor mặc định (cần thiết cho Firebase)&#10;    public Reminder() {&#10;        long currentTime = System.currentTimeMillis();&#10;        this.createdAt = currentTime;&#10;        this.updatedAt = currentTime;&#10;        this.isActive = true;&#10;        this.repeatType = RepeatType.NO_REPEAT;&#10;    }&#10;&#10;    // Constructor đầy đủ&#10;    public Reminder(String id, String userId, String title, String description,&#10;                   Date reminderTime, int repeatType, boolean isActive, String healthTipId) {&#10;        this.id = id;&#10;        this.userId = userId;&#10;        this.title = title;&#10;        this.description = description;&#10;        this.reminderTime = reminderTime != null ? reminderTime.getTime() : null;&#10;        this.repeatType = repeatType;&#10;        this.isActive = isActive;&#10;        this.healthTipId = healthTipId;&#10;        long currentTime = System.currentTimeMillis();&#10;        this.createdAt = currentTime;&#10;        this.updatedAt = currentTime;&#10;    }&#10;&#10;    // Getters với Firebase annotations&#10;    public String getId() {&#10;        return id;&#10;    }&#10;&#10;    public String getUserId() {&#10;        return userId;&#10;    }&#10;&#10;    public String getTitle() {&#10;        return title;&#10;    }&#10;&#10;    public String getDescription() {&#10;        return description;&#10;    }&#10;&#10;    // Firebase getter - trả về Long&#10;    public Long getReminderTime() {&#10;        return reminderTime;&#10;    }&#10;&#10;    // UI helper method - trả về Date&#10;    @Exclude&#10;    public Date getReminderTimeAsDate() {&#10;        return reminderTime != null ? new Date(reminderTime) : null;&#10;    }&#10;&#10;    public int getRepeatType() {&#10;        return repeatType;&#10;    }&#10;&#10;    @PropertyName(&quot;isActive&quot;)&#10;    public boolean isActive() {&#10;        return isActive;&#10;    }&#10;&#10;    // Firebase getter - trả về Long&#10;    public Long getCreatedAt() {&#10;        return createdAt;&#10;    }&#10;&#10;    // UI helper method - trả về Date&#10;    @Exclude&#10;    public Date getCreatedAtAsDate() {&#10;        return createdAt != null ? new Date(createdAt) : null;&#10;    }&#10;&#10;    // Firebase getter - trả về Long&#10;    public Long getUpdatedAt() {&#10;        return updatedAt;&#10;    }&#10;&#10;    // UI helper method - trả về Date&#10;    @Exclude&#10;    public Date getUpdatedAtAsDate() {&#10;        return updatedAt != null ? new Date(updatedAt) : null;&#10;    }&#10;&#10;    public String getHealthTipId() {&#10;        return healthTipId;&#10;    }&#10;&#10;    // Setters&#10;    public void setId(String id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public void setUserId(String userId) {&#10;        this.userId = userId;&#10;    }&#10;&#10;    public void setTitle(String title) {&#10;        this.title = title;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    public void setDescription(String description) {&#10;        this.description = description;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    // Firebase setter - nhận Long&#10;    public void setReminderTime(Long reminderTime) {&#10;        this.reminderTime = reminderTime;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    // UI helper method - nhận Date&#10;    @Exclude&#10;    public void setReminderTimeFromDate(Date reminderTime) {&#10;        this.reminderTime = reminderTime != null ? reminderTime.getTime() : null;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    public void setRepeatType(int repeatType) {&#10;        this.repeatType = repeatType;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    @PropertyName(&quot;isActive&quot;)&#10;    public void setActive(boolean active) {&#10;        isActive = active;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    // Firebase setter - nhận Long&#10;    public void setCreatedAt(Long createdAt) {&#10;        this.createdAt = createdAt;&#10;    }&#10;&#10;    // UI helper method - nhận Date&#10;    @Exclude&#10;    public void setCreatedAtFromDate(Date createdAt) {&#10;        this.createdAt = createdAt != null ? createdAt.getTime() : null;&#10;    }&#10;&#10;    // Firebase setter - nhận Long&#10;    public void setUpdatedAt(Long updatedAt) {&#10;        this.updatedAt = updatedAt;&#10;    }&#10;&#10;    // UI helper method - nhận Date&#10;    @Exclude&#10;    public void setUpdatedAtFromDate(Date updatedAt) {&#10;        this.updatedAt = updatedAt != null ? updatedAt.getTime() : null;&#10;    }&#10;&#10;    public void setHealthTipId(String healthTipId) {&#10;        this.healthTipId = healthTipId;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    /**&#10;     * Tính toán thời gian nhắc nhở tiếp theo dựa trên loại lặp lại&#10;     */&#10;    @Exclude&#10;    public Date getNextReminderTime() {&#10;        if (reminderTime == null || repeatType == RepeatType.NO_REPEAT) {&#10;            return getReminderTimeAsDate();&#10;        }&#10;&#10;        Calendar calendar = Calendar.getInstance();&#10;        calendar.setTime(getReminderTimeAsDate());&#10;&#10;        switch (repeatType) {&#10;            case RepeatType.DAILY:&#10;                calendar.add(Calendar.DAY_OF_MONTH, 1);&#10;                break;&#10;            case RepeatType.WEEKLY:&#10;                calendar.add(Calendar.WEEK_OF_YEAR, 1);&#10;                break;&#10;            case RepeatType.MONTHLY:&#10;                calendar.add(Calendar.MONTH, 1);&#10;                break;&#10;            default:&#10;                return getReminderTimeAsDate();&#10;        }&#10;&#10;        return calendar.getTime();&#10;    }&#10;&#10;    /**&#10;     * Kiểm tra xem nhắc nhở có đã đến giờ hay chưa&#10;     */&#10;    @Exclude&#10;    public boolean isDue() {&#10;        if (reminderTime == null || !isActive) {&#10;            return false;&#10;        }&#10;        return System.currentTimeMillis() &gt;= reminderTime;&#10;    }&#10;&#10;    /**&#10;     * Lấy tên hiển thị cho loại lặp lại&#10;     */&#10;    @Exclude&#10;    public String getRepeatTypeDisplayName() {&#10;        switch (repeatType) {&#10;            case RepeatType.NO_REPEAT:&#10;                return &quot;Không lặp lại&quot;;&#10;            case RepeatType.DAILY:&#10;                return &quot;Hàng ngày&quot;;&#10;            case RepeatType.WEEKLY:&#10;                return &quot;Hàng tuần&quot;;&#10;            case RepeatType.MONTHLY:&#10;                return &quot;Hàng tháng&quot;;&#10;            default:&#10;                return &quot;Không xác định&quot;;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Lấy Map để ghi vào Firebase với ServerValue.TIMESTAMP&#10;     */&#10;    @Exclude&#10;    public Map&lt;String, Object&gt; toFirebaseMap() {&#10;        Map&lt;String, Object&gt; map = new java.util.HashMap&lt;&gt;();&#10;        map.put(&quot;id&quot;, id);&#10;        map.put(&quot;userId&quot;, userId);&#10;        map.put(&quot;title&quot;, title);&#10;        map.put(&quot;description&quot;, description);&#10;        map.put(&quot;reminderTime&quot;, reminderTime);&#10;        map.put(&quot;repeatType&quot;, repeatType);&#10;        map.put(&quot;isActive&quot;, isActive);&#10;        map.put(&quot;healthTipId&quot;, healthTipId);&#10;        map.put(&quot;createdAt&quot;, createdAt != null ? createdAt : ServerValue.TIMESTAMP);&#10;        map.put(&quot;updatedAt&quot;, ServerValue.TIMESTAMP);&#10;        return map;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Reminder{&quot; +&#10;                &quot;id='&quot; + id + '\'' +&#10;                &quot;, title='&quot; + title + '\'' +&#10;                &quot;, reminderTime=&quot; + getReminderTimeAsDate() +&#10;                &quot;, isActive=&quot; + isActive +&#10;                '}';&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/repository/ReminderRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/repository/ReminderRepository.java" />
              <option name="updatedContent" value="package com.vhn.doan.data.repository;&#10;&#10;import com.vhn.doan.data.Reminder;&#10;&#10;import java.util.List;&#10;&#10;/**&#10; * Interface định nghĩa các phương thức để làm việc với dữ liệu Reminder&#10; */&#10;public interface ReminderRepository {&#10;    &#10;    /**&#10;     * Thêm một nhắc nhở mới&#10;     * @param reminder Nhắc nhở cần thêm&#10;     * @param callback Callback xử lý kết quả&#10;     */&#10;    void addReminder(Reminder reminder, RepositoryCallback&lt;String&gt; callback);&#10;    &#10;    /**&#10;     * Cập nhật thông tin nhắc nhở&#10;     * @param reminder Nhắc nhở cần cập nhật&#10;     * @param callback Callback xử lý kết quả&#10;     */&#10;    void updateReminder(Reminder reminder, RepositoryCallback&lt;Void&gt; callback);&#10;    &#10;    /**&#10;     * Xóa nhắc nhở&#10;     * @param reminderId ID của nhắc nhở cần xóa&#10;     * @param callback Callback xử lý kết quả&#10;     */&#10;    void deleteReminder(String reminderId, RepositoryCallback&lt;Void&gt; callback);&#10;    &#10;    /**&#10;     * Lấy tất cả nhắc nhở của một người dùng&#10;     * @param userId ID của người dùng&#10;     * @param callback Callback xử lý kết quả&#10;     */&#10;    void getUserReminders(String userId, RepositoryCallback&lt;List&lt;Reminder&gt;&gt; callback);&#10;    &#10;    /**&#10;     * Lấy nhắc nhở theo ID&#10;     * @param reminderId ID của nhắc nhở&#10;     * @param callback Callback xử lý kết quả&#10;     */&#10;    void getReminderById(String reminderId, RepositoryCallback&lt;Reminder&gt; callback);&#10;    &#10;    /**&#10;     * Lấy tất cả nhắc nhở đang hoạt động của một người dùng&#10;     * @param userId ID của người dùng&#10;     * @param callback Callback xử lý kết quả&#10;     */&#10;    void getActiveReminders(String userId, RepositoryCallback&lt;List&lt;Reminder&gt;&gt; callback);&#10;    &#10;    /**&#10;     * Bật/tắt nhắc nhở&#10;     * @param reminderId ID của nhắc nhở&#10;     * @param isActive Trạng thái hoạt động&#10;     * @param callback Callback xử lý kết quả&#10;     */&#10;    void toggleReminder(String reminderId, boolean isActive, RepositoryCallback&lt;Void&gt; callback);&#10;    &#10;    /**&#10;     * Lấy các nhắc nhở theo mẹo sức khỏe&#10;     * @param healthTipId ID của mẹo sức khỏe&#10;     * @param callback Callback xử lý kết quả&#10;     */&#10;    void getRemindersByHealthTip(String healthTipId, RepositoryCallback&lt;List&lt;Reminder&gt;&gt; callback);&#10;    &#10;    /**&#10;     * Interface callback cho các thao tác repository&#10;     */&#10;    interface RepositoryCallback&lt;T&gt; {&#10;        void onSuccess(T result);&#10;        void onError(String error);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/repository/ReminderRepositoryImpl.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/repository/ReminderRepositoryImpl.java" />
              <option name="originalContent" value="}&#10;&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.data.repository;&#13;&#10;&#13;&#10;import com.google.firebase.database.DataSnapshot;&#13;&#10;import com.google.firebase.database.DatabaseError;&#13;&#10;import com.google.firebase.database.DatabaseReference;&#13;&#10;import com.google.firebase.database.FirebaseDatabase;&#13;&#10;import com.google.firebase.database.ValueEventListener;&#13;&#10;import com.google.firebase.database.Query;&#13;&#10;import com.vhn.doan.data.Reminder;&#13;&#10;&#13;&#10;import java.util.ArrayList;&#13;&#10;import java.util.HashMap;&#13;&#10;import java.util.List;&#13;&#10;import java.util.Map;&#13;&#10;&#13;&#10;import javax.inject.Inject;&#13;&#10;import javax.inject.Singleton;&#13;&#10;&#13;&#10;/**&#13;&#10; * Triển khai ReminderRepository sử dụng Firebase Realtime Database&#13;&#10; */&#13;&#10;@Singleton&#13;&#10;public class ReminderRepositoryImpl implements ReminderRepository {&#13;&#10;&#13;&#10;    private static final String REMINDERS_NODE = &quot;reminders&quot;;&#13;&#10;    private static final String USER_REMINDERS_NODE = &quot;user_reminders&quot;;&#13;&#10;&#13;&#10;    private final DatabaseReference database;&#13;&#10;    private final DatabaseReference remindersRef;&#13;&#10;    private final DatabaseReference userRemindersRef;&#13;&#10;&#13;&#10;    @Inject&#13;&#10;    public ReminderRepositoryImpl() {&#13;&#10;        this.database = FirebaseDatabase.getInstance().getReference();&#13;&#10;        this.remindersRef = database.child(REMINDERS_NODE);&#13;&#10;        this.userRemindersRef = database.child(USER_REMINDERS_NODE);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void addReminder(Reminder reminder, RepositoryCallback&lt;String&gt; callback) {&#13;&#10;        try {&#13;&#10;            if (reminder.getId() == null || reminder.getId().isEmpty()) {&#13;&#10;                reminder.setId(remindersRef.push().getKey());&#13;&#10;            }&#13;&#10;&#13;&#10;            reminder.setUpdatedAt(System.currentTimeMillis());&#13;&#10;&#13;&#10;            Map&lt;String, Object&gt; reminderValues = reminder.toFirebaseMap();&#13;&#10;            Map&lt;String, Object&gt; childUpdates = new HashMap&lt;&gt;();&#13;&#10;&#13;&#10;            // Lưu vào node reminders&#13;&#10;            childUpdates.put(&quot;/&quot; + REMINDERS_NODE + &quot;/&quot; + reminder.getId(), reminderValues);&#13;&#10;&#13;&#10;            // Lưu vào node user_reminders để query nhanh&#13;&#10;            childUpdates.put(&quot;/&quot; + USER_REMINDERS_NODE + &quot;/&quot; + reminder.getUserId() + &quot;/&quot; + reminder.getId(), true);&#13;&#10;&#13;&#10;            database.updateChildren(childUpdates)&#13;&#10;                    .addOnSuccessListener(aVoid -&gt; callback.onSuccess(reminder.getId()))&#13;&#10;                    .addOnFailureListener(e -&gt; callback.onError(&quot;Lỗi khi thêm nhắc nhở: &quot; + e.getMessage()));&#13;&#10;&#13;&#10;        } catch (Exception e) {&#13;&#10;            callback.onError(&quot;Lỗi khi thêm nhắc nhở: &quot; + e.getMessage());&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void updateReminder(Reminder reminder, RepositoryCallback&lt;Void&gt; callback) {&#13;&#10;        try {&#13;&#10;            if (reminder.getId() == null || reminder.getId().isEmpty()) {&#13;&#10;                callback.onError(&quot;ID nhắc nhở không hợp lệ&quot;);&#13;&#10;                return;&#13;&#10;            }&#13;&#10;&#13;&#10;            reminder.setUpdatedAt(System.currentTimeMillis());&#13;&#10;            Map&lt;String, Object&gt; reminderValues = reminder.toFirebaseMap();&#13;&#10;&#13;&#10;            remindersRef.child(reminder.getId())&#13;&#10;                    .updateChildren(reminderValues)&#13;&#10;                    .addOnSuccessListener(aVoid -&gt; callback.onSuccess(null))&#13;&#10;                    .addOnFailureListener(e -&gt; callback.onError(&quot;Lỗi khi cập nhật nhắc nhở: &quot; + e.getMessage()));&#13;&#10;&#13;&#10;        } catch (Exception e) {&#13;&#10;            callback.onError(&quot;Lỗi khi cập nhật nhắc nhở: &quot; + e.getMessage());&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void deleteReminder(String reminderId, RepositoryCallback&lt;Void&gt; callback) {&#13;&#10;        try {&#13;&#10;            if (reminderId == null || reminderId.isEmpty()) {&#13;&#10;                callback.onError(&quot;ID nhắc nhở không hợp lệ&quot;);&#13;&#10;                return;&#13;&#10;            }&#13;&#10;&#13;&#10;            // Lấy thông tin reminder trước khi xóa để có userId&#13;&#10;            remindersRef.child(reminderId).addListenerForSingleValueEvent(new ValueEventListener() {&#13;&#10;                @Override&#13;&#10;                public void onDataChange(DataSnapshot dataSnapshot) {&#13;&#10;                    if (dataSnapshot.exists()) {&#13;&#10;                        Reminder reminder = dataSnapshot.getValue(Reminder.class);&#13;&#10;                        if (reminder != null) {&#13;&#10;                            Map&lt;String, Object&gt; childUpdates = new HashMap&lt;&gt;();&#13;&#10;                            childUpdates.put(&quot;/&quot; + REMINDERS_NODE + &quot;/&quot; + reminderId, null);&#13;&#10;                            childUpdates.put(&quot;/&quot; + USER_REMINDERS_NODE + &quot;/&quot; + reminder.getUserId() + &quot;/&quot; + reminderId, null);&#13;&#10;&#13;&#10;                            database.updateChildren(childUpdates)&#13;&#10;                                    .addOnSuccessListener(aVoid -&gt; callback.onSuccess(null))&#13;&#10;                                    .addOnFailureListener(e -&gt; callback.onError(&quot;Lỗi khi xóa nhắc nhở: &quot; + e.getMessage()));&#13;&#10;                        } else {&#13;&#10;                            callback.onError(&quot;Không tìm thấy nhắc nhở&quot;);&#13;&#10;                        }&#13;&#10;                    } else {&#13;&#10;                        callback.onError(&quot;Không tìm thấy nhắc nhở&quot;);&#13;&#10;                    }&#13;&#10;                }&#13;&#10;&#13;&#10;                @Override&#13;&#10;                public void onCancelled(DatabaseError databaseError) {&#13;&#10;                    callback.onError(&quot;Lỗi khi xóa nhắc nhở: &quot; + databaseError.getMessage());&#13;&#10;                }&#13;&#10;            });&#13;&#10;&#13;&#10;        } catch (Exception e) {&#13;&#10;            callback.onError(&quot;Lỗi khi xóa nhắc nhở: &quot; + e.getMessage());&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void getUserReminders(String userId, RepositoryCallback&lt;List&lt;Reminder&gt;&gt; callback) {&#13;&#10;        try {&#13;&#10;            if (userId == null || userId.isEmpty()) {&#13;&#10;                callback.onError(&quot;ID người dùng không hợp lệ&quot;);&#13;&#10;                return;&#13;&#10;            }&#13;&#10;&#13;&#10;            userRemindersRef.child(userId).addListenerForSingleValueEvent(new ValueEventListener() {&#13;&#10;                @Override&#13;&#10;                public void onDataChange(DataSnapshot dataSnapshot) {&#13;&#10;                    List&lt;String&gt; reminderIds = new ArrayList&lt;&gt;();&#13;&#10;                    for (DataSnapshot child : dataSnapshot.getChildren()) {&#13;&#10;                        reminderIds.add(child.getKey());&#13;&#10;                    }&#13;&#10;&#13;&#10;                    if (reminderIds.isEmpty()) {&#13;&#10;                        callback.onSuccess(new ArrayList&lt;&gt;());&#13;&#10;                        return;&#13;&#10;                    }&#13;&#10;&#13;&#10;                    // Lấy chi tiết từng reminder&#13;&#10;                    fetchRemindersByIds(reminderIds, callback);&#13;&#10;                }&#13;&#10;&#13;&#10;                @Override&#13;&#10;                public void onCancelled(DatabaseError databaseError) {&#13;&#10;                    callback.onError(&quot;Lỗi khi lấy danh sách nhắc nhở: &quot; + databaseError.getMessage());&#13;&#10;                }&#13;&#10;            });&#13;&#10;&#13;&#10;        } catch (Exception e) {&#13;&#10;            callback.onError(&quot;Lỗi khi lấy danh sách nhắc nhở: &quot; + e.getMessage());&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void getReminderById(String reminderId, RepositoryCallback&lt;Reminder&gt; callback) {&#13;&#10;        try {&#13;&#10;            if (reminderId == null || reminderId.isEmpty()) {&#13;&#10;                callback.onError(&quot;ID nhắc nhở không hợp lệ&quot;);&#13;&#10;                return;&#13;&#10;            }&#13;&#10;&#13;&#10;            remindersRef.child(reminderId).addListenerForSingleValueEvent(new ValueEventListener() {&#13;&#10;                @Override&#13;&#10;                public void onDataChange(DataSnapshot dataSnapshot) {&#13;&#10;                    if (dataSnapshot.exists()) {&#13;&#10;                        Reminder reminder = dataSnapshot.getValue(Reminder.class);&#13;&#10;                        if (reminder != null) {&#13;&#10;                            callback.onSuccess(reminder);&#13;&#10;                        } else {&#13;&#10;                            callback.onError(&quot;Không thể chuyển đổi dữ liệu nhắc nhở&quot;);&#13;&#10;                        }&#13;&#10;                    } else {&#13;&#10;                        callback.onError(&quot;Không tìm thấy nhắc nhở&quot;);&#13;&#10;                    }&#13;&#10;                }&#13;&#10;&#13;&#10;                @Override&#13;&#10;                public void onCancelled(DatabaseError databaseError) {&#13;&#10;                    callback.onError(&quot;Lỗi khi lấy nhắc nhở: &quot; + databaseError.getMessage());&#13;&#10;                }&#13;&#10;            });&#13;&#10;&#13;&#10;        } catch (Exception e) {&#13;&#10;            callback.onError(&quot;Lỗi khi lấy nhắc nhở: &quot; + e.getMessage());&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void getActiveReminders(String userId, RepositoryCallback&lt;List&lt;Reminder&gt;&gt; callback) {&#13;&#10;        getUserReminders(userId, new RepositoryCallback&lt;List&lt;Reminder&gt;&gt;() {&#13;&#10;            @Override&#13;&#10;            public void onSuccess(List&lt;Reminder&gt; reminders) {&#13;&#10;                List&lt;Reminder&gt; activeReminders = new ArrayList&lt;&gt;();&#13;&#10;                for (Reminder reminder : reminders) {&#13;&#10;                    if (reminder.isActive()) {&#13;&#10;                        activeReminders.add(reminder);&#13;&#10;                    }&#13;&#10;                }&#13;&#10;                callback.onSuccess(activeReminders);&#13;&#10;            }&#13;&#10;&#13;&#10;            @Override&#13;&#10;            public void onError(String error) {&#13;&#10;                callback.onError(error);&#13;&#10;            }&#13;&#10;        });&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void toggleReminder(String reminderId, boolean isActive, RepositoryCallback&lt;Void&gt; callback) {&#13;&#10;        try {&#13;&#10;            if (reminderId == null || reminderId.isEmpty()) {&#13;&#10;                callback.onError(&quot;ID nhắc nhở không hợp lệ&quot;);&#13;&#10;                return;&#13;&#10;            }&#13;&#10;&#13;&#10;            Map&lt;String, Object&gt; updates = new HashMap&lt;&gt;();&#13;&#10;            updates.put(&quot;active&quot;, isActive);&#13;&#10;            updates.put(&quot;updatedAt&quot;, System.currentTimeMillis());&#13;&#10;&#13;&#10;            remindersRef.child(reminderId)&#13;&#10;                    .updateChildren(updates)&#13;&#10;                    .addOnSuccessListener(aVoid -&gt; callback.onSuccess(null))&#13;&#10;                    .addOnFailureListener(e -&gt; callback.onError(&quot;Lỗi khi cập nhật trạng thái nhắc nhở: &quot; + e.getMessage()));&#13;&#10;&#13;&#10;        } catch (Exception e) {&#13;&#10;            callback.onError(&quot;Lỗi khi cập nhật trạng thái nhắc nhở: &quot; + e.getMessage());&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void getRemindersByHealthTip(String healthTipId, RepositoryCallback&lt;List&lt;Reminder&gt;&gt; callback) {&#13;&#10;        try {&#13;&#10;            if (healthTipId == null || healthTipId.isEmpty()) {&#13;&#10;                callback.onError(&quot;ID mẹo sức khỏe không hợp lệ&quot;);&#13;&#10;                return;&#13;&#10;            }&#13;&#10;&#13;&#10;            Query query = remindersRef.orderByChild(&quot;healthTipId&quot;).equalTo(healthTipId);&#13;&#10;            query.addListenerForSingleValueEvent(new ValueEventListener() {&#13;&#10;                @Override&#13;&#10;                public void onDataChange(DataSnapshot dataSnapshot) {&#13;&#10;                    List&lt;Reminder&gt; reminders = new ArrayList&lt;&gt;();&#13;&#10;                    for (DataSnapshot child : dataSnapshot.getChildren()) {&#13;&#10;                        Reminder reminder = child.getValue(Reminder.class);&#13;&#10;                        if (reminder != null) {&#13;&#10;                            reminders.add(reminder);&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                    callback.onSuccess(reminders);&#13;&#10;                }&#13;&#10;&#13;&#10;                @Override&#13;&#10;                public void onCancelled(DatabaseError databaseError) {&#13;&#10;                    callback.onError(&quot;Lỗi khi lấy nhắc nhở theo mẹo sức khỏe: &quot; + databaseError.getMessage());&#13;&#10;                }&#13;&#10;            });&#13;&#10;&#13;&#10;        } catch (Exception e) {&#13;&#10;            callback.onError(&quot;Lỗi khi lấy nhắc nhở theo mẹo sức khỏe: &quot; + e.getMessage());&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Phương thức hỗ trợ lấy nhiều reminder theo danh sách ID&#13;&#10;     */&#13;&#10;    private void fetchRemindersByIds(List&lt;String&gt; reminderIds, RepositoryCallback&lt;List&lt;Reminder&gt;&gt; callback) {&#13;&#10;        List&lt;Reminder&gt; reminders = new ArrayList&lt;&gt;();&#13;&#10;        int[] counter = {0};&#13;&#10;&#13;&#10;        for (String reminderId : reminderIds) {&#13;&#10;            remindersRef.child(reminderId).addListenerForSingleValueEvent(new ValueEventListener() {&#13;&#10;                @Override&#13;&#10;                public void onDataChange(DataSnapshot dataSnapshot) {&#13;&#10;                    if (dataSnapshot.exists()) {&#13;&#10;                        Reminder reminder = dataSnapshot.getValue(Reminder.class);&#13;&#10;                        if (reminder != null) {&#13;&#10;                            reminders.add(reminder);&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;&#13;&#10;                    counter[0]++;&#13;&#10;                    if (counter[0] == reminderIds.size()) {&#13;&#10;                        // Sắp xếp theo thời gian tạo (mới nhất trước)&#13;&#10;                        reminders.sort((r1, r2) -&gt; r2.getCreatedAt().compareTo(r1.getCreatedAt()));&#13;&#10;                        callback.onSuccess(reminders);&#13;&#10;                    }&#13;&#10;                }&#13;&#10;&#13;&#10;                @Override&#13;&#10;                public void onCancelled(DatabaseError databaseError) {&#13;&#10;                    counter[0]++;&#13;&#10;                    if (counter[0] == reminderIds.size()) {&#13;&#10;                        callback.onSuccess(reminders);&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            });&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/debug/ReminderTestActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/debug/ReminderTestActivity.java" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.debug;&#10;&#10;import android.app.Activity;&#10;import android.app.AlarmManager;&#10;import android.content.Context;&#10;import android.content.Intent;&#10;import android.net.Uri;&#10;import android.os.Build;&#10;import android.os.Bundle;&#10;import android.provider.Settings;&#10;import android.util.Log;&#10;import android.widget.Button;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.Nullable;&#10;import androidx.core.app.NotificationManagerCompat;&#10;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.data.Reminder;&#10;import com.vhn.doan.services.NotificationService;&#10;import com.vhn.doan.services.ReminderService;&#10;&#10;import java.util.Calendar;&#10;&#10;/**&#10; * Activity để test và debug hệ thống thông báo nhắc nhở&#10; */&#10;public class ReminderTestActivity extends Activity {&#10;&#10;    private static final String TAG = &quot;ReminderTestActivity&quot;;&#10;    &#10;    private TextView tvStatus;&#10;    private Button btnTestNotification;&#10;    private Button btnTest1MinReminder;&#10;    private Button btnCheckPermissions;&#10;    private Button btnRequestPermissions;&#10;    &#10;    private NotificationService notificationService;&#10;    private ReminderService reminderService;&#10;&#10;    @Override&#10;    protected void onCreate(@Nullable Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_reminder_test);&#10;        &#10;        initServices();&#10;        initViews();&#10;        setupClickListeners();&#10;        checkSystemStatus();&#10;    }&#10;&#10;    private void initServices() {&#10;        notificationService = new NotificationService(this);&#10;        reminderService = new ReminderService(this);&#10;    }&#10;&#10;    private void initViews() {&#10;        tvStatus = findViewById(R.id.tv_status);&#10;        btnTestNotification = findViewById(R.id.btn_test_notification);&#10;        btnTest1MinReminder = findViewById(R.id.btn_test_1min_reminder);&#10;        btnCheckPermissions = findViewById(R.id.btn_check_permissions);&#10;        btnRequestPermissions = findViewById(R.id.btn_request_permissions);&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        btnTestNotification.setOnClickListener(v -&gt; testImmediateNotification());&#10;        btnTest1MinReminder.setOnClickListener(v -&gt; test1MinuteReminder());&#10;        btnCheckPermissions.setOnClickListener(v -&gt; checkSystemStatus());&#10;        btnRequestPermissions.setOnClickListener(v -&gt; requestNecessaryPermissions());&#10;    }&#10;&#10;    /**&#10;     * Test thông báo ngay lập tức&#10;     */&#10;    private void testImmediateNotification() {&#10;        Log.d(TAG, &quot;Testing immediate notification...&quot;);&#10;        &#10;        Reminder testReminder = new Reminder();&#10;        testReminder.setId(&quot;test_immediate&quot;);&#10;        testReminder.setTitle(&quot;Test Thông Báo Ngay&quot;);&#10;        testReminder.setDescription(&quot;Đây là thông báo test để kiểm tra hệ thống&quot;);&#10;        testReminder.setActive(true);&#10;        &#10;        notificationService.showReminderNotification(testReminder);&#10;        &#10;        Toast.makeText(this, &quot;Đã gửi thông báo test!&quot;, Toast.LENGTH_SHORT).show();&#10;        Log.d(TAG, &quot;Immediate notification sent&quot;);&#10;    }&#10;&#10;    /**&#10;     * Test reminder 1 phút từ bây giờ&#10;     */&#10;    private void test1MinuteReminder() {&#10;        Log.d(TAG, &quot;Creating 1-minute test reminder...&quot;);&#10;        &#10;        Calendar calendar = Calendar.getInstance();&#10;        calendar.add(Calendar.MINUTE, 1);&#10;        &#10;        Reminder testReminder = new Reminder();&#10;        testReminder.setId(&quot;test_1min_&quot; + System.currentTimeMillis());&#10;        testReminder.setTitle(&quot;Test Reminder 1 Phút&quot;);&#10;        testReminder.setDescription(&quot;Reminder này sẽ kích hoạt sau 1 phút&quot;);&#10;        testReminder.setReminderTime(calendar.getTimeInMillis());&#10;        testReminder.setRepeatType(Reminder.RepeatType.NO_REPEAT);&#10;        testReminder.setActive(true);&#10;        &#10;        reminderService.scheduleReminder(testReminder);&#10;        &#10;        String message = &quot;Đã lên lịch reminder cho &quot; + &#10;            new java.text.SimpleDateFormat(&quot;HH:mm:ss&quot;).format(calendar.getTime());&#10;        Toast.makeText(this, message, Toast.LENGTH_LONG).show();&#10;        &#10;        Log.d(TAG, &quot;1-minute reminder scheduled for: &quot; + calendar.getTime());&#10;        &#10;        updateStatus();&#10;    }&#10;&#10;    /**&#10;     * Kiểm tra trạng thái hệ thống&#10;     */&#10;    private void checkSystemStatus() {&#10;        StringBuilder status = new StringBuilder();&#10;        &#10;        // 1. Kiểm tra quyền thông báo&#10;        boolean notificationEnabled = NotificationManagerCompat.from(this).areNotificationsEnabled();&#10;        status.append(&quot; Quyền thông báo: &quot;).append(notificationEnabled ? &quot;✅ Có&quot; : &quot;❌ Không&quot;).append(&quot;\n\n&quot;);&#10;        &#10;        // 2. Kiểm tra quyền exact alarm (Android 12+)&#10;        boolean exactAlarmPermission = true;&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S) {&#10;            AlarmManager alarmManager = (AlarmManager) getSystemService(Context.ALARM_SERVICE);&#10;            exactAlarmPermission = alarmManager.canScheduleExactAlarms();&#10;        }&#10;        status.append(&quot;⏰ Quyền Exact Alarm: &quot;).append(exactAlarmPermission ? &quot;✅ Có&quot; : &quot;❌ Không&quot;).append(&quot;\n\n&quot;);&#10;        &#10;        // 3. Kiểm tra Battery Optimization&#10;        boolean batteryOptimized = true;&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {&#10;            String packageName = getPackageName();&#10;            android.os.PowerManager pm = (android.os.PowerManager) getSystemService(Context.POWER_SERVICE);&#10;            batteryOptimized = !pm.isIgnoringBatteryOptimizations(packageName);&#10;        }&#10;        status.append(&quot; Battery Optimization: &quot;).append(batteryOptimized ? &quot;❌ Bật (Cần tắt)&quot; : &quot;✅ Tắt&quot;).append(&quot;\n\n&quot;);&#10;        &#10;        // 4. Thông tin phiên bản Android&#10;        status.append(&quot; Android Version: &quot;).append(Build.VERSION.RELEASE)&#10;               .append(&quot; (API &quot;).append(Build.VERSION.SDK_INT).append(&quot;)\n\n&quot;);&#10;        &#10;        // 5. Gợi ý&#10;        if (!notificationEnabled || !exactAlarmPermission || batteryOptimized) {&#10;            status.append(&quot;⚠️ CẦN THỰC HIỆN:\n&quot;);&#10;            if (!notificationEnabled) {&#10;                status.append(&quot;• Bật quyền thông báo\n&quot;);&#10;            }&#10;            if (!exactAlarmPermission) {&#10;                status.append(&quot;• Bật quyền Exact Alarm\n&quot;);&#10;            }&#10;            if (batteryOptimized) {&#10;                status.append(&quot;• Tắt Battery Optimization\n&quot;);&#10;            }&#10;        } else {&#10;            status.append(&quot;✅ Tất cả quyền đã được cấp!&quot;);&#10;        }&#10;        &#10;        tvStatus.setText(status.toString());&#10;        &#10;        Log.d(TAG, &quot;System status checked: &quot; + status.toString());&#10;    }&#10;&#10;    /**&#10;     * Yêu cầu các quyền cần thiết&#10;     */&#10;    private void requestNecessaryPermissions() {&#10;        Log.d(TAG, &quot;Requesting necessary permissions...&quot;);&#10;        &#10;        // 1. Mở settings thông báo&#10;        if (!NotificationManagerCompat.from(this).areNotificationsEnabled()) {&#10;            Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);&#10;            Uri uri = Uri.fromParts(&quot;package&quot;, getPackageName(), null);&#10;            intent.setData(uri);&#10;            startActivity(intent);&#10;            Toast.makeText(this, &quot;Vui lòng bật quyền thông báo&quot;, Toast.LENGTH_LONG).show();&#10;            return;&#10;        }&#10;        &#10;        // 2. Yêu cầu quyền Exact Alarm (Android 12+)&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S) {&#10;            AlarmManager alarmManager = (AlarmManager) getSystemService(Context.ALARM_SERVICE);&#10;            if (!alarmManager.canScheduleExactAlarms()) {&#10;                Intent intent = new Intent(Settings.ACTION_REQUEST_SCHEDULE_EXACT_ALARM);&#10;                startActivity(intent);&#10;                Toast.makeText(this, &quot;Vui lòng bật quyền Exact Alarm&quot;, Toast.LENGTH_LONG).show();&#10;                return;&#10;            }&#10;        }&#10;        &#10;        // 3. Yêu cầu tắt Battery Optimization&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {&#10;            String packageName = getPackageName();&#10;            android.os.PowerManager pm = (android.os.PowerManager) getSystemService(Context.POWER_SERVICE);&#10;            if (!pm.isIgnoringBatteryOptimizations(packageName)) {&#10;                Intent intent = new Intent(Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS);&#10;                intent.setData(Uri.parse(&quot;package:&quot; + packageName));&#10;                startActivity(intent);&#10;                Toast.makeText(this, &quot;Vui lòng tắt Battery Optimization cho app&quot;, Toast.LENGTH_LONG).show();&#10;                return;&#10;            }&#10;        }&#10;        &#10;        Toast.makeText(this, &quot;Tất cả quyền đã được cấp!&quot;, Toast.LENGTH_SHORT).show();&#10;    }&#10;&#10;    private void updateStatus() {&#10;        checkSystemStatus();&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        super.onResume();&#10;        checkSystemStatus();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/reminder/ReminderAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/reminder/ReminderAdapter.java" />
              <option name="originalContent" value="package com.vhn.doan.presentation.reminder;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.ImageButton;&#10;import android.widget.Switch;&#10;import android.widget.TextView;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.data.Reminder;&#10;&#10;import java.text.SimpleDateFormat;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;/**&#10; * Adapter cho RecyclerView hiển thị danh sách nhắc nhở&#10; */&#10;public class ReminderAdapter extends RecyclerView.Adapter&lt;ReminderAdapter.ReminderViewHolder&gt; {&#10;&#10;    private List&lt;Reminder&gt; reminders;&#10;    private OnReminderItemClickListener listener;&#10;    private SimpleDateFormat dateTimeFormat;&#10;&#10;    public interface OnReminderItemClickListener {&#10;        void onReminderClick(Reminder reminder);&#10;        void onToggleClick(Reminder reminder);&#10;        void onDeleteClick(Reminder reminder);&#10;    }&#10;&#10;    public ReminderAdapter(List&lt;Reminder&gt; reminders, OnReminderItemClickListener listener) {&#10;        this.reminders = reminders;&#10;        this.listener = listener;&#10;        this.dateTimeFormat = new SimpleDateFormat(&quot;dd/MM/yyyy HH:mm&quot;, Locale.getDefault());&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public ReminderViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(parent.getContext())&#10;                .inflate(R.layout.item_reminder, parent, false);&#10;        return new ReminderViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull ReminderViewHolder holder, int position) {&#10;        Reminder reminder = reminders.get(position);&#10;        holder.bind(reminder);&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return reminders.size();&#10;    }&#10;&#10;    public void updateReminders(List&lt;Reminder&gt; newReminders) {&#10;        this.reminders.clear();&#10;        this.reminders.addAll(newReminders);&#10;        notifyDataSetChanged();&#10;    }&#10;&#10;    public void addReminder(Reminder reminder) {&#10;        reminders.add(0, reminder);&#10;        notifyItemInserted(0);&#10;    }&#10;&#10;    public void updateReminder(Reminder updatedReminder) {&#10;        for (int i = 0; i &lt; reminders.size(); i++) {&#10;            if (reminders.get(i).getId().equals(updatedReminder.getId())) {&#10;                reminders.set(i, updatedReminder);&#10;                notifyItemChanged(i);&#10;                break;&#10;            }&#10;        }&#10;    }&#10;&#10;    public void removeReminder(Reminder reminder) {&#10;        for (int i = 0; i &lt; reminders.size(); i++) {&#10;            if (reminders.get(i).getId().equals(reminder.getId())) {&#10;                reminders.remove(i);&#10;                notifyItemRemoved(i);&#10;                break;&#10;            }&#10;        }&#10;    }&#10;&#10;    public class ReminderViewHolder extends RecyclerView.ViewHolder {&#10;&#10;        private TextView tvTitle;&#10;        private TextView tvDescription;&#10;        private TextView tvDateTime;&#10;        private TextView tvRepeatType;&#10;        private Switch swActive;&#10;        private ImageButton btnDelete;&#10;        private View statusIndicator;&#10;&#10;        public ReminderViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;&#10;            tvTitle = itemView.findViewById(R.id.tv_reminder_title);&#10;            tvDescription = itemView.findViewById(R.id.tv_reminder_description);&#10;            tvDateTime = itemView.findViewById(R.id.tv_reminder_datetime);&#10;            tvRepeatType = itemView.findViewById(R.id.tv_repeat_type);&#10;            swActive = itemView.findViewById(R.id.sw_reminder_active);&#10;            btnDelete = itemView.findViewById(R.id.btn_delete_reminder);&#10;            statusIndicator = itemView.findViewById(R.id.view_status_indicator);&#10;&#10;            setupClickListeners();&#10;        }&#10;&#10;        private void setupClickListeners() {&#10;            itemView.setOnClickListener(v -&gt; {&#10;                int position = getAdapterPosition();&#10;                if (position != RecyclerView.NO_POSITION &amp;&amp; listener != null) {&#10;                    listener.onReminderClick(reminders.get(position));&#10;                }&#10;            });&#10;&#10;            swActive.setOnClickListener(v -&gt; {&#10;                int position = getAdapterPosition();&#10;                if (position != RecyclerView.NO_POSITION &amp;&amp; listener != null) {&#10;                    listener.onToggleClick(reminders.get(position));&#10;                }&#10;            });&#10;&#10;            btnDelete.setOnClickListener(v -&gt; {&#10;                int position = getAdapterPosition();&#10;                if (position != RecyclerView.NO_POSITION &amp;&amp; listener != null) {&#10;                    listener.onDeleteClick(reminders.get(position));&#10;                }&#10;            });&#10;        }&#10;&#10;        public void bind(Reminder reminder) {&#10;            // Hiển thị tiêu đề&#10;            tvTitle.setText(reminder.getTitle());&#10;&#10;            // Hiển thị mô tả&#10;            if (reminder.getDescription() != null &amp;&amp; !reminder.getDescription().trim().isEmpty()) {&#10;                tvDescription.setText(reminder.getDescription());&#10;                tvDescription.setVisibility(View.VISIBLE);&#10;            } else {&#10;                tvDescription.setVisibility(View.GONE);&#10;            }&#10;&#10;            // Hiển thị thời gian&#10;            if (reminder.getReminderTime() != null) {&#10;                tvDateTime.setText(dateTimeFormat.format(reminder.getReminderTime()));&#10;            } else {&#10;                tvDateTime.setText(&quot;Chưa đặt thời gian&quot;);&#10;            }&#10;&#10;            // Hiển thị loại lặp lại&#10;            tvRepeatType.setText(reminder.getRepeatTypeDisplayName());&#10;&#10;            // Cập nhật trạng thái switch&#10;            swActive.setChecked(reminder.isActive());&#10;&#10;            // Cập nhật indicator trạng thái&#10;            updateStatusIndicator(reminder);&#10;&#10;            // Cập nhật giao diện dựa trên trạng thái&#10;            updateItemAppearance(reminder);&#10;        }&#10;&#10;        private void updateStatusIndicator(Reminder reminder) {&#10;            if (reminder.isActive()) {&#10;                if (reminder.isDue()) {&#10;                    // Nhắc nhở đã đến giờ&#10;                    statusIndicator.setBackgroundResource(R.color.status_due);&#10;                } else {&#10;                    // Nhắc nhở đang hoạt động&#10;                    statusIndicator.setBackgroundResource(R.color.status_active);&#10;                }&#10;            } else {&#10;                // Nhắc nhở đã tắt&#10;                statusIndicator.setBackgroundResource(R.color.status_inactive);&#10;            }&#10;        }&#10;&#10;        private void updateItemAppearance(Reminder reminder) {&#10;            float alpha = reminder.isActive() ? 1.0f : 0.6f;&#10;&#10;            tvTitle.setAlpha(alpha);&#10;            tvDescription.setAlpha(alpha);&#10;            tvDateTime.setAlpha(alpha);&#10;            tvRepeatType.setAlpha(alpha);&#10;&#10;            // Highlight nếu nhắc nhở đã đến giờ và đang hoạt động&#10;            if (reminder.isActive() &amp;&amp; reminder.isDue()) {&#10;                itemView.setBackgroundResource(R.drawable.bg_reminder_due);&#10;            } else {&#10;                itemView.setBackgroundResource(R.drawable.bg_reminder_normal);&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.reminder;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.ImageButton;&#10;import android.widget.Switch;&#10;import android.widget.TextView;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.data.Reminder;&#10;&#10;import java.text.SimpleDateFormat;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;/**&#10; * Adapter cho RecyclerView hiển thị danh sách nhắc nhở&#10; */&#10;public class ReminderAdapter extends RecyclerView.Adapter&lt;ReminderAdapter.ReminderViewHolder&gt; {&#10;&#10;    private List&lt;Reminder&gt; reminders;&#10;    private OnReminderItemClickListener listener;&#10;    private SimpleDateFormat dateTimeFormat;&#10;&#10;    public interface OnReminderItemClickListener {&#10;        void onReminderClick(Reminder reminder);&#10;        void onToggleClick(Reminder reminder);&#10;        void onDeleteClick(Reminder reminder);&#10;    }&#10;&#10;    public ReminderAdapter(List&lt;Reminder&gt; reminders, OnReminderItemClickListener listener) {&#10;        this.reminders = reminders;&#10;        this.listener = listener;&#10;        this.dateTimeFormat = new SimpleDateFormat(&quot;dd/MM/yyyy HH:mm&quot;, Locale.getDefault());&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public ReminderViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(parent.getContext())&#10;                .inflate(R.layout.item_reminder, parent, false);&#10;        return new ReminderViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull ReminderViewHolder holder, int position) {&#10;        Reminder reminder = reminders.get(position);&#10;        holder.bind(reminder);&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return reminders.size();&#10;    }&#10;&#10;    public void updateReminders(List&lt;Reminder&gt; newReminders) {&#10;        this.reminders.clear();&#10;        this.reminders.addAll(newReminders);&#10;        notifyDataSetChanged();&#10;    }&#10;&#10;    public void addReminder(Reminder reminder) {&#10;        reminders.add(0, reminder);&#10;        notifyItemInserted(0);&#10;    }&#10;&#10;    public void updateReminder(Reminder updatedReminder) {&#10;        for (int i = 0; i &lt; reminders.size(); i++) {&#10;            if (reminders.get(i).getId().equals(updatedReminder.getId())) {&#10;                reminders.set(i, updatedReminder);&#10;                notifyItemChanged(i);&#10;                break;&#10;            }&#10;        }&#10;    }&#10;&#10;    public void removeReminder(Reminder reminder) {&#10;        for (int i = 0; i &lt; reminders.size(); i++) {&#10;            if (reminders.get(i).getId().equals(reminder.getId())) {&#10;                reminders.remove(i);&#10;                notifyItemRemoved(i);&#10;                break;&#10;            }&#10;        }&#10;    }&#10;&#10;    public class ReminderViewHolder extends RecyclerView.ViewHolder {&#10;&#10;        private TextView tvTitle;&#10;        private TextView tvDescription;&#10;        private TextView tvDateTime;&#10;        private TextView tvRepeatType;&#10;        private Switch swActive;&#10;        private ImageButton btnDelete;&#10;        private View statusIndicator;&#10;&#10;        public ReminderViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;&#10;            tvTitle = itemView.findViewById(R.id.tv_reminder_title);&#10;            tvDescription = itemView.findViewById(R.id.tv_reminder_description);&#10;            tvDateTime = itemView.findViewById(R.id.tv_reminder_datetime);&#10;            tvRepeatType = itemView.findViewById(R.id.tv_repeat_type);&#10;            swActive = itemView.findViewById(R.id.sw_reminder_active);&#10;            btnDelete = itemView.findViewById(R.id.btn_delete_reminder);&#10;            statusIndicator = itemView.findViewById(R.id.view_status_indicator);&#10;&#10;            setupClickListeners();&#10;        }&#10;&#10;        private void setupClickListeners() {&#10;            itemView.setOnClickListener(v -&gt; {&#10;                int position = getAdapterPosition();&#10;                if (position != RecyclerView.NO_POSITION &amp;&amp; listener != null) {&#10;                    listener.onReminderClick(reminders.get(position));&#10;                }&#10;            });&#10;&#10;            swActive.setOnClickListener(v -&gt; {&#10;                int position = getAdapterPosition();&#10;                if (position != RecyclerView.NO_POSITION &amp;&amp; listener != null) {&#10;                    listener.onToggleClick(reminders.get(position));&#10;                }&#10;            });&#10;&#10;            btnDelete.setOnClickListener(v -&gt; {&#10;                int position = getAdapterPosition();&#10;                if (position != RecyclerView.NO_POSITION &amp;&amp; listener != null) {&#10;                    listener.onDeleteClick(reminders.get(position));&#10;                }&#10;            });&#10;        }&#10;&#10;        public void bind(Reminder reminder) {&#10;            // Hiển thị tiêu đề&#10;            tvTitle.setText(reminder.getTitle());&#10;&#10;            // Hiển thị mô tả&#10;            if (reminder.getDescription() != null &amp;&amp; !reminder.getDescription().trim().isEmpty()) {&#10;                tvDescription.setText(reminder.getDescription());&#10;                tvDescription.setVisibility(View.VISIBLE);&#10;            } else {&#10;                tvDescription.setVisibility(View.GONE);&#10;            }&#10;&#10;            // Hiển thị thời gian&#10;            if (reminder.getReminderTimeAsDate() != null) {&#10;                tvDateTime.setText(dateTimeFormat.format(reminder.getReminderTimeAsDate()));&#10;            } else {&#10;                tvDateTime.setText(itemView.getContext().getString(R.string.no_time_set));&#10;            }&#10;&#10;            // Hiển thị loại lặp lại&#10;            tvRepeatType.setText(reminder.getRepeatTypeDisplayName());&#10;&#10;            // Cập nhật trạng thái switch&#10;            swActive.setChecked(reminder.isActive());&#10;&#10;            // Cập nhật indicator trạng thái&#10;            updateStatusIndicator(reminder);&#10;&#10;            // Cập nhật giao diện dựa trên trạng thái&#10;            updateItemAppearance(reminder);&#10;        }&#10;&#10;        private void updateStatusIndicator(Reminder reminder) {&#10;            if (reminder.isActive()) {&#10;                if (reminder.isDue()) {&#10;                    // Nhắc nhở đã đến giờ&#10;                    statusIndicator.setBackgroundResource(R.color.status_due);&#10;                } else {&#10;                    // Nhắc nhở đang hoạt động&#10;                    statusIndicator.setBackgroundResource(R.color.status_active);&#10;                }&#10;            } else {&#10;                // Nhắc nhở đã tắt&#10;                statusIndicator.setBackgroundResource(R.color.status_inactive);&#10;            }&#10;        }&#10;&#10;        private void updateItemAppearance(Reminder reminder) {&#10;            float alpha = reminder.isActive() ? 1.0f : 0.6f;&#10;&#10;            tvTitle.setAlpha(alpha);&#10;            tvDescription.setAlpha(alpha);&#10;            tvDateTime.setAlpha(alpha);&#10;            tvRepeatType.setAlpha(alpha);&#10;&#10;            // Highlight nếu nhắc nhở đã đến giờ và đang hoạt động&#10;            if (reminder.isActive() &amp;&amp; reminder.isDue()) {&#10;                itemView.setBackgroundResource(R.drawable.bg_reminder_due);&#10;            } else {&#10;                itemView.setBackgroundResource(R.drawable.bg_reminder_normal);&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/reminder/ReminderDialog.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/reminder/ReminderDialog.java" />
              <option name="originalContent" value="package com.vhn.doan.presentation.reminder;&#10;&#10;import android.app.AlertDialog;&#10;import android.app.DatePickerDialog;&#10;import android.app.TimePickerDialog;&#10;import android.content.Context;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.widget.ArrayAdapter;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.Spinner;&#10;import android.widget.Switch;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.data.Reminder;&#10;&#10;import java.text.SimpleDateFormat;&#10;import java.util.Calendar;&#10;import java.util.Date;&#10;import java.util.Locale;&#10;&#10;/**&#10; * Dialog để tạo hoặc chỉnh sửa nhắc nhở&#10; */&#10;public class ReminderDialog {&#10;&#10;    private Context context;&#10;    private OnReminderDialogListener listener;&#10;    private AlertDialog dialog;&#10;    private Reminder reminder;&#10;    private boolean isEditMode;&#10;&#10;    // UI Components&#10;    private EditText etTitle;&#10;    private EditText etDescription;&#10;    private TextView tvSelectedDate;&#10;    private TextView tvSelectedTime;&#10;    private Spinner spRepeatType;&#10;    private Switch swActive;&#10;    private Button btnSelectDate;&#10;    private Button btnSelectTime;&#10;    private Button btnSave;&#10;    private Button btnCancel;&#10;&#10;    // Date and Time&#10;    private Calendar selectedDateTime;&#10;    private SimpleDateFormat dateFormat;&#10;    private SimpleDateFormat timeFormat;&#10;&#10;    // Repeat types&#10;    private String[] repeatTypes = {&#10;        &quot;Không lặp&quot;,&#10;        &quot;Hàng ngày&quot;,&#10;        &quot;Hàng tuần&quot;,&#10;        &quot;Hàng tháng&quot;&#10;    };&#10;&#10;    public interface OnReminderDialogListener {&#10;        void onReminderSaved(Reminder reminder);&#10;        void onReminderCanceled();&#10;    }&#10;&#10;    public ReminderDialog(Context context, OnReminderDialogListener listener) {&#10;        this.context = context;&#10;        this.listener = listener;&#10;        this.isEditMode = false;&#10;        this.selectedDateTime = Calendar.getInstance();&#10;        this.dateFormat = new SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault());&#10;        this.timeFormat = new SimpleDateFormat(&quot;HH:mm&quot;, Locale.getDefault());&#10;&#10;        // Đặt thời gian mặc định là 1 giờ sau thời điểm hiện tại&#10;        selectedDateTime.add(Calendar.HOUR_OF_DAY, 1);&#10;    }&#10;&#10;    public ReminderDialog(Context context, Reminder reminder, OnReminderDialogListener listener) {&#10;        this(context, listener);&#10;        this.reminder = reminder;&#10;        this.isEditMode = reminder != null;&#10;&#10;        // Kiểm tra reminder không null trước khi truy cập properties&#10;        if (reminder != null &amp;&amp; reminder.getReminderTime() != null) {&#10;            selectedDateTime.setTime(reminder.getReminderTime());&#10;        } else {&#10;            // Đặt thời gian mặc định là 1 giờ sau thời điểm hiện tại nếu reminder null&#10;            selectedDateTime = Calendar.getInstance();&#10;            selectedDateTime.add(Calendar.HOUR_OF_DAY, 1);&#10;        }&#10;    }&#10;&#10;    public void show() {&#10;        View dialogView = LayoutInflater.from(context).inflate(R.layout.dialog_reminder, null);&#10;&#10;        initViews(dialogView);&#10;        setupSpinner();&#10;        setupClickListeners();&#10;        populateData();&#10;&#10;        AlertDialog.Builder builder = new AlertDialog.Builder(context);&#10;        builder.setView(dialogView);&#10;        builder.setTitle(isEditMode ? &quot;Chỉnh sửa nhắc nhở&quot; : &quot;Tạo nhắc nhở mới&quot;);&#10;&#10;        dialog = builder.create();&#10;        dialog.show();&#10;    }&#10;&#10;    private void initViews(View view) {&#10;        etTitle = view.findViewById(R.id.et_reminder_title);&#10;        etDescription = view.findViewById(R.id.et_reminder_description);&#10;        tvSelectedDate = view.findViewById(R.id.tv_selected_date);&#10;        tvSelectedTime = view.findViewById(R.id.tv_selected_time);&#10;        spRepeatType = view.findViewById(R.id.sp_repeat_type);&#10;        swActive = view.findViewById(R.id.sw_reminder_active);&#10;        btnSelectDate = view.findViewById(R.id.btn_select_date);&#10;        btnSelectTime = view.findViewById(R.id.btn_select_time);&#10;        btnSave = view.findViewById(R.id.btn_save_reminder);&#10;        btnCancel = view.findViewById(R.id.btn_cancel_reminder);&#10;&#10;        // Hiển thị thời gian đã chọn&#10;        updateDateTimeDisplay();&#10;    }&#10;&#10;    private void setupSpinner() {&#10;        ArrayAdapter&lt;String&gt; adapter = new ArrayAdapter&lt;&gt;(&#10;            context,&#10;            android.R.layout.simple_spinner_item,&#10;            repeatTypes&#10;        );&#10;        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spRepeatType.setAdapter(adapter);&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        btnSelectDate.setOnClickListener(v -&gt; showDatePicker());&#10;        btnSelectTime.setOnClickListener(v -&gt; showTimePicker());&#10;        btnSave.setOnClickListener(v -&gt; saveReminder());&#10;        btnCancel.setOnClickListener(v -&gt; cancelDialog());&#10;    }&#10;&#10;    private void populateData() {&#10;        if (isEditMode &amp;&amp; reminder != null) {&#10;            etTitle.setText(reminder.getTitle());&#10;            etDescription.setText(reminder.getDescription());&#10;            spRepeatType.setSelection(reminder.getRepeatType());&#10;            swActive.setChecked(reminder.isActive());&#10;        } else {&#10;            // Giá trị mặc định cho reminder mới&#10;            swActive.setChecked(true);&#10;            spRepeatType.setSelection(0); // Không lặp&#10;        }&#10;    }&#10;&#10;    private void showDatePicker() {&#10;        DatePickerDialog datePickerDialog = new DatePickerDialog(&#10;            context,&#10;            (view, year, month, dayOfMonth) -&gt; {&#10;                selectedDateTime.set(Calendar.YEAR, year);&#10;                selectedDateTime.set(Calendar.MONTH, month);&#10;                selectedDateTime.set(Calendar.DAY_OF_MONTH, dayOfMonth);&#10;                updateDateTimeDisplay();&#10;            },&#10;            selectedDateTime.get(Calendar.YEAR),&#10;            selectedDateTime.get(Calendar.MONTH),&#10;            selectedDateTime.get(Calendar.DAY_OF_MONTH)&#10;        );&#10;&#10;        // Không cho phép chọn ngày trong quá khứ&#10;        datePickerDialog.getDatePicker().setMinDate(System.currentTimeMillis());&#10;        datePickerDialog.show();&#10;    }&#10;&#10;    private void showTimePicker() {&#10;        TimePickerDialog timePickerDialog = new TimePickerDialog(&#10;            context,&#10;            (view, hourOfDay, minute) -&gt; {&#10;                selectedDateTime.set(Calendar.HOUR_OF_DAY, hourOfDay);&#10;                selectedDateTime.set(Calendar.MINUTE, minute);&#10;                selectedDateTime.set(Calendar.SECOND, 0);&#10;                updateDateTimeDisplay();&#10;            },&#10;            selectedDateTime.get(Calendar.HOUR_OF_DAY),&#10;            selectedDateTime.get(Calendar.MINUTE),&#10;            true&#10;        );&#10;        timePickerDialog.show();&#10;    }&#10;&#10;    private void updateDateTimeDisplay() {&#10;        tvSelectedDate.setText(dateFormat.format(selectedDateTime.getTime()));&#10;        tvSelectedTime.setText(timeFormat.format(selectedDateTime.getTime()));&#10;    }&#10;&#10;    private void saveReminder() {&#10;        String title = etTitle.getText().toString().trim();&#10;        String description = etDescription.getText().toString().trim();&#10;&#10;        // Validation&#10;        if (title.isEmpty()) {&#10;            etTitle.setError(&quot;Vui lòng nhập tiêu đề nhắc nhở&quot;);&#10;            etTitle.requestFocus();&#10;            return;&#10;        }&#10;&#10;        // Kiểm tra thời gian không được trong quá khứ&#10;        if (selectedDateTime.getTimeInMillis() &lt;= System.currentTimeMillis()) {&#10;            Toast.makeText(context, &quot;Thời gian nhắc nhở phải sau thời điểm hiện tại&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        // Tạo hoặc cập nhật reminder&#10;        if (reminder == null) {&#10;            reminder = new Reminder();&#10;        }&#10;&#10;        reminder.setTitle(title);&#10;        reminder.setDescription(description);&#10;        reminder.setReminderTime(selectedDateTime.getTime());&#10;        reminder.setRepeatType(spRepeatType.getSelectedItemPosition());&#10;        reminder.setActive(swActive.isChecked());&#10;&#10;        if (listener != null) {&#10;            listener.onReminderSaved(reminder);&#10;        }&#10;&#10;        dialog.dismiss();&#10;    }&#10;&#10;    private void cancelDialog() {&#10;        if (listener != null) {&#10;            listener.onReminderCanceled();&#10;        }&#10;        dialog.dismiss();&#10;    }&#10;&#10;    public void dismiss() {&#10;        if (dialog != null &amp;&amp; dialog.isShowing()) {&#10;            dialog.dismiss();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.reminder;&#13;&#10;&#13;&#10;import android.app.AlertDialog;&#13;&#10;import android.app.DatePickerDialog;&#13;&#10;import android.app.TimePickerDialog;&#13;&#10;import android.content.Context;&#13;&#10;import android.view.LayoutInflater;&#13;&#10;import android.view.View;&#13;&#10;import android.widget.ArrayAdapter;&#13;&#10;import android.widget.Button;&#13;&#10;import android.widget.EditText;&#13;&#10;import android.widget.Spinner;&#13;&#10;import android.widget.Switch;&#13;&#10;import android.widget.TextView;&#13;&#10;import android.widget.Toast;&#13;&#10;&#13;&#10;import com.vhn.doan.R;&#13;&#10;import com.vhn.doan.data.Reminder;&#13;&#10;&#13;&#10;import java.text.SimpleDateFormat;&#13;&#10;import java.util.Calendar;&#13;&#10;import java.util.Date;&#13;&#10;import java.util.Locale;&#13;&#10;&#13;&#10;/**&#13;&#10; * Dialog để tạo hoặc chỉnh sửa nhắc nhở&#13;&#10; */&#13;&#10;public class ReminderDialog {&#13;&#10;&#13;&#10;    private Context context;&#13;&#10;    private OnReminderDialogListener listener;&#13;&#10;    private AlertDialog dialog;&#13;&#10;    private Reminder reminder;&#13;&#10;    private boolean isEditMode;&#13;&#10;&#13;&#10;    // UI Components&#13;&#10;    private EditText etTitle;&#13;&#10;    private EditText etDescription;&#13;&#10;    private TextView tvSelectedDate;&#13;&#10;    private TextView tvSelectedTime;&#13;&#10;    private Spinner spRepeatType;&#13;&#10;    private Switch swActive;&#13;&#10;    private Button btnSelectDate;&#13;&#10;    private Button btnSelectTime;&#13;&#10;    private Button btnSave;&#13;&#10;    private Button btnCancel;&#13;&#10;&#13;&#10;    // Date and Time&#13;&#10;    private Calendar selectedDateTime;&#13;&#10;    private SimpleDateFormat dateFormat;&#13;&#10;    private SimpleDateFormat timeFormat;&#13;&#10;&#13;&#10;    // Repeat types&#13;&#10;    private String[] repeatTypes = {&#13;&#10;        &quot;Không lặp&quot;,&#13;&#10;        &quot;Hàng ngày&quot;,&#13;&#10;        &quot;Hàng tuần&quot;,&#13;&#10;        &quot;Hàng tháng&quot;&#13;&#10;    };&#13;&#10;&#13;&#10;    public interface OnReminderDialogListener {&#13;&#10;        void onReminderSaved(Reminder reminder);&#13;&#10;        void onReminderCanceled();&#13;&#10;    }&#13;&#10;&#13;&#10;    public ReminderDialog(Context context, OnReminderDialogListener listener) {&#13;&#10;        this.context = context;&#13;&#10;        this.listener = listener;&#13;&#10;        this.isEditMode = false;&#13;&#10;        this.selectedDateTime = Calendar.getInstance();&#13;&#10;        this.dateFormat = new SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault());&#13;&#10;        this.timeFormat = new SimpleDateFormat(&quot;HH:mm&quot;, Locale.getDefault());&#13;&#10;&#13;&#10;        // Đặt thời gian mặc định là 1 giờ sau thời điểm hiện tại&#13;&#10;        selectedDateTime.add(Calendar.HOUR_OF_DAY, 1);&#13;&#10;    }&#13;&#10;&#13;&#10;    public ReminderDialog(Context context, Reminder reminder, OnReminderDialogListener listener) {&#13;&#10;        this(context, listener);&#13;&#10;        this.reminder = reminder;&#13;&#10;        this.isEditMode = reminder != null;&#13;&#10;&#13;&#10;        // Kiểm tra reminder không null trước khi truy cập properties&#13;&#10;        if (reminder != null &amp;&amp; reminder.getReminderTimeAsDate() != null) {&#13;&#10;            selectedDateTime.setTime(reminder.getReminderTimeAsDate());&#13;&#10;        } else {&#13;&#10;            // Đặt thời gian mặc định là 1 giờ sau thời điểm hiện tại nếu reminder null&#13;&#10;            selectedDateTime = Calendar.getInstance();&#13;&#10;            selectedDateTime.add(Calendar.HOUR_OF_DAY, 1);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public void show() {&#13;&#10;        View dialogView = LayoutInflater.from(context).inflate(R.layout.dialog_reminder, null);&#13;&#10;&#13;&#10;        initViews(dialogView);&#13;&#10;        setupSpinner();&#13;&#10;        setupClickListeners();&#13;&#10;        populateData();&#13;&#10;&#13;&#10;        AlertDialog.Builder builder = new AlertDialog.Builder(context);&#13;&#10;        builder.setView(dialogView);&#13;&#10;        builder.setTitle(isEditMode ? &quot;Chỉnh sửa nhắc nhở&quot; : &quot;Tạo nhắc nhở mới&quot;);&#13;&#10;&#13;&#10;        dialog = builder.create();&#13;&#10;        dialog.show();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void initViews(View view) {&#13;&#10;        etTitle = view.findViewById(R.id.et_reminder_title);&#13;&#10;        etDescription = view.findViewById(R.id.et_reminder_description);&#13;&#10;        tvSelectedDate = view.findViewById(R.id.tv_selected_date);&#13;&#10;        tvSelectedTime = view.findViewById(R.id.tv_selected_time);&#13;&#10;        spRepeatType = view.findViewById(R.id.sp_repeat_type);&#13;&#10;        swActive = view.findViewById(R.id.sw_reminder_active);&#13;&#10;        btnSelectDate = view.findViewById(R.id.btn_select_date);&#13;&#10;        btnSelectTime = view.findViewById(R.id.btn_select_time);&#13;&#10;        btnSave = view.findViewById(R.id.btn_save_reminder);&#13;&#10;        btnCancel = view.findViewById(R.id.btn_cancel_reminder);&#13;&#10;&#13;&#10;        // Hiển thị thời gian đã chọn&#13;&#10;        updateDateTimeDisplay();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupSpinner() {&#13;&#10;        ArrayAdapter&lt;String&gt; adapter = new ArrayAdapter&lt;&gt;(&#13;&#10;            context,&#13;&#10;            android.R.layout.simple_spinner_item,&#13;&#10;            repeatTypes&#13;&#10;        );&#13;&#10;        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#13;&#10;        spRepeatType.setAdapter(adapter);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupClickListeners() {&#13;&#10;        btnSelectDate.setOnClickListener(v -&gt; showDatePicker());&#13;&#10;        btnSelectTime.setOnClickListener(v -&gt; showTimePicker());&#13;&#10;        btnSave.setOnClickListener(v -&gt; saveReminder());&#13;&#10;        btnCancel.setOnClickListener(v -&gt; cancelDialog());&#13;&#10;    }&#13;&#10;&#13;&#10;    private void populateData() {&#13;&#10;        if (isEditMode &amp;&amp; reminder != null) {&#13;&#10;            etTitle.setText(reminder.getTitle());&#13;&#10;            etDescription.setText(reminder.getDescription());&#13;&#10;            spRepeatType.setSelection(reminder.getRepeatType());&#13;&#10;            swActive.setChecked(reminder.isActive());&#13;&#10;        } else {&#13;&#10;            // Giá trị mặc định cho reminder mới&#13;&#10;            swActive.setChecked(true);&#13;&#10;            spRepeatType.setSelection(0); // Không lặp&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void showDatePicker() {&#13;&#10;        DatePickerDialog datePickerDialog = new DatePickerDialog(&#13;&#10;            context,&#13;&#10;            (view, year, month, dayOfMonth) -&gt; {&#13;&#10;                selectedDateTime.set(Calendar.YEAR, year);&#13;&#10;                selectedDateTime.set(Calendar.MONTH, month);&#13;&#10;                selectedDateTime.set(Calendar.DAY_OF_MONTH, dayOfMonth);&#13;&#10;                updateDateTimeDisplay();&#13;&#10;            },&#13;&#10;            selectedDateTime.get(Calendar.YEAR),&#13;&#10;            selectedDateTime.get(Calendar.MONTH),&#13;&#10;            selectedDateTime.get(Calendar.DAY_OF_MONTH)&#13;&#10;        );&#13;&#10;&#13;&#10;        // Không cho phép chọn ngày trong quá khứ&#13;&#10;        datePickerDialog.getDatePicker().setMinDate(System.currentTimeMillis());&#13;&#10;        datePickerDialog.show();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void showTimePicker() {&#13;&#10;        TimePickerDialog timePickerDialog = new TimePickerDialog(&#13;&#10;            context,&#13;&#10;            (view, hourOfDay, minute) -&gt; {&#13;&#10;                selectedDateTime.set(Calendar.HOUR_OF_DAY, hourOfDay);&#13;&#10;                selectedDateTime.set(Calendar.MINUTE, minute);&#13;&#10;                selectedDateTime.set(Calendar.SECOND, 0);&#13;&#10;                updateDateTimeDisplay();&#13;&#10;            },&#13;&#10;            selectedDateTime.get(Calendar.HOUR_OF_DAY),&#13;&#10;            selectedDateTime.get(Calendar.MINUTE),&#13;&#10;            true&#13;&#10;        );&#13;&#10;        timePickerDialog.show();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void updateDateTimeDisplay() {&#13;&#10;        tvSelectedDate.setText(dateFormat.format(selectedDateTime.getTime()));&#13;&#10;        tvSelectedTime.setText(timeFormat.format(selectedDateTime.getTime()));&#13;&#10;    }&#13;&#10;&#13;&#10;    private void saveReminder() {&#13;&#10;        String title = etTitle.getText().toString().trim();&#13;&#10;        String description = etDescription.getText().toString().trim();&#13;&#10;&#13;&#10;        // Validation&#13;&#10;        if (title.isEmpty()) {&#13;&#10;            etTitle.setError(&quot;Vui lòng nhập tiêu đề nhắc nhở&quot;);&#13;&#10;            etTitle.requestFocus();&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        // Kiểm tra thời gian không được trong quá khứ&#13;&#10;        if (selectedDateTime.getTimeInMillis() &lt;= System.currentTimeMillis()) {&#13;&#10;            Toast.makeText(context, &quot;Thời gian nhắc nhở phải sau thời điểm hiện tại&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        // Tạo hoặc cập nhật reminder&#13;&#10;        if (reminder == null) {&#13;&#10;            reminder = new Reminder();&#13;&#10;        }&#13;&#10;&#13;&#10;        reminder.setTitle(title);&#13;&#10;        reminder.setDescription(description);&#13;&#10;        reminder.setReminderTime(selectedDateTime.getTimeInMillis());&#13;&#10;        reminder.setRepeatType(spRepeatType.getSelectedItemPosition());&#13;&#10;        reminder.setActive(swActive.isChecked());&#13;&#10;&#13;&#10;        if (listener != null) {&#13;&#10;            listener.onReminderSaved(reminder);&#13;&#10;        }&#13;&#10;&#13;&#10;        dialog.dismiss();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void cancelDialog() {&#13;&#10;        if (listener != null) {&#13;&#10;            listener.onReminderCanceled();&#13;&#10;        }&#13;&#10;        dialog.dismiss();&#13;&#10;    }&#13;&#10;&#13;&#10;    public void dismiss() {&#13;&#10;        if (dialog != null &amp;&amp; dialog.isShowing()) {&#13;&#10;            dialog.dismiss();&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/reminder/ReminderFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/reminder/ReminderFragment.java" />
              <option name="originalContent" value="package com.vhn.doan.presentation.reminder;&#10;&#10;import android.app.AlertDialog;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.Menu;&#10;import android.view.MenuInflater;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.Button;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.appcompat.widget.SearchView;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;&#10;&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.data.Reminder;&#10;import com.vhn.doan.data.repository.ReminderRepository;&#10;import com.vhn.doan.data.repository.ReminderRepositoryImpl;&#10;import com.vhn.doan.utils.UserSessionManager;&#10;import com.vhn.doan.presentation.base.BaseFragment;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;import javax.inject.Inject;&#10;&#10;/**&#10; * Fragment hiển thị danh sách nhắc nhở theo kiến trúc MVP&#10; */&#10;public class ReminderFragment extends BaseFragment implements ReminderContract.View {&#10;&#10;    private ReminderPresenter presenter;&#10;&#10;    // UI Components&#10;    private RecyclerView recyclerView;&#10;    private SwipeRefreshLayout swipeRefresh;&#10;    private FloatingActionButton fabAdd;&#10;    private View emptyStateView;&#10;    private View loadingView;&#10;&#10;    // Adapter&#10;    private ReminderAdapter adapter;&#10;&#10;    // Search&#10;    private SearchView searchView;&#10;    private boolean showActiveOnly = false;&#10;&#10;    public static ReminderFragment newInstance() {&#10;        return new ReminderFragment();&#10;    }&#10;&#10;    @Override&#10;    public void onCreate(@Nullable Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setHasOptionsMenu(true);&#10;&#10;        // Khởi tạo presenter thủ công thay vì dùng @Inject&#10;        initPresenter();&#10;    }&#10;&#10;    /**&#10;     * Khởi tạo presenter với các dependencies cần thiết&#10;     */&#10;    private void initPresenter() {&#10;        ReminderRepository reminderRepository = new ReminderRepositoryImpl();&#10;        UserSessionManager userSessionManager = new UserSessionManager(requireContext());&#10;        presenter = new ReminderPresenter(reminderRepository, userSessionManager);&#10;    }&#10;&#10;    @Nullable&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,&#10;                           @Nullable Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_reminder, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;&#10;        initViews(view);&#10;        setupRecyclerView();&#10;        setupListeners();&#10;&#10;        presenter.attachView(this);&#10;        presenter.start();&#10;    }&#10;&#10;    @Override&#10;    public void onDestroyView() {&#10;        super.onDestroyView();&#10;        if (presenter != null) {&#10;            presenter.detachView();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onCreateOptionsMenu(@NonNull Menu menu, @NonNull MenuInflater inflater) {&#10;        inflater.inflate(R.menu.menu_reminder, menu);&#10;&#10;        MenuItem searchItem = menu.findItem(R.id.action_search);&#10;        searchView = (SearchView) searchItem.getActionView();&#10;&#10;        setupSearchView();&#10;        super.onCreateOptionsMenu(menu, inflater);&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        int itemId = item.getItemId();&#10;&#10;        if (itemId == R.id.action_filter_active) {&#10;            showActiveOnly = !showActiveOnly;&#10;            updateFilterMenuItem(item);&#10;            presenter.filterReminders(showActiveOnly);&#10;            return true;&#10;        } else if (itemId == R.id.action_refresh) {&#10;            presenter.refreshReminders();&#10;            return true;&#10;        } else if (itemId == R.id.action_debug_notifications) {&#10;            openDebugActivity();&#10;            return true;&#10;        }&#10;&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;&#10;    @Override&#10;    protected void initViews(View view) {&#10;        recyclerView = view.findViewById(R.id.recycler_view_reminders);&#10;        swipeRefresh = view.findViewById(R.id.swipe_refresh_reminders);&#10;        fabAdd = view.findViewById(R.id.fab_add_reminder);&#10;        emptyStateView = view.findViewById(R.id.layout_empty_state);&#10;        loadingView = view.findViewById(R.id.layout_loading);&#10;&#10;        // Setup button trong Empty State&#10;        Button btnCreateFirstReminder = view.findViewById(R.id.btn_create_first_reminder);&#10;        if (btnCreateFirstReminder != null) {&#10;            btnCreateFirstReminder.setOnClickListener(v -&gt; presenter.createReminder());&#10;        }&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        adapter = new ReminderAdapter(new ArrayList&lt;&gt;(), new ReminderAdapter.OnReminderItemClickListener() {&#10;            @Override&#10;            public void onReminderClick(Reminder reminder) {&#10;                presenter.editReminder(reminder);&#10;            }&#10;&#10;            @Override&#10;            public void onToggleClick(Reminder reminder) {&#10;                presenter.toggleReminder(reminder);&#10;            }&#10;&#10;            @Override&#10;            public void onDeleteClick(Reminder reminder) {&#10;                presenter.deleteReminder(reminder);&#10;            }&#10;        });&#10;&#10;        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));&#10;        recyclerView.setAdapter(adapter);&#10;    }&#10;&#10;    @Override&#10;    protected void setupListeners() {&#10;        // Setup các listeners cụ thể&#10;        setupSwipeRefresh();&#10;        setupFab();&#10;        if (searchView != null) {&#10;            setupSearchView();&#10;        }&#10;    }&#10;&#10;    private void setupSwipeRefresh() {&#10;        swipeRefresh.setOnRefreshListener(() -&gt; presenter.refreshReminders());&#10;        swipeRefresh.setColorSchemeResources(&#10;            R.color.primary_color,&#10;            R.color.primary_dark,&#10;            R.color.accent_color&#10;        );&#10;    }&#10;&#10;    private void setupFab() {&#10;        fabAdd.setOnClickListener(v -&gt; presenter.createReminder());&#10;    }&#10;&#10;    private void setupSearchView() {&#10;        if (searchView != null) {&#10;            searchView.setQueryHint(&quot;Tìm kiếm nhắc nhở...&quot;);&#10;            searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {&#10;                @Override&#10;                public boolean onQueryTextSubmit(String query) {&#10;                    presenter.searchReminders(query);&#10;                    return true;&#10;                }&#10;&#10;                @Override&#10;                public boolean onQueryTextChange(String newText) {&#10;                    presenter.searchReminders(newText);&#10;                    return true;&#10;                }&#10;            });&#10;        }&#10;    }&#10;&#10;    private void updateFilterMenuItem(MenuItem item) {&#10;        if (showActiveOnly) {&#10;            item.setTitle(&quot;Hiển thị tất cả&quot;);&#10;            item.setIcon(R.drawable.ic_filter_list);&#10;        } else {&#10;            item.setTitle(&quot;Chỉ hiển thị đang hoạt động&quot;);&#10;            item.setIcon(R.drawable.ic_filter_list_off);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Mở ReminderTestActivity để debug hệ thống thông báo&#10;     */&#10;    private void openDebugActivity() {&#10;        if (getContext() != null) {&#10;            android.content.Intent intent = new android.content.Intent(getContext(),&#10;                com.vhn.doan.presentation.debug.ReminderTestActivity.class);&#10;            startActivity(intent);&#10;        }&#10;    }&#10;&#10;    // Implement ReminderContract.View methods&#10;&#10;    @Override&#10;    public void showReminders(List&lt;Reminder&gt; reminders) {&#10;        if (adapter != null) {&#10;            adapter.updateReminders(reminders);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showLoading() {&#10;        if (loadingView != null) {&#10;            loadingView.setVisibility(View.VISIBLE);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void hideLoading() {&#10;        if (loadingView != null) {&#10;            loadingView.setVisibility(View.GONE);&#10;        }&#10;&#10;        if (swipeRefresh != null &amp;&amp; swipeRefresh.isRefreshing()) {&#10;            swipeRefresh.setRefreshing(false);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showError(String message) {&#10;        if (getContext() != null) {&#10;            Toast.makeText(getContext(), message, Toast.LENGTH_LONG).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showSuccess(String message) {&#10;        if (getContext() != null) {&#10;            Toast.makeText(getContext(), message, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showReminderDialog(Reminder reminder) {&#10;        ReminderDialog dialog = new ReminderDialog(getContext(), reminder, new ReminderDialog.OnReminderDialogListener() {&#10;            @Override&#10;            public void onReminderSaved(Reminder savedReminder) {&#10;                presenter.saveReminder(savedReminder);&#10;            }&#10;&#10;            @Override&#10;            public void onReminderCanceled() {&#10;                // Không làm gì&#10;            }&#10;        });&#10;        dialog.show();&#10;    }&#10;&#10;    @Override&#10;    public void showDeleteConfirmDialog(Reminder reminder) {&#10;        if (getContext() == null) return;&#10;&#10;        new AlertDialog.Builder(getContext())&#10;            .setTitle(&quot;Xác nhận xóa&quot;)&#10;            .setMessage(&quot;Bạn có chắc chắn muốn xóa nhắc nhở \&quot;&quot; + reminder.getTitle() + &quot;\&quot;?&quot;)&#10;            .setPositiveButton(&quot;Xóa&quot;, (dialog, which) -&gt; {&#10;                if (presenter != null) {&#10;                    ((ReminderPresenter) presenter).confirmDeleteReminder(reminder);&#10;                }&#10;            })&#10;            .setNegativeButton(&quot;Hủy&quot;, null)&#10;            .show();&#10;    }&#10;&#10;    @Override&#10;    public void updateReminderItem(Reminder reminder) {&#10;        if (adapter != null) {&#10;            adapter.updateReminder(reminder);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void removeReminderItem(Reminder reminder) {&#10;        if (adapter != null) {&#10;            adapter.removeReminder(reminder);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void addReminderItem(Reminder reminder) {&#10;        if (adapter != null) {&#10;            adapter.addReminder(reminder);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showEmptyState() {&#10;        if (emptyStateView != null) {&#10;            emptyStateView.setVisibility(View.VISIBLE);&#10;        }&#10;        if (recyclerView != null) {&#10;            recyclerView.setVisibility(View.GONE);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void hideEmptyState() {&#10;        if (emptyStateView != null) {&#10;            emptyStateView.setVisibility(View.GONE);&#10;        }&#10;        if (recyclerView != null) {&#10;            recyclerView.setVisibility(View.VISIBLE);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Method public để Activity có thể gọi khi click button từ XML&#10;     * Sửa lỗi: IllegalStateException khi click nút tạo reminder&#10;     */&#10;    public void onCreateReminderClick() {&#10;        if (presenter != null) {&#10;            presenter.createReminder();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.reminder;&#10;&#10;import android.app.AlertDialog;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.Menu;&#10;import android.view.MenuInflater;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.Button;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.appcompat.widget.SearchView;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;&#10;&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.data.Reminder;&#10;import com.vhn.doan.data.repository.ReminderRepository;&#10;import com.vhn.doan.data.repository.ReminderRepositoryImpl;&#10;import com.vhn.doan.utils.UserSessionManager;&#10;import com.vhn.doan.presentation.base.BaseFragment;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;import javax.inject.Inject;&#10;&#10;/**&#10; * Fragment hiển thị danh sách nhắc nhở theo kiến trúc MVP&#10; */&#10;public class ReminderFragment extends BaseFragment implements ReminderContract.View {&#10;&#10;    private ReminderPresenter presenter;&#10;&#10;    // UI Components&#10;    private RecyclerView recyclerView;&#10;    private SwipeRefreshLayout swipeRefresh;&#10;    private FloatingActionButton fabAdd;&#10;    private View emptyStateView;&#10;    private View loadingView;&#10;&#10;    // Adapter&#10;    private ReminderAdapter adapter;&#10;&#10;    // Search&#10;    private SearchView searchView;&#10;    private boolean showActiveOnly = false;&#10;&#10;    public static ReminderFragment newInstance() {&#10;        return new ReminderFragment();&#10;    }&#10;&#10;    @Override&#10;    public void onCreate(@Nullable Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setHasOptionsMenu(true);&#10;&#10;        // Khởi tạo presenter thủ công thay vì dùng @Inject&#10;        initPresenter();&#10;    }&#10;&#10;    /**&#10;     * Khởi tạo presenter với các dependencies cần thiết&#10;     */&#10;    private void initPresenter() {&#10;        ReminderRepository reminderRepository = new ReminderRepositoryImpl();&#10;        UserSessionManager userSessionManager = new UserSessionManager(requireContext());&#10;        presenter = new ReminderPresenter(reminderRepository, userSessionManager);&#10;    }&#10;&#10;    @Nullable&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,&#10;                           @Nullable Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_reminder, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;&#10;        initViews(view);&#10;        setupRecyclerView();&#10;        setupListeners();&#10;&#10;        presenter.attachView(this);&#10;        presenter.start();&#10;    }&#10;&#10;    @Override&#10;    public void onDestroyView() {&#10;        super.onDestroyView();&#10;        if (presenter != null) {&#10;            presenter.detachView();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onCreateOptionsMenu(@NonNull Menu menu, @NonNull MenuInflater inflater) {&#10;        inflater.inflate(R.menu.menu_reminder, menu);&#10;&#10;        MenuItem searchItem = menu.findItem(R.id.action_search);&#10;        searchView = (SearchView) searchItem.getActionView();&#10;&#10;        setupSearchView();&#10;        super.onCreateOptionsMenu(menu, inflater);&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        int itemId = item.getItemId();&#10;&#10;        if (itemId == R.id.action_filter_active) {&#10;            showActiveOnly = !showActiveOnly;&#10;            updateFilterMenuItem(item);&#10;            presenter.filterReminders(showActiveOnly);&#10;            return true;&#10;        } else if (itemId == R.id.action_refresh) {&#10;            presenter.refreshReminders();&#10;            return true;&#10;        } else if (itemId == R.id.action_debug_notifications) {&#10;            openDebugActivity();&#10;            return true;&#10;        }&#10;&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;&#10;    @Override&#10;    protected void initViews(View view) {&#10;        recyclerView = view.findViewById(R.id.recycler_view_reminders);&#10;        swipeRefresh = view.findViewById(R.id.swipe_refresh_reminders);&#10;        fabAdd = view.findViewById(R.id.fab_add_reminder);&#10;        emptyStateView = view.findViewById(R.id.layout_empty_state);&#10;        loadingView = view.findViewById(R.id.layout_loading);&#10;&#10;        // Setup button trong Empty State&#10;        Button btnCreateFirstReminder = view.findViewById(R.id.btn_create_first_reminder);&#10;        if (btnCreateFirstReminder != null) {&#10;            btnCreateFirstReminder.setOnClickListener(v -&gt; presenter.createReminder());&#10;        }&#10;&#10;        // Setup Debug Button&#10;        com.google.android.material.button.MaterialButton btnDebug = view.findViewById(R.id.btn_debug_notifications);&#10;        if (btnDebug != null) {&#10;            btnDebug.setOnClickListener(v -&gt; openDebugActivity());&#10;        }&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        adapter = new ReminderAdapter(new ArrayList&lt;&gt;(), new ReminderAdapter.OnReminderItemClickListener() {&#10;            @Override&#10;            public void onReminderClick(Reminder reminder) {&#10;                presenter.editReminder(reminder);&#10;            }&#10;&#10;            @Override&#10;            public void onToggleClick(Reminder reminder) {&#10;                presenter.toggleReminder(reminder);&#10;            }&#10;&#10;            @Override&#10;            public void onDeleteClick(Reminder reminder) {&#10;                presenter.deleteReminder(reminder);&#10;            }&#10;        });&#10;&#10;        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));&#10;        recyclerView.setAdapter(adapter);&#10;    }&#10;&#10;    @Override&#10;    protected void setupListeners() {&#10;        // Setup các listeners cụ thể&#10;        setupSwipeRefresh();&#10;        setupFab();&#10;        if (searchView != null) {&#10;            setupSearchView();&#10;        }&#10;    }&#10;&#10;    private void setupSwipeRefresh() {&#10;        swipeRefresh.setOnRefreshListener(() -&gt; presenter.refreshReminders());&#10;        swipeRefresh.setColorSchemeResources(&#10;            R.color.primary_color,&#10;            R.color.primary_dark,&#10;            R.color.accent_color&#10;        );&#10;    }&#10;&#10;    private void setupFab() {&#10;        fabAdd.setOnClickListener(v -&gt; presenter.createReminder());&#10;    }&#10;&#10;    private void setupSearchView() {&#10;        if (searchView != null) {&#10;            searchView.setQueryHint(&quot;Tìm kiếm nhắc nhở...&quot;);&#10;            searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {&#10;                @Override&#10;                public boolean onQueryTextSubmit(String query) {&#10;                    presenter.searchReminders(query);&#10;                    return true;&#10;                }&#10;&#10;                @Override&#10;                public boolean onQueryTextChange(String newText) {&#10;                    presenter.searchReminders(newText);&#10;                    return true;&#10;                }&#10;            });&#10;        }&#10;    }&#10;&#10;    private void updateFilterMenuItem(MenuItem item) {&#10;        if (showActiveOnly) {&#10;            item.setTitle(&quot;Hiển thị tất cả&quot;);&#10;            item.setIcon(R.drawable.ic_filter_list);&#10;        } else {&#10;            item.setTitle(&quot;Chỉ hiển thị đang hoạt động&quot;);&#10;            item.setIcon(R.drawable.ic_filter_list_off);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Mở ReminderTestActivity để debug hệ thống thông báo&#10;     */&#10;    private void openDebugActivity() {&#10;        if (getContext() != null) {&#10;            android.content.Intent intent = new android.content.Intent(getContext(),&#10;                com.vhn.doan.presentation.debug.ReminderTestActivity.class);&#10;            startActivity(intent);&#10;        }&#10;    }&#10;&#10;    // Implement ReminderContract.View methods&#10;&#10;    @Override&#10;    public void showReminders(List&lt;Reminder&gt; reminders) {&#10;        if (adapter != null) {&#10;            adapter.updateReminders(reminders);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showLoading() {&#10;        if (loadingView != null) {&#10;            loadingView.setVisibility(View.VISIBLE);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void hideLoading() {&#10;        if (loadingView != null) {&#10;            loadingView.setVisibility(View.GONE);&#10;        }&#10;&#10;        if (swipeRefresh != null &amp;&amp; swipeRefresh.isRefreshing()) {&#10;            swipeRefresh.setRefreshing(false);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showError(String message) {&#10;        if (getContext() != null) {&#10;            Toast.makeText(getContext(), message, Toast.LENGTH_LONG).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showSuccess(String message) {&#10;        if (getContext() != null) {&#10;            Toast.makeText(getContext(), message, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showReminderDialog(Reminder reminder) {&#10;        ReminderDialog dialog = new ReminderDialog(getContext(), reminder, new ReminderDialog.OnReminderDialogListener() {&#10;            @Override&#10;            public void onReminderSaved(Reminder savedReminder) {&#10;                presenter.saveReminder(savedReminder);&#10;            }&#10;&#10;            @Override&#10;            public void onReminderCanceled() {&#10;                // Không làm gì&#10;            }&#10;        });&#10;        dialog.show();&#10;    }&#10;&#10;    @Override&#10;    public void showDeleteConfirmDialog(Reminder reminder) {&#10;        if (getContext() == null) return;&#10;&#10;        new AlertDialog.Builder(getContext())&#10;            .setTitle(&quot;Xác nhận xóa&quot;)&#10;            .setMessage(&quot;Bạn có chắc chắn muốn xóa nhắc nhở \&quot;&quot; + reminder.getTitle() + &quot;\&quot;?&quot;)&#10;            .setPositiveButton(&quot;Xóa&quot;, (dialog, which) -&gt; {&#10;                if (presenter != null) {&#10;                    ((ReminderPresenter) presenter).confirmDeleteReminder(reminder);&#10;                }&#10;            })&#10;            .setNegativeButton(&quot;Hủy&quot;, null)&#10;            .show();&#10;    }&#10;&#10;    @Override&#10;    public void updateReminderItem(Reminder reminder) {&#10;        if (adapter != null) {&#10;            adapter.updateReminder(reminder);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void removeReminderItem(Reminder reminder) {&#10;        if (adapter != null) {&#10;            adapter.removeReminder(reminder);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void addReminderItem(Reminder reminder) {&#10;        if (adapter != null) {&#10;            adapter.addReminder(reminder);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showEmptyState() {&#10;        if (emptyStateView != null) {&#10;            emptyStateView.setVisibility(View.VISIBLE);&#10;        }&#10;        if (recyclerView != null) {&#10;            recyclerView.setVisibility(View.GONE);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void hideEmptyState() {&#10;        if (emptyStateView != null) {&#10;            emptyStateView.setVisibility(View.GONE);&#10;        }&#10;        if (recyclerView != null) {&#10;            recyclerView.setVisibility(View.VISIBLE);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Method public để Activity có thể gọi khi click button từ XML&#10;     * Sửa lỗi: IllegalStateException khi click nút tạo reminder&#10;     */&#10;    public void onCreateReminderClick() {&#10;        if (presenter != null) {&#10;            presenter.createReminder();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/receivers/BootReceiver.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/receivers/BootReceiver.java" />
              <option name="updatedContent" value="package com.vhn.doan.receivers;&#10;&#10;import android.content.BroadcastReceiver;&#10;import android.content.Context;&#10;import android.content.Intent;&#10;import android.util.Log;&#10;&#10;import com.vhn.doan.services.ReminderService;&#10;&#10;/**&#10; * BroadcastReceiver để khôi phục lại các reminder sau khi thiết bị khởi động lại&#10; */&#10;public class BootReceiver extends BroadcastReceiver {&#10;&#10;    private static final String TAG = &quot;BootReceiver&quot;;&#10;&#10;    @Override&#10;    public void onReceive(Context context, Intent intent) {&#10;        String action = intent.getAction();&#10;        Log.d(TAG, &quot;Received action: &quot; + action);&#10;&#10;        if (Intent.ACTION_BOOT_COMPLETED.equals(action) ||&#10;            Intent.ACTION_MY_PACKAGE_REPLACED.equals(action) ||&#10;            Intent.ACTION_PACKAGE_REPLACED.equals(action)) {&#10;            &#10;            rescheduleReminders(context);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Lên lịch lại tất cả các reminder hoạt động&#10;     */&#10;    private void rescheduleReminders(Context context) {&#10;        try {&#10;            Log.d(TAG, &quot;Đang khôi phục lại các reminder sau khi boot...&quot;);&#10;            &#10;            // TODO: Lấy danh sách reminder từ database và lên lịch lại&#10;            // Hiện tại chỉ ghi log, sau này sẽ tích hợp với repository&#10;            &#10;            // Ví dụ implementation:&#10;            // ReminderRepository repository = new ReminderRepositoryImpl();&#10;            // repository.getActiveReminders(userId, new RepositoryCallback&lt;List&lt;Reminder&gt;&gt;() {&#10;            //     @Override&#10;            //     public void onSuccess(List&lt;Reminder&gt; reminders) {&#10;            //         ReminderService reminderService = new ReminderService(context);&#10;            //         reminderService.rescheduleAllActiveReminders(reminders);&#10;            //         Log.d(TAG, &quot;Đã khôi phục &quot; + reminders.size() + &quot; reminder&quot;);&#10;            //     }&#10;            //&#10;            //     @Override&#10;            //     public void onError(String error) {&#10;            //         Log.e(TAG, &quot;Lỗi khi khôi phục reminder: &quot; + error);&#10;            //     }&#10;            // });&#10;            &#10;            Log.d(TAG, &quot;Hoàn thành việc khôi phục reminder&quot;);&#10;            &#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Lỗi khi khôi phục reminder sau boot&quot;, e);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/receivers/ReminderActionReceiver.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/receivers/ReminderActionReceiver.java" />
              <option name="updatedContent" value="package com.vhn.doan.receivers;&#10;&#10;import android.content.BroadcastReceiver;&#10;import android.content.Context;&#10;import android.content.Intent;&#10;import android.util.Log;&#10;import android.widget.Toast;&#10;&#10;import com.vhn.doan.services.NotificationService;&#10;&#10;/**&#10; * BroadcastReceiver để xử lý các hành động từ thông báo nhắc nhở&#10; */&#10;public class ReminderActionReceiver extends BroadcastReceiver {&#10;&#10;    private static final String TAG = &quot;ReminderActionReceiver&quot;;&#10;&#10;    @Override&#10;    public void onReceive(Context context, Intent intent) {&#10;        String action = intent.getAction();&#10;        Log.d(TAG, &quot;Received action: &quot; + action);&#10;&#10;        if (&quot;MARK_COMPLETE&quot;.equals(action)) {&#10;            handleMarkComplete(context, intent);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Xử lý khi người dùng đánh dấu hoàn thành nhắc nhở&#10;     */&#10;    private void handleMarkComplete(Context context, Intent intent) {&#10;        String reminderId = intent.getStringExtra(&quot;reminder_id&quot;);&#10;        &#10;        if (reminderId != null) {&#10;            // Hủy thông báo&#10;            NotificationService notificationService = new NotificationService(context);&#10;            notificationService.cancelReminderNotification(reminderId);&#10;            &#10;            // Hiển thị thông báo Toast&#10;            Toast.makeText(context, &quot;Đã đánh dấu nhắc nhở hoàn thành&quot;, Toast.LENGTH_SHORT).show();&#10;            &#10;            Log.d(TAG, &quot;Đã đánh dấu hoàn thành reminder: &quot; + reminderId);&#10;            &#10;            // TODO: Có thể cập nhật trạng thái trong database nếu cần&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/receivers/ReminderBroadcastReceiver.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/receivers/ReminderBroadcastReceiver.java" />
              <option name="originalContent" value="package com.vhn.doan.receivers;&#10;&#10;import android.content.BroadcastReceiver;&#10;import android.content.Context;&#10;import android.content.Intent;&#10;import android.util.Log;&#10;&#10;import com.vhn.doan.data.Reminder;&#10;import com.vhn.doan.services.NotificationService;&#10;import com.vhn.doan.services.ReminderService;&#10;&#10;/**&#10; * BroadcastReceiver để xử lý khi thời gian nhắc nhở đã đến&#10; */&#10;public class ReminderBroadcastReceiver extends BroadcastReceiver {&#10;&#10;    private static final String TAG = &quot;ReminderBroadcastReceiver&quot;;&#10;&#10;    @Override&#10;    public void onReceive(Context context, Intent intent) {&#10;        String action = intent.getAction();&#10;        Log.d(TAG, &quot;Received action: &quot; + action);&#10;&#10;        if (&quot;REMINDER_NOTIFICATION&quot;.equals(action)) {&#10;            handleReminderNotification(context, intent);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Xử lý hiển thị thông báo nhắc nhở&#10;     */&#10;    private void handleReminderNotification(Context context, Intent intent) {&#10;        String reminderId = intent.getStringExtra(&quot;reminder_id&quot;);&#10;        String title = intent.getStringExtra(&quot;reminder_title&quot;);&#10;        String description = intent.getStringExtra(&quot;reminder_description&quot;);&#10;        int repeatType = intent.getIntExtra(&quot;reminder_repeat_type&quot;, Reminder.RepeatType.NO_REPEAT);&#10;&#10;        Log.d(TAG, &quot;Handling reminder notification: &quot; + title);&#10;&#10;        if (reminderId != null &amp;&amp; title != null) {&#10;            // Tạo reminder object từ dữ liệu trong intent&#10;            Reminder reminder = new Reminder();&#10;            reminder.setId(reminderId);&#10;            reminder.setTitle(title);&#10;            reminder.setDescription(description != null ? description : &quot;&quot;);&#10;            reminder.setRepeatType(repeatType);&#10;            reminder.setReminderTime(System.currentTimeMillis()); // Thời gian hiện tại&#10;            reminder.setActive(true);&#10;&#10;            // Hiển thị thông báo&#10;            NotificationService notificationService = new NotificationService(context);&#10;            notificationService.showReminderNotification(reminder);&#10;&#10;            // Nếu là reminder lặp lại, lên lịch cho lần tiếp theo&#10;            if (repeatType != Reminder.RepeatType.NO_REPEAT) {&#10;                scheduleNextRepeatReminder(context, reminder);&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Lên lịch cho lần lặp lại tiếp theo&#10;     */&#10;    private void scheduleNextRepeatReminder(Context context, Reminder currentReminder) {&#10;        try {&#10;            // Tính thời gian tiếp theo&#10;            java.util.Calendar calendar = java.util.Calendar.getInstance();&#10;            calendar.setTimeInMillis(System.currentTimeMillis());&#10;&#10;            switch (currentReminder.getRepeatType()) {&#10;                case Reminder.RepeatType.DAILY:&#10;                    calendar.add(java.util.Calendar.DAY_OF_MONTH, 1);&#10;                    break;&#10;                case Reminder.RepeatType.WEEKLY:&#10;                    calendar.add(java.util.Calendar.WEEK_OF_YEAR, 1);&#10;                    break;&#10;                case Reminder.RepeatType.MONTHLY:&#10;                    calendar.add(java.util.Calendar.MONTH, 1);&#10;                    break;&#10;                default:&#10;                    return; // Không lặp lại&#10;            }&#10;&#10;            // Tạo reminder cho lần tiếp theo&#10;            Reminder nextReminder = new Reminder();&#10;            nextReminder.setId(currentReminder.getId());&#10;            nextReminder.setTitle(currentReminder.getTitle());&#10;            nextReminder.setDescription(currentReminder.getDescription());&#10;            nextReminder.setRepeatType(currentReminder.getRepeatType());&#10;            nextReminder.setReminderTime(calendar.getTimeInMillis());&#10;            nextReminder.setActive(true);&#10;&#10;            // Lên lịch cho lần tiếp theo&#10;            ReminderService reminderService = new ReminderService(context);&#10;            reminderService.scheduleReminder(nextReminder);&#10;&#10;            Log.d(TAG, &quot;Đã lên lịch lần tiếp theo cho reminder: &quot; + nextReminder.getTitle() +&#10;                &quot; vào &quot; + new java.text.SimpleDateFormat(&quot;dd/MM/yyyy HH:mm&quot;).format(calendar.getTime()));&#10;&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Lỗi khi lên lịch lần tiếp theo&quot;, e);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.receivers;&#10;&#10;import android.content.BroadcastReceiver;&#10;import android.content.Context;&#10;import android.content.Intent;&#10;import android.os.PowerManager;&#10;import android.util.Log;&#10;&#10;import com.vhn.doan.data.Reminder;&#10;import com.vhn.doan.services.NotificationService;&#10;import com.vhn.doan.services.ReminderService;&#10;&#10;/**&#10; * BroadcastReceiver để xử lý khi thời gian nhắc nhở đã đến&#10; */&#10;public class ReminderBroadcastReceiver extends BroadcastReceiver {&#10;&#10;    private static final String TAG = &quot;ReminderBroadcastReceiver&quot;;&#10;&#10;    @Override&#10;    public void onReceive(Context context, Intent intent) {&#10;        // Acquire wake lock để đảm bảo thiết bị không sleep trong quá trình xử lý&#10;        PowerManager powerManager = (PowerManager) context.getSystemService(Context.POWER_SERVICE);&#10;        PowerManager.WakeLock wakeLock = powerManager.newWakeLock(&#10;            PowerManager.PARTIAL_WAKE_LOCK, &#10;            &quot;HealthTips:ReminderReceiver&quot;&#10;        );&#10;        &#10;        try {&#10;            wakeLock.acquire(30000); // 30 seconds timeout&#10;            &#10;            String action = intent.getAction();&#10;            Log.d(TAG, &quot;=== NHẬN ĐƯỢC BROADCAST ===&quot;);&#10;            Log.d(TAG, &quot;Action: &quot; + action);&#10;            Log.d(TAG, &quot;Time: &quot; + new java.util.Date());&#10;&#10;            if (&quot;REMINDER_NOTIFICATION&quot;.equals(action)) {&#10;                handleReminderNotification(context, intent);&#10;            } else {&#10;                Log.w(TAG, &quot;Action không được nhận diện: &quot; + action);&#10;            }&#10;            &#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Lỗi trong onReceive&quot;, e);&#10;        } finally {&#10;            if (wakeLock.isHeld()) {&#10;                wakeLock.release();&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Xử lý hiển thị thông báo nhắc nhở với logging chi tiết&#10;     */&#10;    private void handleReminderNotification(Context context, Intent intent) {&#10;        String reminderId = intent.getStringExtra(&quot;reminder_id&quot;);&#10;        String title = intent.getStringExtra(&quot;reminder_title&quot;);&#10;        String description = intent.getStringExtra(&quot;reminder_description&quot;);&#10;        int repeatType = intent.getIntExtra(&quot;reminder_repeat_type&quot;, Reminder.RepeatType.NO_REPEAT);&#10;&#10;        Log.d(TAG, &quot;=== XỬ LÝ REMINDER NOTIFICATION ===&quot;);&#10;        Log.d(TAG, &quot;Reminder ID: &quot; + reminderId);&#10;        Log.d(TAG, &quot;Title: &quot; + title);&#10;        Log.d(TAG, &quot;Description: &quot; + description);&#10;        Log.d(TAG, &quot;Repeat Type: &quot; + repeatType);&#10;&#10;        if (reminderId == null || title == null) {&#10;            Log.e(TAG, &quot;❌ Thiếu thông tin reminder - bỏ qua&quot;);&#10;            return;&#10;        }&#10;&#10;        try {&#10;            // Tạo reminder object từ dữ liệu trong intent&#10;            Reminder reminder = new Reminder();&#10;            reminder.setId(reminderId);&#10;            reminder.setTitle(title);&#10;            reminder.setDescription(description != null ? description : &quot;&quot;);&#10;            reminder.setRepeatType(repeatType);&#10;            reminder.setReminderTime(System.currentTimeMillis());&#10;            reminder.setActive(true);&#10;&#10;            Log.d(TAG, &quot;Đang hiển thị thông báo...&quot;);&#10;            &#10;            // Hiển thị thông báo&#10;            NotificationService notificationService = new NotificationService(context);&#10;            notificationService.showReminderNotification(reminder);&#10;            &#10;            Log.d(TAG, &quot;✅ Đã hiển thị thông báo thành công!&quot;);&#10;&#10;            // Nếu là reminder lặp lại, lên lịch cho lần tiếp theo&#10;            if (repeatType != Reminder.RepeatType.NO_REPEAT) {&#10;                Log.d(TAG, &quot;Reminder có lặp lại - lên lịch lần tiếp theo...&quot;);&#10;                scheduleNextRepeatReminder(context, reminder);&#10;            } else {&#10;                Log.d(TAG, &quot;Reminder không lặp lại - hoàn thành&quot;);&#10;            }&#10;            &#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;❌ Lỗi khi xử lý reminder notification&quot;, e);&#10;        }&#10;        &#10;        Log.d(TAG, &quot;=== KẾT THÚC XỬ LÝ REMINDER ===&quot;);&#10;    }&#10;&#10;    /**&#10;     * Lên lịch cho lần lặp lại tiếp theo với logging chi tiết&#10;     */&#10;    private void scheduleNextRepeatReminder(Context context, Reminder currentReminder) {&#10;        try {&#10;            Log.d(TAG, &quot;=== LÊN LỊCH LẦN TIẾP THEO ===&quot;);&#10;            &#10;            // Tính thời gian tiếp theo&#10;            java.util.Calendar calendar = java.util.Calendar.getInstance();&#10;            calendar.setTimeInMillis(System.currentTimeMillis());&#10;&#10;            switch (currentReminder.getRepeatType()) {&#10;                case Reminder.RepeatType.DAILY:&#10;                    calendar.add(java.util.Calendar.DAY_OF_MONTH, 1);&#10;                    Log.d(TAG, &quot;Thêm 1 ngày&quot;);&#10;                    break;&#10;                case Reminder.RepeatType.WEEKLY:&#10;                    calendar.add(java.util.Calendar.WEEK_OF_YEAR, 1);&#10;                    Log.d(TAG, &quot;Thêm 1 tuần&quot;);&#10;                    break;&#10;                case Reminder.RepeatType.MONTHLY:&#10;                    calendar.add(java.util.Calendar.MONTH, 1);&#10;                    Log.d(TAG, &quot;Thêm 1 tháng&quot;);&#10;                    break;&#10;                default:&#10;                    Log.d(TAG, &quot;Không lặp lại - bỏ qua&quot;);&#10;                    return;&#10;            }&#10;&#10;            // Tạo reminder cho lần tiếp theo&#10;            Reminder nextReminder = new Reminder();&#10;            nextReminder.setId(currentReminder.getId());&#10;            nextReminder.setTitle(currentReminder.getTitle());&#10;            nextReminder.setDescription(currentReminder.getDescription());&#10;            nextReminder.setRepeatType(currentReminder.getRepeatType());&#10;            nextReminder.setReminderTime(calendar.getTimeInMillis());&#10;            nextReminder.setActive(true);&#10;&#10;            Log.d(TAG, &quot;Thời gian lần tiếp theo: &quot; + calendar.getTime());&#10;            &#10;            // Lên lịch cho lần tiếp theo&#10;            ReminderService reminderService = new ReminderService(context);&#10;            reminderService.scheduleReminder(nextReminder);&#10;&#10;            Log.d(TAG, &quot;✅ Đã lên lịch lần tiếp theo thành công!&quot;);&#10;            Log.d(TAG, &quot;Reminder: &quot; + nextReminder.getTitle());&#10;            Log.d(TAG, &quot;Vào: &quot; + new java.text.SimpleDateFormat(&quot;dd/MM/yyyy HH:mm:ss&quot;).format(calendar.getTime()));&#10;&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;❌ Lỗi khi lên lịch lần tiếp theo&quot;, e);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/services/NotificationService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/services/NotificationService.java" />
              <option name="originalContent" value="package com.vhn.doan.services;&#10;&#10;import android.app.Notification;&#10;import android.app.NotificationChannel;&#10;import android.app.NotificationManager;&#10;import android.app.PendingIntent;&#10;import android.content.Context;&#10;import android.content.Intent;&#10;import android.os.Build;&#10;&#10;import androidx.core.app.NotificationCompat;&#10;import androidx.core.app.NotificationManagerCompat;&#10;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.data.Reminder;&#10;import com.vhn.doan.presentation.home.HomeActivity;&#10;import com.vhn.doan.receivers.ReminderActionReceiver;&#10;&#10;/**&#10; * Service để xử lý thông báo nhắc nhở&#10; */&#10;public class NotificationService {&#10;&#10;    private static final String REMINDER_CHANNEL_ID = &quot;reminder_channel&quot;;&#10;    private static final String REMINDER_CHANNEL_NAME = &quot;Nhắc nhở sức khỏe&quot;;&#10;    private static final String REMINDER_CHANNEL_DESCRIPTION = &quot;Thông báo nhắc nhở về sức khỏe&quot;;&#10;    private static final int REMINDER_NOTIFICATION_ID = 1001;&#10;&#10;    private Context context;&#10;    private NotificationManager notificationManager;&#10;&#10;    public NotificationService(Context context) {&#10;        this.context = context;&#10;        this.notificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);&#10;        createNotificationChannel();&#10;    }&#10;&#10;    /**&#10;     * Tạo notification channel cho Android 8.0+&#10;     */&#10;    private void createNotificationChannel() {&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;            NotificationChannel channel = new NotificationChannel(&#10;                REMINDER_CHANNEL_ID,&#10;                REMINDER_CHANNEL_NAME,&#10;                NotificationManager.IMPORTANCE_HIGH&#10;            );&#10;            channel.setDescription(REMINDER_CHANNEL_DESCRIPTION);&#10;            channel.enableLights(true);&#10;            channel.enableVibration(true);&#10;            channel.setLightColor(context.getResources().getColor(R.color.primary_color, null));&#10;&#10;            notificationManager.createNotificationChannel(channel);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Hiển thị thông báo nhắc nhở&#10;     */&#10;    public void showReminderNotification(Reminder reminder) {&#10;        if (reminder == null) return;&#10;&#10;        // Tạo intent để mở app khi click notification&#10;        Intent intent = new Intent(context, HomeActivity.class);&#10;        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);&#10;        intent.putExtra(&quot;open_reminders&quot;, true);&#10;&#10;        PendingIntent pendingIntent = PendingIntent.getActivity(&#10;            context,&#10;            0,&#10;            intent,&#10;            PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE&#10;        );&#10;&#10;        // Tạo notification&#10;        NotificationCompat.Builder builder = new NotificationCompat.Builder(context, REMINDER_CHANNEL_ID)&#10;            .setSmallIcon(R.drawable.ic_notification_reminder)&#10;            .setContentTitle(&quot;Nhắc nhở: &quot; + reminder.getTitle())&#10;            .setContentText(reminder.getDescription())&#10;            .setPriority(NotificationCompat.PRIORITY_HIGH)&#10;            .setDefaults(NotificationCompat.DEFAULT_ALL)&#10;            .setAutoCancel(true)&#10;            .setContentIntent(pendingIntent)&#10;            .setStyle(new NotificationCompat.BigTextStyle()&#10;                .bigText(reminder.getDescription()))&#10;            .addAction(&#10;                R.drawable.ic_check,&#10;                &quot;Đánh dấu hoàn thành&quot;,&#10;                createMarkCompleteIntent(reminder)&#10;            );&#10;&#10;        // Hiển thị notification&#10;        try {&#10;            NotificationManagerCompat notificationManagerCompat = NotificationManagerCompat.from(context);&#10;            if (notificationManagerCompat.areNotificationsEnabled()) {&#10;                notificationManagerCompat.notify(&#10;                    REMINDER_NOTIFICATION_ID + reminder.getId().hashCode(),&#10;                    builder.build()&#10;                );&#10;            }&#10;        } catch (SecurityException e) {&#10;            // Xử lý trường hợp không có quyền notification&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Tạo PendingIntent để đánh dấu hoàn thành nhắc nhở&#10;     */&#10;    private PendingIntent createMarkCompleteIntent(Reminder reminder) {&#10;        Intent intent = new Intent(context, ReminderActionReceiver.class);&#10;        intent.setAction(&quot;MARK_COMPLETE&quot;);&#10;        intent.putExtra(&quot;reminder_id&quot;, reminder.getId());&#10;&#10;        return PendingIntent.getBroadcast(&#10;            context,&#10;            reminder.getId().hashCode(),&#10;            intent,&#10;            PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE&#10;        );&#10;    }&#10;&#10;    /**&#10;     * Hủy thông báo nhắc nhở&#10;     */&#10;    public void cancelReminderNotification(String reminderId) {&#10;        if (reminderId != null) {&#10;            notificationManager.cancel(REMINDER_NOTIFICATION_ID + reminderId.hashCode());&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Hủy tất cả thông báo nhắc nhở&#10;     */&#10;    public void cancelAllReminderNotifications() {&#10;        notificationManager.cancelAll();&#10;    }&#10;&#10;    /**&#10;     * Kiểm tra xem notification có được bật hay không&#10;     */&#10;    public boolean areNotificationsEnabled() {&#10;        NotificationManagerCompat notificationManagerCompat = NotificationManagerCompat.from(context);&#10;        return notificationManagerCompat.areNotificationsEnabled();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.services;&#13;&#10;&#13;&#10;import android.app.Notification;&#13;&#10;import android.app.NotificationChannel;&#13;&#10;import android.app.NotificationManager;&#13;&#10;import android.app.PendingIntent;&#13;&#10;import android.content.Context;&#13;&#10;import android.content.Intent;&#13;&#10;import android.os.Build;&#13;&#10;&#13;&#10;import androidx.core.app.NotificationCompat;&#13;&#10;import androidx.core.app.NotificationManagerCompat;&#13;&#10;&#13;&#10;import com.vhn.doan.R;&#13;&#10;import com.vhn.doan.data.Reminder;&#13;&#10;import com.vhn.doan.presentation.home.HomeActivity;&#13;&#10;import com.vhn.doan.receivers.ReminderActionReceiver;&#13;&#10;&#13;&#10;/**&#13;&#10; * Service để xử lý thông báo nhắc nhở&#13;&#10; */&#13;&#10;public class NotificationService {&#13;&#10;&#13;&#10;    private static final String REMINDER_CHANNEL_ID = &quot;reminder_channel&quot;;&#13;&#10;    private static final String REMINDER_CHANNEL_NAME = &quot;Nhắc nhở sức khỏe&quot;;&#13;&#10;    private static final String REMINDER_CHANNEL_DESCRIPTION = &quot;Thông báo nhắc nhở về sức khỏe&quot;;&#13;&#10;    private static final int REMINDER_NOTIFICATION_ID = 1001;&#13;&#10;&#13;&#10;    private Context context;&#13;&#10;    private NotificationManager notificationManager;&#13;&#10;&#13;&#10;    public NotificationService(Context context) {&#13;&#10;        this.context = context;&#13;&#10;        this.notificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);&#13;&#10;        createNotificationChannel();&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Tạo notification channel cho Android 8.0+&#13;&#10;     */&#13;&#10;    private void createNotificationChannel() {&#13;&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#13;&#10;            NotificationChannel channel = new NotificationChannel(&#13;&#10;                REMINDER_CHANNEL_ID,&#13;&#10;                REMINDER_CHANNEL_NAME,&#13;&#10;                NotificationManager.IMPORTANCE_HIGH&#13;&#10;            );&#13;&#10;            channel.setDescription(REMINDER_CHANNEL_DESCRIPTION);&#13;&#10;            channel.enableLights(true);&#13;&#10;            channel.enableVibration(true);&#13;&#10;            channel.setVibrationPattern(new long[]{1000, 1000, 1000, 1000, 1000});&#13;&#10;            channel.setLightColor(android.graphics.Color.BLUE);&#13;&#10;            channel.setShowBadge(true);&#13;&#10;            channel.setLockscreenVisibility(Notification.VISIBILITY_PUBLIC);&#13;&#10;&#13;&#10;            notificationManager.createNotificationChannel(channel);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Hiển thị thông báo nhắc nhở&#13;&#10;     */&#13;&#10;    public void showReminderNotification(Reminder reminder) {&#13;&#10;        if (reminder == null) return;&#13;&#10;&#13;&#10;        // Tạo intent để mở app khi click notification&#13;&#10;        Intent intent = new Intent(context, HomeActivity.class);&#13;&#10;        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);&#13;&#10;        intent.putExtra(&quot;open_reminders&quot;, true);&#13;&#10;&#13;&#10;        PendingIntent pendingIntent = PendingIntent.getActivity(&#13;&#10;            context,&#13;&#10;            0,&#13;&#10;            intent,&#13;&#10;            PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE&#13;&#10;        );&#13;&#10;&#13;&#10;        // Tạo notification với âm thanh và rung&#13;&#10;        NotificationCompat.Builder builder = new NotificationCompat.Builder(context, REMINDER_CHANNEL_ID)&#13;&#10;            .setSmallIcon(R.drawable.ic_notification_reminder)&#13;&#10;            .setContentTitle(&quot; Nhắc nhở: &quot; + reminder.getTitle())&#13;&#10;            .setContentText(reminder.getDescription())&#13;&#10;            .setPriority(NotificationCompat.PRIORITY_HIGH)&#13;&#10;            .setDefaults(NotificationCompat.DEFAULT_ALL)&#13;&#10;            .setAutoCancel(true)&#13;&#10;            .setOngoing(false)&#13;&#10;            .setContentIntent(pendingIntent)&#13;&#10;            .setStyle(new NotificationCompat.BigTextStyle()&#13;&#10;                .bigText(reminder.getDescription())&#13;&#10;                .setBigContentTitle(&quot; Nhắc nhở: &quot; + reminder.getTitle()))&#13;&#10;            .addAction(&#13;&#10;                R.drawable.ic_check,&#13;&#10;                &quot;✓ Hoàn thành&quot;,&#13;&#10;                createMarkCompleteIntent(reminder)&#13;&#10;            )&#13;&#10;            .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)&#13;&#10;            .setCategory(NotificationCompat.CATEGORY_REMINDER);&#13;&#10;&#13;&#10;        // Hiển thị notification&#13;&#10;        try {&#13;&#10;            NotificationManagerCompat notificationManagerCompat = NotificationManagerCompat.from(context);&#13;&#10;            if (notificationManagerCompat.areNotificationsEnabled()) {&#13;&#10;                int notificationId = REMINDER_NOTIFICATION_ID + reminder.getId().hashCode();&#13;&#10;                notificationManagerCompat.notify(notificationId, builder.build());&#13;&#10;                &#13;&#10;                android.util.Log.d(&quot;NotificationService&quot;, &quot;Đã hiển thị thông báo cho reminder: &quot; + &#13;&#10;                    reminder.getTitle() + &quot; với ID: &quot; + notificationId);&#13;&#10;            } else {&#13;&#10;                android.util.Log.w(&quot;NotificationService&quot;, &quot;Thông báo bị tắt bởi người dùng&quot;);&#13;&#10;            }&#13;&#10;        } catch (SecurityException e) {&#13;&#10;            android.util.Log.e(&quot;NotificationService&quot;, &quot;Không có quyền hiển thị thông báo&quot;, e);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Tạo PendingIntent để đánh dấu hoàn thành nhắc nhở&#13;&#10;     */&#13;&#10;    private PendingIntent createMarkCompleteIntent(Reminder reminder) {&#13;&#10;        Intent intent = new Intent(context, ReminderActionReceiver.class);&#13;&#10;        intent.setAction(&quot;MARK_COMPLETE&quot;);&#13;&#10;        intent.putExtra(&quot;reminder_id&quot;, reminder.getId());&#13;&#10;&#13;&#10;        return PendingIntent.getBroadcast(&#13;&#10;            context,&#13;&#10;            reminder.getId().hashCode(),&#13;&#10;            intent,&#13;&#10;            PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE&#13;&#10;        );&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Hủy thông báo nhắc nhở&#13;&#10;     */&#13;&#10;    public void cancelReminderNotification(String reminderId) {&#13;&#10;        if (reminderId != null) {&#13;&#10;            notificationManager.cancel(REMINDER_NOTIFICATION_ID + reminderId.hashCode());&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Hủy tất cả thông báo nhắc nhở&#13;&#10;     */&#13;&#10;    public void cancelAllReminderNotifications() {&#13;&#10;        notificationManager.cancelAll();&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Kiểm tra xem notification có được bật hay không&#13;&#10;     */&#13;&#10;    public boolean areNotificationsEnabled() {&#13;&#10;        NotificationManagerCompat notificationManagerCompat = NotificationManagerCompat.from(context);&#13;&#10;        return notificationManagerCompat.areNotificationsEnabled();&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/services/ReminderService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/services/ReminderService.java" />
              <option name="originalContent" value="package com.vhn.doan.services;&#10;&#10;import android.app.AlarmManager;&#10;import android.app.PendingIntent;&#10;import android.content.Context;&#10;import android.content.Intent;&#10;import android.os.Build;&#10;&#10;import com.vhn.doan.data.Reminder;&#10;import com.vhn.doan.receivers.ReminderBroadcastReceiver;&#10;&#10;import java.util.Calendar;&#10;import java.util.Date;&#10;&#10;/**&#10; * Service để quản lý và lên lịch thông báo nhắc nhở&#10; */&#10;public class ReminderService {&#10;&#10;    private Context context;&#10;    private AlarmManager alarmManager;&#10;&#10;    public ReminderService(Context context) {&#10;        this.context = context;&#10;        this.alarmManager = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);&#10;    }&#10;&#10;    /**&#10;     * Lên lịch thông báo nhắc nhở&#10;     */&#10;    public void scheduleReminder(Reminder reminder) {&#10;        if (reminder == null || reminder.getReminderTime() == null || !reminder.isActive()) {&#10;            return;&#10;        }&#10;&#10;        long reminderTime = reminder.getReminderTime();&#10;        long currentTime = System.currentTimeMillis();&#10;&#10;        // Nếu là reminder lặp lại và thời gian đã qua, tính thời gian tiếp theo&#10;        if (reminderTime &lt;= currentTime &amp;&amp; reminder.getRepeatType() != Reminder.RepeatType.NO_REPEAT) {&#10;            Date nextTime = calculateNextReminderTime(reminder, currentTime);&#10;            if (nextTime != null) {&#10;                reminderTime = nextTime.getTime();&#10;                // Cập nhật thời gian reminder&#10;                reminder.setReminderTime(reminderTime);&#10;            } else {&#10;                return; // Không thể tính được thời gian tiếp theo&#10;            }&#10;        } else if (reminderTime &lt;= currentTime) {&#10;            // Reminder không lặp lại và đã qua thì tự động tắt&#10;            disableExpiredReminder(reminder);&#10;            return;&#10;        }&#10;&#10;        Intent intent = new Intent(context, ReminderBroadcastReceiver.class);&#10;        intent.putExtra(&quot;reminder_id&quot;, reminder.getId());&#10;        intent.putExtra(&quot;reminder_title&quot;, reminder.getTitle());&#10;        intent.putExtra(&quot;reminder_description&quot;, reminder.getDescription());&#10;        intent.putExtra(&quot;reminder_repeat_type&quot;, reminder.getRepeatType());&#10;        intent.setAction(&quot;REMINDER_NOTIFICATION&quot;);&#10;&#10;        PendingIntent pendingIntent = PendingIntent.getBroadcast(&#10;            context,&#10;            reminder.getId().hashCode(),&#10;            intent,&#10;            PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE&#10;        );&#10;&#10;        try {&#10;            if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {&#10;                // Sử dụng setExactAndAllowWhileIdle cho Android 6.0+&#10;                alarmManager.setExactAndAllowWhileIdle(&#10;                    AlarmManager.RTC_WAKEUP,&#10;                    reminderTime,&#10;                    pendingIntent&#10;                );&#10;            } else {&#10;                // Sử dụng setExact cho Android cũ hơn&#10;                alarmManager.setExact(&#10;                    AlarmManager.RTC_WAKEUP,&#10;                    reminderTime,&#10;                    pendingIntent&#10;                );&#10;            }&#10;&#10;            android.util.Log.d(&quot;ReminderService&quot;, &quot;Đã lên lịch reminder: &quot; + reminder.getTitle() +&#10;                &quot; vào lúc &quot; + new java.text.SimpleDateFormat(&quot;dd/MM/yyyy HH:mm&quot;).format(new Date(reminderTime)));&#10;&#10;        } catch (SecurityException e) {&#10;            // Xử lý trường hợp không có quyền SCHEDULE_EXACT_ALARM (Android 12+)&#10;            android.util.Log.e(&quot;ReminderService&quot;, &quot;Không có quyền lên lịch exact alarm&quot;, e);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Tính toán thời gian nhắc nhở tiếp theo cho reminder lặp lại&#10;     */&#10;    private Date calculateNextReminderTime(Reminder reminder, long currentTime) {&#10;        Date reminderDate = new Date(reminder.getReminderTime());&#10;        Calendar calendar = Calendar.getInstance();&#10;        calendar.setTime(reminderDate);&#10;&#10;        // Tìm thời gian tiếp theo sau current time&#10;        while (calendar.getTimeInMillis() &lt;= currentTime) {&#10;            switch (reminder.getRepeatType()) {&#10;                case Reminder.RepeatType.DAILY:&#10;                    calendar.add(Calendar.DAY_OF_MONTH, 1);&#10;                    break;&#10;                case Reminder.RepeatType.WEEKLY:&#10;                    calendar.add(Calendar.WEEK_OF_YEAR, 1);&#10;                    break;&#10;                case Reminder.RepeatType.MONTHLY:&#10;                    calendar.add(Calendar.MONTH, 1);&#10;                    break;&#10;                default:&#10;                    return null;&#10;            }&#10;        }&#10;&#10;        return calendar.getTime();&#10;    }&#10;&#10;    /**&#10;     * Tự động tắt reminder đã hết hạn (không lặp lại)&#10;     */&#10;    private void disableExpiredReminder(Reminder reminder) {&#10;        // TODO: Cập nhật trong database để tắt reminder&#10;        android.util.Log.d(&quot;ReminderService&quot;, &quot;Reminder đã hết hạn và bị tắt: &quot; + reminder.getTitle());&#10;    }&#10;&#10;    /**&#10;     * Hủy lịch thông báo nhắc nhở&#10;     */&#10;    public void cancelReminder(String reminderId) {&#10;        if (reminderId == null) return;&#10;&#10;        Intent intent = new Intent(context, ReminderBroadcastReceiver.class);&#10;        intent.setAction(&quot;REMINDER_NOTIFICATION&quot;);&#10;&#10;        PendingIntent pendingIntent = PendingIntent.getBroadcast(&#10;            context,&#10;            reminderId.hashCode(),&#10;            intent,&#10;            PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE&#10;        );&#10;&#10;        alarmManager.cancel(pendingIntent);&#10;        pendingIntent.cancel();&#10;    }&#10;&#10;    /**&#10;     * Cập nhật lịch nhắc nhở&#10;     */&#10;    public void updateReminder(Reminder reminder) {&#10;        // Hủy lịch cũ&#10;        cancelReminder(reminder.getId());&#10;&#10;        // Lên lịch mới nếu reminder vẫn còn hoạt động&#10;        if (reminder.isActive()) {&#10;            scheduleReminder(reminder);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Lên lịch cho lần lặp lại tiếp theo&#10;     */&#10;    private void scheduleNextRepeat(Reminder reminder) {&#10;        if (reminder.getRepeatType() == Reminder.RepeatType.NO_REPEAT) {&#10;            return;&#10;        }&#10;&#10;        Date nextTime = reminder.getNextReminderTime();&#10;        if (nextTime != null &amp;&amp; nextTime.getTime() &gt; System.currentTimeMillis()) {&#10;            // Tạo reminder mới cho lần tiếp theo&#10;            Reminder nextReminder = new Reminder();&#10;            nextReminder.setId(reminder.getId() + &quot;_next&quot;);&#10;            nextReminder.setUserId(reminder.getUserId());&#10;            nextReminder.setTitle(reminder.getTitle());&#10;            nextReminder.setDescription(reminder.getDescription());&#10;            nextReminder.setReminderTime(nextTime.getTime());&#10;            nextReminder.setRepeatType(reminder.getRepeatType());&#10;            nextReminder.setActive(reminder.isActive());&#10;            nextReminder.setHealthTipId(reminder.getHealthTipId());&#10;&#10;            scheduleReminder(nextReminder);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Lên lịch lại tất cả nhắc nhở hoạt động (thường dùng sau khi restart app)&#10;     */&#10;    public void rescheduleAllActiveReminders(java.util.List&lt;Reminder&gt; reminders) {&#10;        if (reminders == null) return;&#10;&#10;        for (Reminder reminder : reminders) {&#10;            if (reminder.isActive() &amp;&amp; reminder.getReminderTime() != null) {&#10;                scheduleReminder(reminder);&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Kiểm tra xem có quyền lên lịch exact alarm hay không (Android 12+)&#10;     */&#10;    public boolean canScheduleExactAlarms() {&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S) {&#10;            return alarmManager.canScheduleExactAlarms();&#10;        }&#10;        return true;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.services;&#10;&#10;import android.app.AlarmManager;&#10;import android.app.PendingIntent;&#10;import android.content.Context;&#10;import android.content.Intent;&#10;import android.os.Build;&#10;import android.os.PowerManager;&#10;import android.util.Log;&#10;&#10;import com.vhn.doan.data.Reminder;&#10;import com.vhn.doan.receivers.ReminderBroadcastReceiver;&#10;&#10;import java.util.Calendar;&#10;import java.util.Date;&#10;&#10;/**&#10; * Service để quản lý và lên lịch thông báo nhắc nhở&#10; */&#10;public class ReminderService {&#10;&#10;    private static final String TAG = &quot;ReminderService&quot;;&#10;    private Context context;&#10;    private AlarmManager alarmManager;&#10;    private PowerManager.WakeLock wakeLock;&#10;&#10;    public ReminderService(Context context) {&#10;        this.context = context;&#10;        this.alarmManager = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);&#10;        &#10;        // Tạo wake lock để đảm bảo thiết bị không sleep khi xử lý alarm&#10;        PowerManager powerManager = (PowerManager) context.getSystemService(Context.POWER_SERVICE);&#10;        wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, &quot;HealthTips:ReminderWakeLock&quot;);&#10;    }&#10;&#10;    /**&#10;     * Lên lịch thông báo nhắc nhở với logging chi tiết&#10;     */&#10;    public void scheduleReminder(Reminder reminder) {&#10;        Log.d(TAG, &quot;=== BẮT ĐẦU SCHEDULE REMINDER ===&quot;);&#10;        Log.d(TAG, &quot;Reminder ID: &quot; + reminder.getId());&#10;        Log.d(TAG, &quot;Title: &quot; + reminder.getTitle());&#10;        Log.d(TAG, &quot;Description: &quot; + reminder.getDescription());&#10;        Log.d(TAG, &quot;Is Active: &quot; + reminder.isActive());&#10;        Log.d(TAG, &quot;Repeat Type: &quot; + reminder.getRepeatType());&#10;        &#10;        if (reminder == null || reminder.getReminderTime() == null || !reminder.isActive()) {&#10;            Log.w(TAG, &quot;Reminder không hợp lệ - bỏ qua scheduling&quot;);&#10;            return;&#10;        }&#10;&#10;        long reminderTime = reminder.getReminderTime();&#10;        long currentTime = System.currentTimeMillis();&#10;        &#10;        Log.d(TAG, &quot;Reminder Time: &quot; + new Date(reminderTime));&#10;        Log.d(TAG, &quot;Current Time: &quot; + new Date(currentTime));&#10;        Log.d(TAG, &quot;Time difference: &quot; + (reminderTime - currentTime) + &quot;ms&quot;);&#10;&#10;        // Kiểm tra quyền exact alarm trước khi schedule&#10;        if (!canScheduleExactAlarms()) {&#10;            Log.e(TAG, &quot;Không có quyền SCHEDULE_EXACT_ALARM!&quot;);&#10;            return;&#10;        }&#10;&#10;        // Nếu là reminder lặp lại và thời gian đã qua, tính thời gian tiếp theo&#10;        if (reminderTime &lt;= currentTime &amp;&amp; reminder.getRepeatType() != Reminder.RepeatType.NO_REPEAT) {&#10;            Log.d(TAG, &quot;Reminder đã qua và có lặp lại - tính thời gian tiếp theo&quot;);&#10;            Date nextTime = calculateNextReminderTime(reminder, currentTime);&#10;            if (nextTime != null) {&#10;                reminderTime = nextTime.getTime();&#10;                reminder.setReminderTime(reminderTime);&#10;                Log.d(TAG, &quot;Thời gian tiếp theo: &quot; + nextTime);&#10;            } else {&#10;                Log.w(TAG, &quot;Không thể tính thời gian tiếp theo&quot;);&#10;                return;&#10;            }&#10;        } else if (reminderTime &lt;= currentTime) {&#10;            Log.d(TAG, &quot;Reminder không lặp lại và đã qua - tự động tắt&quot;);&#10;            disableExpiredReminder(reminder);&#10;            return;&#10;        }&#10;&#10;        // Tạo intent với tất cả thông tin cần thiết&#10;        Intent intent = new Intent(context, ReminderBroadcastReceiver.class);&#10;        intent.putExtra(&quot;reminder_id&quot;, reminder.getId());&#10;        intent.putExtra(&quot;reminder_title&quot;, reminder.getTitle());&#10;        intent.putExtra(&quot;reminder_description&quot;, reminder.getDescription());&#10;        intent.putExtra(&quot;reminder_repeat_type&quot;, reminder.getRepeatType());&#10;        intent.setAction(&quot;REMINDER_NOTIFICATION&quot;);&#10;        &#10;        // Tạo unique request code để tránh conflict&#10;        int requestCode = reminder.getId().hashCode();&#10;        Log.d(TAG, &quot;Request Code: &quot; + requestCode);&#10;&#10;        PendingIntent pendingIntent = PendingIntent.getBroadcast(&#10;            context,&#10;            requestCode,&#10;            intent,&#10;            PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE&#10;        );&#10;&#10;        try {&#10;            // Acquire wake lock trước khi schedule&#10;            if (!wakeLock.isHeld()) {&#10;                wakeLock.acquire(10000); // 10 seconds timeout&#10;            }&#10;&#10;            if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {&#10;                Log.d(TAG, &quot;Sử dụng setExactAndAllowWhileIdle cho Android 6.0+&quot;);&#10;                alarmManager.setExactAndAllowWhileIdle(&#10;                    AlarmManager.RTC_WAKEUP,&#10;                    reminderTime,&#10;                    pendingIntent&#10;                );&#10;            } else {&#10;                Log.d(TAG, &quot;Sử dụng setExact cho Android cũ&quot;);&#10;                alarmManager.setExact(&#10;                    AlarmManager.RTC_WAKEUP,&#10;                    reminderTime,&#10;                    pendingIntent&#10;                );&#10;            }&#10;&#10;            Log.d(TAG, &quot;✅ ĐÃ LÊN LỊCH THÀNH CÔNG!&quot;);&#10;            Log.d(TAG, &quot;Reminder: &quot; + reminder.getTitle());&#10;            Log.d(TAG, &quot;Thời gian: &quot; + new java.text.SimpleDateFormat(&quot;dd/MM/yyyy HH:mm:ss&quot;).format(new Date(reminderTime)));&#10;            Log.d(TAG, &quot;=== KẾT THÚC SCHEDULE REMINDER ===&quot;);&#10;&#10;        } catch (SecurityException e) {&#10;            Log.e(TAG, &quot;❌ LỖI QUYỀN: Không thể lên lịch exact alarm&quot;, e);&#10;            &#10;            // Thử fallback với setWindow nếu không có quyền exact&#10;            try {&#10;                Log.d(TAG, &quot;Thử fallback với setWindow...&quot;);&#10;                if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) {&#10;                    alarmManager.setWindow(&#10;                        AlarmManager.RTC_WAKEUP,&#10;                        reminderTime,&#10;                        60000, // 1 minute window&#10;                        pendingIntent&#10;                    );&#10;                    Log.d(TAG, &quot;Đã schedule với setWindow thành công&quot;);&#10;                }&#10;            } catch (Exception fallbackError) {&#10;                Log.e(TAG, &quot;Fallback cũng thất bại&quot;, fallbackError);&#10;            }&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;❌ LỖI KHÔNG XÁC ĐỊNH khi schedule reminder&quot;, e);&#10;        } finally {&#10;            // Release wake lock&#10;            if (wakeLock.isHeld()) {&#10;                wakeLock.release();&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Tính toán thời gian nhắc nhở tiếp theo cho reminder lặp lại&#10;     */&#10;    private Date calculateNextReminderTime(Reminder reminder, long currentTime) {&#10;        Date reminderDate = new Date(reminder.getReminderTime());&#10;        Calendar calendar = Calendar.getInstance();&#10;        calendar.setTime(reminderDate);&#10;&#10;        // Tìm thời gian tiếp theo sau current time&#10;        while (calendar.getTimeInMillis() &lt;= currentTime) {&#10;            switch (reminder.getRepeatType()) {&#10;                case Reminder.RepeatType.DAILY:&#10;                    calendar.add(Calendar.DAY_OF_MONTH, 1);&#10;                    break;&#10;                case Reminder.RepeatType.WEEKLY:&#10;                    calendar.add(Calendar.WEEK_OF_YEAR, 1);&#10;                    break;&#10;                case Reminder.RepeatType.MONTHLY:&#10;                    calendar.add(Calendar.MONTH, 1);&#10;                    break;&#10;                default:&#10;                    return null;&#10;            }&#10;        }&#10;&#10;        return calendar.getTime();&#10;    }&#10;&#10;    /**&#10;     * Tự động tắt reminder đã hết hạn (không lặp lại)&#10;     */&#10;    private void disableExpiredReminder(Reminder reminder) {&#10;        // TODO: Cập nhật trong database để tắt reminder&#10;        android.util.Log.d(&quot;ReminderService&quot;, &quot;Reminder đã hết hạn và bị tắt: &quot; + reminder.getTitle());&#10;    }&#10;&#10;    /**&#10;     * Hủy lịch thông báo nhắc nhở&#10;     */&#10;    public void cancelReminder(String reminderId) {&#10;        if (reminderId == null) return;&#10;&#10;        Intent intent = new Intent(context, ReminderBroadcastReceiver.class);&#10;        intent.setAction(&quot;REMINDER_NOTIFICATION&quot;);&#10;&#10;        PendingIntent pendingIntent = PendingIntent.getBroadcast(&#10;            context,&#10;            reminderId.hashCode(),&#10;            intent,&#10;            PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE&#10;        );&#10;&#10;        alarmManager.cancel(pendingIntent);&#10;        pendingIntent.cancel();&#10;    }&#10;&#10;    /**&#10;     * Cập nhật lịch nhắc nhở&#10;     */&#10;    public void updateReminder(Reminder reminder) {&#10;        // Hủy lịch cũ&#10;        cancelReminder(reminder.getId());&#10;&#10;        // Lên lịch mới nếu reminder vẫn còn hoạt động&#10;        if (reminder.isActive()) {&#10;            scheduleReminder(reminder);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Lên lịch cho lần lặp lại tiếp theo&#10;     */&#10;    private void scheduleNextRepeat(Reminder reminder) {&#10;        if (reminder.getRepeatType() == Reminder.RepeatType.NO_REPEAT) {&#10;            return;&#10;        }&#10;&#10;        Date nextTime = reminder.getNextReminderTime();&#10;        if (nextTime != null &amp;&amp; nextTime.getTime() &gt; System.currentTimeMillis()) {&#10;            // Tạo reminder mới cho lần tiếp theo&#10;            Reminder nextReminder = new Reminder();&#10;            nextReminder.setId(reminder.getId() + &quot;_next&quot;);&#10;            nextReminder.setUserId(reminder.getUserId());&#10;            nextReminder.setTitle(reminder.getTitle());&#10;            nextReminder.setDescription(reminder.getDescription());&#10;            nextReminder.setReminderTime(nextTime.getTime());&#10;            nextReminder.setRepeatType(reminder.getRepeatType());&#10;            nextReminder.setActive(reminder.isActive());&#10;            nextReminder.setHealthTipId(reminder.getHealthTipId());&#10;&#10;            scheduleReminder(nextReminder);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Lên lịch lại tất cả nhắc nhở hoạt động (thường dùng sau khi restart app)&#10;     */&#10;    public void rescheduleAllActiveReminders(java.util.List&lt;Reminder&gt; reminders) {&#10;        if (reminders == null) return;&#10;&#10;        for (Reminder reminder : reminders) {&#10;            if (reminder.isActive() &amp;&amp; reminder.getReminderTime() != null) {&#10;                scheduleReminder(reminder);&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Kiểm tra xem có quyền lên lịch exact alarm hay không với logging&#10;     */&#10;    public boolean canScheduleExactAlarms() {&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S) {&#10;            boolean canSchedule = alarmManager.canScheduleExactAlarms();&#10;            Log.d(TAG, &quot;Can schedule exact alarms: &quot; + canSchedule);&#10;            return canSchedule;&#10;        }&#10;        Log.d(TAG, &quot;Android version &lt; 31, exact alarms allowed by default&quot;);&#10;        return true;&#10;    }&#10;&#10;    /**&#10;     * Release wake lock khi service bị destroy&#10;     */&#10;    public void release() {&#10;        if (wakeLock != null &amp;&amp; wakeLock.isHeld()) {&#10;            wakeLock.release();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/bg_reminder_due.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/bg_reminder_due.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &#10;    &lt;!-- Màu nền nhấn mạnh cho nhắc nhở đã đến giờ --&gt;&#10;    &lt;solid android:color=&quot;#1AFF5722&quot; /&gt;&#10;    &#10;    &lt;!-- Bo góc --&gt;&#10;    &lt;corners android:radius=&quot;8dp&quot; /&gt;&#10;    &#10;    &lt;!-- Đường viền đỏ cam để làm nổi bật --&gt;&#10;    &lt;stroke&#10;        android:width=&quot;2dp&quot;&#10;        android:color=&quot;@color/status_due&quot; /&gt;&#10;        &#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/bg_reminder_normal.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/bg_reminder_normal.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &#10;    &lt;!-- Màu nền bình thường --&gt;&#10;    &lt;solid android:color=&quot;@android:color/transparent&quot; /&gt;&#10;    &#10;    &lt;!-- Bo góc --&gt;&#10;    &lt;corners android:radius=&quot;8dp&quot; /&gt;&#10;    &#10;    &lt;!-- Đường viền nhẹ --&gt;&#10;    &lt;stroke&#10;        android:width=&quot;1dp&quot;&#10;        android:color=&quot;@color/divider_color&quot; /&gt;&#10;        &#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/bg_repeat_type.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/bg_repeat_type.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &#10;    &lt;!-- Màu nền trong suốt với tông màu chính --&gt;&#10;    &lt;solid android:color=&quot;#1A4CAF50&quot; /&gt;&#10;    &#10;    &lt;!-- Bo góc tròn --&gt;&#10;    &lt;corners android:radius=&quot;12dp&quot; /&gt;&#10;    &#10;    &lt;!-- Đường viền màu chính --&gt;&#10;    &lt;stroke&#10;        android:width=&quot;1dp&quot;&#10;        android:color=&quot;@color/primary_color&quot; /&gt;&#10;        &#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_add.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_add.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M19,13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_check.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_check.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnPrimary&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M9,16.17L4.83,12l-1.42,1.41L9,19 21,7l-1.41,-1.41z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_delete.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_delete.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M6,19c0,1.1 0.9,2 2,2h8c1.1,0 2,-0.9 2,-2V7H6v12zM19,4h-3.5l-1,-1h-5l-1,1H5v2h14V4z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_filter_list.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_filter_list.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M10,18h4v-2h-4v2zM3,6v2h18L21,6L3,6zM6,13h12v-2L6,11v2z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_filter_list_off.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_filter_list_off.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M10.83,8H21V6H8.83l2,2zM12.83,12H21v-2H10.83l2,2zM14.83,16H21v-2h-4.17l2,2zM2.81,2.81L1.39,4.22l4.44,4.44H3v2h4.83l2,2H6v2h5.83l2,2H10v2h5.83l1.95,1.95l1.41-1.41L2.81,2.81z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_notification_reminder.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_notification_reminder.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnPrimary&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M12,2C13.1,2 14,2.9 14,4C14,5.1 13.1,6 12,6C10.9,6 10,5.1 10,4C10,2.9 10.9,2 12,2ZM21,9V7L15,7V9L21,9ZM3,9V7L9,7V9L3,9ZM13,10.5V12.5L11,12.5V10.5L13,10.5ZM6,20V18H18V20H6ZM7.5,12L6.5,12C6.5,16 8.5,18 12,18S17.5,16 17.5,12L16.5,12C16.5,15.5 14.5,17 12,17S7.5,15.5 7.5,12ZM12,8A4,4 0 0,1 16,12H20C20,7.58 16.42,4 12,4V8Z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_refresh.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_refresh.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M17.65,6.35C16.2,4.9 14.21,4 12,4c-4.42,0 -7.99,3.58 -7.99,8s3.57,8 7.99,8c3.73,0 6.84,-2.55 7.73,-6h-2.08c-0.82,2.33 -3.04,4 -5.65,4 -3.31,0 -6,-2.69 -6,-6s2.69,-6 6,-6c1.66,0 3.14,0.69 4.22,1.78L13,11h7V4l-2.35,2.35z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_reminder_empty.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_reminder_empty.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M22,5.72l-4.6,-3.86 -1.29,1.53 4.6,3.86L22,5.72zM7.88,3.39L6.6,1.86 2,5.71l1.29,1.53 4.59,-3.85zM12.5,8L11,8v6l4.75,2.85 0.75,-1.23 -4,-2.37L12.5,8zM12,4c-4.97,0 -9,4.03 -9,9s4.02,9 9,9c4.97,0 9,-4.03 9,-9s-4.03,-9 -9,-9zM12,20c-3.87,0 -7,-3.13 -7,-7s3.13,-7 7,-7 7,3.13 7,7 -3.13,7 -7,7z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_schedule.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_schedule.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M11.99,2C6.47,2 2,6.48 2,12s4.47,10 9.99,10C17.52,22 22,17.52 22,12S17.52,2 11.99,2zM12,20c-4.42,0 -8,-3.58 -8,-8s3.58,-8 8,-8 8,3.58 8,8 -3.58,8 -8,8zM12.5,7H11v6l5.25,3.15 0.75,-1.23 -4.5,-2.67z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_search.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_search.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M15.5,14h-0.79l-0.28,-0.27C15.41,12.59 16,11.11 16,9.5 16,5.91 13.09,3 9.5,3S3,5.91 3,9.5 5.91,16 9.5,16c1.61,0 3.09,-0.59 4.23,-1.57l0.27,0.28v0.79l5,4.99L20.49,19l-4.99,-5zM9.5,14C7.01,14 5,11.99 5,9.5S7.01,5 9.5,5 14,7.01 14,9.5 11.99,14 9.5,14z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_reminder_test.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_reminder_test.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;16dp&quot;&#10;    android:background=&quot;@color/background_color&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot; Debug Hệ Thống Thông Báo&quot;&#10;        android:textSize=&quot;20sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:textColor=&quot;@color/text_primary&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:layout_marginBottom=&quot;24dp&quot; /&gt;&#10;&#10;    &lt;ScrollView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_weight=&quot;1&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&gt;&#10;&#10;            &lt;!-- Trạng thái hệ thống --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;&#10;                app:cardCornerRadius=&quot;8dp&quot;&#10;                app:cardElevation=&quot;4dp&quot;&#10;                xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot; Trạng Thái Hệ Thống&quot;&#10;                        android:textSize=&quot;16sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:textColor=&quot;@color/text_primary&quot;&#10;                        android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tv_status&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Đang kiểm tra...&quot;&#10;                        android:textSize=&quot;14sp&quot;&#10;                        android:textColor=&quot;@color/text_secondary&quot;&#10;                        android:fontFamily=&quot;monospace&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;!-- Các nút test --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;&#10;                app:cardCornerRadius=&quot;8dp&quot;&#10;                app:cardElevation=&quot;4dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot; Các Test Thông Báo&quot;&#10;                        android:textSize=&quot;16sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:textColor=&quot;@color/text_primary&quot;&#10;                        android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;                    &lt;Button&#10;                        android:id=&quot;@+id/btn_test_notification&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot; Test Thông Báo Ngay&quot;&#10;                        android:layout_marginBottom=&quot;8dp&quot;&#10;                        android:backgroundTint=&quot;@color/primary_color&quot;&#10;                        android:textColor=&quot;@android:color/white&quot; /&gt;&#10;&#10;                    &lt;Button&#10;                        android:id=&quot;@+id/btn_test_1min_reminder&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;⏰ Test Reminder 1 Phút&quot;&#10;                        android:layout_marginBottom=&quot;8dp&quot;&#10;                        android:backgroundTint=&quot;@color/secondary_color&quot;&#10;                        android:textColor=&quot;@android:color/white&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;!-- Quyền và cài đặt --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                app:cardCornerRadius=&quot;8dp&quot;&#10;                app:cardElevation=&quot;4dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;⚙️ Quyền &amp; Cài Đặt&quot;&#10;                        android:textSize=&quot;16sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:textColor=&quot;@color/text_primary&quot;&#10;                        android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;                    &lt;Button&#10;                        android:id=&quot;@+id/btn_check_permissions&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot; Kiểm Tra Quyền&quot;&#10;                        android:layout_marginBottom=&quot;8dp&quot;&#10;                        android:backgroundTint=&quot;@color/accent_color&quot;&#10;                        android:textColor=&quot;@android:color/white&quot; /&gt;&#10;&#10;                    &lt;Button&#10;                        android:id=&quot;@+id/btn_request_permissions&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;️ Yêu Cầu Quyền&quot;&#10;                        android:backgroundTint=&quot;@color/warning_color&quot;&#10;                        android:textColor=&quot;@android:color/white&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/ScrollView&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;16dp&quot;&#10;    android:background=&quot;@color/background_color&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot; Debug Hệ Thống Thông Báo&quot;&#10;        android:textSize=&quot;20sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:textColor=&quot;@color/text_primary&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:layout_marginBottom=&quot;24dp&quot; /&gt;&#10;&#10;    &lt;ScrollView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_weight=&quot;1&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&gt;&#10;&#10;            &lt;!-- Trạng thái hệ thống --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;&#10;                app:cardCornerRadius=&quot;8dp&quot;&#10;                app:cardElevation=&quot;4dp&quot;&#10;                xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot; Trạng Thái Hệ Thống&quot;&#10;                        android:textSize=&quot;16sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:textColor=&quot;@color/text_primary&quot;&#10;                        android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tv_status&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Đang kiểm tra...&quot;&#10;                        android:textSize=&quot;14sp&quot;&#10;                        android:textColor=&quot;@color/text_secondary&quot;&#10;                        android:fontFamily=&quot;monospace&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;!-- Các nút test --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;&#10;                app:cardCornerRadius=&quot;8dp&quot;&#10;                app:cardElevation=&quot;4dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot; Các Test Thông Báo&quot;&#10;                        android:textSize=&quot;16sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:textColor=&quot;@color/text_primary&quot;&#10;                        android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;                    &lt;Button&#10;                        android:id=&quot;@+id/btn_test_notification&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot; Test Thông Báo Ngay&quot;&#10;                        android:layout_marginBottom=&quot;8dp&quot;&#10;                        android:backgroundTint=&quot;@color/primary_color&quot;&#10;                        android:textColor=&quot;@android:color/white&quot; /&gt;&#10;&#10;                    &lt;Button&#10;                        android:id=&quot;@+id/btn_test_1min_reminder&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;⏰ Test Reminder 1 Phút&quot;&#10;                        android:layout_marginBottom=&quot;8dp&quot;&#10;                        android:backgroundTint=&quot;@color/secondary_color&quot;&#10;                        android:textColor=&quot;@android:color/white&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;            &lt;!-- Quyền và cài đặt --&gt;&#10;            &lt;androidx.cardview.widget.CardView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                app:cardCornerRadius=&quot;8dp&quot;&#10;                app:cardElevation=&quot;4dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;⚙️ Quyền &amp;amp; Cài Đặt&quot;&#10;                        android:textSize=&quot;16sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        android:textColor=&quot;@color/text_primary&quot;&#10;                        android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;                    &lt;Button&#10;                        android:id=&quot;@+id/btn_check_permissions&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot; Kiểm Tra Quyền&quot;&#10;                        android:layout_marginBottom=&quot;8dp&quot;&#10;                        android:backgroundTint=&quot;@color/accent_color&quot;&#10;                        android:textColor=&quot;@android:color/white&quot; /&gt;&#10;&#10;                    &lt;Button&#10;                        android:id=&quot;@+id/btn_request_permissions&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;️ Yêu Cầu Quyền&quot;&#10;                        android:backgroundTint=&quot;@color/warning_color&quot;&#10;                        android:textColor=&quot;@android:color/white&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/ScrollView&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/dialog_reminder.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/dialog_reminder.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:padding=&quot;16dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;        &lt;!-- Tiêu đề nhắc nhở --&gt;&#10;        &lt;com.google.android.material.textfield.TextInputLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            app:boxStrokeColor=&quot;@color/primary_color&quot;&#10;            app:hintTextColor=&quot;@color/primary_color&quot;&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputEditText&#10;                android:id=&quot;@+id/et_reminder_title&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:hint=&quot;Tiêu đề nhắc nhở&quot;&#10;                android:inputType=&quot;text&quot;&#10;                android:maxLines=&quot;1&quot; /&gt;&#10;&#10;        &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;        &lt;!-- Mô tả nhắc nhở --&gt;&#10;        &lt;com.google.android.material.textfield.TextInputLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            app:boxStrokeColor=&quot;@color/primary_color&quot;&#10;            app:hintTextColor=&quot;@color/primary_color&quot;&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputEditText&#10;                android:id=&quot;@+id/et_reminder_description&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:hint=&quot;Mô tả (tùy chọn)&quot;&#10;                android:inputType=&quot;textMultiLine&quot;&#10;                android:maxLines=&quot;3&quot; /&gt;&#10;&#10;        &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;        &lt;!-- Chọn ngày --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;12dp&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;Ngày:&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tv_selected_date&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginEnd=&quot;8dp&quot;&#10;                android:text=&quot;--/--/----&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textColor=&quot;@color/primary_color&quot; /&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btn_select_date&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Button.OutlinedButton&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Chọn&quot;&#10;                android:textSize=&quot;12sp&quot;&#10;                app:strokeColor=&quot;@color/primary_color&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Chọn thời gian --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;Thời gian:&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tv_selected_time&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginEnd=&quot;8dp&quot;&#10;                android:text=&quot;--:--&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textColor=&quot;@color/primary_color&quot; /&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btn_select_time&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Button.OutlinedButton&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Chọn&quot;&#10;                android:textSize=&quot;12sp&quot;&#10;                app:strokeColor=&quot;@color/primary_color&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Loại lặp lại --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;Lặp lại:&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;            &lt;Spinner&#10;                android:id=&quot;@+id/sp_repeat_type&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:minWidth=&quot;120dp&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Trạng thái hoạt động --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;24dp&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;Kích hoạt nhắc nhở:&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;            &lt;Switch&#10;                android:id=&quot;@+id/sw_reminder_active&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:checked=&quot;true&quot;&#10;                android:thumbTint=&quot;@color/primary_color&quot;&#10;                android:trackTint=&quot;@color/primary_light&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Divider --&gt;&#10;        &lt;View&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;1dp&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            android:background=&quot;@color/divider_color&quot; /&gt;&#10;&#10;        &lt;!-- Buttons --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;end&quot;&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btn_cancel_reminder&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Button.TextButton&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginEnd=&quot;8dp&quot;&#10;                android:text=&quot;Hủy&quot;&#10;                android:textColor=&quot;@color/text_secondary&quot; /&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btn_save_reminder&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Button&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Lưu&quot;&#10;                android:backgroundTint=&quot;@color/primary_color&quot;&#10;                android:textColor=&quot;@android:color/white&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/ScrollView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_reminder.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_reminder.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@color/background_color&quot;&gt;&#10;&#10;    &lt;!-- SwipeRefreshLayout chứa RecyclerView --&gt;&#10;    &lt;androidx.swiperefreshlayout.widget.SwipeRefreshLayout&#10;        android:id=&quot;@+id/swipe_refresh_reminders&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;        &lt;!-- RecyclerView hiển thị danh sách nhắc nhở --&gt;&#10;        &lt;androidx.recyclerview.widget.RecyclerView&#10;            android:id=&quot;@+id/recycler_view_reminders&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:clipToPadding=&quot;false&quot;&#10;            android:paddingTop=&quot;8dp&quot;&#10;            android:paddingBottom=&quot;80dp&quot;&#10;            android:scrollbars=&quot;vertical&quot;&#10;            tools:listitem=&quot;@layout/item_reminder&quot; /&gt;&#10;&#10;    &lt;/androidx.swiperefreshlayout.widget.SwipeRefreshLayout&gt;&#10;&#10;    &lt;!-- Loading State --&gt;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/layout_loading&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:visibility=&quot;gone&quot;&gt;&#10;&#10;        &lt;ProgressBar&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:indeterminateTint=&quot;@color/primary_color&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:text=&quot;Đang tải nhắc nhở...&quot;&#10;            android:textColor=&quot;@color/text_secondary&quot;&#10;            android:textSize=&quot;16sp&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Empty State --&gt;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/layout_empty_state&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;32dp&quot;&#10;        android:visibility=&quot;gone&quot;&gt;&#10;&#10;        &lt;ImageView&#10;            android:layout_width=&quot;120dp&quot;&#10;            android:layout_height=&quot;120dp&quot;&#10;            android:layout_marginBottom=&quot;24dp&quot;&#10;            android:alpha=&quot;0.6&quot;&#10;            android:src=&quot;@drawable/ic_reminder_empty&quot;&#10;            android:tint=&quot;@color/text_secondary&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;8dp&quot;&#10;            android:text=&quot;Chưa có nhắc nhở nào&quot;&#10;            android:textColor=&quot;@color/text_primary&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;24dp&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:text=&quot;Tạo nhắc nhở mới để theo dõi các hoạt động sức khỏe của bạn&quot;&#10;            android:textColor=&quot;@color/text_secondary&quot;&#10;            android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btn_create_first_reminder&quot;&#10;            style=&quot;@style/Widget.MaterialComponents.Button&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:backgroundTint=&quot;@color/primary_color&quot;&#10;            android:text=&quot;Tạo nhắc nhở đầu tiên&quot;&#10;            android:textColor=&quot;@android:color/white&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Floating Action Button --&gt;&#10;    &lt;com.google.android.material.floatingactionbutton.FloatingActionButton&#10;        android:id=&quot;@+id/fab_add_reminder&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_gravity=&quot;bottom|end&quot;&#10;        android:layout_margin=&quot;16dp&quot;&#10;        android:contentDescription=&quot;Thêm nhắc nhở mới&quot;&#10;        android:src=&quot;@drawable/ic_add&quot;&#10;        app:backgroundTint=&quot;@color/primary_color&quot;&#10;        app:tint=&quot;@android:color/white&quot; /&gt;&#10;&#10;&lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@color/background_color&quot;&gt;&#10;&#10;    &lt;!-- Nút Debug ở góc trên bên phải --&gt;&#10;    &lt;com.google.android.material.button.MaterialButton&#10;        android:id=&quot;@+id/btn_debug_notifications&quot;&#10;        style=&quot;@style/Widget.MaterialComponents.Button.Icon&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_gravity=&quot;top|end&quot;&#10;        android:layout_margin=&quot;16dp&quot;&#10;        android:backgroundTint=&quot;@color/warning_color&quot;&#10;        android:text=&quot; Debug&quot;&#10;        android:textColor=&quot;@android:color/white&quot;&#10;        android:textSize=&quot;12sp&quot;&#10;        app:icon=&quot;@drawable/ic_refresh&quot;&#10;        app:iconTint=&quot;@android:color/white&quot;&#10;        app:cornerRadius=&quot;20dp&quot;&#10;        android:elevation=&quot;4dp&quot; /&gt;&#10;&#10;    &lt;!-- SwipeRefreshLayout chứa RecyclerView --&gt;&#10;    &lt;androidx.swiperefreshlayout.widget.SwipeRefreshLayout&#10;        android:id=&quot;@+id/swipe_refresh_reminders&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:layout_marginTop=&quot;60dp&quot;&gt;&#10;&#10;        &lt;!-- RecyclerView hiển thị danh sách nhắc nhở --&gt;&#10;        &lt;androidx.recyclerview.widget.RecyclerView&#10;            android:id=&quot;@+id/recycler_view_reminders&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:clipToPadding=&quot;false&quot;&#10;            android:paddingTop=&quot;8dp&quot;&#10;            android:paddingBottom=&quot;80dp&quot;&#10;            android:scrollbars=&quot;vertical&quot;&#10;            tools:listitem=&quot;@layout/item_reminder&quot; /&gt;&#10;&#10;    &lt;/androidx.swiperefreshlayout.widget.SwipeRefreshLayout&gt;&#10;&#10;    &lt;!-- Loading State --&gt;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/layout_loading&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:visibility=&quot;gone&quot;&gt;&#10;&#10;        &lt;ProgressBar&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:indeterminateTint=&quot;@color/primary_color&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:text=&quot;Đang tải nhắc nhở...&quot;&#10;            android:textColor=&quot;@color/text_secondary&quot;&#10;            android:textSize=&quot;16sp&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Empty State --&gt;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/layout_empty_state&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;32dp&quot;&#10;        android:visibility=&quot;gone&quot;&gt;&#10;&#10;        &lt;ImageView&#10;            android:layout_width=&quot;120dp&quot;&#10;            android:layout_height=&quot;120dp&quot;&#10;            android:layout_marginBottom=&quot;24dp&quot;&#10;            android:alpha=&quot;0.6&quot;&#10;            android:src=&quot;@drawable/ic_reminder_empty&quot;&#10;            android:tint=&quot;@color/text_secondary&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;8dp&quot;&#10;            android:text=&quot;Chưa có nhắc nhở nào&quot;&#10;            android:textColor=&quot;@color/text_primary&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;24dp&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:text=&quot;Tạo nhắc nhở mới để theo dõi các hoạt động sức khỏe của bạn&quot;&#10;            android:textColor=&quot;@color/text_secondary&quot;&#10;            android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btn_create_first_reminder&quot;&#10;            style=&quot;@style/Widget.MaterialComponents.Button&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:backgroundTint=&quot;@color/primary_color&quot;&#10;            android:text=&quot;Tạo nhắc nhở đầu tiên&quot;&#10;            android:textColor=&quot;@android:color/white&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Floating Action Button --&gt;&#10;    &lt;com.google.android.material.floatingactionbutton.FloatingActionButton&#10;        android:id=&quot;@+id/fab_add_reminder&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_gravity=&quot;bottom|end&quot;&#10;        android:layout_margin=&quot;16dp&quot;&#10;        android:contentDescription=&quot;Thêm nhắc nhở mới&quot;&#10;        android:src=&quot;@drawable/ic_add&quot;&#10;        app:backgroundTint=&quot;@color/primary_color&quot;&#10;        app:tint=&quot;@android:color/white&quot; /&gt;&#10;&#10;&lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_reminder.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_reminder.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.cardview.widget.CardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_margin=&quot;8dp&quot;&#10;    app:cardCornerRadius=&quot;8dp&quot;&#10;    app:cardElevation=&quot;2dp&quot;&#10;    android:foreground=&quot;?android:attr/selectableItemBackground&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;!-- Status Indicator --&gt;&#10;        &lt;View&#10;            android:id=&quot;@+id/view_status_indicator&quot;&#10;            android:layout_width=&quot;4dp&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:layout_marginEnd=&quot;12dp&quot;&#10;            android:background=&quot;@color/status_active&quot; /&gt;&#10;&#10;        &lt;!-- Content --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:orientation=&quot;vertical&quot;&gt;&#10;&#10;            &lt;!-- Title --&gt;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tv_reminder_title&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginBottom=&quot;4dp&quot;&#10;                android:textColor=&quot;@color/text_primary&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                tools:text=&quot;Uống thuốc huyết áp&quot; /&gt;&#10;&#10;            &lt;!-- Description --&gt;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tv_reminder_description&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot;&#10;                android:textColor=&quot;@color/text_secondary&quot;&#10;                android:textSize=&quot;14sp&quot;&#10;                android:visibility=&quot;gone&quot;&#10;                tools:text=&quot;Nhớ uống thuốc huyết áp sau bữa sáng&quot;&#10;                tools:visibility=&quot;visible&quot; /&gt;&#10;&#10;            &lt;!-- Date Time and Repeat Info --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&#10;                android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;                &lt;ImageView&#10;                    android:layout_width=&quot;16dp&quot;&#10;                    android:layout_height=&quot;16dp&quot;&#10;                    android:layout_marginEnd=&quot;4dp&quot;&#10;                    android:src=&quot;@drawable/ic_schedule&quot;&#10;                    android:tint=&quot;@color/text_secondary&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tv_reminder_datetime&quot;&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:textColor=&quot;@color/text_secondary&quot;&#10;                    android:textSize=&quot;12sp&quot;&#10;                    tools:text=&quot;25/01/2025 08:00&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tv_repeat_type&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginStart=&quot;8dp&quot;&#10;                    android:background=&quot;@drawable/bg_repeat_type&quot;&#10;                    android:paddingHorizontal=&quot;8dp&quot;&#10;                    android:paddingVertical=&quot;2dp&quot;&#10;                    android:textColor=&quot;@color/primary_color&quot;&#10;                    android:textSize=&quot;10sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    tools:text=&quot;HÀNG NGÀY&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Controls --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginStart=&quot;8dp&quot;&#10;            android:gravity=&quot;center_vertical&quot;&#10;            android:orientation=&quot;vertical&quot;&gt;&#10;&#10;            &lt;!-- Active Switch --&gt;&#10;            &lt;Switch&#10;                android:id=&quot;@+id/sw_reminder_active&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot;&#10;                android:thumbTint=&quot;@color/primary_color&quot;&#10;                android:trackTint=&quot;@color/primary_light&quot; /&gt;&#10;&#10;            &lt;!-- Delete Button --&gt;&#10;            &lt;ImageButton&#10;                android:id=&quot;@+id/btn_delete_reminder&quot;&#10;                android:layout_width=&quot;32dp&quot;&#10;                android:layout_height=&quot;32dp&quot;&#10;                android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;                android:contentDescription=&quot;Xóa nhắc nhở&quot;&#10;                android:src=&quot;@drawable/ic_delete&quot;&#10;                android:tint=&quot;@color/error_color&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/androidx.cardview.widget.CardView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/menu/menu_reminder.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/menu/menu_reminder.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;&#10;&#10;    &lt;!-- Search --&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/action_search&quot;&#10;        android:icon=&quot;@drawable/ic_search&quot;&#10;        android:title=&quot;Tìm kiếm&quot;&#10;        app:actionViewClass=&quot;androidx.appcompat.widget.SearchView&quot;&#10;        app:showAsAction=&quot;ifRoom|collapseActionView&quot; /&gt;&#10;&#10;    &lt;!-- Filter Active Only --&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/action_filter_active&quot;&#10;        android:icon=&quot;@drawable/ic_filter_list&quot;&#10;        android:title=&quot;Chỉ hiển thị đang hoạt động&quot;&#10;        app:showAsAction=&quot;ifRoom&quot; /&gt;&#10;&#10;    &lt;!-- Refresh --&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/action_refresh&quot;&#10;        android:icon=&quot;@drawable/ic_refresh&quot;&#10;        android:title=&quot;Làm mới&quot;&#10;        app:showAsAction=&quot;never&quot; /&gt;&#10;&#10;    &lt;!-- Debug - chỉ hiển thị trong debug mode --&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/action_debug_notifications&quot;&#10;        android:icon=&quot;@drawable/ic_settings&quot;&#10;        android:title=&quot; Debug Thông Báo&quot;&#10;        app:showAsAction=&quot;never&quot; /&gt;&#10;&#10;&lt;/menu&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;&#10;&#10;    &lt;!-- Search --&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/action_search&quot;&#10;        android:icon=&quot;@drawable/ic_search&quot;&#10;        android:title=&quot;Tìm kiếm&quot;&#10;        app:actionViewClass=&quot;androidx.appcompat.widget.SearchView&quot;&#10;        app:showAsAction=&quot;ifRoom|collapseActionView&quot; /&gt;&#10;&#10;    &lt;!-- Filter Active Only --&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/action_filter_active&quot;&#10;        android:icon=&quot;@drawable/ic_filter_list&quot;&#10;        android:title=&quot;Chỉ hiển thị đang hoạt động&quot;&#10;        app:showAsAction=&quot;ifRoom&quot; /&gt;&#10;&#10;    &lt;!-- Refresh --&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/action_refresh&quot;&#10;        android:icon=&quot;@drawable/ic_refresh&quot;&#10;        android:title=&quot;Làm mới&quot;&#10;        app:showAsAction=&quot;never&quot; /&gt;&#10;&#10;    &lt;!-- Debug - chỉ hiển thị trong debug mode --&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/action_debug_notifications&quot;&#10;        android:icon=&quot;@drawable/ic_refresh&quot;&#10;        android:title=&quot; Debug Thông Báo&quot;&#10;        app:showAsAction=&quot;never&quot; /&gt;&#10;&#10;&lt;/menu&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/colors.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/colors.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;!-- Màu cơ bản --&gt;&#10;    &lt;color name=&quot;black&quot;&gt;#FF000000&lt;/color&gt;&#10;    &lt;color name=&quot;white&quot;&gt;#FFFFFFFF&lt;/color&gt;&#10;&#10;    &lt;!-- Màu nền --&gt;&#10;    &lt;color name=&quot;background_dark&quot;&gt;#1A1A1D&lt;/color&gt;&#10;    &lt;color name=&quot;background_dark_alt&quot;&gt;#212124&lt;/color&gt;&#10;    &lt;color name=&quot;background_color&quot;&gt;#1A1A1D&lt;/color&gt;       &lt;!-- Alias cho background_dark --&gt;&#10;&#10;    &lt;!-- Màu text --&gt;&#10;    &lt;color name=&quot;text_primary&quot;&gt;#FFFFFF&lt;/color&gt;           &lt;!-- Màu chữ chính - trắng cho dark theme --&gt;&#10;    &lt;color name=&quot;text_secondary&quot;&gt;#B0BEC5&lt;/color&gt;         &lt;!-- Màu chữ phụ - xám nhạt --&gt;&#10;&#10;    &lt;!-- Màu cho nút chính --&gt;&#10;    &lt;color name=&quot;primary_button_start&quot;&gt;#2E7D32&lt;/color&gt;   &lt;!-- Xanh lá đậm --&gt;&#10;    &lt;color name=&quot;primary_button_end&quot;&gt;#C0CA33&lt;/color&gt;     &lt;!-- Vàng chanh --&gt;&#10;    &lt;color name=&quot;primary_button_text&quot;&gt;#FFFFFF&lt;/color&gt;    &lt;!-- Trắng --&gt;&#10;&#10;    &lt;!-- Màu cho nút phụ --&gt;&#10;    &lt;color name=&quot;secondary_button_start&quot;&gt;#F57C00&lt;/color&gt; &lt;!-- Cam tươi --&gt;&#10;    &lt;color name=&quot;secondary_button_end&quot;&gt;#D32F2F&lt;/color&gt;   &lt;!-- Đỏ gạch --&gt;&#10;    &lt;color name=&quot;secondary_button_text&quot;&gt;#FFFFFF&lt;/color&gt;  &lt;!-- Trắng --&gt;&#10;&#10;    &lt;!-- Màu điểm nhấn --&gt;&#10;    &lt;color name=&quot;accent&quot;&gt;#00BFFF&lt;/color&gt;                 &lt;!-- Xanh dương sáng --&gt;&#10;    &lt;color name=&quot;accent_color&quot;&gt;#FF9800&lt;/color&gt;           &lt;!-- Màu nhấn cam --&gt;&#10;&#10;    &lt;!-- Màu đường viền/phân cách --&gt;&#10;    &lt;color name=&quot;divider&quot;&gt;#424242&lt;/color&gt;                &lt;!-- Xám cho đường phân cách --&gt;&#10;    &lt;color name=&quot;divider_color&quot;&gt;#424242&lt;/color&gt;          &lt;!-- Alias cho divider --&gt;&#10;&#10;    &lt;!-- Màu thông báo --&gt;&#10;    &lt;color name=&quot;success&quot;&gt;#4CAF50&lt;/color&gt;&#10;    &lt;color name=&quot;error&quot;&gt;#F44336&lt;/color&gt;&#10;    &lt;color name=&quot;warning&quot;&gt;#FF9800&lt;/color&gt;&#10;    &lt;color name=&quot;info&quot;&gt;#2196F3&lt;/color&gt;&#10;&#10;    &lt;!-- Màu cho chức năng yêu thích --&gt;&#10;    &lt;color name=&quot;favorite_color&quot;&gt;#E91E63&lt;/color&gt;         &lt;!-- Màu hồng cho trái tim yêu thích --&gt;&#10;    &lt;color name=&quot;favorite_outline&quot;&gt;#757575&lt;/color&gt;       &lt;!-- Màu xám cho trái tim chưa yêu thích --&gt;&#10;    &lt;color name=&quot;icon_color&quot;&gt;#757575&lt;/color&gt;             &lt;!-- Màu icon mặc định --&gt;&#10;&#10;    &lt;!-- Màu bổ sung --&gt;&#10;    &lt;color name=&quot;disabled&quot;&gt;#757575&lt;/color&gt;               &lt;!-- Màu xám cho trạng thái disabled --&gt;&#10;    &lt;color name=&quot;error_color&quot;&gt;#F44336&lt;/color&gt;            &lt;!-- Alias cho error --&gt;&#10;    &lt;color name=&quot;progress_color&quot;&gt;#4CAF50&lt;/color&gt;         &lt;!-- Màu xanh cho progress bar --&gt;&#10;&#10;    &lt;!-- Màu chính của ứng dụng --&gt;&#10;    &lt;color name=&quot;primary_color&quot;&gt;#4CAF50&lt;/color&gt;          &lt;!-- Màu chính - xanh lá --&gt;&#10;    &lt;color name=&quot;secondary_color&quot;&gt;#FF9800&lt;/color&gt;        &lt;!-- Màu phụ - cam --&gt;&#10;    &lt;color name=&quot;warning_color&quot;&gt;#FF9800&lt;/color&gt;          &lt;!-- Màu cảnh báo - cam --&gt;&#10;&#10;    &lt;!-- Màu cho Material Design 3 - Dark Theme --&gt;&#10;    &lt;color name=&quot;md_theme_dark_primary&quot;&gt;#4CAF50&lt;/color&gt;&#10;    &lt;color name=&quot;md_theme_dark_onPrimary&quot;&gt;#FFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;md_theme_dark_surface&quot;&gt;#1A1A1D&lt;/color&gt;&#10;    &lt;color name=&quot;md_theme_dark_onSurface&quot;&gt;#FFFFFF&lt;/color&gt;&#10;&#10;    &lt;!-- Màu cho Reminder Status --&gt;&#10;    &lt;color name=&quot;status_active&quot;&gt;#4CAF50&lt;/color&gt;          &lt;!-- Xanh lá - nhắc nhở đang hoạt động --&gt;&#10;    &lt;color name=&quot;status_due&quot;&gt;#FF5722&lt;/color&gt;             &lt;!-- Đỏ cam - nhắc nhở đã đến giờ --&gt;&#10;    &lt;color name=&quot;status_inactive&quot;&gt;#757575&lt;/color&gt;        &lt;!-- Xám - nhắc nhở đã tắt --&gt;&#10;&#10;    &lt;!-- Màu cho Reminder Background --&gt;&#10;    &lt;color name=&quot;bg_reminder_due&quot;&gt;#FFEBEE&lt;/color&gt;&#10;    &lt;color name=&quot;bg_reminder_normal&quot;&gt;#F1F8E9&lt;/color&gt;&#10;&#10;&lt;/resources&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;!-- Màu cơ bản --&gt;&#10;    &lt;color name=&quot;black&quot;&gt;#FF000000&lt;/color&gt;&#10;    &lt;color name=&quot;white&quot;&gt;#FFFFFFFF&lt;/color&gt;&#10;&#10;    &lt;!-- Màu nền --&gt;&#10;    &lt;color name=&quot;background_dark&quot;&gt;#1A1A1D&lt;/color&gt;&#10;    &lt;color name=&quot;background_dark_alt&quot;&gt;#212124&lt;/color&gt;&#10;    &lt;color name=&quot;background_color&quot;&gt;#1A1A1D&lt;/color&gt;       &lt;!-- Alias cho background_dark --&gt;&#10;&#10;    &lt;!-- Màu text --&gt;&#10;    &lt;color name=&quot;text_primary&quot;&gt;#FFFFFF&lt;/color&gt;           &lt;!-- Màu chữ chính - trắng cho dark theme --&gt;&#10;    &lt;color name=&quot;text_secondary&quot;&gt;#B0BEC5&lt;/color&gt;         &lt;!-- Màu chữ phụ - xám nhạt --&gt;&#10;&#10;    &lt;!-- Màu cho nút chính --&gt;&#10;    &lt;color name=&quot;primary_button_start&quot;&gt;#2E7D32&lt;/color&gt;   &lt;!-- Xanh lá đậm --&gt;&#10;    &lt;color name=&quot;primary_button_end&quot;&gt;#C0CA33&lt;/color&gt;     &lt;!-- Vàng chanh --&gt;&#10;    &lt;color name=&quot;primary_button_text&quot;&gt;#FFFFFF&lt;/color&gt;    &lt;!-- Trắng --&gt;&#10;&#10;    &lt;!-- Màu cho nút phụ --&gt;&#10;    &lt;color name=&quot;secondary_button_start&quot;&gt;#F57C00&lt;/color&gt; &lt;!-- Cam tươi --&gt;&#10;    &lt;color name=&quot;secondary_button_end&quot;&gt;#D32F2F&lt;/color&gt;   &lt;!-- Đỏ gạch --&gt;&#10;    &lt;color name=&quot;secondary_button_text&quot;&gt;#FFFFFF&lt;/color&gt;  &lt;!-- Trắng --&gt;&#10;&#10;    &lt;!-- Màu điểm nhấn --&gt;&#10;    &lt;color name=&quot;accent&quot;&gt;#00BFFF&lt;/color&gt;                 &lt;!-- Xanh dương sáng --&gt;&#10;    &lt;color name=&quot;accent_color&quot;&gt;#FF9800&lt;/color&gt;           &lt;!-- Màu nhấn cam --&gt;&#10;&#10;    &lt;!-- Màu đường viền/phân cách --&gt;&#10;    &lt;color name=&quot;divider&quot;&gt;#424242&lt;/color&gt;                &lt;!-- Xám cho đường phân cách --&gt;&#10;    &lt;color name=&quot;divider_color&quot;&gt;#424242&lt;/color&gt;          &lt;!-- Alias cho divider --&gt;&#10;&#10;    &lt;!-- Màu thông báo --&gt;&#10;    &lt;color name=&quot;success&quot;&gt;#4CAF50&lt;/color&gt;&#10;    &lt;color name=&quot;error&quot;&gt;#F44336&lt;/color&gt;&#10;    &lt;color name=&quot;warning&quot;&gt;#FF9800&lt;/color&gt;&#10;    &lt;color name=&quot;info&quot;&gt;#2196F3&lt;/color&gt;&#10;&#10;    &lt;!-- Màu cho chức năng yêu thích --&gt;&#10;    &lt;color name=&quot;favorite_color&quot;&gt;#E91E63&lt;/color&gt;         &lt;!-- Màu hồng cho trái tim yêu thích --&gt;&#10;    &lt;color name=&quot;favorite_outline&quot;&gt;#757575&lt;/color&gt;       &lt;!-- Màu xám cho trái tim chưa yêu thích --&gt;&#10;    &lt;color name=&quot;icon_color&quot;&gt;#757575&lt;/color&gt;             &lt;!-- Màu icon mặc định --&gt;&#10;&#10;    &lt;!-- Màu bổ sung --&gt;&#10;    &lt;color name=&quot;disabled&quot;&gt;#757575&lt;/color&gt;               &lt;!-- Màu xám cho trạng thái disabled --&gt;&#10;    &lt;color name=&quot;error_color&quot;&gt;#F44336&lt;/color&gt;            &lt;!-- Alias cho error --&gt;&#10;    &lt;color name=&quot;progress_color&quot;&gt;#4CAF50&lt;/color&gt;         &lt;!-- Màu xanh cho progress bar --&gt;&#10;&#10;    &lt;!-- Màu chính của ứng dụng --&gt;&#10;    &lt;color name=&quot;primary_color&quot;&gt;#4CAF50&lt;/color&gt;          &lt;!-- Màu chính - xanh lá --&gt;&#10;    &lt;color name=&quot;primary_light&quot;&gt;#81C784&lt;/color&gt;          &lt;!-- Màu chính nhạt --&gt;&#10;    &lt;color name=&quot;primary_dark&quot;&gt;#2E7D32&lt;/color&gt;           &lt;!-- Màu chính đậm --&gt;&#10;    &lt;color name=&quot;secondary_color&quot;&gt;#FF9800&lt;/color&gt;        &lt;!-- Màu phụ - cam --&gt;&#10;    &lt;color name=&quot;warning_color&quot;&gt;#FF9800&lt;/color&gt;          &lt;!-- Màu cảnh báo - cam --&gt;&#10;&#10;    &lt;!-- Màu cho Material Design 3 - Dark Theme --&gt;&#10;    &lt;color name=&quot;md_theme_dark_primary&quot;&gt;#4CAF50&lt;/color&gt;&#10;    &lt;color name=&quot;md_theme_dark_onPrimary&quot;&gt;#FFFFFF&lt;/color&gt;&#10;    &lt;color name=&quot;md_theme_dark_surface&quot;&gt;#1A1A1D&lt;/color&gt;&#10;    &lt;color name=&quot;md_theme_dark_onSurface&quot;&gt;#FFFFFF&lt;/color&gt;&#10;&#10;    &lt;!-- Màu cho Reminder Status --&gt;&#10;    &lt;color name=&quot;status_active&quot;&gt;#4CAF50&lt;/color&gt;          &lt;!-- Xanh lá - nhắc nhở đang hoạt động --&gt;&#10;    &lt;color name=&quot;status_due&quot;&gt;#FF5722&lt;/color&gt;             &lt;!-- Đỏ cam - nhắc nhở đã đến giờ --&gt;&#10;    &lt;color name=&quot;status_inactive&quot;&gt;#757575&lt;/color&gt;        &lt;!-- Xám - nhắc nhở đã tắt --&gt;&#10;&#10;    &lt;!-- Màu cho Reminder Background --&gt;&#10;    &lt;color name=&quot;bg_reminder_due&quot;&gt;#FFEBEE&lt;/color&gt;&#10;    &lt;color name=&quot;bg_reminder_normal&quot;&gt;#F1F8E9&lt;/color&gt;&#10;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/strings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/strings.xml" />
              <option name="originalContent" value="&lt;resources&gt;&#10;&#10;    &lt;!-- Các chuỗi cho màn hình đăng nhập --&gt;&#10;    &lt;string name=&quot;login&quot;&gt;Đăng nhập&lt;/string&gt;&#10;    &lt;string name=&quot;register&quot;&gt;Đăng ký&lt;/string&gt;&#10;    &lt;string name=&quot;email&quot;&gt;Email&lt;/string&gt;&#10;    &lt;string name=&quot;password&quot;&gt;Mật khẩu&lt;/string&gt;&#10;    &lt;string name=&quot;confirm_password&quot;&gt;Xác nhận mật khẩu&lt;/string&gt;&#10;    &lt;string name=&quot;forgot_password&quot;&gt;Quên mật khẩu?&lt;/string&gt;&#10;    &lt;string name=&quot;dont_have_account&quot;&gt;Chưa có tài khoản? Đăng ký&lt;/string&gt;&#10;    &lt;string name=&quot;already_have_account&quot;&gt;Đã có tài khoản? Đăng nhập&lt;/string&gt;&#10;&#10;    &lt;!-- Các chuỗi cho màn hình quên mật khẩu --&gt;&#10;    &lt;string name=&quot;reset_password&quot;&gt;Đặt lại mật khẩu&lt;/string&gt;&#10;    &lt;string name=&quot;reset_password_instructions&quot;&gt;Nhập email của bạn để nhận hướng dẫn đặt lại mật khẩu&lt;/string&gt;&#10;    &lt;string name=&quot;send_reset_email&quot;&gt;Gửi email đặt lại&lt;/string&gt;&#10;    &lt;string name=&quot;back_to_login&quot;&gt;Quay lại đăng nhập&lt;/string&gt;&#10;&#10;    &lt;!-- Các chuỗi cho màn hình trang chủ --&gt;&#10;    &lt;string name=&quot;categories&quot;&gt;Danh mục&lt;/string&gt;&#10;    &lt;string name=&quot;latest_tips&quot;&gt;Mẹo mới nhất&lt;/string&gt;&#10;    &lt;string name=&quot;most_viewed&quot;&gt;Xem nhiều nhất&lt;/string&gt;&#10;    &lt;string name=&quot;most_liked&quot;&gt;Yêu thích nhất&lt;/string&gt;&#10;    &lt;string name=&quot;see_all&quot;&gt;Xem tất cả&lt;/string&gt;&#10;    &lt;string name=&quot;search&quot;&gt;Tìm kiếm&lt;/string&gt;&#10;    &lt;string name=&quot;offline_mode&quot;&gt;Đang ở chế độ ngoại tuyến&lt;/string&gt;&#10;&#10;    &lt;!-- Các chuỗi cho bottom navigation --&gt;&#10;    &lt;string name=&quot;nav_home&quot;&gt;Trang chủ&lt;/string&gt;&#10;    &lt;string name=&quot;nav_reminders&quot;&gt;Nhắc nhở&lt;/string&gt;&#10;    &lt;string name=&quot;nav_videos&quot;&gt;Video ngắn&lt;/string&gt;&#10;    &lt;string name=&quot;nav_favorites&quot;&gt;Yêu thích&lt;/string&gt;&#10;    &lt;string name=&quot;nav_profile&quot;&gt;Hồ sơ&lt;/string&gt;&#10;&#10;    &lt;!-- Các chuỗi cho màn hình chi tiết --&gt;&#10;    &lt;string name=&quot;related_tips&quot;&gt;Mẹo liên quan&lt;/string&gt;&#10;    &lt;string name=&quot;share&quot;&gt;Chia sẻ&lt;/string&gt;&#10;    &lt;string name=&quot;save&quot;&gt;Lưu&lt;/string&gt;&#10;    &lt;string name=&quot;views&quot;&gt;lượt xem&lt;/string&gt;&#10;    &lt;string name=&quot;likes&quot;&gt;lượt thích&lt;/string&gt;&#10;&#10;    &lt;!-- Thông báo lỗi và thành công --&gt;&#10;    &lt;string name=&quot;error_login&quot;&gt;Đăng nhập thất bại&lt;/string&gt;&#10;    &lt;string name=&quot;error_register&quot;&gt;Đăng ký thất bại&lt;/string&gt;&#10;    &lt;string name=&quot;error_reset_password&quot;&gt;Không thể đặt lại mật khẩu&lt;/string&gt;&#10;    &lt;string name=&quot;success_login&quot;&gt;Đăng nhập thành công&lt;/string&gt;&#10;    &lt;string name=&quot;success_register&quot;&gt;Đăng ký thành công&lt;/string&gt;&#10;    &lt;string name=&quot;success_reset_password&quot;&gt;Đã gửi email đặt lại mật khẩu&lt;/string&gt;&#10;    &lt;string name=&quot;error_network&quot;&gt;Lỗi kết nối mạng&lt;/string&gt;&#10;&#10;    &lt;!-- Chuỗi bổ sung cho màn hình chi tiết bài viết --&gt;&#10;    &lt;string name=&quot;like&quot;&gt;Thích&lt;/string&gt;&#10;    &lt;string name=&quot;unlike&quot;&gt;Bỏ thích&lt;/string&gt;&#10;    &lt;string name=&quot;add_to_favorite&quot;&gt;Thêm vào yêu thích&lt;/string&gt;&#10;    &lt;string name=&quot;remove_from_favorite&quot;&gt;Xóa khỏi yêu thích&lt;/string&gt;&#10;    &lt;string name=&quot;health_tip_image&quot;&gt;Hình ảnh mẹo sức khỏe&lt;/string&gt;&#10;    &lt;string name=&quot;share_tip&quot;&gt;Chia sẻ mẹo sức khỏe&lt;/string&gt;&#10;    &lt;string name=&quot;added_to_favorites&quot;&gt;Đã thêm vào danh sách yêu thích&lt;/string&gt;&#10;    &lt;string name=&quot;removed_from_favorites&quot;&gt;Đã xóa khỏi danh sách yêu thích&lt;/string&gt;&#10;&#10;    &lt;!-- Các chuỗi cho màn hình danh mục --&gt;&#10;    &lt;string name=&quot;categories_title&quot;&gt;Tất cả chủ đề sức khỏe&lt;/string&gt;&#10;    &lt;string name=&quot;categories_subtitle&quot;&gt;Khám phá các chủ đề sức khỏe phong phú&lt;/string&gt;&#10;    &lt;string name=&quot;empty_categories_title&quot;&gt;Không tìm thấy danh mục&lt;/string&gt;&#10;    &lt;string name=&quot;empty_categories_message&quot;&gt;Hiện không có danh mục nào để hiển thị&lt;/string&gt;&#10;    &lt;string name=&quot;empty_categories_description&quot;&gt;Các danh mục sẽ xuất hiện ở đây&lt;/string&gt;&#10;&#10;    &lt;!-- Các chuỗi chung --&gt;&#10;    &lt;string name=&quot;ok&quot;&gt;OK&lt;/string&gt;&#10;    &lt;string name=&quot;cancel&quot;&gt;Hủy&lt;/string&gt;&#10;    &lt;string name=&quot;success&quot;&gt;Thành công&lt;/string&gt;&#10;    &lt;string name=&quot;confirm&quot;&gt;Xác nhận&lt;/string&gt;&#10;    &lt;string name=&quot;warning&quot;&gt;Cảnh báo&lt;/string&gt;&#10;&#10;    &lt;string name=&quot;no_data&quot;&gt;Không có dữ liệu&lt;/string&gt;&#10;    &lt;string name=&quot;logout&quot;&gt;Đăng xuất&lt;/string&gt;&#10;    &lt;string name=&quot;back&quot;&gt;Quay lại&lt;/string&gt;&#10;    &lt;string name=&quot;favorite&quot;&gt;Yêu thích&lt;/string&gt;&#10;&#10;    &lt;!-- Các chuỗi cho màn hình chi tiết danh mục --&gt;&#10;    &lt;string name=&quot;empty_tips_description&quot;&gt;Chưa có mẹo nào trong danh mục này&lt;/string&gt;&#10;    &lt;string name=&quot;empty_tips_title&quot;&gt;Danh sách trống&lt;/string&gt;&#10;    &lt;string name=&quot;empty_tips_message&quot;&gt;Danh mục này hiện không có mẹo sức khỏe nào&lt;/string&gt;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;resources&gt;&#13;&#10;    &lt;!-- Tên ứng dụng --&gt;&#13;&#10;    &lt;string name=&quot;app_name&quot;&gt;HealthTips&lt;/string&gt;&#13;&#10;&#13;&#10;    &lt;!-- Các chuỗi cho màn hình đăng nhập --&gt;&#13;&#10;    &lt;string name=&quot;login&quot;&gt;Đăng nhập&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;register&quot;&gt;Đăng ký&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;email&quot;&gt;Email&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;password&quot;&gt;Mật khẩu&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;confirm_password&quot;&gt;Xác nhận mật khẩu&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;forgot_password&quot;&gt;Quên mật khẩu?&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;dont_have_account&quot;&gt;Chưa có tài khoản? Đăng ký&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;already_have_account&quot;&gt;Đã có tài khoản? Đăng nhập&lt;/string&gt;&#13;&#10;&#13;&#10;    &lt;!-- Các chuỗi cho màn hình quên mật khẩu --&gt;&#13;&#10;    &lt;string name=&quot;reset_password&quot;&gt;Đặt lại mật khẩu&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;reset_password_instructions&quot;&gt;Nhập email của bạn để nhận hướng dẫn đặt lại mật khẩu&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;send_reset_email&quot;&gt;Gửi email đặt lại&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;back_to_login&quot;&gt;Quay lại đăng nhập&lt;/string&gt;&#13;&#10;&#13;&#10;    &lt;!-- Các chuỗi cho màn hình trang chủ --&gt;&#13;&#10;    &lt;string name=&quot;categories&quot;&gt;Danh mục&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;latest_tips&quot;&gt;Mẹo mới nhất&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;most_viewed&quot;&gt;Xem nhiều nhất&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;most_liked&quot;&gt;Yêu thích nhất&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;see_all&quot;&gt;Xem tất cả&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;search&quot;&gt;Tìm kiếm&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;offline_mode&quot;&gt;Đang ở chế độ ngoại tuyến&lt;/string&gt;&#13;&#10;&#13;&#10;    &lt;!-- Các chuỗi cho bottom navigation --&gt;&#13;&#10;    &lt;string name=&quot;nav_home&quot;&gt;Trang chủ&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;nav_reminders&quot;&gt;Nhắc nhở&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;nav_videos&quot;&gt;Video ngắn&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;nav_favorites&quot;&gt;Yêu thích&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;nav_profile&quot;&gt;Hồ sơ&lt;/string&gt;&#13;&#10;&#13;&#10;    &lt;!-- Các chuỗi cho màn hình chi tiết --&gt;&#13;&#10;    &lt;string name=&quot;related_tips&quot;&gt;Mẹo liên quan&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;share&quot;&gt;Chia sẻ&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;save&quot;&gt;Lưu&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;views&quot;&gt;lượt xem&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;likes&quot;&gt;lượt thích&lt;/string&gt;&#13;&#10;&#13;&#10;    &lt;!-- Thông báo lỗi và thành công --&gt;&#13;&#10;    &lt;string name=&quot;error_login&quot;&gt;Đăng nhập thất bại&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;error_register&quot;&gt;Đăng ký thất bại&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;error_reset_password&quot;&gt;Không thể đặt lại mật khẩu&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;success_login&quot;&gt;Đăng nhập thành công&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;success_register&quot;&gt;Đăng ký thành công&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;success_reset_password&quot;&gt;Đã gửi email đặt lại mật khẩu&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;error_network&quot;&gt;Lỗi kết nối mạng&lt;/string&gt;&#13;&#10;&#13;&#10;    &lt;!-- Các chuỗi cho màn hình nhắc nhở --&gt;&#13;&#10;    &lt;string name=&quot;no_time_set&quot;&gt;Chưa đặt thời gian&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;reminder_title&quot;&gt;Tiêu đề nhắc nhở&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;reminder_description&quot;&gt;Mô tả nhắc nhở&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;reminder_time&quot;&gt;Thời gian nhắc nhở&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;reminder_repeat&quot;&gt;Lặp lại&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;reminder_active&quot;&gt;Kích hoạt&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;create_reminder&quot;&gt;Tạo nhắc nhở&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;edit_reminder&quot;&gt;Chỉnh sửa nhắc nhở&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;delete_reminder&quot;&gt;Xóa nhắc nhở&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;no_reminders&quot;&gt;Chưa có nhắc nhở nào&lt;/string&gt;&#13;&#10;&#13;&#10;    &lt;!-- Chuỗi cho loại lặp lại --&gt;&#13;&#10;    &lt;string name=&quot;repeat_none&quot;&gt;Không lặp&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;repeat_daily&quot;&gt;Hàng ngày&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;repeat_weekly&quot;&gt;Hàng tuần&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;repeat_monthly&quot;&gt;Hàng tháng&lt;/string&gt;&#13;&#10;&#13;&#10;    &lt;!-- Chuỗi cho notification --&gt;&#13;&#10;    &lt;string name=&quot;notification_channel_name&quot;&gt;Nhắc nhở sức khỏe&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;notification_channel_description&quot;&gt;Thông báo nhắc nhở về sức khỏe&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;notification_reminder_title&quot;&gt;Nhắc nhở: %1$s&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;notification_mark_complete&quot;&gt;Đánh dấu hoàn thành&lt;/string&gt;&#13;&#10;&#13;&#10;    &lt;!-- Các chuỗi bổ sung cho màn hình chi tiết bài viết --&gt;&#13;&#10;    &lt;string name=&quot;like&quot;&gt;Thích&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;unlike&quot;&gt;Bỏ thích&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;add_to_favorite&quot;&gt;Thêm vào yêu thích&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;remove_from_favorite&quot;&gt;Xóa khỏi yêu thích&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;health_tip_image&quot;&gt;Hình ảnh mẹo sức khỏe&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;share_tip&quot;&gt;Chia sẻ mẹo sức khỏe&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;added_to_favorites&quot;&gt;Đã thêm vào danh sách yêu thích&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;removed_from_favorites&quot;&gt;Đã xóa khỏi danh sách yêu thích&lt;/string&gt;&#13;&#10;&#13;&#10;    &lt;!-- Các chuỗi cho màn hình danh mục --&gt;&#13;&#10;    &lt;string name=&quot;categories_title&quot;&gt;Tất cả chủ đề sức khỏe&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;categories_subtitle&quot;&gt;Khám phá các chủ đề sức khỏe phong phú&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;empty_categories_title&quot;&gt;Không tìm thấy danh mục&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;empty_categories_message&quot;&gt;Hiện không có danh mục nào để hiển thị&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;empty_categories_description&quot;&gt;Các danh mục sẽ xuất hiện ở đây&lt;/string&gt;&#13;&#10;&#13;&#10;    &lt;!-- Các chuỗi chung --&gt;&#13;&#10;    &lt;string name=&quot;ok&quot;&gt;OK&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;cancel&quot;&gt;Hủy&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;yes&quot;&gt;Có&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;no&quot;&gt;Không&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;loading&quot;&gt;Đang tải...&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;error&quot;&gt;Lỗi&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;success&quot;&gt;Thành công&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;confirm&quot;&gt;Xác nhận&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;warning&quot;&gt;Cảnh báo&lt;/string&gt;&#13;&#10;&#13;&#10;    &lt;string name=&quot;no_data&quot;&gt;Không có dữ liệu&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;logout&quot;&gt;Đăng xuất&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;back&quot;&gt;Quay lại&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;favorite&quot;&gt;Yêu thích&lt;/string&gt;&#13;&#10;&#13;&#10;    &lt;!-- Các chuỗi cho màn hình chi tiết danh mục --&gt;&#13;&#10;    &lt;string name=&quot;empty_tips_description&quot;&gt;Chưa có mẹo nào trong danh mục này&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;empty_tips_title&quot;&gt;Danh sách trống&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;empty_tips_message&quot;&gt;Danh mục này hiện không có mẹo sức khỏe nào&lt;/string&gt;&#13;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>