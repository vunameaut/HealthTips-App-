<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;!-- Quyền truy cập Internet --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#10;&#10;    &lt;!-- Quyền cho thông báo và alarm --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.POST_NOTIFICATIONS&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.SCHEDULE_EXACT_ALARM&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.USE_EXACT_ALARM&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot; /&gt;&#10;&#10;    &lt;!-- Quyền tắt tối ưu hóa pin để hoạt động trong Doze mode --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS&quot; /&gt;&#10;&#10;    &lt;!-- Quyền foreground service cho WorkManager --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.FOREGROUND_SERVICE&quot; /&gt;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_logo&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_logo_foreground&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.Doan&quot;&#10;        android:name=&quot;androidx.multidex.MultiDexApplication&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;&#10;        &lt;!-- Activities --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.presentation.auth.LoginActivity&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.presentation.auth.ForgotPasswordActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.presentation.auth.RegisterActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.presentation.home.HomeActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.presentation.category.detail.CategoryDetailListActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.presentation.healthtip.detail.HealthTipDetailActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.HealthTipDetail&quot; /&gt;&#10;&#10;        &lt;!-- Debug Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.presentation.debug.ReminderTestActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;Debug Thông Báo&quot; /&gt;&#10;&#10;        &lt;!-- Broadcast Receivers cho Reminder --&gt;&#10;        &lt;receiver&#10;            android:name=&quot;.receivers.ReminderBroadcastReceiver&quot;&#10;            android:enabled=&quot;true&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;receiver&#10;            android:name=&quot;.receivers.ReminderActionReceiver&quot;&#10;            android:enabled=&quot;true&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;!-- Receiver để khởi động lại reminder sau khi boot --&gt;&#10;        &lt;receiver&#10;            android:name=&quot;.receivers.BootReceiver&quot;&#10;            android:enabled=&quot;true&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter android:priority=&quot;1000&quot;&gt;&#10;                &lt;action android:name=&quot;android.intent.action.BOOT_COMPLETED&quot; /&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MY_PACKAGE_REPLACED&quot; /&gt;&#10;                &lt;action android:name=&quot;android.intent.action.PACKAGE_REPLACED&quot; /&gt;&#10;                &lt;data android:scheme=&quot;package&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/receiver&gt;&#10;&#10;        &lt;!-- Services --&gt;&#10;        &lt;service&#10;            android:name=&quot;.services.ReminderForegroundService&quot;&#10;            android:enabled=&quot;true&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:foregroundServiceType=&quot;specialUse&quot; /&gt;&#10;&#10;            android:foregroundServiceType=&quot;specialUse&quot; /&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;!-- Quyền truy cập Internet --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#10;&#10;    &lt;!-- Quyền cho thông báo và alarm --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.POST_NOTIFICATIONS&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.SCHEDULE_EXACT_ALARM&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.USE_EXACT_ALARM&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot; /&gt;&#10;&#10;    &lt;!-- Quyền tắt tối ưu hóa pin để hoạt động trong Doze mode --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS&quot; /&gt;&#10;&#10;    &lt;!-- Quyền foreground service cho WorkManager --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.FOREGROUND_SERVICE&quot; /&gt;&#10;    &lt;!-- Quyền foreground service đặc biệt cho Android 14+ (API 34+) --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.FOREGROUND_SERVICE_SPECIAL_USE&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_logo&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_logo_foreground&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.Doan&quot;&#10;        android:name=&quot;androidx.multidex.MultiDexApplication&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;&#10;        &lt;!-- Activities --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.presentation.auth.LoginActivity&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.presentation.auth.ForgotPasswordActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.presentation.auth.RegisterActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.presentation.home.HomeActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.presentation.category.detail.CategoryDetailListActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.presentation.healthtip.detail.HealthTipDetailActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.HealthTipDetail&quot; /&gt;&#10;&#10;        &lt;!-- Debug Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.presentation.debug.ReminderTestActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;Debug Thông Báo&quot; /&gt;&#10;&#10;        &lt;!-- Broadcast Receivers cho Reminder --&gt;&#10;        &lt;receiver&#10;            android:name=&quot;.receivers.ReminderBroadcastReceiver&quot;&#10;            android:enabled=&quot;true&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;receiver&#10;            android:name=&quot;.receivers.ReminderActionReceiver&quot;&#10;            android:enabled=&quot;true&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;!-- Receiver để khởi động lại reminder sau khi boot --&gt;&#10;        &lt;receiver&#10;            android:name=&quot;.receivers.BootReceiver&quot;&#10;            android:enabled=&quot;true&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter android:priority=&quot;1000&quot;&gt;&#10;                &lt;action android:name=&quot;android.intent.action.BOOT_COMPLETED&quot; /&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MY_PACKAGE_REPLACED&quot; /&gt;&#10;                &lt;action android:name=&quot;android.intent.action.PACKAGE_REPLACED&quot; /&gt;&#10;                &lt;data android:scheme=&quot;package&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/receiver&gt;&#10;&#10;        &lt;!-- Services --&gt;&#10;        &lt;service&#10;            android:name=&quot;.services.ReminderForegroundService&quot;&#10;            android:enabled=&quot;true&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:foregroundServiceType=&quot;specialUse&quot;&gt;&#10;            &lt;!-- Thêm property cho specialUse theo yêu cầu Android 14+ --&gt;&#10;            &lt;property &#10;                android:name=&quot;android.app.PROPERTY_SPECIAL_USE_FGS_SUBTYPE&quot;&#10;                android:value=&quot;explanation_needed&quot; /&gt;&#10;        &lt;/service&gt;&#10;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/Reminder.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/Reminder.java" />
              <option name="originalContent" value="package com.vhn.doan.data;&#10;&#10;import com.google.firebase.database.PropertyName;&#10;import com.google.firebase.database.ServerValue;&#10;import com.google.firebase.database.Exclude;&#10;import java.util.Calendar;&#10;import java.util.Date;&#10;import java.util.Map;&#10;&#10;/**&#10; * Model class đại diện cho một nhắc nhở sức khỏe&#10; * Được tối ưu hóa để tương thích với Firebase Realtime Database&#10; */&#10;public class Reminder {&#10;    private String id;&#10;    private String userId;&#10;    private String title;&#10;    private String description;&#10;    private Long reminderTime; // Sử dụng Long thay vì Date để tương thích Firebase&#10;    private int repeatType; // 0: Không lặp, 1: Hàng ngày, 2: Hàng tuần, 3: Hàng tháng&#10;    private boolean isActive;&#10;    private Long createdAt; // Sử dụng Long thay vì Date&#10;    private Long updatedAt; // Sử dụng Long thay vì Date&#10;    private String healthTipId; // ID của mẹo sức khỏe liên quan (nếu có)&#10;&#10;    /**&#10;     * Các method bổ sung cho Reminder&#10;     */&#10;&#10;    // Field bổ sung cho lastNotified và completed&#10;    private Long lastNotified;&#10;    private boolean completed = false;&#10;&#10;    // Enum cho loại lặp lại&#10;    public static class RepeatType {&#10;        public static final int NO_REPEAT = 0;&#10;        public static final int DAILY = 1;&#10;        public static final int WEEKLY = 2;&#10;        public static final int MONTHLY = 3;&#10;    }&#10;&#10;    // Constructor mặc định (cần thiết cho Firebase)&#10;    public Reminder() {&#10;        long currentTime = System.currentTimeMillis();&#10;        this.createdAt = currentTime;&#10;        this.updatedAt = currentTime;&#10;        this.isActive = true;&#10;        this.repeatType = RepeatType.NO_REPEAT;&#10;    }&#10;&#10;    // Constructor đầy đủ&#10;    public Reminder(String id, String userId, String title, String description,&#10;                   Date reminderTime, int repeatType, boolean isActive, String healthTipId) {&#10;        this.id = id;&#10;        this.userId = userId;&#10;        this.title = title;&#10;        this.description = description;&#10;        this.reminderTime = reminderTime != null ? reminderTime.getTime() : null;&#10;        this.repeatType = repeatType;&#10;        this.isActive = isActive;&#10;        this.healthTipId = healthTipId;&#10;        long currentTime = System.currentTimeMillis();&#10;        this.createdAt = currentTime;&#10;        this.updatedAt = currentTime;&#10;    }&#10;&#10;    // Getters với Firebase annotations&#10;    public String getId() {&#10;        return id;&#10;    }&#10;&#10;    public String getUserId() {&#10;        return userId;&#10;    }&#10;&#10;    public String getTitle() {&#10;        return title;&#10;    }&#10;&#10;    public String getDescription() {&#10;        return description;&#10;    }&#10;&#10;    // Firebase getter - trả về Long&#10;    public Long getReminderTime() {&#10;        return reminderTime;&#10;    }&#10;&#10;    // UI helper method - trả về Date&#10;    @Exclude&#10;    public Date getReminderTimeAsDate() {&#10;        return reminderTime != null ? new Date(reminderTime) : null;&#10;    }&#10;&#10;    public int getRepeatType() {&#10;        return repeatType;&#10;    }&#10;&#10;    @PropertyName(&quot;isActive&quot;)&#10;    public boolean isActive() {&#10;        return isActive;&#10;    }&#10;&#10;    // Firebase getter - trả về Long&#10;    public Long getCreatedAt() {&#10;        return createdAt;&#10;    }&#10;&#10;    // UI helper method - trả về Date&#10;    @Exclude&#10;    public Date getCreatedAtAsDate() {&#10;        return createdAt != null ? new Date(createdAt) : null;&#10;    }&#10;&#10;    // Firebase getter - trả về Long&#10;    public Long getUpdatedAt() {&#10;        return updatedAt;&#10;    }&#10;&#10;    // UI helper method - trả về Date&#10;    @Exclude&#10;    public Date getUpdatedAtAsDate() {&#10;        return updatedAt != null ? new Date(updatedAt) : null;&#10;    }&#10;&#10;    public String getHealthTipId() {&#10;        return healthTipId;&#10;    }&#10;&#10;    // Field bổ sung cho lastNotified và completed&#10;    public Long getLastNotified() {&#10;        return lastNotified;&#10;    }&#10;&#10;    public boolean isCompleted() {&#10;        return completed;&#10;    }&#10;&#10;    // Setters&#10;    public void setId(String id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public void setUserId(String userId) {&#10;        this.userId = userId;&#10;    }&#10;&#10;    public void setTitle(String title) {&#10;        this.title = title;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    public void setDescription(String description) {&#10;        this.description = description;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    // Firebase setter - nhận Long&#10;    public void setReminderTime(Long reminderTime) {&#10;        this.reminderTime = reminderTime;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    // UI helper method - nhận Date&#10;    @Exclude&#10;    public void setReminderTimeFromDate(Date reminderTime) {&#10;        this.reminderTime = reminderTime != null ? reminderTime.getTime() : null;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    public void setRepeatType(int repeatType) {&#10;        this.repeatType = repeatType;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    @PropertyName(&quot;isActive&quot;)&#10;    public void setActive(boolean active) {&#10;        isActive = active;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    // Firebase setter - nhận Long&#10;    public void setCreatedAt(Long createdAt) {&#10;        this.createdAt = createdAt;&#10;    }&#10;&#10;    // UI helper method - nhận Date&#10;    @Exclude&#10;    public void setCreatedAtFromDate(Date createdAt) {&#10;        this.createdAt = createdAt != null ? createdAt.getTime() : null;&#10;    }&#10;&#10;    // Firebase setter - nhận Long&#10;    public void setUpdatedAt(Long updatedAt) {&#10;        this.updatedAt = updatedAt;&#10;    }&#10;&#10;    // UI helper method - nhận Date&#10;    @Exclude&#10;    public void setUpdatedAtFromDate(Date updatedAt) {&#10;        this.updatedAt = updatedAt != null ? updatedAt.getTime() : null;&#10;    }&#10;&#10;    public void setHealthTipId(String healthTipId) {&#10;        this.healthTipId = healthTipId;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    public void setLastNotified(Long lastNotified) {&#10;        this.lastNotified = lastNotified;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    public void setCompleted(boolean completed) {&#10;        this.completed = completed;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    /**&#10;     * Tính toán thời gian nhắc nhở tiếp theo dựa trên loại lặp lại&#10;     */&#10;    @Exclude&#10;    public Date getNextReminderTime() {&#10;        if (reminderTime == null || repeatType == RepeatType.NO_REPEAT) {&#10;            return getReminderTimeAsDate();&#10;        }&#10;&#10;        Calendar calendar = Calendar.getInstance();&#10;        calendar.setTime(getReminderTimeAsDate());&#10;&#10;        switch (repeatType) {&#10;            case RepeatType.DAILY:&#10;                calendar.add(Calendar.DAY_OF_MONTH, 1);&#10;                break;&#10;            case RepeatType.WEEKLY:&#10;                calendar.add(Calendar.WEEK_OF_YEAR, 1);&#10;                break;&#10;            case RepeatType.MONTHLY:&#10;                calendar.add(Calendar.MONTH, 1);&#10;                break;&#10;            default:&#10;                return getReminderTimeAsDate();&#10;        }&#10;&#10;        return calendar.getTime();&#10;    }&#10;&#10;    /**&#10;     * Kiểm tra xem nhắc nhở có đã đến giờ hay chưa&#10;     */&#10;    @Exclude&#10;    public boolean isDue() {&#10;        if (reminderTime == null || !isActive) {&#10;            return false;&#10;        }&#10;        return System.currentTimeMillis() &gt;= reminderTime;&#10;    }&#10;&#10;    /**&#10;     * Lấy tên hiển thị cho loại lặp lại&#10;     */&#10;    @Exclude&#10;    public String getRepeatTypeDisplayName() {&#10;        switch (repeatType) {&#10;            case RepeatType.NO_REPEAT:&#10;                return &quot;Không lặp lại&quot;;&#10;            case RepeatType.DAILY:&#10;                return &quot;Hàng ngày&quot;;&#10;            case RepeatType.WEEKLY:&#10;                return &quot;Hàng tuần&quot;;&#10;            case RepeatType.MONTHLY:&#10;                return &quot;Hàng tháng&quot;;&#10;            default:&#10;                return &quot;Không xác định&quot;;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Lấy Map để ghi vào Firebase với ServerValue.TIMESTAMP&#10;     */&#10;    @Exclude&#10;    public Map&lt;String, Object&gt; toFirebaseMap() {&#10;        Map&lt;String, Object&gt; map = new java.util.HashMap&lt;&gt;();&#10;        map.put(&quot;id&quot;, id);&#10;        map.put(&quot;userId&quot;, userId);&#10;        map.put(&quot;title&quot;, title);&#10;        map.put(&quot;description&quot;, description);&#10;        map.put(&quot;reminderTime&quot;, reminderTime);&#10;        map.put(&quot;repeatType&quot;, repeatType);&#10;        map.put(&quot;isActive&quot;, isActive);&#10;        map.put(&quot;healthTipId&quot;, healthTipId);&#10;        map.put(&quot;createdAt&quot;, createdAt != null ? createdAt : ServerValue.TIMESTAMP);&#10;        map.put(&quot;updatedAt&quot;, ServerValue.TIMESTAMP);&#10;        return map;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Reminder{&quot; +&#10;                &quot;id='&quot; + id + '\'' +&#10;                &quot;, title='&quot; + title + '\'' +&#10;                &quot;, reminderTime=&quot; + getReminderTimeAsDate() +&#10;                &quot;, isActive=&quot; + isActive +&#10;                '}';&#10;    }&#10;&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.data;&#10;&#10;import com.google.firebase.database.PropertyName;&#10;import com.google.firebase.database.ServerValue;&#10;import com.google.firebase.database.Exclude;&#10;import java.io.Serializable;&#10;import java.util.Calendar;&#10;import java.util.Date;&#10;import java.util.Map;&#10;&#10;/**&#10; * Model class đại diện cho một nhắc nhở sức khỏe&#10; * Được tối ưu hóa để tương thích với Firebase Realtime Database&#10; */&#10;public class Reminder implements Serializable {&#10;    private String id;&#10;    private String userId;&#10;    private String title;&#10;    private String description;&#10;    private Long reminderTime; // Sử dụng Long thay vì Date để tương thích Firebase&#10;    private int repeatType; // 0: Không lặp, 1: Hàng ngày, 2: Hàng tuần, 3: Hàng tháng&#10;    private boolean isActive;&#10;    private Long createdAt; // Sử dụng Long thay vì Date&#10;    private Long updatedAt; // Sử dụng Long thay vì Date&#10;    private String healthTipId; // ID của mẹo sức khỏe liên quan (nếu có)&#10;&#10;    /**&#10;     * Các method bổ sung cho Reminder&#10;     */&#10;&#10;    // Field bổ sung cho lastNotified và completed&#10;    private Long lastNotified;&#10;    private boolean completed = false;&#10;&#10;    // Enum cho loại lặp lại&#10;    public static class RepeatType {&#10;        public static final int NO_REPEAT = 0;&#10;        public static final int DAILY = 1;&#10;        public static final int WEEKLY = 2;&#10;        public static final int MONTHLY = 3;&#10;    }&#10;&#10;    // Constructor mặc định (cần thiết cho Firebase)&#10;    public Reminder() {&#10;        long currentTime = System.currentTimeMillis();&#10;        this.createdAt = currentTime;&#10;        this.updatedAt = currentTime;&#10;        this.isActive = true;&#10;        this.repeatType = RepeatType.NO_REPEAT;&#10;    }&#10;&#10;    // Constructor đầy đủ&#10;    public Reminder(String id, String userId, String title, String description,&#10;                   Date reminderTime, int repeatType, boolean isActive, String healthTipId) {&#10;        this.id = id;&#10;        this.userId = userId;&#10;        this.title = title;&#10;        this.description = description;&#10;        this.reminderTime = reminderTime != null ? reminderTime.getTime() : null;&#10;        this.repeatType = repeatType;&#10;        this.isActive = isActive;&#10;        this.healthTipId = healthTipId;&#10;        long currentTime = System.currentTimeMillis();&#10;        this.createdAt = currentTime;&#10;        this.updatedAt = currentTime;&#10;    }&#10;&#10;    // Getters với Firebase annotations&#10;    public String getId() {&#10;        return id;&#10;    }&#10;&#10;    public String getUserId() {&#10;        return userId;&#10;    }&#10;&#10;    public String getTitle() {&#10;        return title;&#10;    }&#10;&#10;    public String getDescription() {&#10;        return description;&#10;    }&#10;&#10;    // Firebase getter - trả về Long&#10;    public Long getReminderTime() {&#10;        return reminderTime;&#10;    }&#10;&#10;    // UI helper method - trả về Date&#10;    @Exclude&#10;    public Date getReminderTimeAsDate() {&#10;        return reminderTime != null ? new Date(reminderTime) : null;&#10;    }&#10;&#10;    public int getRepeatType() {&#10;        return repeatType;&#10;    }&#10;&#10;    @PropertyName(&quot;isActive&quot;)&#10;    public boolean isActive() {&#10;        return isActive;&#10;    }&#10;&#10;    // Firebase getter - trả về Long&#10;    public Long getCreatedAt() {&#10;        return createdAt;&#10;    }&#10;&#10;    // UI helper method - trả về Date&#10;    @Exclude&#10;    public Date getCreatedAtAsDate() {&#10;        return createdAt != null ? new Date(createdAt) : null;&#10;    }&#10;&#10;    // Firebase getter - trả về Long&#10;    public Long getUpdatedAt() {&#10;        return updatedAt;&#10;    }&#10;&#10;    // UI helper method - trả về Date&#10;    @Exclude&#10;    public Date getUpdatedAtAsDate() {&#10;        return updatedAt != null ? new Date(updatedAt) : null;&#10;    }&#10;&#10;    public String getHealthTipId() {&#10;        return healthTipId;&#10;    }&#10;&#10;    // Field bổ sung cho lastNotified và completed&#10;    public Long getLastNotified() {&#10;        return lastNotified;&#10;    }&#10;&#10;    public boolean isCompleted() {&#10;        return completed;&#10;    }&#10;&#10;    // Setters&#10;    public void setId(String id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public void setUserId(String userId) {&#10;        this.userId = userId;&#10;    }&#10;&#10;    public void setTitle(String title) {&#10;        this.title = title;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    public void setDescription(String description) {&#10;        this.description = description;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    // Firebase setter - nhận Long&#10;    public void setReminderTime(Long reminderTime) {&#10;        this.reminderTime = reminderTime;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    // UI helper method - nhận Date&#10;    @Exclude&#10;    public void setReminderTimeFromDate(Date reminderTime) {&#10;        this.reminderTime = reminderTime != null ? reminderTime.getTime() : null;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    public void setRepeatType(int repeatType) {&#10;        this.repeatType = repeatType;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    @PropertyName(&quot;isActive&quot;)&#10;    public void setActive(boolean active) {&#10;        isActive = active;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    // Firebase setter - nhận Long&#10;    public void setCreatedAt(Long createdAt) {&#10;        this.createdAt = createdAt;&#10;    }&#10;&#10;    // UI helper method - nhận Date&#10;    @Exclude&#10;    public void setCreatedAtFromDate(Date createdAt) {&#10;        this.createdAt = createdAt != null ? createdAt.getTime() : null;&#10;    }&#10;&#10;    // Firebase setter - nhận Long&#10;    public void setUpdatedAt(Long updatedAt) {&#10;        this.updatedAt = updatedAt;&#10;    }&#10;&#10;    // UI helper method - nhận Date&#10;    @Exclude&#10;    public void setUpdatedAtFromDate(Date updatedAt) {&#10;        this.updatedAt = updatedAt != null ? updatedAt.getTime() : null;&#10;    }&#10;&#10;    public void setHealthTipId(String healthTipId) {&#10;        this.healthTipId = healthTipId;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    public void setLastNotified(Long lastNotified) {&#10;        this.lastNotified = lastNotified;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    public void setCompleted(boolean completed) {&#10;        this.completed = completed;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    /**&#10;     * Tính toán thời gian nhắc nhở tiếp theo dựa trên loại lặp lại&#10;     */&#10;    @Exclude&#10;    public Date getNextReminderTime() {&#10;        if (reminderTime == null || repeatType == RepeatType.NO_REPEAT) {&#10;            return getReminderTimeAsDate();&#10;        }&#10;&#10;        Calendar calendar = Calendar.getInstance();&#10;        calendar.setTime(getReminderTimeAsDate());&#10;&#10;        switch (repeatType) {&#10;            case RepeatType.DAILY:&#10;                calendar.add(Calendar.DAY_OF_MONTH, 1);&#10;                break;&#10;            case RepeatType.WEEKLY:&#10;                calendar.add(Calendar.WEEK_OF_YEAR, 1);&#10;                break;&#10;            case RepeatType.MONTHLY:&#10;                calendar.add(Calendar.MONTH, 1);&#10;                break;&#10;            default:&#10;                return getReminderTimeAsDate();&#10;        }&#10;&#10;        return calendar.getTime();&#10;    }&#10;&#10;    /**&#10;     * Kiểm tra xem nhắc nhở có đã đến giờ hay chưa&#10;     */&#10;    @Exclude&#10;    public boolean isDue() {&#10;        if (reminderTime == null || !isActive) {&#10;            return false;&#10;        }&#10;        return System.currentTimeMillis() &gt;= reminderTime;&#10;    }&#10;&#10;    /**&#10;     * Lấy tên hiển thị cho loại lặp lại&#10;     */&#10;    @Exclude&#10;    public String getRepeatTypeDisplayName() {&#10;        switch (repeatType) {&#10;            case RepeatType.NO_REPEAT:&#10;                return &quot;Không lặp lại&quot;;&#10;            case RepeatType.DAILY:&#10;                return &quot;Hàng ngày&quot;;&#10;            case RepeatType.WEEKLY:&#10;                return &quot;Hàng tuần&quot;;&#10;            case RepeatType.MONTHLY:&#10;                return &quot;Hàng tháng&quot;;&#10;            default:&#10;                return &quot;Không xác định&quot;;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Lấy Map để ghi vào Firebase với ServerValue.TIMESTAMP&#10;     */&#10;    @Exclude&#10;    public Map&lt;String, Object&gt; toFirebaseMap() {&#10;        Map&lt;String, Object&gt; map = new java.util.HashMap&lt;&gt;();&#10;        map.put(&quot;id&quot;, id);&#10;        map.put(&quot;userId&quot;, userId);&#10;        map.put(&quot;title&quot;, title);&#10;        map.put(&quot;description&quot;, description);&#10;        map.put(&quot;reminderTime&quot;, reminderTime);&#10;        map.put(&quot;repeatType&quot;, repeatType);&#10;        map.put(&quot;isActive&quot;, isActive);&#10;        map.put(&quot;healthTipId&quot;, healthTipId);&#10;        map.put(&quot;createdAt&quot;, createdAt != null ? createdAt : ServerValue.TIMESTAMP);&#10;        map.put(&quot;updatedAt&quot;, ServerValue.TIMESTAMP);&#10;        return map;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Reminder{&quot; +&#10;                &quot;id='&quot; + id + '\'' +&#10;                &quot;, title='&quot; + title + '\'' +&#10;                &quot;, reminderTime=&quot; + getReminderTimeAsDate() +&#10;                &quot;, isActive=&quot; + isActive +&#10;                '}';&#10;    }&#10;&#10;    /**&#10;     * Kiểm tra xem reminder có lặp lại hay không&#10;     */&#10;    @Exclude&#10;    public boolean isRepeating() {&#10;        return repeatType != RepeatType.NO_REPEAT;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/healthtip/detail/HealthTipDetailActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/healthtip/detail/HealthTipDetailActivity.java" />
              <option name="originalContent" value="package com.vhn.doan.presentation.healthtip.detail;&#10;&#10;import android.content.Context;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.MenuItem;&#10;import android.view.View;&#10;import android.widget.Button;&#10;import android.widget.ImageView;&#10;import android.widget.ProgressBar;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;&#10;import com.bumptech.glide.Glide;&#10;import com.google.android.material.appbar.CollapsingToolbarLayout;&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.data.HealthTip;&#10;import com.vhn.doan.data.repository.HealthTipRepository;&#10;import com.vhn.doan.data.repository.HealthTipRepositoryImpl;&#10;&#10;/**&#10; * Activity hiển thị chi tiết một bài viết mẹo sức khỏe&#10; * Tuân theo kiến trúc MVP (Model-View-Presenter)&#10; * Hỗ trợ animation trượt từ dưới lên và swipe-to-dismiss&#10; */&#10;public class HealthTipDetailActivity extends AppCompatActivity implements HealthTipDetailView {&#10;&#10;    private static final String EXTRA_HEALTH_TIP_ID = &quot;health_tip_id&quot;;&#10;&#10;    // UI components&#10;    private SwipeToDismissLayout swipeToDismissLayout;&#10;    private View backgroundOverlay;&#10;    private ImageView imageViewDetail;&#10;    private TextView textViewTitle;&#10;    private TextView textViewCategory;&#10;    private TextView textViewContent;&#10;    private TextView textViewViewCount;&#10;    private TextView textViewLikeCount;&#10;    private FloatingActionButton fabFavorite;&#10;    private Button buttonLike;&#10;    private Button buttonShare;&#10;    private ProgressBar progressBar;&#10;    private CollapsingToolbarLayout collapsingToolbarLayout;&#10;    private View dragHandle;&#10;&#10;    // Presenter&#10;    private HealthTipDetailPresenter presenter;&#10;&#10;    // Data&#10;    private String healthTipId;&#10;    private boolean isLiked = false;&#10;    private boolean isFavorite = false;&#10;&#10;    /**&#10;     * Tạo Intent để mở Activity này với animation trượt từ dưới lên&#10;     */&#10;    public static Intent createIntent(Context context, String healthTipId) {&#10;        Intent intent = new Intent(context, HealthTipDetailActivity.class);&#10;        intent.putExtra(EXTRA_HEALTH_TIP_ID, healthTipId);&#10;        return intent;&#10;    }&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;&#10;        // Đặt activity ở vị trí dưới màn hình ngay từ đầu để tránh nháy&#10;        setupInitialPosition();&#10;&#10;        setContentView(R.layout.activity_health_tip_detail);&#10;&#10;        // Khởi tạo UI components&#10;        initViews();&#10;        setupSwipeToDismiss();&#10;&#10;        // Lấy healthTipId từ Intent&#10;        healthTipId = getIntent().getStringExtra(EXTRA_HEALTH_TIP_ID);&#10;&#10;        if (healthTipId == null || healthTipId.isEmpty()) {&#10;            showError(&quot;ID bài viết không hợp lệ&quot;);&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        // Khởi tạo presenter&#10;        HealthTipRepository repository = new HealthTipRepositoryImpl();&#10;        presenter = new HealthTipDetailPresenterImpl(repository);&#10;        presenter.attachView(this);&#10;&#10;        // Thiết lập listeners&#10;        setupListeners();&#10;&#10;        // Bắt đầu animation trượt lên từ dưới&#10;        startSlideUpAnimation();&#10;&#10;        // Tải dữ liệu&#10;        presenter.loadHealthTipDetail(healthTipId);&#10;    }&#10;&#10;    /**&#10;     * Đặt vị trí ban đầu của activity ở dưới màn hình&#10;     */&#10;    private void setupInitialPosition() {&#10;        // Lấy kích thước màn hình&#10;        android.view.WindowManager windowManager = getWindowManager();&#10;        android.util.DisplayMetrics displayMetrics = new android.util.DisplayMetrics();&#10;        windowManager.getDefaultDisplay().getMetrics(displayMetrics);&#10;        int screenHeight = displayMetrics.heightPixels;&#10;&#10;        // Đặt activity ở vị trí dưới màn hình&#10;        View decorView = getWindow().getDecorView();&#10;        decorView.setTranslationY(screenHeight);&#10;        decorView.setAlpha(1.0f);&#10;    }&#10;&#10;    /**&#10;     * Bắt đầu animation trượt lên từ dưới&#10;     */&#10;    private void startSlideUpAnimation() {&#10;        View decorView = getWindow().getDecorView();&#10;&#10;        // Animation trượt lên từ dưới với hiệu ứng mượt mà&#10;        decorView.animate()&#10;                .translationY(0)&#10;                .setDuration(300)&#10;                .setInterpolator(new android.view.animation.DecelerateInterpolator())&#10;                .setListener(new android.animation.AnimatorListenerAdapter() {&#10;                    @Override&#10;                    public void onAnimationStart(android.animation.Animator animation) {&#10;                        // Đảm bảo activity hiển thị trong suốt quá trình animation&#10;                        decorView.setAlpha(1.0f);&#10;                    }&#10;                })&#10;                .start();&#10;    }&#10;&#10;    /**&#10;     * Khởi tạo các view&#10;     */&#10;    private void initViews() {&#10;        // Khởi tạo SwipeToDismissLayout&#10;        swipeToDismissLayout = findViewById(R.id.swipeToDismissLayout);&#10;        dragHandle = findViewById(R.id.dragHandle);&#10;&#10;        // Khởi tạo toolbar&#10;        Toolbar toolbar = findViewById(R.id.toolbar);&#10;        setSupportActionBar(toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#10;            getSupportActionBar().setDisplayShowTitleEnabled(false);&#10;        }&#10;&#10;        // Khởi tạo các view khác&#10;        collapsingToolbarLayout = findViewById(R.id.collapsingToolbarLayout);&#10;        imageViewDetail = findViewById(R.id.imageViewDetail);&#10;        textViewTitle = findViewById(R.id.textViewTitle);&#10;        textViewCategory = findViewById(R.id.textViewCategory);&#10;        textViewContent = findViewById(R.id.textViewContent);&#10;        textViewViewCount = findViewById(R.id.textViewViewCount);&#10;        textViewLikeCount = findViewById(R.id.textViewLikeCount);&#10;        fabFavorite = findViewById(R.id.fabFavorite);&#10;        buttonLike = findViewById(R.id.buttonLike);&#10;        buttonShare = findViewById(R.id.buttonShare);&#10;        progressBar = findViewById(R.id.progressBar);&#10;&#10;        // Khởi tạo background overlay&#10;        backgroundOverlay = findViewById(R.id.backgroundOverlay);&#10;&#10;        // Ẩn tất cả nội dung cho đến khi dữ liệu được tải&#10;        hideContentViews();&#10;    }&#10;&#10;    /**&#10;     * Ẩn tất cả các view nội dung để tránh hiện tượng nháy&#10;     */&#10;    private void hideContentViews() {&#10;        // Ẩn các thành phần chính&#10;        if (textViewTitle != null) textViewTitle.setVisibility(View.GONE);&#10;        if (textViewCategory != null) textViewCategory.setVisibility(View.GONE);&#10;        if (textViewContent != null) textViewContent.setVisibility(View.GONE);&#10;        if (textViewViewCount != null) textViewViewCount.setVisibility(View.GONE);&#10;        if (textViewLikeCount != null) textViewLikeCount.setVisibility(View.GONE);&#10;        if (fabFavorite != null) fabFavorite.setVisibility(View.GONE);&#10;        if (buttonLike != null) buttonLike.setVisibility(View.GONE);&#10;        if (buttonShare != null) buttonShare.setVisibility(View.GONE);&#10;        if (imageViewDetail != null) imageViewDetail.setVisibility(View.GONE);&#10;&#10;        // Hiển thị loading&#10;        showLoading(true);&#10;    }&#10;&#10;    /**&#10;     * Hiển thị các view nội dung với animation mượt mà&#10;     */&#10;    private void showContentViewsWithAnimation() {&#10;        // Ẩn loading trước&#10;        showLoading(false);&#10;&#10;        // Tạo danh sách các view cần animate&#10;        View[] viewsToAnimate = {&#10;            imageViewDetail,&#10;            textViewTitle,&#10;            textViewCategory,&#10;            textViewViewCount,&#10;            textViewLikeCount,&#10;            textViewContent,&#10;            buttonLike,&#10;            buttonShare,&#10;            fabFavorite&#10;        };&#10;&#10;        // Animate từng view với delay nhỏ để tạo hiệu ứng cascade&#10;        for (int i = 0; i &lt; viewsToAnimate.length; i++) {&#10;            final View view = viewsToAnimate[i];&#10;            if (view != null) {&#10;                // Đặt vị trí ban đầu (ẩn và offset)&#10;                view.setAlpha(0f);&#10;                view.setTranslationY(50f);&#10;                view.setVisibility(View.VISIBLE);&#10;&#10;                // Animate với delay&#10;                view.animate()&#10;                    .alpha(1f)&#10;                    .translationY(0f)&#10;                    .setDuration(300)&#10;                    .setStartDelay(i * 50) // Delay 50ms cho mỗi view&#10;                    .setInterpolator(new android.view.animation.DecelerateInterpolator())&#10;                    .start();&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Thiết lập chức năng swipe-to-dismiss&#10;     */&#10;    private void setupSwipeToDismiss() {&#10;        if (swipeToDismissLayout != null) {&#10;            swipeToDismissLayout.setOnDismissListener(new SwipeToDismissLayout.OnDismissListener() {&#10;                @Override&#10;                public void onDismiss() {&#10;                    // Đóng activity với animation&#10;                    finishWithAnimation();&#10;                }&#10;&#10;                @Override&#10;                public void onDragProgress(float progress) {&#10;                    // Cập nhật hiệu ứng khi đang kéo&#10;                    // Progress từ 0.0 (không kéo) đến 1.0 (kéo hoàn toàn)&#10;                    updateDragProgress(progress);&#10;                }&#10;            });&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Cập nhật hiệu ứng khi đang kéo - làm cho activity phía sau hiển thị rõ hơn&#10;     */&#10;    private void updateDragProgress(float progress) {&#10;        // Thay đổi độ mờ của drag handle&#10;        if (dragHandle != null) {&#10;            dragHandle.setAlpha(1.0f - progress * 0.5f);&#10;        }&#10;&#10;        // Thông báo cho activity phía trước để cập nhật hiệu ứng&#10;        // Activity phía trước sẽ được làm sáng dần khi kéo xuống&#10;        updateBackgroundActivityVisibility(progress);&#10;    }&#10;&#10;    /**&#10;     * Cập nhật hiển thị activity phía sau khi đang kéo&#10;     */&#10;    private void updateBackgroundActivityVisibility(float progress) {&#10;        // Tính toán độ mờ của overlay để làm cho activity phía sau hiển thị rõ hơn&#10;        // Khi progress = 0 (không kéo): overlay hoàn toàn mờ&#10;        // Khi progress = 1 (kéo hoàn toàn): overlay trong suốt, activity phía sau hiển thị rõ&#10;&#10;        // Tạo overlay effect để activity phía sau hiển thị dần&#10;        View rootView = findViewById(android.R.id.content);&#10;        if (rootView != null) {&#10;            // Thay đổi background alpha của window để thấy activity phía sau&#10;            float overlayAlpha = 0.3f * (1.0f - progress); // Bắt đầu từ 30% opacity, giảm dần về 0&#10;            getWindow().setStatusBarColor(&#10;                    android.graphics.Color.argb(&#10;                            (int) (overlayAlpha * 255),&#10;                            0, 0, 0&#10;                    )&#10;            );&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        if (item.getItemId() == android.R.id.home) {&#10;            onBackPressed();&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;&#10;    @Override&#10;    public void showMessage(String message) {&#10;        Toast.makeText(this, message, Toast.LENGTH_SHORT).show();&#10;    }&#10;&#10;    @Override&#10;    public void showLoading(boolean loading) {&#10;        progressBar.setVisibility(loading ? View.VISIBLE : View.GONE);&#10;    }&#10;&#10;    @Override&#10;    public void showError(String errorMessage) {&#10;        Toast.makeText(this, errorMessage, Toast.LENGTH_LONG).show();&#10;    }&#10;&#10;    @Override&#10;    public void displayHealthTipDetails(HealthTip healthTip) {&#10;        // Hiển thị thông tin chi tiết&#10;        textViewTitle.setText(healthTip.getTitle());&#10;        textViewContent.setText(healthTip.getContent());&#10;        textViewViewCount.setText(String.valueOf(healthTip.getViewCount()));&#10;        textViewLikeCount.setText(String.valueOf(healthTip.getLikeCount()));&#10;&#10;        // Set category text - đây là phần bị thiếu&#10;        if (healthTip.getCategoryName() != null &amp;&amp; !healthTip.getCategoryName().isEmpty()) {&#10;            textViewCategory.setText(healthTip.getCategoryName());&#10;            textViewCategory.setVisibility(View.VISIBLE);&#10;        } else {&#10;            textViewCategory.setText(&quot;Chưa phân loại&quot;);&#10;            textViewCategory.setVisibility(View.VISIBLE);&#10;        }&#10;&#10;        // Set title cho toolbar&#10;        collapsingToolbarLayout.setTitle(healthTip.getTitle());&#10;&#10;        // Tải hình ảnh&#10;        if (healthTip.getImageUrl() != null &amp;&amp; !healthTip.getImageUrl().isEmpty()) {&#10;            Glide.with(this)&#10;                    .load(healthTip.getImageUrl())&#10;                    .placeholder(R.drawable.placeholder_image)&#10;                    .error(R.drawable.error_image)&#10;                    .into(imageViewDetail);&#10;        } else {&#10;            imageViewDetail.setImageResource(R.drawable.placeholder_image);&#10;        }&#10;&#10;        // Cập nhật trạng thái favorite và like&#10;        isFavorite = healthTip.isFavorite();&#10;        isLiked = healthTip.isLiked();&#10;        updateFavoriteFabIcon();&#10;        updateLikeButtonText();&#10;&#10;        // Hiển thị nội dung với animation&#10;        showContentViewsWithAnimation();&#10;    }&#10;&#10;    /**&#10;     * Thiết lập các sự kiện&#10;     */&#10;    private void setupListeners() {&#10;        if (fabFavorite != null) {&#10;            fabFavorite.setOnClickListener(v -&gt; {&#10;                if (presenter != null) {&#10;                    presenter.onFavoriteClick(healthTipId);&#10;                }&#10;            });&#10;        }&#10;&#10;        if (buttonLike != null) {&#10;            buttonLike.setOnClickListener(v -&gt; {&#10;                if (presenter != null) {&#10;                    presenter.onLikeClick(healthTipId);&#10;                }&#10;            });&#10;        }&#10;&#10;        if (buttonShare != null) {&#10;            buttonShare.setOnClickListener(v -&gt; {&#10;                if (presenter != null) {&#10;                    presenter.onShareClick(healthTipId);&#10;                }&#10;            });&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Cập nhật icon của FAB yêu thích&#10;     */&#10;    private void updateFavoriteFabIcon() {&#10;        if (fabFavorite != null) {&#10;            if (isFavorite) {&#10;                fabFavorite.setImageResource(R.drawable.ic_favorite);&#10;                fabFavorite.setContentDescription(getString(R.string.remove_from_favorite));&#10;            } else {&#10;                fabFavorite.setImageResource(R.drawable.ic_favorite_border);&#10;                fabFavorite.setContentDescription(getString(R.string.add_to_favorite));&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Cập nhật text của nút thích&#10;     */&#10;    private void updateLikeButtonText() {&#10;        if (buttonLike != null) {&#10;            buttonLike.setText(isLiked ? R.string.unlike : R.string.like);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void updateFavoriteStatus(boolean isFavorite) {&#10;        if (isFavorite) {&#10;            fabFavorite.setImageResource(R.drawable.ic_favorite);&#10;        } else {&#10;            fabFavorite.setImageResource(R.drawable.ic_favorite_border);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void updateLikeStatus(boolean isLiked) {&#10;        // Thay đổi text của button thay vì image vì buttonLike là Button không phải ImageButton&#10;        if (isLiked) {&#10;            buttonLike.setText(&quot;❤️ Đã thích&quot;);&#10;            buttonLike.setTextColor(getResources().getColor(R.color.primary_button_start));&#10;        } else {&#10;            buttonLike.setText(&quot; Thích&quot;);&#10;            buttonLike.setTextColor(getResources().getColor(R.color.text_secondary));&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void updateLikeCount(int likeCount) {&#10;        textViewLikeCount.setText(String.valueOf(likeCount));&#10;    }&#10;&#10;    @Override&#10;    public void updateViewCount(int viewCount) {&#10;        textViewViewCount.setText(String.valueOf(viewCount));&#10;    }&#10;&#10;    @Override&#10;    public void shareContent(String content) {&#10;        Intent shareIntent = new Intent(Intent.ACTION_SEND);&#10;        shareIntent.setType(&quot;text/plain&quot;);&#10;        shareIntent.putExtra(Intent.EXTRA_TEXT, content);&#10;        startActivity(Intent.createChooser(shareIntent, getString(R.string.share_tip)));&#10;    }&#10;&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        if (presenter != null) {&#10;            presenter.detachView();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void finish() {&#10;        finishWithAnimation();&#10;    }&#10;&#10;    @Override&#10;    public void onBackPressed() {&#10;        finishWithAnimation();&#10;    }&#10;&#10;    /**&#10;     * Đóng activity với animation trượt xuống dưới&#10;     */&#10;    private void finishWithAnimation() {&#10;        super.finish();&#10;        // Áp dụng animation trượt xuống dưới khi đóng activity&#10;        overridePendingTransition(R.anim.restore_and_scale_up, R.anim.slide_down_to_bottom);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.healthtip.detail;&#13;&#10;&#13;&#10;import android.content.Context;&#13;&#10;import android.content.Intent;&#13;&#10;import android.os.Bundle;&#13;&#10;import android.view.MenuItem;&#13;&#10;import android.view.View;&#13;&#10;import android.widget.Button;&#13;&#10;import android.widget.ImageView;&#13;&#10;import android.widget.ProgressBar;&#13;&#10;import android.widget.TextView;&#13;&#10;import android.widget.Toast;&#13;&#10;&#13;&#10;import androidx.annotation.NonNull;&#13;&#10;import androidx.appcompat.app.AppCompatActivity;&#13;&#10;import androidx.appcompat.widget.Toolbar;&#13;&#10;&#13;&#10;import com.bumptech.glide.Glide;&#13;&#10;import com.google.android.material.appbar.CollapsingToolbarLayout;&#13;&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#13;&#10;import com.vhn.doan.R;&#13;&#10;import com.vhn.doan.data.HealthTip;&#13;&#10;import com.vhn.doan.data.repository.HealthTipRepository;&#13;&#10;import com.vhn.doan.data.repository.HealthTipRepositoryImpl;&#13;&#10;&#13;&#10;/**&#13;&#10; * Activity hiển thị chi tiết một bài viết mẹo sức khỏe&#13;&#10; * Tuân theo kiến trúc MVP (Model-View-Presenter)&#13;&#10; */&#13;&#10;public class HealthTipDetailActivity extends AppCompatActivity implements HealthTipDetailView {&#13;&#10;&#13;&#10;    private static final String EXTRA_HEALTH_TIP_ID = &quot;health_tip_id&quot;;&#13;&#10;&#13;&#10;    // UI components&#13;&#10;    private ImageView imageViewDetail;&#13;&#10;    private TextView textViewTitle;&#13;&#10;    private TextView textViewCategory;&#13;&#10;    private TextView textViewContent;&#13;&#10;    private TextView textViewViewCount;&#13;&#10;    private TextView textViewLikeCount;&#13;&#10;    private FloatingActionButton fabFavorite;&#13;&#10;    private Button buttonLike;&#13;&#10;    private Button buttonShare;&#13;&#10;    private ProgressBar progressBar;&#13;&#10;    private CollapsingToolbarLayout collapsingToolbarLayout;&#13;&#10;&#13;&#10;    // Presenter&#13;&#10;    private HealthTipDetailPresenter presenter;&#13;&#10;&#13;&#10;    // Data&#13;&#10;    private String healthTipId;&#13;&#10;    private boolean isLiked = false;&#13;&#10;    private boolean isFavorite = false;&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Tạo Intent để mở Activity này&#13;&#10;     */&#13;&#10;    public static Intent createIntent(Context context, String healthTipId) {&#13;&#10;        Intent intent = new Intent(context, HealthTipDetailActivity.class);&#13;&#10;        intent.putExtra(EXTRA_HEALTH_TIP_ID, healthTipId);&#13;&#10;        return intent;&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    protected void onCreate(Bundle savedInstanceState) {&#13;&#10;        super.onCreate(savedInstanceState);&#13;&#10;        setContentView(R.layout.activity_health_tip_detail);&#13;&#10;&#13;&#10;        // Khởi tạo UI components&#13;&#10;        initViews();&#13;&#10;&#13;&#10;        // Lấy healthTipId từ Intent&#13;&#10;        healthTipId = getIntent().getStringExtra(EXTRA_HEALTH_TIP_ID);&#13;&#10;&#13;&#10;        if (healthTipId == null || healthTipId.isEmpty()) {&#13;&#10;            showError(&quot;ID bài viết không hợp lệ&quot;);&#13;&#10;            finish();&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        // Khởi tạo presenter&#13;&#10;        HealthTipRepository repository = new HealthTipRepositoryImpl();&#13;&#10;        presenter = new HealthTipDetailPresenterImpl(repository);&#13;&#10;        presenter.attachView(this);&#13;&#10;&#13;&#10;        // Thiết lập listeners&#13;&#10;        setupListeners();&#13;&#10;&#13;&#10;        // Tải dữ liệu&#13;&#10;        presenter.loadHealthTipDetail(healthTipId);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Khởi tạo các view&#13;&#10;     */&#13;&#10;    private void initViews() {&#13;&#10;        // Khởi tạo toolbar&#13;&#10;        Toolbar toolbar = findViewById(R.id.toolbar);&#13;&#10;        setSupportActionBar(toolbar);&#13;&#10;        if (getSupportActionBar() != null) {&#13;&#10;            getSupportActionBar().setDisplayHomeAsUpEnabled(true);&#13;&#10;            getSupportActionBar().setDisplayShowTitleEnabled(false);&#13;&#10;        }&#13;&#10;&#13;&#10;        // Khởi tạo các view khác&#13;&#10;        collapsingToolbarLayout = findViewById(R.id.collapsingToolbarLayout);&#13;&#10;        imageViewDetail = findViewById(R.id.imageViewDetail);&#13;&#10;        textViewTitle = findViewById(R.id.textViewTitle);&#13;&#10;        textViewCategory = findViewById(R.id.textViewCategory);&#13;&#10;        textViewContent = findViewById(R.id.textViewContent);&#13;&#10;        textViewViewCount = findViewById(R.id.textViewViewCount);&#13;&#10;        textViewLikeCount = findViewById(R.id.textViewLikeCount);&#13;&#10;        fabFavorite = findViewById(R.id.fabFavorite);&#13;&#10;        buttonLike = findViewById(R.id.buttonLike);&#13;&#10;        buttonShare = findViewById(R.id.buttonShare);&#13;&#10;        progressBar = findViewById(R.id.progressBar);&#13;&#10;&#13;&#10;        // Ẩn tất cả nội dung cho đến khi dữ liệu được tải&#13;&#10;        hideContentViews();&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Ẩn tất cả các view nội dung để tránh hiện tượng nháy&#13;&#10;     */&#13;&#10;    private void hideContentViews() {&#13;&#10;        // Ẩn các thành phần chính&#13;&#10;        if (textViewTitle != null) textViewTitle.setVisibility(View.GONE);&#13;&#10;        if (textViewCategory != null) textViewCategory.setVisibility(View.GONE);&#13;&#10;        if (textViewContent != null) textViewContent.setVisibility(View.GONE);&#13;&#10;        if (textViewViewCount != null) textViewViewCount.setVisibility(View.GONE);&#13;&#10;        if (textViewLikeCount != null) textViewLikeCount.setVisibility(View.GONE);&#13;&#10;        if (fabFavorite != null) fabFavorite.setVisibility(View.GONE);&#13;&#10;        if (buttonLike != null) buttonLike.setVisibility(View.GONE);&#13;&#10;        if (buttonShare != null) buttonShare.setVisibility(View.GONE);&#13;&#10;        if (imageViewDetail != null) imageViewDetail.setVisibility(View.GONE);&#13;&#10;&#13;&#10;        // Hiển thị loading&#13;&#10;        showLoading(true);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Hiển thị các view nội dung với animation mượt mà&#13;&#10;     */&#13;&#10;    private void showContentViewsWithAnimation() {&#13;&#10;        // Ẩn loading trước&#13;&#10;        showLoading(false);&#13;&#10;&#13;&#10;        // Tạo danh sách các view cần animate&#13;&#10;        View[] viewsToAnimate = {&#13;&#10;            imageViewDetail,&#13;&#10;            textViewTitle,&#13;&#10;            textViewCategory,&#13;&#10;            textViewViewCount,&#13;&#10;            textViewLikeCount,&#13;&#10;            textViewContent,&#13;&#10;            buttonLike,&#13;&#10;            buttonShare,&#13;&#10;            fabFavorite&#13;&#10;        };&#13;&#10;&#13;&#10;        // Animate từng view với delay nhỏ để tạo hiệu ứng cascade&#13;&#10;        for (int i = 0; i &lt; viewsToAnimate.length; i++) {&#13;&#10;            final View view = viewsToAnimate[i];&#13;&#10;            if (view != null) {&#13;&#10;                // Đặt vị trí ban đầu (ẩn và offset)&#13;&#10;                view.setAlpha(0f);&#13;&#10;                view.setTranslationY(50f);&#13;&#10;                view.setVisibility(View.VISIBLE);&#13;&#10;&#13;&#10;                // Animate với delay&#13;&#10;                view.animate()&#13;&#10;                    .alpha(1f)&#13;&#10;                    .translationY(0f)&#13;&#10;                    .setDuration(300)&#13;&#10;                    .setStartDelay(i * 50) // Delay 50ms cho mỗi view&#13;&#10;                    .setInterpolator(new android.view.animation.DecelerateInterpolator())&#13;&#10;                    .start();&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#13;&#10;        if (item.getItemId() == android.R.id.home) {&#13;&#10;            onBackPressed();&#13;&#10;            return true;&#13;&#10;        }&#13;&#10;        return super.onOptionsItemSelected(item);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void showMessage(String message) {&#13;&#10;        Toast.makeText(this, message, Toast.LENGTH_SHORT).show();&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void showLoading(boolean loading) {&#13;&#10;        progressBar.setVisibility(loading ? View.VISIBLE : View.GONE);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void showError(String errorMessage) {&#13;&#10;        Toast.makeText(this, errorMessage, Toast.LENGTH_LONG).show();&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void displayHealthTipDetails(HealthTip healthTip) {&#13;&#10;        // Hiển thị thông tin chi tiết&#13;&#10;        textViewTitle.setText(healthTip.getTitle());&#13;&#10;        textViewContent.setText(healthTip.getContent());&#13;&#10;        textViewViewCount.setText(String.valueOf(healthTip.getViewCount()));&#13;&#10;        textViewLikeCount.setText(String.valueOf(healthTip.getLikeCount()));&#13;&#10;&#13;&#10;        // Set category text - đây là phần bị thiếu&#13;&#10;        if (healthTip.getCategoryName() != null &amp;&amp; !healthTip.getCategoryName().isEmpty()) {&#13;&#10;            textViewCategory.setText(healthTip.getCategoryName());&#13;&#10;            textViewCategory.setVisibility(View.VISIBLE);&#13;&#10;        } else {&#13;&#10;            textViewCategory.setText(&quot;Chưa phân loại&quot;);&#13;&#10;            textViewCategory.setVisibility(View.VISIBLE);&#13;&#10;        }&#13;&#10;&#13;&#10;        // Set title cho toolbar&#13;&#10;        collapsingToolbarLayout.setTitle(healthTip.getTitle());&#13;&#10;&#13;&#10;        // Tải hình ảnh&#13;&#10;        if (healthTip.getImageUrl() != null &amp;&amp; !healthTip.getImageUrl().isEmpty()) {&#13;&#10;            Glide.with(this)&#13;&#10;                    .load(healthTip.getImageUrl())&#13;&#10;                    .placeholder(R.drawable.placeholder_image)&#13;&#10;                    .error(R.drawable.error_image)&#13;&#10;                    .into(imageViewDetail);&#13;&#10;        } else {&#13;&#10;            imageViewDetail.setImageResource(R.drawable.placeholder_image);&#13;&#10;        }&#13;&#10;&#13;&#10;        // Cập nhật trạng thái favorite và like&#13;&#10;        isFavorite = healthTip.isFavorite();&#13;&#10;        isLiked = healthTip.isLiked();&#13;&#10;        updateFavoriteFabIcon();&#13;&#10;        updateLikeButtonText();&#13;&#10;&#13;&#10;        // Hiển thị nội dung với animation&#13;&#10;        showContentViewsWithAnimation();&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Thiết lập các sự kiện&#13;&#10;     */&#13;&#10;    private void setupListeners() {&#13;&#10;        if (fabFavorite != null) {&#13;&#10;            fabFavorite.setOnClickListener(v -&gt; {&#13;&#10;                if (presenter != null) {&#13;&#10;                    presenter.onFavoriteClick(healthTipId);&#13;&#10;                }&#13;&#10;            });&#13;&#10;        }&#13;&#10;&#13;&#10;        if (buttonLike != null) {&#13;&#10;            buttonLike.setOnClickListener(v -&gt; {&#13;&#10;                if (presenter != null) {&#13;&#10;                    presenter.onLikeClick(healthTipId);&#13;&#10;                }&#13;&#10;            });&#13;&#10;        }&#13;&#10;&#13;&#10;        if (buttonShare != null) {&#13;&#10;            buttonShare.setOnClickListener(v -&gt; {&#13;&#10;                if (presenter != null) {&#13;&#10;                    presenter.onShareClick(healthTipId);&#13;&#10;                }&#13;&#10;            });&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Cập nhật icon của FAB yêu thích&#13;&#10;     */&#13;&#10;    private void updateFavoriteFabIcon() {&#13;&#10;        if (fabFavorite != null) {&#13;&#10;            if (isFavorite) {&#13;&#10;                fabFavorite.setImageResource(R.drawable.ic_favorite);&#13;&#10;                fabFavorite.setContentDescription(getString(R.string.remove_from_favorite));&#13;&#10;            } else {&#13;&#10;                fabFavorite.setImageResource(R.drawable.ic_favorite_border);&#13;&#10;                fabFavorite.setContentDescription(getString(R.string.add_to_favorite));&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Cập nhật text của nút thích&#13;&#10;     */&#13;&#10;    private void updateLikeButtonText() {&#13;&#10;        if (buttonLike != null) {&#13;&#10;            buttonLike.setText(isLiked ? R.string.unlike : R.string.like);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void updateFavoriteStatus(boolean isFavorite) {&#13;&#10;        if (isFavorite) {&#13;&#10;            fabFavorite.setImageResource(R.drawable.ic_favorite);&#13;&#10;        } else {&#13;&#10;            fabFavorite.setImageResource(R.drawable.ic_favorite_border);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void updateLikeStatus(boolean isLiked) {&#13;&#10;        // Thay đổi text của button thay vì image vì buttonLike là Button không phải ImageButton&#13;&#10;        if (isLiked) {&#13;&#10;            buttonLike.setText(&quot;❤️ Đã thích&quot;);&#13;&#10;            buttonLike.setTextColor(getResources().getColor(R.color.primary_button_start));&#13;&#10;        } else {&#13;&#10;            buttonLike.setText(&quot; Thích&quot;);&#13;&#10;            buttonLike.setTextColor(getResources().getColor(R.color.text_secondary));&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void updateLikeCount(int likeCount) {&#13;&#10;        textViewLikeCount.setText(String.valueOf(likeCount));&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void updateViewCount(int viewCount) {&#13;&#10;        textViewViewCount.setText(String.valueOf(viewCount));&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void shareContent(String content) {&#13;&#10;        Intent shareIntent = new Intent(Intent.ACTION_SEND);&#13;&#10;        shareIntent.setType(&quot;text/plain&quot;);&#13;&#10;        shareIntent.putExtra(Intent.EXTRA_TEXT, content);&#13;&#10;        startActivity(Intent.createChooser(shareIntent, getString(R.string.share_tip)));&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    protected void onDestroy() {&#13;&#10;        super.onDestroy();&#13;&#10;        if (presenter != null) {&#13;&#10;            presenter.detachView();&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void finish() {&#13;&#10;        super.finish();&#13;&#10;        // Không còn animation trượt xuống dưới nữa&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void onBackPressed() {&#13;&#10;        super.onBackPressed();&#13;&#10;        // Không còn animation trượt xuống dưới nữa&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/home/HomeActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/home/HomeActivity.java" />
              <option name="originalContent" value="package com.vhn.doan.presentation.home;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.util.Log;&#10;import android.view.MenuItem;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.fragment.app.Fragment;&#10;&#10;import com.google.android.material.bottomnavigation.BottomNavigationView;&#10;import com.google.android.material.navigation.NavigationBarView;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.presentation.auth.LoginActivity;&#10;import com.vhn.doan.presentation.profile.FavoritePostsFragment;&#10;import com.vhn.doan.presentation.profile.ProfileFragment;&#10;import com.vhn.doan.presentation.reminder.ReminderFragment;&#10;import com.vhn.doan.services.AuthManager;&#10;import com.vhn.doan.services.ReminderManager;&#10;import com.vhn.doan.utils.UserSessionManager;&#10;&#10;/**&#10; * HomeActivity là màn hình chính của ứng dụng sau khi đăng nhập&#10; * Chứa HomeFragment và các Fragment khác thông qua BottomNavigationView&#10; */&#10;public class HomeActivity extends AppCompatActivity {&#10;&#10;    private static final String TAG = &quot;HomeActivity&quot;;&#10;    private BottomNavigationView bottomNavigationView;&#10;    private AuthManager authManager;&#10;    private ReminderManager reminderManager;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_home);&#10;&#10;        // Khởi tạo AuthManager&#10;        authManager = new AuthManager(this);&#10;&#10;        // Kiểm tra đăng nhập&#10;        if (!authManager.isUserLoggedIn()) {&#10;            // Chuyển về màn hình đăng nhập nếu chưa đăng nhập&#10;            Intent intent = new Intent(this, LoginActivity.class);&#10;            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);&#10;            startActivity(intent);&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        // Khởi tạo ReminderManager&#10;        reminderManager = new ReminderManager(new UserSessionManager(this));&#10;&#10;        // Khởi động ReminderForegroundService&#10;        reminderManager.startReminderService(this);&#10;        Log.d(TAG, &quot;ReminderForegroundService đã được khởi động từ HomeActivity&quot;);&#10;&#10;        // Khởi tạo và thiết lập BottomNavigationView&#10;        setupBottomNavigation();&#10;&#10;        // Mặc định hiển thị HomeFragment khi khởi động&#10;        if (savedInstanceState == null) {&#10;            loadFragment(new HomeFragment());&#10;        }&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        super.onResume();&#10;&#10;        // Khởi động lại ReminderForegroundService khi activity được resume&#10;        if (reminderManager != null) {&#10;            // Khởi động lại service để đảm bảo nó đang chạy&#10;            reminderManager.startReminderService(this);&#10;&#10;            // Khởi động lại tất cả reminders đang active&#10;            reminderManager.restartAllReminders(this);&#10;&#10;            // Kiểm tra và hiển thị reminders đã bị miss&#10;            reminderManager.checkAndShowMissedReminders(this);&#10;&#10;            Log.d(TAG, &quot;Đã khởi động lại và kiểm tra reminders trong onResume&quot;);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Method để xử lý onClick từ XML layout cho nút tạo reminder&#10;     * Sửa lỗi: IllegalStateException: Could not find method onCreateReminderClick&#10;     */&#10;    public void onCreateReminderClick(android.view.View view) {&#10;        // Tìm ReminderFragment hiện tại và gọi method tạo reminder&#10;        Fragment currentFragment = getSupportFragmentManager().findFragmentById(R.id.fragment_container);&#10;        if (currentFragment instanceof ReminderFragment) {&#10;            ReminderFragment reminderFragment = (ReminderFragment) currentFragment;&#10;            reminderFragment.onCreateReminderClick();&#10;        }&#10;    }&#10;&#10;    private void setupBottomNavigation() {&#10;        bottomNavigationView = findViewById(R.id.bottom_navigation);&#10;        bottomNavigationView.setOnItemSelectedListener(new NavigationBarView.OnItemSelectedListener() {&#10;            @Override&#10;            public boolean onNavigationItemSelected(@NonNull MenuItem item) {&#10;                Fragment fragment = null;&#10;                int itemId = item.getItemId();&#10;&#10;                if (itemId == R.id.nav_home) {&#10;                    fragment = HomeFragment.newInstance();&#10;                } else if (itemId == R.id.nav_reminders) {&#10;                    // Kích hoạt ReminderFragment&#10;                    fragment = ReminderFragment.newInstance();&#10;                } else if (itemId == R.id.nav_videos) {&#10;                    // Tạm thời vẫn dùng HomeFragment&#10;                    // Sẽ thay thế bằng ShortVideoFragment khi phát triển&#10;                    fragment = HomeFragment.newInstance();&#10;                    // fragment = ShortVideoFragment.newInstance();&#10;                } else if (itemId == R.id.nav_favorites) {&#10;                    // Sử dụng FavoritePostsFragment thay vì FavoriteFragment&#10;                    fragment = FavoritePostsFragment.newInstance();&#10;                } else if (itemId == R.id.nav_profile) {&#10;                    // Sử dụng ProfileFragment thay vì HomeFragment&#10;                    fragment = ProfileFragment.newInstance();&#10;                }&#10;&#10;                return loadFragment(fragment);&#10;            }&#10;        });&#10;    }&#10;&#10;    private boolean loadFragment(Fragment fragment) {&#10;        if (fragment != null) {&#10;            getSupportFragmentManager()&#10;                    .beginTransaction()&#10;                    .replace(R.id.fragment_container, fragment)&#10;                    .commit();&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.home;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.util.Log;&#10;import android.view.MenuItem;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.fragment.app.Fragment;&#10;&#10;import com.google.android.material.bottomnavigation.BottomNavigationView;&#10;import com.google.android.material.navigation.NavigationBarView;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.presentation.auth.LoginActivity;&#10;import com.vhn.doan.presentation.profile.ProfileFragment;&#10;import com.vhn.doan.presentation.reminder.ReminderFragment;&#10;import com.vhn.doan.services.AuthManager;&#10;import com.vhn.doan.services.ReminderManager;&#10;import com.vhn.doan.utils.UserSessionManager;&#10;&#10;/**&#10; * HomeActivity là màn hình chính của ứng dụng sau khi đăng nhập&#10; * Chứa HomeFragment và các Fragment khác thông qua BottomNavigationView&#10; */&#10;public class HomeActivity extends AppCompatActivity {&#10;&#10;    private static final String TAG = &quot;HomeActivity&quot;;&#10;    private BottomNavigationView bottomNavigationView;&#10;    private AuthManager authManager;&#10;    private ReminderManager reminderManager;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_home);&#10;&#10;        // Khởi tạo AuthManager&#10;        authManager = new AuthManager(this);&#10;&#10;        // Kiểm tra đăng nhập&#10;        if (!authManager.isUserLoggedIn()) {&#10;            // Chuyển về màn hình đăng nhập nếu chưa đăng nhập&#10;            Intent intent = new Intent(this, LoginActivity.class);&#10;            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);&#10;            startActivity(intent);&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        // Khởi tạo ReminderManager&#10;        reminderManager = new ReminderManager(new UserSessionManager(this));&#10;&#10;        // Khởi động ReminderForegroundService&#10;        reminderManager.startReminderService(this);&#10;        Log.d(TAG, &quot;ReminderForegroundService đã được khởi động từ HomeActivity&quot;);&#10;&#10;        // Khởi tạo và thiết lập BottomNavigationView&#10;        setupBottomNavigation();&#10;&#10;        // Mặc định hiển thị HomeFragment khi khởi động&#10;        if (savedInstanceState == null) {&#10;            loadFragment(new HomeFragment());&#10;        }&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        super.onResume();&#10;&#10;        // Khởi động lại ReminderForegroundService khi activity được resume&#10;        if (reminderManager != null) {&#10;            // Khởi động lại service để đảm bảo nó đang chạy&#10;            reminderManager.startReminderService(this);&#10;&#10;            // Khởi động lại tất cả reminders đang active&#10;            reminderManager.restartAllReminders(this);&#10;&#10;            // Kiểm tra và hiển thị reminders đã bị miss&#10;            reminderManager.checkAndShowMissedReminders(this);&#10;&#10;            Log.d(TAG, &quot;Đã khởi động lại và kiểm tra reminders trong onResume&quot;);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Method để xử lý onClick từ XML layout cho nút tạo reminder&#10;     * Sửa lỗi: IllegalStateException: Could not find method onCreateReminderClick&#10;     */&#10;    public void onCreateReminderClick(android.view.View view) {&#10;        // Tìm ReminderFragment hiện tại và gọi method tạo reminder&#10;        Fragment currentFragment = getSupportFragmentManager().findFragmentById(R.id.fragment_container);&#10;        if (currentFragment instanceof ReminderFragment) {&#10;            ReminderFragment reminderFragment = (ReminderFragment) currentFragment;&#10;            reminderFragment.onCreateReminderClick();&#10;        }&#10;    }&#10;&#10;    private void setupBottomNavigation() {&#10;        bottomNavigationView = findViewById(R.id.bottom_navigation);&#10;        bottomNavigationView.setOnItemSelectedListener(new NavigationBarView.OnItemSelectedListener() {&#10;            @Override&#10;            public boolean onNavigationItemSelected(@NonNull MenuItem item) {&#10;                Fragment fragment = null;&#10;                int itemId = item.getItemId();&#10;&#10;                if (itemId == R.id.nav_home) {&#10;                    fragment = HomeFragment.newInstance();&#10;                } else if (itemId == R.id.nav_reminders) {&#10;                    // Kích hoạt ReminderFragment&#10;                    fragment = ReminderFragment.newInstance();&#10;                } else if (itemId == R.id.nav_videos) {&#10;                    // Tạm thời vẫn dùng HomeFragment&#10;                    // Sẽ thay thế bằng ShortVideoFragment khi phát triển&#10;                    fragment = HomeFragment.newInstance();&#10;                    // fragment = ShortVideoFragment.newInstance();&#10;                } else if (itemId == R.id.nav_profile) {&#10;                    // Sử dụng ProfileFragment - chức năng yêu thích đã được tích hợp vào đây&#10;                    fragment = ProfileFragment.newInstance();&#10;                }&#10;&#10;                return loadFragment(fragment);&#10;            }&#10;        });&#10;    }&#10;&#10;    private boolean loadFragment(Fragment fragment) {&#10;        if (fragment != null) {&#10;            getSupportFragmentManager()&#10;                    .beginTransaction()&#10;                    .replace(R.id.fragment_container, fragment)&#10;                    .commit();&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/home/HomeFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/home/HomeFragment.java" />
              <option name="originalContent" value="package com.vhn.doan.presentation.home;&#10;&#10;import android.content.Context;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.ImageButton;&#10;import android.widget.LinearLayout;&#10;import android.widget.ProgressBar;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.google.android.material.snackbar.Snackbar;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.data.Category;&#10;import com.vhn.doan.data.HealthTip;&#10;import com.vhn.doan.data.repository.CategoryRepository;&#10;import com.vhn.doan.data.repository.CategoryRepositoryImpl;&#10;import com.vhn.doan.data.repository.HealthTipRepository;&#10;import com.vhn.doan.data.repository.HealthTipRepositoryImpl;&#10;import com.vhn.doan.presentation.home.adapter.CategoryAdapter;&#10;import com.vhn.doan.presentation.home.adapter.HealthTipAdapter;&#10;import com.vhn.doan.presentation.home.adapter.CategorySkeletonAdapter;&#10;import com.vhn.doan.presentation.home.adapter.HealthTipSkeletonAdapter;&#10;import com.vhn.doan.utils.Constants;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;/**&#10; * HomeFragment hiển thị trang chính của ứng dụng&#10; * Tuân thủ kiến trúc MVP và sử dụng HomePresenter để xử lý logic&#10; */&#10;public class HomeFragment extends Fragment implements HomeView {&#10;&#10;    // UI components&#10;    private RecyclerView recyclerViewCategories;&#10;    private RecyclerView recyclerViewLatestTips;&#10;    private RecyclerView recyclerViewMostViewedTips;&#10;    private RecyclerView recyclerViewMostLikedTips;&#10;    private ProgressBar progressBar;&#10;    private LinearLayout layoutOfflineMode;&#10;    private ImageButton buttonSearch;&#10;    private TextView textViewSeeAllCategories;&#10;    private TextView textViewSeeAllLatestTips;&#10;    private TextView textViewSeeAllMostViewed;&#10;    private TextView textViewSeeAllMostLiked;&#10;&#10;    // Adapters - Real data&#10;    private CategoryAdapter categoryAdapter;&#10;    private HealthTipAdapter latestTipsAdapter;&#10;    private HealthTipAdapter mostViewedTipsAdapter;&#10;    private HealthTipAdapter mostLikedTipsAdapter;&#10;&#10;    // Skeleton Adapters&#10;    private CategorySkeletonAdapter categorySkeletonAdapter;&#10;    private HealthTipSkeletonAdapter latestTipsSkeletonAdapter;&#10;    private HealthTipSkeletonAdapter mostViewedTipsSkeletonAdapter;&#10;    private HealthTipSkeletonAdapter mostLikedTipsSkeletonAdapter;&#10;&#10;    // Presenter&#10;    private HomePresenter presenter;&#10;&#10;    // Loading state flags&#10;    private boolean isCategoriesLoaded = false;&#10;    private boolean isLatestTipsLoaded = false;&#10;    private boolean isMostViewedTipsLoaded = false;&#10;    private boolean isMostLikedTipsLoaded = false;&#10;&#10;    public HomeFragment() {&#10;        // Constructor mặc định&#10;    }&#10;&#10;    /**&#10;     * Phương thức factory để tạo instance mới của fragment này&#10;     */&#10;    public static HomeFragment newInstance() {&#10;        return new HomeFragment();&#10;    }&#10;&#10;    @Override&#10;    public void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;&#10;        // Khởi tạo repositories&#10;        CategoryRepository categoryRepository = new CategoryRepositoryImpl();&#10;        HealthTipRepository healthTipRepository = new HealthTipRepositoryImpl();&#10;&#10;        // Khởi tạo presenter&#10;        presenter = new HomePresenter(requireContext(), categoryRepository, healthTipRepository);&#10;    }&#10;&#10;    @Override&#10;    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {&#10;        // Inflate layout cho fragment&#10;        return inflater.inflate(R.layout.fragment_home, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;&#10;        // Ánh xạ các thành phần UI&#10;        initViews(view);&#10;&#10;        // Thiết lập Layout Managers cho RecyclerViews TRƯỚC&#10;        setupLayoutManagers();&#10;&#10;        // Hiển thị skeleton loading ngay sau khi có Layout Managers&#10;        setupSkeletonLoading();&#10;&#10;        // Khởi tạo real adapters (nhưng chưa set vào RecyclerViews)&#10;        initializeRealAdapters();&#10;&#10;        // Thiết lập các sự kiện click&#10;        setupClickListeners();&#10;&#10;        // Gắn presenter với view và bắt đầu tải dữ liệu&#10;        presenter.attachView(this);&#10;    }&#10;&#10;    /**&#10;     * Thiết lập skeleton loading cho tất cả RecyclerViews&#10;     */&#10;    private void setupSkeletonLoading() {&#10;        // Hiển thị tất cả các tiêu đề và &quot;Xem tất cả&quot; ngay lập tức&#10;        showAllTitlesAndSeeAll();&#10;&#10;        // Thiết lập skeleton adapters&#10;        setupSkeletonAdapters();&#10;    }&#10;&#10;    /**&#10;     * Hiển thị tất cả tiêu đề và nút &quot;Xem tất cả&quot;&#10;     */&#10;    private void showAllTitlesAndSeeAll() {&#10;        if (textViewCategoriesTitle != null) textViewCategoriesTitle.setVisibility(View.VISIBLE);&#10;        if (textViewLatestTipsTitle != null) textViewLatestTipsTitle.setVisibility(View.VISIBLE);&#10;        if (textViewMostViewedTitle != null) textViewMostViewedTitle.setVisibility(View.VISIBLE);&#10;        if (textViewMostLikedTitle != null) textViewMostLikedTitle.setVisibility(View.VISIBLE);&#10;&#10;        if (textViewSeeAllCategories != null) textViewSeeAllCategories.setVisibility(View.VISIBLE);&#10;        if (textViewSeeAllLatestTips != null) textViewSeeAllLatestTips.setVisibility(View.VISIBLE);&#10;        if (textViewSeeAllMostViewed != null) textViewSeeAllMostViewed.setVisibility(View.VISIBLE);&#10;        if (textViewSeeAllMostLiked != null) textViewSeeAllMostLiked.setVisibility(View.VISIBLE);&#10;    }&#10;&#10;    /**&#10;     * Thiết lập skeleton adapters cho tất cả RecyclerViews&#10;     */&#10;    private void setupSkeletonAdapters() {&#10;        // Skeleton cho Categories (4 items)&#10;        categorySkeletonAdapter = new CategorySkeletonAdapter(requireContext(), 4);&#10;        recyclerViewCategories.setAdapter(categorySkeletonAdapter);&#10;&#10;        // Skeleton cho Latest Tips (3 items)&#10;        latestTipsSkeletonAdapter = new HealthTipSkeletonAdapter(requireContext(), 3);&#10;        recyclerViewLatestTips.setAdapter(latestTipsSkeletonAdapter);&#10;&#10;        // Skeleton cho Most Viewed Tips (3 items)&#10;        mostViewedTipsSkeletonAdapter = new HealthTipSkeletonAdapter(requireContext(), 3);&#10;        recyclerViewMostViewedTips.setAdapter(mostViewedTipsSkeletonAdapter);&#10;&#10;        // Skeleton cho Most Liked Tips (3 items)&#10;        mostLikedTipsSkeletonAdapter = new HealthTipSkeletonAdapter(requireContext(), 3);&#10;        recyclerViewMostLikedTips.setAdapter(mostLikedTipsSkeletonAdapter);&#10;    }&#10;&#10;    /**&#10;     * DEPRECATED: Không còn sử dụng phương thức này&#10;     * Thay thế bằng setupSkeletonLoading()&#10;     */&#10;    @Deprecated&#10;    private void hideContentViews() {&#10;        // Phương thức này không còn được sử dụng&#10;        // Skeleton loading sẽ hiển thị ngay từ đầu&#10;    }&#10;&#10;    /**&#10;     * DEPRECATED: Không còn sử dụng animation cascade&#10;     * Data sẽ được thay thế trực tiếp từ skeleton sang real data&#10;     */&#10;    @Deprecated&#10;    private void showContentViewsWithAnimation() {&#10;        // Phương thức này không còn được sử dụng&#10;        // Data được cập nhật trực tiếp qua các phương thức show*Data()&#10;    }&#10;&#10;    /**&#10;     * Ánh xạ các thành phần UI từ layout&#10;     */&#10;    private void initViews(View view) {&#10;        // RecyclerViews&#10;        recyclerViewCategories = view.findViewById(R.id.recyclerViewCategories);&#10;        recyclerViewLatestTips = view.findViewById(R.id.recyclerViewLatestTips);&#10;        recyclerViewMostViewedTips = view.findViewById(R.id.recyclerViewMostViewedTips);&#10;        recyclerViewMostLikedTips = view.findViewById(R.id.recyclerViewMostLikedTips);&#10;&#10;        // Các thành phần UI khác&#10;        progressBar = view.findViewById(R.id.progressBar);&#10;        layoutOfflineMode = view.findViewById(R.id.layoutOfflineMode);&#10;        buttonSearch = view.findViewById(R.id.buttonSearch);&#10;&#10;        // Buttons &quot;Xem tất cả&quot;&#10;        textViewSeeAllCategories = view.findViewById(R.id.textViewSeeAllCategories);&#10;        textViewSeeAllLatestTips = view.findViewById(R.id.textViewSeeAllLatestTips);&#10;        textViewSeeAllMostViewed = view.findViewById(R.id.textViewSeeAllMostViewed);&#10;        textViewSeeAllMostLiked = view.findViewById(R.id.textViewSeeAllMostLiked);&#10;&#10;        // Thêm các tiêu đề sections&#10;        initSectionTitles(view);&#10;    }&#10;&#10;    // UI components cho tiêu đề sections&#10;    private TextView textViewCategoriesTitle;&#10;    private TextView textViewLatestTipsTitle;&#10;    private TextView textViewMostViewedTitle;&#10;    private TextView textViewMostLikedTitle;&#10;&#10;    /**&#10;     * Khởi tạo các tiêu đề sections&#10;     */&#10;    private void initSectionTitles(View view) {&#10;        // Tìm các TextView tiêu đề trong layout&#10;        textViewCategoriesTitle = view.findViewById(R.id.textViewCategoriesTitle);&#10;        textViewLatestTipsTitle = view.findViewById(R.id.textViewLatestTipsTitle);&#10;        textViewMostViewedTitle = view.findViewById(R.id.textViewMostViewedTitle);&#10;        textViewMostLikedTitle = view.findViewById(R.id.textViewMostLikedTitle);&#10;    }&#10;&#10;    /**&#10;     * Thiết lập RecyclerViews với adapters và LayoutManagers&#10;     */&#10;    private void setupRecyclerViews() {&#10;        // Setup Layout Managers TRƯỚC KHI thiết lập skeleton&#10;        setupLayoutManagers();&#10;&#10;        // Khởi tạo real adapters (nhưng chưa set vào RecyclerViews)&#10;        initializeRealAdapters();&#10;    }&#10;&#10;    /**&#10;     * Thiết lập Layout Managers cho tất cả RecyclerViews&#10;     */&#10;    private void setupLayoutManagers() {&#10;        // Setup Layout Manager cho Categories&#10;        LinearLayoutManager categoriesLayoutManager = new LinearLayoutManager(&#10;                requireContext(), RecyclerView.HORIZONTAL, false);&#10;        recyclerViewCategories.setLayoutManager(categoriesLayoutManager);&#10;&#10;        // Setup Layout Manager cho Latest Tips&#10;        LinearLayoutManager latestTipsLayoutManager = new LinearLayoutManager(&#10;                requireContext(), RecyclerView.HORIZONTAL, false);&#10;        recyclerViewLatestTips.setLayoutManager(latestTipsLayoutManager);&#10;&#10;        // Setup Layout Manager cho Most Viewed Tips&#10;        LinearLayoutManager mostViewedLayoutManager = new LinearLayoutManager(&#10;                requireContext(), RecyclerView.HORIZONTAL, false);&#10;        recyclerViewMostViewedTips.setLayoutManager(mostViewedLayoutManager);&#10;&#10;        // Setup Layout Manager cho Most Liked Tips&#10;        LinearLayoutManager mostLikedLayoutManager = new LinearLayoutManager(&#10;                requireContext(), RecyclerView.HORIZONTAL, false);&#10;        recyclerViewMostLikedTips.setLayoutManager(mostLikedLayoutManager);&#10;    }&#10;&#10;    /**&#10;     * Khởi tạo các real adapters (nhưng chưa set vào RecyclerViews)&#10;     */&#10;    private void initializeRealAdapters() {&#10;        // Khởi tạo Category Adapter&#10;        categoryAdapter = new CategoryAdapter(&#10;                requireContext(),&#10;                new ArrayList&lt;&gt;(),&#10;                new CategoryAdapter.CategoryClickListener() {&#10;                    @Override&#10;                    public void onCategoryClick(Category category) {&#10;                        presenter.onCategorySelected(category);&#10;                    }&#10;                });&#10;&#10;        // Khởi tạo Latest Tips Adapter&#10;        latestTipsAdapter = new HealthTipAdapter(&#10;                requireContext(),&#10;                new ArrayList&lt;&gt;(),&#10;                new HealthTipAdapter.HealthTipClickListener() {&#10;                    @Override&#10;                    public void onHealthTipClick(HealthTip healthTip) {&#10;                        presenter.onHealthTipSelected(healthTip);&#10;                    }&#10;&#10;                    @Override&#10;                    public void onFavoriteClick(HealthTip healthTip, boolean isFavorite) {&#10;                        handleFavoriteClick(healthTip, isFavorite);&#10;                    }&#10;                });&#10;&#10;        // Khởi tạo Most Viewed Tips Adapter&#10;        mostViewedTipsAdapter = new HealthTipAdapter(&#10;                requireContext(),&#10;                new ArrayList&lt;&gt;(),&#10;                new HealthTipAdapter.HealthTipClickListener() {&#10;                    @Override&#10;                    public void onHealthTipClick(HealthTip healthTip) {&#10;                        presenter.onHealthTipSelected(healthTip);&#10;                    }&#10;&#10;                    @Override&#10;                    public void onFavoriteClick(HealthTip healthTip, boolean isFavorite) {&#10;                        handleFavoriteClick(healthTip, isFavorite);&#10;                    }&#10;                });&#10;&#10;        // Khởi tạo Most Liked Tips Adapter&#10;        mostLikedTipsAdapter = new HealthTipAdapter(&#10;                requireContext(),&#10;                new ArrayList&lt;&gt;(),&#10;                new HealthTipAdapter.HealthTipClickListener() {&#10;                    @Override&#10;                    public void onHealthTipClick(HealthTip healthTip) {&#10;                        presenter.onHealthTipSelected(healthTip);&#10;                    }&#10;&#10;                    @Override&#10;                    public void onFavoriteClick(HealthTip healthTip, boolean isFavorite) {&#10;                        handleFavoriteClick(healthTip, isFavorite);&#10;                    }&#10;                });&#10;    }&#10;&#10;    /**&#10;     * Thiết lập các sự kiện click&#10;     */&#10;    private void setupClickListeners() {&#10;        // Nút tìm kiếm&#10;        buttonSearch.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                presenter.searchHealthTips(&quot;&quot;);&#10;            }&#10;        });&#10;&#10;        // Xem tất cả danh mục&#10;        textViewSeeAllCategories.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                showMessage(&quot;Xem tất cả danh mục&quot;);&#10;                // Chức năng sẽ được triển khai sau&#10;            }&#10;        });&#10;&#10;        // Xem tất cả mẹo mới nhất&#10;        textViewSeeAllLatestTips.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                showMessage(&quot;Xem tất cả mẹo mới nhất&quot;);&#10;                // Chức năng sẽ được triển khai sau&#10;            }&#10;        });&#10;&#10;        // Xem tất cả mẹo xem nhiều nhất&#10;        textViewSeeAllMostViewed.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                showMessage(&quot;Xem tất cả mẹo xem nhiều nhất&quot;);&#10;                // Chức năng sẽ được triển khai sau&#10;            }&#10;        });&#10;&#10;        // Xem tất cả mẹo được yêu thích nhất&#10;        textViewSeeAllMostLiked.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                showMessage(&quot;Xem tất cả mẹo được yêu thích nhất&quot;);&#10;                // Chức năng sẽ được triển khai sau&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void onResume() {&#10;        super.onResume();&#10;        presenter.start(); // Tải dữ liệu khi Fragment được hiển thị&#10;&#10;        // Lắng nghe thay đổi realtime từ Firebase&#10;        presenter.listenToCategories();&#10;        presenter.listenToLatestHealthTips();&#10;    }&#10;&#10;    @Override&#10;    public void onPause() {&#10;        super.onPause();&#10;        presenter.stop(); // Dừng lắng nghe khi Fragment không được hiển thị&#10;    }&#10;&#10;    @Override&#10;    public void onDestroy() {&#10;        super.onDestroy();&#10;        presenter.detachView(); // Tách View khỏi Presenter&#10;    }&#10;&#10;    // Triển khai các phương thức của HomeView với skeleton loading&#10;    @Override&#10;    public void showCategories(List&lt;Category&gt; categories) {&#10;        // Thay thế skeleton adapter bằng real adapter với data&#10;        if (!isCategoriesLoaded) {&#10;            recyclerViewCategories.setAdapter(categoryAdapter);&#10;            isCategoriesLoaded = true;&#10;        }&#10;        categoryAdapter.updateCategories(categories);&#10;    }&#10;&#10;    @Override&#10;    public void showLatestHealthTips(List&lt;HealthTip&gt; healthTips) {&#10;        // Thay thế skeleton adapter bằng real adapter với data&#10;        if (!isLatestTipsLoaded) {&#10;            recyclerViewLatestTips.setAdapter(latestTipsAdapter);&#10;            isLatestTipsLoaded = true;&#10;        }&#10;        latestTipsAdapter.updateHealthTips(healthTips);&#10;    }&#10;&#10;    @Override&#10;    public void showMostViewedHealthTips(List&lt;HealthTip&gt; healthTips) {&#10;        // Thay thế skeleton adapter bằng real adapter với data&#10;        if (!isMostViewedTipsLoaded) {&#10;            recyclerViewMostViewedTips.setAdapter(mostViewedTipsAdapter);&#10;            isMostViewedTipsLoaded = true;&#10;        }&#10;        mostViewedTipsAdapter.updateHealthTips(healthTips);&#10;    }&#10;&#10;    @Override&#10;    public void showMostLikedHealthTips(List&lt;HealthTip&gt; healthTips) {&#10;        // Thay thế skeleton adapter bằng real adapter với data&#10;        if (!isMostLikedTipsLoaded) {&#10;            recyclerViewMostLikedTips.setAdapter(mostLikedTipsAdapter);&#10;            isMostLikedTipsLoaded = true;&#10;        }&#10;        mostLikedTipsAdapter.updateHealthTips(healthTips);&#10;    }&#10;&#10;    /**&#10;     * DEPRECATED: Không còn sử dụng animation cascade&#10;     * Data được thay thế trực tiếp từ skeleton sang real data&#10;     */&#10;    @Deprecated&#10;    private void checkAndShowContentAnimation() {&#10;        // Không còn cần thiết với skeleton loading&#10;    }&#10;&#10;    /**&#10;     * DEPRECATED: Các phương thức kiểm tra data không còn cần thiết&#10;     */&#10;    @Deprecated&#10;    private boolean hasCategories() { return false; }&#10;    @Deprecated&#10;    private boolean hasLatestTips() { return false; }&#10;    @Deprecated&#10;    private boolean hasMostViewedTips() { return false; }&#10;    @Deprecated&#10;    private boolean hasMostLikedTips() { return false; }&#10;&#10;    @Override&#10;    public void showOfflineMode() {&#10;        layoutOfflineMode.setVisibility(View.VISIBLE);&#10;    }&#10;&#10;    @Override&#10;    public void navigateToCategoryDetail(Category category) {&#10;        if (category != null &amp;&amp; category.getId() != null) {&#10;            // Tạo Intent để chuyển đến CategoryDetailListActivity&#10;            android.content.Intent intent = new android.content.Intent(requireContext(), com.vhn.doan.presentation.category.detail.CategoryDetailListActivity.class);&#10;&#10;            // Truyền ID của danh mục&#10;            intent.putExtra(Constants.CATEGORY_ID_KEY, category.getId());&#10;&#10;            // Khởi chạy Activity mới&#10;            startActivity(intent);&#10;        } else {&#10;            showError(&quot;Không thể mở chi tiết danh mục do thiếu thông tin&quot;);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void navigateToHealthTipDetail(HealthTip healthTip) {&#10;        if (healthTip != null &amp;&amp; healthTip.getId() != null) {&#10;            // Tạo Intent để chuyển đến HealthTipDetailActivity&#10;            android.content.Intent intent = com.vhn.doan.presentation.healthtip.detail.HealthTipDetailActivity.createIntent(&#10;                    requireContext(),&#10;                    healthTip.getId()&#10;            );&#10;&#10;            // Khởi chạy Activity mới&#10;            startActivity(intent);&#10;        } else {&#10;            showError(&quot;Không thể mở chi tiết mẹo sức khỏe do thiếu thông tin&quot;);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void navigateToSearch() {&#10;        // Triển khai chức năng chuyển đến trang tìm kiếm&#10;        showMessage(&quot;Chuyển đến trang tìm kiếm&quot;);&#10;        // Sẽ triển khai sau khi có SearchActivity/Fragment&#10;    }&#10;&#10;    @Override&#10;    public void showLoading(boolean loading) {&#10;        // Với skeleton loading, không cần hiển thị progress bar chính&#10;        // Skeleton đã thay thế loading indicator&#10;        if (progressBar != null) {&#10;            progressBar.setVisibility(View.GONE);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showMessage(String message) {&#10;        if (isAdded() &amp;&amp; getView() != null) {&#10;            Toast.makeText(requireContext(), message, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showError(String errorMessage) {&#10;        if (isAdded() &amp;&amp; getView() != null) {&#10;            Snackbar.make(getView(), errorMessage, Snackbar.LENGTH_LONG).show();&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Xử lý khi người dùng click vào nút yêu thích&#10;     * Đồng bộ trạng thái yêu thích giữa tất cả các adapter&#10;     */&#10;    private void handleFavoriteClick(HealthTip healthTip, boolean isFavorite) {&#10;        if (healthTip == null || healthTip.getId() == null) {&#10;            showError(&quot;Không thể cập nhật trạng thái yêu thích&quot;);&#10;            return;&#10;        }&#10;&#10;        // Hiển thị thông báo cho người dùng&#10;        if (isFavorite) {&#10;            showMessage(&quot;Đã thêm '&quot; + healthTip.getTitle() + &quot;' vào danh sách yêu thích&quot;);&#10;        } else {&#10;            showMessage(&quot;Đã xóa '&quot; + healthTip.getTitle() + &quot;' khỏi danh sách yêu thích&quot;);&#10;        }&#10;&#10;        // Đồng bộ trạng thái yêu thích giữa tất cả các adapter&#10;        syncFavoriteStatusAcrossAdapters(healthTip.getId(), isFavorite);&#10;    }&#10;&#10;    /**&#10;     * Đồng bộ trạng thái yêu thích của một health tip trên tất cả các adapter&#10;     * @param healthTipId ID của health tip cần đồng bộ&#10;     * @param isFavorite Trạng thái yêu thích mới&#10;     */&#10;    private void syncFavoriteStatusAcrossAdapters(String healthTipId, boolean isFavorite) {&#10;        // Đồng bộ cho adapter Latest Tips&#10;        if (latestTipsAdapter != null) {&#10;            latestTipsAdapter.updateFavoriteStatus(healthTipId, isFavorite);&#10;        }&#10;&#10;        // Đồng bộ cho adapter Most Viewed Tips&#10;        if (mostViewedTipsAdapter != null) {&#10;            mostViewedTipsAdapter.updateFavoriteStatus(healthTipId, isFavorite);&#10;        }&#10;&#10;        // Đồng bộ cho adapter Most Liked Tips&#10;        if (mostLikedTipsAdapter != null) {&#10;            mostLikedTipsAdapter.updateFavoriteStatus(healthTipId, isFavorite);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Navigation đến màn hình yêu thích&#10;     * Được gọi khi người dùng muốn xem toàn bộ danh sách yêu thích&#10;     */&#10;    public void navigateToFavorites() {&#10;        // Chuyển tab bottom navigation đến favorites&#10;        if (getActivity() != null) {&#10;            // Trigger bottom navigation để chuyển đến FavoriteFragment&#10;            com.google.android.material.bottomnavigation.BottomNavigationView bottomNav =&#10;                    getActivity().findViewById(R.id.bottom_navigation);&#10;            if (bottomNav != null) {&#10;                bottomNav.setSelectedItemId(R.id.nav_favorites);&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.home;&#13;&#10;&#13;&#10;import android.content.Context;&#13;&#10;import android.os.Bundle;&#13;&#10;import android.view.LayoutInflater;&#13;&#10;import android.view.View;&#13;&#10;import android.view.ViewGroup;&#13;&#10;import android.widget.ImageButton;&#13;&#10;import android.widget.LinearLayout;&#13;&#10;import android.widget.ProgressBar;&#13;&#10;import android.widget.TextView;&#13;&#10;import android.widget.Toast;&#13;&#10;&#13;&#10;import androidx.annotation.NonNull;&#13;&#10;import androidx.annotation.Nullable;&#13;&#10;import androidx.fragment.app.Fragment;&#13;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#13;&#10;import androidx.recyclerview.widget.RecyclerView;&#13;&#10;&#13;&#10;import com.google.android.material.snackbar.Snackbar;&#13;&#10;import com.vhn.doan.R;&#13;&#10;import com.vhn.doan.data.Category;&#13;&#10;import com.vhn.doan.data.HealthTip;&#13;&#10;import com.vhn.doan.data.repository.CategoryRepository;&#13;&#10;import com.vhn.doan.data.repository.CategoryRepositoryImpl;&#13;&#10;import com.vhn.doan.data.repository.HealthTipRepository;&#13;&#10;import com.vhn.doan.data.repository.HealthTipRepositoryImpl;&#13;&#10;import com.vhn.doan.presentation.home.adapter.CategoryAdapter;&#13;&#10;import com.vhn.doan.presentation.home.adapter.HealthTipAdapter;&#13;&#10;import com.vhn.doan.presentation.home.adapter.CategorySkeletonAdapter;&#13;&#10;import com.vhn.doan.presentation.home.adapter.HealthTipSkeletonAdapter;&#13;&#10;import com.vhn.doan.utils.Constants;&#13;&#10;&#13;&#10;import java.util.ArrayList;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;/**&#13;&#10; * HomeFragment hiển thị trang chính của ứng dụng&#13;&#10; * Tuân thủ kiến trúc MVP và sử dụng HomePresenter để xử lý logic&#13;&#10; */&#13;&#10;public class HomeFragment extends Fragment implements HomeView {&#13;&#10;&#13;&#10;    // UI components&#13;&#10;    private RecyclerView recyclerViewCategories;&#13;&#10;    private RecyclerView recyclerViewLatestTips;&#13;&#10;    private RecyclerView recyclerViewMostViewedTips;&#13;&#10;    private RecyclerView recyclerViewMostLikedTips;&#13;&#10;    private ProgressBar progressBar;&#13;&#10;    private LinearLayout layoutOfflineMode;&#13;&#10;    private ImageButton buttonSearch;&#13;&#10;    private TextView textViewSeeAllCategories;&#13;&#10;    private TextView textViewSeeAllLatestTips;&#13;&#10;    private TextView textViewSeeAllMostViewed;&#13;&#10;    private TextView textViewSeeAllMostLiked;&#13;&#10;&#13;&#10;    // Adapters - Real data&#13;&#10;    private CategoryAdapter categoryAdapter;&#13;&#10;    private HealthTipAdapter latestTipsAdapter;&#13;&#10;    private HealthTipAdapter mostViewedTipsAdapter;&#13;&#10;    private HealthTipAdapter mostLikedTipsAdapter;&#13;&#10;&#13;&#10;    // Skeleton Adapters&#13;&#10;    private CategorySkeletonAdapter categorySkeletonAdapter;&#13;&#10;    private HealthTipSkeletonAdapter latestTipsSkeletonAdapter;&#13;&#10;    private HealthTipSkeletonAdapter mostViewedTipsSkeletonAdapter;&#13;&#10;    private HealthTipSkeletonAdapter mostLikedTipsSkeletonAdapter;&#13;&#10;&#13;&#10;    // Presenter&#13;&#10;    private HomePresenter presenter;&#13;&#10;&#13;&#10;    // Loading state flags&#13;&#10;    private boolean isCategoriesLoaded = false;&#13;&#10;    private boolean isLatestTipsLoaded = false;&#13;&#10;    private boolean isMostViewedTipsLoaded = false;&#13;&#10;    private boolean isMostLikedTipsLoaded = false;&#13;&#10;&#13;&#10;    public HomeFragment() {&#13;&#10;        // Constructor mặc định&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Phương thức factory để tạo instance mới của fragment này&#13;&#10;     */&#13;&#10;    public static HomeFragment newInstance() {&#13;&#10;        return new HomeFragment();&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void onCreate(Bundle savedInstanceState) {&#13;&#10;        super.onCreate(savedInstanceState);&#13;&#10;&#13;&#10;        // Khởi tạo repositories&#13;&#10;        CategoryRepository categoryRepository = new CategoryRepositoryImpl();&#13;&#10;        HealthTipRepository healthTipRepository = new HealthTipRepositoryImpl();&#13;&#10;&#13;&#10;        // Khởi tạo presenter&#13;&#10;        presenter = new HomePresenter(requireContext(), categoryRepository, healthTipRepository);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {&#13;&#10;        // Inflate layout cho fragment&#13;&#10;        return inflater.inflate(R.layout.fragment_home, container, false);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#13;&#10;        super.onViewCreated(view, savedInstanceState);&#13;&#10;&#13;&#10;        // Ánh xạ các thành phần UI&#13;&#10;        initViews(view);&#13;&#10;&#13;&#10;        // Thiết lập Layout Managers cho RecyclerViews TRƯỚC&#13;&#10;        setupLayoutManagers();&#13;&#10;&#13;&#10;        // Hiển thị skeleton loading ngay sau khi có Layout Managers&#13;&#10;        setupSkeletonLoading();&#13;&#10;&#13;&#10;        // Khởi tạo real adapters (nhưng chưa set vào RecyclerViews)&#13;&#10;        initializeRealAdapters();&#13;&#10;&#13;&#10;        // Thiết lập các sự kiện click&#13;&#10;        setupClickListeners();&#13;&#10;&#13;&#10;        // Gắn presenter với view và bắt đầu tải dữ liệu&#13;&#10;        presenter.attachView(this);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Thiết lập skeleton loading cho tất cả RecyclerViews&#13;&#10;     */&#13;&#10;    private void setupSkeletonLoading() {&#13;&#10;        // Hiển thị tất cả các tiêu đề và &quot;Xem tất cả&quot; ngay lập tức&#13;&#10;        showAllTitlesAndSeeAll();&#13;&#10;&#13;&#10;        // Thiết lập skeleton adapters&#13;&#10;        setupSkeletonAdapters();&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Hiển thị tất cả tiêu đề và nút &quot;Xem tất cả&quot;&#13;&#10;     */&#13;&#10;    private void showAllTitlesAndSeeAll() {&#13;&#10;        if (textViewCategoriesTitle != null) textViewCategoriesTitle.setVisibility(View.VISIBLE);&#13;&#10;        if (textViewLatestTipsTitle != null) textViewLatestTipsTitle.setVisibility(View.VISIBLE);&#13;&#10;        if (textViewMostViewedTitle != null) textViewMostViewedTitle.setVisibility(View.VISIBLE);&#13;&#10;        if (textViewMostLikedTitle != null) textViewMostLikedTitle.setVisibility(View.VISIBLE);&#13;&#10;&#13;&#10;        if (textViewSeeAllCategories != null) textViewSeeAllCategories.setVisibility(View.VISIBLE);&#13;&#10;        if (textViewSeeAllLatestTips != null) textViewSeeAllLatestTips.setVisibility(View.VISIBLE);&#13;&#10;        if (textViewSeeAllMostViewed != null) textViewSeeAllMostViewed.setVisibility(View.VISIBLE);&#13;&#10;        if (textViewSeeAllMostLiked != null) textViewSeeAllMostLiked.setVisibility(View.VISIBLE);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Thiết lập skeleton adapters cho tất cả RecyclerViews&#13;&#10;     */&#13;&#10;    private void setupSkeletonAdapters() {&#13;&#10;        // Skeleton cho Categories (4 items)&#13;&#10;        categorySkeletonAdapter = new CategorySkeletonAdapter(requireContext(), 4);&#13;&#10;        recyclerViewCategories.setAdapter(categorySkeletonAdapter);&#13;&#10;&#13;&#10;        // Skeleton cho Latest Tips (3 items)&#13;&#10;        latestTipsSkeletonAdapter = new HealthTipSkeletonAdapter(requireContext(), 3);&#13;&#10;        recyclerViewLatestTips.setAdapter(latestTipsSkeletonAdapter);&#13;&#10;&#13;&#10;        // Skeleton cho Most Viewed Tips (3 items)&#13;&#10;        mostViewedTipsSkeletonAdapter = new HealthTipSkeletonAdapter(requireContext(), 3);&#13;&#10;        recyclerViewMostViewedTips.setAdapter(mostViewedTipsSkeletonAdapter);&#13;&#10;&#13;&#10;        // Skeleton cho Most Liked Tips (3 items)&#13;&#10;        mostLikedTipsSkeletonAdapter = new HealthTipSkeletonAdapter(requireContext(), 3);&#13;&#10;        recyclerViewMostLikedTips.setAdapter(mostLikedTipsSkeletonAdapter);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * DEPRECATED: Không còn sử dụng phương thức này&#13;&#10;     * Thay thế bằng setupSkeletonLoading()&#13;&#10;     */&#13;&#10;    @Deprecated&#13;&#10;    private void hideContentViews() {&#13;&#10;        // Phương thức này không còn được sử dụng&#13;&#10;        // Skeleton loading sẽ hiển thị ngay từ đầu&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * DEPRECATED: Không còn sử dụng animation cascade&#13;&#10;     * Data sẽ được thay thế trực tiếp từ skeleton sang real data&#13;&#10;     */&#13;&#10;    @Deprecated&#13;&#10;    private void showContentViewsWithAnimation() {&#13;&#10;        // Phương thức này không còn được sử dụng&#13;&#10;        // Data được cập nhật trực tiếp qua các phương thức show*Data()&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Ánh xạ các thành phần UI từ layout&#13;&#10;     */&#13;&#10;    private void initViews(View view) {&#13;&#10;        // RecyclerViews&#13;&#10;        recyclerViewCategories = view.findViewById(R.id.recyclerViewCategories);&#13;&#10;        recyclerViewLatestTips = view.findViewById(R.id.recyclerViewLatestTips);&#13;&#10;        recyclerViewMostViewedTips = view.findViewById(R.id.recyclerViewMostViewedTips);&#13;&#10;        recyclerViewMostLikedTips = view.findViewById(R.id.recyclerViewMostLikedTips);&#13;&#10;&#13;&#10;        // Các thành phần UI khác&#13;&#10;        progressBar = view.findViewById(R.id.progressBar);&#13;&#10;        layoutOfflineMode = view.findViewById(R.id.layoutOfflineMode);&#13;&#10;        buttonSearch = view.findViewById(R.id.buttonSearch);&#13;&#10;&#13;&#10;        // Buttons &quot;Xem tất cả&quot;&#13;&#10;        textViewSeeAllCategories = view.findViewById(R.id.textViewSeeAllCategories);&#13;&#10;        textViewSeeAllLatestTips = view.findViewById(R.id.textViewSeeAllLatestTips);&#13;&#10;        textViewSeeAllMostViewed = view.findViewById(R.id.textViewSeeAllMostViewed);&#13;&#10;        textViewSeeAllMostLiked = view.findViewById(R.id.textViewSeeAllMostLiked);&#13;&#10;&#13;&#10;        // Thêm các tiêu đề sections&#13;&#10;        initSectionTitles(view);&#13;&#10;    }&#13;&#10;&#13;&#10;    // UI components cho tiêu đề sections&#13;&#10;    private TextView textViewCategoriesTitle;&#13;&#10;    private TextView textViewLatestTipsTitle;&#13;&#10;    private TextView textViewMostViewedTitle;&#13;&#10;    private TextView textViewMostLikedTitle;&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Khởi tạo các tiêu đề sections&#13;&#10;     */&#13;&#10;    private void initSectionTitles(View view) {&#13;&#10;        // Tìm các TextView tiêu đề trong layout&#13;&#10;        textViewCategoriesTitle = view.findViewById(R.id.textViewCategoriesTitle);&#13;&#10;        textViewLatestTipsTitle = view.findViewById(R.id.textViewLatestTipsTitle);&#13;&#10;        textViewMostViewedTitle = view.findViewById(R.id.textViewMostViewedTitle);&#13;&#10;        textViewMostLikedTitle = view.findViewById(R.id.textViewMostLikedTitle);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Thiết lập RecyclerViews với adapters và LayoutManagers&#13;&#10;     */&#13;&#10;    private void setupRecyclerViews() {&#13;&#10;        // Setup Layout Managers TRƯỚC KHI thiết lập skeleton&#13;&#10;        setupLayoutManagers();&#13;&#10;&#13;&#10;        // Khởi tạo real adapters (nhưng chưa set vào RecyclerViews)&#13;&#10;        initializeRealAdapters();&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Thiết lập Layout Managers cho tất cả RecyclerViews&#13;&#10;     */&#13;&#10;    private void setupLayoutManagers() {&#13;&#10;        // Setup Layout Manager cho Categories&#13;&#10;        LinearLayoutManager categoriesLayoutManager = new LinearLayoutManager(&#13;&#10;                requireContext(), RecyclerView.HORIZONTAL, false);&#13;&#10;        recyclerViewCategories.setLayoutManager(categoriesLayoutManager);&#13;&#10;&#13;&#10;        // Setup Layout Manager cho Latest Tips&#13;&#10;        LinearLayoutManager latestTipsLayoutManager = new LinearLayoutManager(&#13;&#10;                requireContext(), RecyclerView.HORIZONTAL, false);&#13;&#10;        recyclerViewLatestTips.setLayoutManager(latestTipsLayoutManager);&#13;&#10;&#13;&#10;        // Setup Layout Manager cho Most Viewed Tips&#13;&#10;        LinearLayoutManager mostViewedLayoutManager = new LinearLayoutManager(&#13;&#10;                requireContext(), RecyclerView.HORIZONTAL, false);&#13;&#10;        recyclerViewMostViewedTips.setLayoutManager(mostViewedLayoutManager);&#13;&#10;&#13;&#10;        // Setup Layout Manager cho Most Liked Tips&#13;&#10;        LinearLayoutManager mostLikedLayoutManager = new LinearLayoutManager(&#13;&#10;                requireContext(), RecyclerView.HORIZONTAL, false);&#13;&#10;        recyclerViewMostLikedTips.setLayoutManager(mostLikedLayoutManager);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Khởi tạo các real adapters (nhưng chưa set vào RecyclerViews)&#13;&#10;     */&#13;&#10;    private void initializeRealAdapters() {&#13;&#10;        // Khởi tạo Category Adapter&#13;&#10;        categoryAdapter = new CategoryAdapter(&#13;&#10;                requireContext(),&#13;&#10;                new ArrayList&lt;&gt;(),&#13;&#10;                new CategoryAdapter.CategoryClickListener() {&#13;&#10;                    @Override&#13;&#10;                    public void onCategoryClick(Category category) {&#13;&#10;                        presenter.onCategorySelected(category);&#13;&#10;                    }&#13;&#10;                });&#13;&#10;&#13;&#10;        // Khởi tạo Latest Tips Adapter&#13;&#10;        latestTipsAdapter = new HealthTipAdapter(&#13;&#10;                requireContext(),&#13;&#10;                new ArrayList&lt;&gt;(),&#13;&#10;                new HealthTipAdapter.HealthTipClickListener() {&#13;&#10;                    @Override&#13;&#10;                    public void onHealthTipClick(HealthTip healthTip) {&#13;&#10;                        presenter.onHealthTipSelected(healthTip);&#13;&#10;                    }&#13;&#10;&#13;&#10;                    @Override&#13;&#10;                    public void onFavoriteClick(HealthTip healthTip, boolean isFavorite) {&#13;&#10;                        handleFavoriteClick(healthTip, isFavorite);&#13;&#10;                    }&#13;&#10;                });&#13;&#10;&#13;&#10;        // Khởi tạo Most Viewed Tips Adapter&#13;&#10;        mostViewedTipsAdapter = new HealthTipAdapter(&#13;&#10;                requireContext(),&#13;&#10;                new ArrayList&lt;&gt;(),&#13;&#10;                new HealthTipAdapter.HealthTipClickListener() {&#13;&#10;                    @Override&#13;&#10;                    public void onHealthTipClick(HealthTip healthTip) {&#13;&#10;                        presenter.onHealthTipSelected(healthTip);&#13;&#10;                    }&#13;&#10;&#13;&#10;                    @Override&#13;&#10;                    public void onFavoriteClick(HealthTip healthTip, boolean isFavorite) {&#13;&#10;                        handleFavoriteClick(healthTip, isFavorite);&#13;&#10;                    }&#13;&#10;                });&#13;&#10;&#13;&#10;        // Khởi tạo Most Liked Tips Adapter&#13;&#10;        mostLikedTipsAdapter = new HealthTipAdapter(&#13;&#10;                requireContext(),&#13;&#10;                new ArrayList&lt;&gt;(),&#13;&#10;                new HealthTipAdapter.HealthTipClickListener() {&#13;&#10;                    @Override&#13;&#10;                    public void onHealthTipClick(HealthTip healthTip) {&#13;&#10;                        presenter.onHealthTipSelected(healthTip);&#13;&#10;                    }&#13;&#10;&#13;&#10;                    @Override&#13;&#10;                    public void onFavoriteClick(HealthTip healthTip, boolean isFavorite) {&#13;&#10;                        handleFavoriteClick(healthTip, isFavorite);&#13;&#10;                    }&#13;&#10;                });&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Thiết lập các sự kiện click&#13;&#10;     */&#13;&#10;    private void setupClickListeners() {&#13;&#10;        // Nút tìm kiếm&#13;&#10;        buttonSearch.setOnClickListener(new View.OnClickListener() {&#13;&#10;            @Override&#13;&#10;            public void onClick(View v) {&#13;&#10;                presenter.searchHealthTips(&quot;&quot;);&#13;&#10;            }&#13;&#10;        });&#13;&#10;&#13;&#10;        // Xem tất cả danh mục&#13;&#10;        textViewSeeAllCategories.setOnClickListener(new View.OnClickListener() {&#13;&#10;            @Override&#13;&#10;            public void onClick(View v) {&#13;&#10;                showMessage(&quot;Xem tất cả danh mục&quot;);&#13;&#10;                // Chức năng sẽ được triển khai sau&#13;&#10;            }&#13;&#10;        });&#13;&#10;&#13;&#10;        // Xem tất cả mẹo mới nhất&#13;&#10;        textViewSeeAllLatestTips.setOnClickListener(new View.OnClickListener() {&#13;&#10;            @Override&#13;&#10;            public void onClick(View v) {&#13;&#10;                showMessage(&quot;Xem tất cả mẹo mới nhất&quot;);&#13;&#10;                // Chức năng sẽ được triển khai sau&#13;&#10;            }&#13;&#10;        });&#13;&#10;&#13;&#10;        // Xem tất cả mẹo xem nhiều nhất&#13;&#10;        textViewSeeAllMostViewed.setOnClickListener(new View.OnClickListener() {&#13;&#10;            @Override&#13;&#10;            public void onClick(View v) {&#13;&#10;                showMessage(&quot;Xem tất cả mẹo xem nhiều nhất&quot;);&#13;&#10;                // Chức năng sẽ được triển khai sau&#13;&#10;            }&#13;&#10;        });&#13;&#10;&#13;&#10;        // Xem tất cả mẹo được yêu thích nhất&#13;&#10;        textViewSeeAllMostLiked.setOnClickListener(new View.OnClickListener() {&#13;&#10;            @Override&#13;&#10;            public void onClick(View v) {&#13;&#10;                showMessage(&quot;Xem tất cả mẹo được yêu thích nhất&quot;);&#13;&#10;                // Chức năng sẽ được triển khai sau&#13;&#10;            }&#13;&#10;        });&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void onResume() {&#13;&#10;        super.onResume();&#13;&#10;        presenter.start(); // Tải dữ liệu khi Fragment được hiển thị&#13;&#10;&#13;&#10;        // Lắng nghe thay đổi realtime từ Firebase&#13;&#10;        presenter.listenToCategories();&#13;&#10;        presenter.listenToLatestHealthTips();&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void onPause() {&#13;&#10;        super.onPause();&#13;&#10;        presenter.stop(); // Dừng lắng nghe khi Fragment không được hiển thị&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void onDestroy() {&#13;&#10;        super.onDestroy();&#13;&#10;        presenter.detachView(); // Tách View khỏi Presenter&#13;&#10;    }&#13;&#10;&#13;&#10;    // Triển khai các phương thức của HomeView với skeleton loading&#13;&#10;    @Override&#13;&#10;    public void showCategories(List&lt;Category&gt; categories) {&#13;&#10;        // Thay thế skeleton adapter bằng real adapter với data&#13;&#10;        if (!isCategoriesLoaded) {&#13;&#10;            recyclerViewCategories.setAdapter(categoryAdapter);&#13;&#10;            isCategoriesLoaded = true;&#13;&#10;        }&#13;&#10;        categoryAdapter.updateCategories(categories);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void showLatestHealthTips(List&lt;HealthTip&gt; healthTips) {&#13;&#10;        // Thay thế skeleton adapter bằng real adapter với data&#13;&#10;        if (!isLatestTipsLoaded) {&#13;&#10;            recyclerViewLatestTips.setAdapter(latestTipsAdapter);&#13;&#10;            isLatestTipsLoaded = true;&#13;&#10;        }&#13;&#10;        latestTipsAdapter.updateHealthTips(healthTips);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void showMostViewedHealthTips(List&lt;HealthTip&gt; healthTips) {&#13;&#10;        // Thay thế skeleton adapter bằng real adapter với data&#13;&#10;        if (!isMostViewedTipsLoaded) {&#13;&#10;            recyclerViewMostViewedTips.setAdapter(mostViewedTipsAdapter);&#13;&#10;            isMostViewedTipsLoaded = true;&#13;&#10;        }&#13;&#10;        mostViewedTipsAdapter.updateHealthTips(healthTips);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void showMostLikedHealthTips(List&lt;HealthTip&gt; healthTips) {&#13;&#10;        // Thay thế skeleton adapter bằng real adapter với data&#13;&#10;        if (!isMostLikedTipsLoaded) {&#13;&#10;            recyclerViewMostLikedTips.setAdapter(mostLikedTipsAdapter);&#13;&#10;            isMostLikedTipsLoaded = true;&#13;&#10;        }&#13;&#10;        mostLikedTipsAdapter.updateHealthTips(healthTips);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * DEPRECATED: Không còn sử dụng animation cascade&#13;&#10;     * Data được thay thế trực tiếp từ skeleton sang real data&#13;&#10;     */&#13;&#10;    @Deprecated&#13;&#10;    private void checkAndShowContentAnimation() {&#13;&#10;        // Không còn cần thiết với skeleton loading&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * DEPRECATED: Các phương thức kiểm tra data không còn cần thiết&#13;&#10;     */&#13;&#10;    @Deprecated&#13;&#10;    private boolean hasCategories() { return false; }&#13;&#10;    @Deprecated&#13;&#10;    private boolean hasLatestTips() { return false; }&#13;&#10;    @Deprecated&#13;&#10;    private boolean hasMostViewedTips() { return false; }&#13;&#10;    @Deprecated&#13;&#10;    private boolean hasMostLikedTips() { return false; }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void showOfflineMode() {&#13;&#10;        layoutOfflineMode.setVisibility(View.VISIBLE);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void navigateToCategoryDetail(Category category) {&#13;&#10;        if (category != null &amp;&amp; category.getId() != null) {&#13;&#10;            // Tạo Intent để chuyển đến CategoryDetailListActivity&#13;&#10;            android.content.Intent intent = new android.content.Intent(requireContext(), com.vhn.doan.presentation.category.detail.CategoryDetailListActivity.class);&#13;&#10;&#13;&#10;            // Truyền ID của danh mục&#13;&#10;            intent.putExtra(Constants.CATEGORY_ID_KEY, category.getId());&#13;&#10;&#13;&#10;            // Khởi chạy Activity mới&#13;&#10;            startActivity(intent);&#13;&#10;        } else {&#13;&#10;            showError(&quot;Không thể mở chi tiết danh mục do thiếu thông tin&quot;);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void navigateToHealthTipDetail(HealthTip healthTip) {&#13;&#10;        if (healthTip != null &amp;&amp; healthTip.getId() != null) {&#13;&#10;            // Tạo Intent để chuyển đến HealthTipDetailActivity&#13;&#10;            android.content.Intent intent = com.vhn.doan.presentation.healthtip.detail.HealthTipDetailActivity.createIntent(&#13;&#10;                    requireContext(),&#13;&#10;                    healthTip.getId()&#13;&#10;            );&#13;&#10;&#13;&#10;            // Khởi chạy Activity mới&#13;&#10;            startActivity(intent);&#13;&#10;        } else {&#13;&#10;            showError(&quot;Không thể mở chi tiết mẹo sức khỏe do thiếu thông tin&quot;);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void navigateToSearch() {&#13;&#10;        // Triển khai chức năng chuyển đến trang tìm kiếm&#13;&#10;        showMessage(&quot;Chuyển đến trang tìm kiếm&quot;);&#13;&#10;        // Sẽ triển khai sau khi có SearchActivity/Fragment&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void showLoading(boolean loading) {&#13;&#10;        // Với skeleton loading, không cần hiển thị progress bar chính&#13;&#10;        // Skeleton đã thay thế loading indicator&#13;&#10;        if (progressBar != null) {&#13;&#10;            progressBar.setVisibility(View.GONE);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void showMessage(String message) {&#13;&#10;        if (isAdded() &amp;&amp; getView() != null) {&#13;&#10;            Toast.makeText(requireContext(), message, Toast.LENGTH_SHORT).show();&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void showError(String errorMessage) {&#13;&#10;        if (isAdded() &amp;&amp; getView() != null) {&#13;&#10;            Snackbar.make(getView(), errorMessage, Snackbar.LENGTH_LONG).show();&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Xử lý khi người dùng click vào nút yêu thích&#13;&#10;     * Đồng bộ trạng thái yêu thích giữa tất cả các adapter&#13;&#10;     */&#13;&#10;    private void handleFavoriteClick(HealthTip healthTip, boolean isFavorite) {&#13;&#10;        if (healthTip == null || healthTip.getId() == null) {&#13;&#10;            showError(&quot;Không thể cập nhật trạng thái yêu thích&quot;);&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        // Hiển thị thông báo cho người dùng&#13;&#10;        if (isFavorite) {&#13;&#10;            showMessage(&quot;Đã thêm '&quot; + healthTip.getTitle() + &quot;' vào danh sách yêu thích&quot;);&#13;&#10;        } else {&#13;&#10;            showMessage(&quot;Đã xóa '&quot; + healthTip.getTitle() + &quot;' khỏi danh sách yêu thích&quot;);&#13;&#10;        }&#13;&#10;&#13;&#10;        // Đồng bộ trạng thái yêu thích giữa tất cả các adapter&#13;&#10;        syncFavoriteStatusAcrossAdapters(healthTip.getId(), isFavorite);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Đồng bộ trạng thái yêu thích của một health tip trên tất cả các adapter&#13;&#10;     * @param healthTipId ID của health tip cần đồng bộ&#13;&#10;     * @param isFavorite Trạng thái yêu thích mới&#13;&#10;     */&#13;&#10;    private void syncFavoriteStatusAcrossAdapters(String healthTipId, boolean isFavorite) {&#13;&#10;        // Đồng bộ cho adapter Latest Tips&#13;&#10;        if (latestTipsAdapter != null) {&#13;&#10;            latestTipsAdapter.updateFavoriteStatus(healthTipId, isFavorite);&#13;&#10;        }&#13;&#10;&#13;&#10;        // Đồng bộ cho adapter Most Viewed Tips&#13;&#10;        if (mostViewedTipsAdapter != null) {&#13;&#10;            mostViewedTipsAdapter.updateFavoriteStatus(healthTipId, isFavorite);&#13;&#10;        }&#13;&#10;&#13;&#10;        // Đồng bộ cho adapter Most Liked Tips&#13;&#10;        if (mostLikedTipsAdapter != null) {&#13;&#10;            mostLikedTipsAdapter.updateFavoriteStatus(healthTipId, isFavorite);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Navigation đến màn hình profile (nơi chứa chức năng yêu thích)&#13;&#10;     * Được gọi khi người dùng muốn xem toàn bộ danh sách yêu thích&#13;&#10;     */&#13;&#10;    public void navigateToFavorites() {&#13;&#10;        // Chuyển tab bottom navigation đến profile (nơi chứa chức năng yêu thích)&#13;&#10;        if (getActivity() != null) {&#13;&#10;            // Trigger bottom navigation để chuyển đến ProfileFragment&#13;&#10;            com.google.android.material.bottomnavigation.BottomNavigationView bottomNav =&#13;&#10;                    getActivity().findViewById(R.id.bottom_navigation);&#13;&#10;            if (bottomNav != null) {&#13;&#10;                bottomNav.setSelectedItemId(R.id.nav_profile);&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/profile/FavoritePostsFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/profile/FavoritePostsFragment.java" />
              <option name="originalContent" value="package com.vhn.doan.presentation.profile;&#10;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.ProgressBar;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.constraintlayout.widget.ConstraintLayout;&#10;import androidx.recyclerview.widget.GridLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;&#10;&#10;import com.google.android.material.snackbar.Snackbar;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.data.HealthTip;&#10;import com.vhn.doan.data.repository.FavoriteRepositoryImpl;&#10;import com.vhn.doan.data.repository.HealthTipRepositoryImpl;&#10;import com.vhn.doan.presentation.base.BaseFragment;&#10;import com.vhn.doan.presentation.profile.FavoritePresenter;&#10;import com.vhn.doan.presentation.profile.FavoriteView;&#10;import com.vhn.doan.presentation.profile.adapter.GridFavoriteAdapter;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;/**&#10; * Fragment hiển thị danh sách bài viết yêu thích của người dùng&#10; * Sử dụng GridLayoutManager để hiển thị dạng lưới&#10; */&#10;public class FavoritePostsFragment extends BaseFragment implements FavoriteView {&#10;&#10;    private RecyclerView recyclerView;&#10;    private ProgressBar progressBar;&#10;    private ConstraintLayout emptyStateLayout;&#10;    private SwipeRefreshLayout swipeRefreshLayout;&#10;    private TextView emptyStateMessage;&#10;&#10;    // MVP Components&#10;    private FavoritePresenter presenter;&#10;    private GridFavoriteAdapter adapter;&#10;&#10;    public static FavoritePostsFragment newInstance() {&#10;        return new FavoritePostsFragment();&#10;    }&#10;&#10;    @Override&#10;    public void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;&#10;        // Khởi tạo presenter với repositories&#10;        presenter = new FavoritePresenter(&#10;                requireContext(),&#10;                new FavoriteRepositoryImpl(),&#10;                new HealthTipRepositoryImpl()&#10;        );&#10;    }&#10;&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,&#10;                             Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_grid_content, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;&#10;        // Gắn presenter với view&#10;        presenter.attachView(this);&#10;&#10;        // Thiết lập SwipeRefreshLayout nếu có&#10;        setupSwipeRefresh();&#10;    }&#10;&#10;    @Override&#10;    protected void initViews(View view) {&#10;        recyclerView = view.findViewById(R.id.recyclerView);&#10;&#10;        // Tìm các view khác nếu có&#10;        progressBar = view.findViewById(R.id.progressBar);&#10;        emptyStateLayout = view.findViewById(R.id.emptyStateLayout);&#10;        swipeRefreshLayout = view.findViewById(R.id.swipeRefreshLayout);&#10;&#10;        // Nếu không có empty state trong layout, tạm thời bỏ qua&#10;        if (emptyStateLayout != null) {&#10;            emptyStateMessage = emptyStateLayout.findViewById(R.id.emptyStateMessage);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    protected void setupListeners() {&#10;        // Thiết lập listener nếu cần&#10;    }&#10;&#10;    private void setupSwipeRefresh() {&#10;        if (swipeRefreshLayout != null) {&#10;            swipeRefreshLayout.setOnRefreshListener(this::refreshFavorites);&#10;&#10;            // Thiết lập màu sắc cho progress indicator&#10;            swipeRefreshLayout.setColorSchemeResources(&#10;                    R.color.primary_button_start,&#10;                    R.color.secondary_button_start,&#10;                    R.color.accent&#10;            );&#10;        }&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        // Sử dụng GridLayoutManager với 3 cột&#10;        GridLayoutManager layoutManager = new GridLayoutManager(getContext(), 3);&#10;        recyclerView.setLayoutManager(layoutManager);&#10;&#10;        // Tạo adapter mới với danh sách rỗng&#10;        adapter = new GridFavoriteAdapter(&#10;                requireContext(),&#10;                new ArrayList&lt;&gt;(),&#10;                new GridFavoriteAdapter.OnFavoriteItemClickListener() {&#10;                    @Override&#10;                    public void onItemClick(HealthTip healthTip) {&#10;                        presenter.onHealthTipSelected(healthTip);&#10;                    }&#10;&#10;                    @Override&#10;                    public void onRemoveFavorite(HealthTip healthTip) {&#10;                        presenter.removeFromFavorites(healthTip);&#10;                    }&#10;                }&#10;        );&#10;&#10;        recyclerView.setAdapter(adapter);&#10;    }&#10;&#10;    private void refreshFavorites() {&#10;        if (presenter != null) {&#10;            presenter.refreshFavorites();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onResume() {&#10;        super.onResume();&#10;        // Tải lại dữ liệu khi fragment được hiển thị&#10;        if (presenter != null) {&#10;            presenter.start();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onDestroy() {&#10;        super.onDestroy();&#10;        if (presenter != null) {&#10;            presenter.detachView();&#10;        }&#10;    }&#10;&#10;    // Triển khai các phương thức của FavoriteView&#10;&#10;    @Override&#10;    public void showFavoriteHealthTips(List&lt;HealthTip&gt; favoriteHealthTips) {&#10;        if (recyclerView != null) {&#10;            recyclerView.setVisibility(View.VISIBLE);&#10;        }&#10;&#10;        if (emptyStateLayout != null) {&#10;            emptyStateLayout.setVisibility(View.GONE);&#10;        }&#10;&#10;        // Cập nhật adapter với danh sách mới&#10;        if (adapter == null) {&#10;            setupRecyclerView(); // Khởi tạo adapter nếu chưa có&#10;        }&#10;&#10;        adapter.updateData(favoriteHealthTips);&#10;    }&#10;&#10;    @Override&#10;    public void showEmptyFavorites() {&#10;        if (recyclerView != null) {&#10;            recyclerView.setVisibility(View.GONE);&#10;        }&#10;&#10;        if (emptyStateLayout != null) {&#10;            emptyStateLayout.setVisibility(View.VISIBLE);&#10;&#10;            if (emptyStateMessage != null) {&#10;                emptyStateMessage.setText(&quot;Bạn chưa có bài viết yêu thích nào&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void navigateToHealthTipDetail(HealthTip healthTip) {&#10;        if (healthTip != null &amp;&amp; healthTip.getId() != null) {&#10;            // Tạo Intent để chuyển đến HealthTipDetailActivity&#10;            android.content.Intent intent = com.vhn.doan.presentation.healthtip.detail.HealthTipDetailActivity.createIntent(&#10;                    requireContext(),&#10;                    healthTip.getId()&#10;            );&#10;            startActivity(intent);&#10;        } else {&#10;            showError(&quot;Không thể mở chi tiết mẹo sức khỏe do thiếu thông tin&quot;);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showRemovedFromFavorites(String healthTipTitle) {&#10;        showMessage(&quot;Đã xóa '&quot; + healthTipTitle + &quot;' khỏi danh sách yêu thích&quot;);&#10;    }&#10;&#10;    @Override&#10;    public void refreshFavoritesList() {&#10;        if (presenter != null) {&#10;            presenter.refreshFavorites();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showLoading(boolean loading) {&#10;        if (progressBar != null) {&#10;            progressBar.setVisibility(loading ? View.VISIBLE : View.GONE);&#10;        }&#10;&#10;        if (swipeRefreshLayout != null) {&#10;            swipeRefreshLayout.setRefreshing(loading);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showMessage(String message) {&#10;        if (isAdded() &amp;&amp; getContext() != null) {&#10;            Toast.makeText(requireContext(), message, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showError(String errorMessage) {&#10;        if (isAdded() &amp;&amp; getView() != null) {&#10;            Snackbar.make(getView(), errorMessage, Snackbar.LENGTH_LONG).show();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.profile;&#10;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.ProgressBar;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.constraintlayout.widget.ConstraintLayout;&#10;import androidx.recyclerview.widget.GridLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;&#10;&#10;import com.google.android.material.snackbar.Snackbar;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.data.HealthTip;&#10;import com.vhn.doan.data.repository.FavoriteRepositoryImpl;&#10;import com.vhn.doan.data.repository.HealthTipRepositoryImpl;&#10;import com.vhn.doan.presentation.base.BaseFragment;&#10;import com.vhn.doan.presentation.profile.FavoritePresenter;&#10;import com.vhn.doan.presentation.profile.FavoriteView;&#10;import com.vhn.doan.presentation.profile.adapter.GridFavoriteAdapter;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;/**&#10; * Fragment hiển thị danh sách bài viết yêu thích của người dùng&#10; * Sử dụng GridLayoutManager để hiển thị dạng lưới&#10; */&#10;public class FavoritePostsFragment extends BaseFragment implements FavoriteView {&#10;&#10;    private RecyclerView recyclerView;&#10;    private ProgressBar progressBar;&#10;    private ConstraintLayout emptyStateLayout;&#10;    private SwipeRefreshLayout swipeRefreshLayout;&#10;    private TextView emptyStateMessage;&#10;&#10;    // MVP Components&#10;    private FavoritePresenter presenter;&#10;    private GridFavoriteAdapter adapter;&#10;&#10;    public static FavoritePostsFragment newInstance() {&#10;        return new FavoritePostsFragment();&#10;    }&#10;&#10;    @Override&#10;    public void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;&#10;        // Khởi tạo presenter với repositories&#10;        presenter = new FavoritePresenter(&#10;                requireContext(),&#10;                new FavoriteRepositoryImpl(),&#10;                new HealthTipRepositoryImpl()&#10;        );&#10;    }&#10;&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,&#10;                             Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_grid_content, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;&#10;        // Gắn presenter với view&#10;        presenter.attachView(this);&#10;&#10;        // Thiết lập SwipeRefreshLayout nếu có&#10;        setupSwipeRefresh();&#10;    }&#10;&#10;    @Override&#10;    protected void initViews(View view) {&#10;        recyclerView = view.findViewById(R.id.recyclerView);&#10;&#10;        // Tìm các view khác nếu có&#10;        progressBar = view.findViewById(R.id.progressBar);&#10;        emptyStateLayout = view.findViewById(R.id.emptyStateLayout);&#10;        swipeRefreshLayout = view.findViewById(R.id.swipeRefreshLayout);&#10;&#10;        // Nếu không có empty state trong layout, tạm thời bỏ qua&#10;        if (emptyStateLayout != null) {&#10;            emptyStateMessage = emptyStateLayout.findViewById(R.id.emptyStateMessage);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    protected void setupListeners() {&#10;        // Thiết lập listener nếu cần&#10;    }&#10;&#10;    private void setupSwipeRefresh() {&#10;        if (swipeRefreshLayout != null) {&#10;            swipeRefreshLayout.setOnRefreshListener(this::refreshFavorites);&#10;&#10;            // Thiết lập màu sắc cho progress indicator&#10;            swipeRefreshLayout.setColorSchemeResources(&#10;                    R.color.primary_button_start,&#10;                    R.color.secondary_button_start,&#10;                    R.color.accent&#10;            );&#10;        }&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        // Sử dụng GridLayoutManager với 3 cột&#10;        GridLayoutManager layoutManager = new GridLayoutManager(getContext(), 3);&#10;        recyclerView.setLayoutManager(layoutManager);&#10;&#10;        // Tạo adapter mới với danh sách rỗng&#10;        adapter = new GridFavoriteAdapter(&#10;                requireContext(),&#10;                new ArrayList&lt;&gt;(),&#10;                new GridFavoriteAdapter.OnFavoriteItemClickListener() {&#10;                    @Override&#10;                    public void onItemClick(HealthTip healthTip) {&#10;                        presenter.onHealthTipSelected(healthTip);&#10;                    }&#10;&#10;                    @Override&#10;                    public void onRemoveFavorite(HealthTip healthTip) {&#10;                        presenter.removeFromFavorites(healthTip);&#10;                    }&#10;                }&#10;        );&#10;&#10;        recyclerView.setAdapter(adapter);&#10;    }&#10;&#10;    private void refreshFavorites() {&#10;        if (presenter != null) {&#10;            presenter.refreshFavorites();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onResume() {&#10;        super.onResume();&#10;        // Tải lại dữ liệu khi fragment được hiển thị&#10;        if (presenter != null) {&#10;            presenter.start();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onDestroy() {&#10;        super.onDestroy();&#10;        if (presenter != null) {&#10;            presenter.detachView();&#10;        }&#10;    }&#10;&#10;    // Triển khai các phương thức của FavoriteView&#10;&#10;    @Override&#10;    public void showFavoriteHealthTips(List&lt;HealthTip&gt; favoriteHealthTips) {&#10;        if (recyclerView != null) {&#10;            recyclerView.setVisibility(View.VISIBLE);&#10;        }&#10;&#10;        if (emptyStateLayout != null) {&#10;            emptyStateLayout.setVisibility(View.GONE);&#10;        }&#10;&#10;        // Cập nhật adapter với danh sách mới&#10;        if (adapter == null) {&#10;            setupRecyclerView(); // Khởi tạo adapter nếu chưa có&#10;        }&#10;&#10;        adapter.updateData(favoriteHealthTips);&#10;    }&#10;&#10;    @Override&#10;    public void showEmptyFavorites() {&#10;        if (recyclerView != null) {&#10;            recyclerView.setVisibility(View.GONE);&#10;        }&#10;&#10;        if (emptyStateLayout != null) {&#10;            emptyStateLayout.setVisibility(View.VISIBLE);&#10;&#10;            if (emptyStateMessage != null) {&#10;                emptyStateMessage.setText(&quot;Bạn chưa có bài viết yêu thích nào&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void navigateToHealthTipDetail(HealthTip healthTip) {&#10;        if (healthTip != null &amp;&amp; healthTip.getId() != null) {&#10;            // Tạo Intent để chuyển đến HealthTipDetailActivity&#10;            android.content.Intent intent = com.vhn.doan.presentation.healthtip.detail.HealthTipDetailActivity.createIntent(&#10;                    requireContext(),&#10;                    healthTip.getId()&#10;            );&#10;            startActivity(intent);&#10;        } else {&#10;            showError(&quot;Không thể mở chi tiết mẹo sức khỏe do thiếu thông tin&quot;);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showRemoveFavoriteSuccess(String message) {&#10;        showMessage(message);&#10;    }&#10;&#10;    @Override&#10;    public void showRemoveFavoriteError(String message) {&#10;        showError(message);&#10;    }&#10;&#10;    @Override&#10;    public void showLoading() {&#10;        if (progressBar != null) {&#10;            progressBar.setVisibility(View.VISIBLE);&#10;        }&#10;&#10;        if (swipeRefreshLayout != null) {&#10;            swipeRefreshLayout.setRefreshing(true);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void hideLoading() {&#10;        if (progressBar != null) {&#10;            progressBar.setVisibility(View.GONE);&#10;        }&#10;&#10;        if (swipeRefreshLayout != null) {&#10;            swipeRefreshLayout.setRefreshing(false);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showMessage(String message) {&#10;        if (isAdded() &amp;&amp; getContext() != null) {&#10;            Toast.makeText(requireContext(), message, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showError(String errorMessage) {&#10;        if (isAdded() &amp;&amp; getView() != null) {&#10;            Snackbar.make(getView(), errorMessage, Snackbar.LENGTH_LONG).show();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/profile/FavoritePresenter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/profile/FavoritePresenter.java" />
              <option name="originalContent" value="package com.vhn.doan.presentation.profile;&#10;&#10;import android.content.Context;&#10;&#10;import com.vhn.doan.data.HealthTip;&#10;import com.vhn.doan.data.repository.FavoriteRepository;&#10;import com.vhn.doan.data.repository.HealthTipRepository;&#10;import com.vhn.doan.presentation.base.BasePresenter;&#10;&#10;import java.util.List;&#10;&#10;/**&#10; * Presenter cho màn hình danh sách bài viết yêu thích&#10; * Xử lý logic nghiệp vụ và giao tiếp giữa View và Repository&#10; */&#10;public class FavoritePresenter extends BasePresenter&lt;FavoriteView&gt; {&#10;&#10;    private final Context context;&#10;    private final FavoriteRepository favoriteRepository;&#10;    private final HealthTipRepository healthTipRepository;&#10;&#10;    public FavoritePresenter(Context context,&#10;                           FavoriteRepository favoriteRepository,&#10;                           HealthTipRepository healthTipRepository) {&#10;        this.context = context;&#10;        this.favoriteRepository = favoriteRepository;&#10;        this.healthTipRepository = healthTipRepository;&#10;    }&#10;&#10;    /**&#10;     * Khởi động presenter và tải dữ liệu ban đầu&#10;     */&#10;    public void start() {&#10;        loadFavoriteHealthTips();&#10;    }&#10;&#10;    /**&#10;     * Tải danh sách bài viết yêu thích&#10;     */&#10;    public void loadFavoriteHealthTips() {&#10;        if (getView() != null) {&#10;            getView().showLoading();&#10;        }&#10;&#10;        // TODO: Implement loading favorites from repository&#10;        favoriteRepository.getFavoriteHealthTips(new FavoriteRepository.OnDataLoadedListener&lt;List&lt;HealthTip&gt;&gt;() {&#10;            @Override&#10;            public void onSuccess(List&lt;HealthTip&gt; favoriteHealthTips) {&#10;                if (getView() != null) {&#10;                    getView().hideLoading();&#10;&#10;                    if (favoriteHealthTips != null &amp;&amp; !favoriteHealthTips.isEmpty()) {&#10;                        getView().showFavoriteHealthTips(favoriteHealthTips);&#10;                    } else {&#10;                        getView().showEmptyFavorites();&#10;                    }&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                if (getView() != null) {&#10;                    getView().hideLoading();&#10;                    getView().showError(&quot;Không thể tải danh sách yêu thích: &quot; + error);&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    /**&#10;     * Làm mới danh sách bài viết yêu thích&#10;     */&#10;    public void refreshFavorites() {&#10;        loadFavoriteHealthTips();&#10;    }&#10;&#10;    /**&#10;     * Xử lý khi người dùng chọn một bài viết&#10;     * @param healthTip bài viết được chọn&#10;     */&#10;    public void onHealthTipSelected(HealthTip healthTip) {&#10;        if (getView() != null &amp;&amp; healthTip != null) {&#10;            getView().navigateToHealthTipDetail(healthTip);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Xóa bài viết khỏi danh sách yêu thích&#10;     * @param healthTip bài viết cần xóa&#10;     */&#10;    public void removeFromFavorites(HealthTip healthTip) {&#10;        if (healthTip == null) return;&#10;&#10;        favoriteRepository.removeFromFavorites(healthTip.getId(), new FavoriteRepository.OnOperationCompleteListener() {&#10;            @Override&#10;            public void onSuccess() {&#10;                if (getView() != null) {&#10;                    getView().showRemoveFavoriteSuccess(&quot;Đã xóa khỏi danh sách yêu thích&quot;);&#10;                    // Tải lại danh sách sau khi xóa&#10;                    loadFavoriteHealthTips();&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                if (getView() != null) {&#10;                    getView().showRemoveFavoriteError(&quot;Không thể xóa khỏi danh sách yêu thích: &quot; + error);&#10;                }&#10;            }&#10;        });&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.profile;&#10;&#10;import android.content.Context;&#10;&#10;import com.vhn.doan.data.HealthTip;&#10;import com.vhn.doan.data.repository.FavoriteRepository;&#10;import com.vhn.doan.data.repository.HealthTipRepository;&#10;import com.vhn.doan.presentation.base.BasePresenter;&#10;import com.vhn.doan.utils.UserSessionManager;&#10;&#10;import java.util.List;&#10;&#10;/**&#10; * Presenter cho màn hình danh sách bài viết yêu thích&#10; * Xử lý logic nghiệp vụ và giao tiếp giữa View và Repository&#10; */&#10;public class FavoritePresenter extends BasePresenter&lt;FavoriteView&gt; {&#10;&#10;    private final Context context;&#10;    private final FavoriteRepository favoriteRepository;&#10;    private final HealthTipRepository healthTipRepository;&#10;    private final UserSessionManager userSessionManager;&#10;&#10;    public FavoritePresenter(Context context,&#10;                           FavoriteRepository favoriteRepository,&#10;                           HealthTipRepository healthTipRepository) {&#10;        this.context = context;&#10;        this.favoriteRepository = favoriteRepository;&#10;        this.healthTipRepository = healthTipRepository;&#10;        this.userSessionManager = new UserSessionManager(context);&#10;    }&#10;&#10;    /**&#10;     * Khởi động presenter và tải dữ liệu ban đầu&#10;     */&#10;    public void start() {&#10;        loadFavoriteHealthTips();&#10;    }&#10;&#10;    /**&#10;     * Tải danh sách bài viết yêu thích&#10;     */&#10;    public void loadFavoriteHealthTips() {&#10;        if (getView() != null) {&#10;            getView().showLoading();&#10;        }&#10;        &#10;        String userId = userSessionManager.getCurrentUserId();&#10;        if (userId == null) {&#10;            if (getView() != null) {&#10;                getView().hideLoading();&#10;                getView().showError(&quot;Vui lòng đăng nhập để xem danh sách yêu thích&quot;);&#10;            }&#10;            return;&#10;        }&#10;&#10;        favoriteRepository.getFavoriteHealthTips(userId, new FavoriteRepository.FavoriteListCallback() {&#10;            @Override&#10;            public void onSuccess(List&lt;HealthTip&gt; favoriteHealthTips) {&#10;                if (getView() != null) {&#10;                    getView().hideLoading();&#10;&#10;                    if (favoriteHealthTips != null &amp;&amp; !favoriteHealthTips.isEmpty()) {&#10;                        getView().showFavoriteHealthTips(favoriteHealthTips);&#10;                    } else {&#10;                        getView().showEmptyFavorites();&#10;                    }&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                if (getView() != null) {&#10;                    getView().hideLoading();&#10;                    getView().showError(&quot;Không thể tải danh sách yêu thích: &quot; + error);&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    /**&#10;     * Làm mới danh sách bài viết yêu thích&#10;     */&#10;    public void refreshFavorites() {&#10;        loadFavoriteHealthTips();&#10;    }&#10;&#10;    /**&#10;     * Xử lý khi người dùng chọn một bài viết&#10;     * @param healthTip bài viết được chọn&#10;     */&#10;    public void onHealthTipSelected(HealthTip healthTip) {&#10;        if (getView() != null &amp;&amp; healthTip != null) {&#10;            getView().navigateToHealthTipDetail(healthTip);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Xóa bài viết khỏi danh sách yêu thích&#10;     * @param healthTip bài viết cần xóa&#10;     */&#10;    public void removeFromFavorites(HealthTip healthTip) {&#10;        if (healthTip == null) return;&#10;        &#10;        String userId = userSessionManager.getCurrentUserId();&#10;        if (userId == null) {&#10;            if (getView() != null) {&#10;                getView().showRemoveFavoriteError(&quot;Vui lòng đăng nhập để thực hiện thao tác này&quot;);&#10;            }&#10;            return;&#10;        }&#10;        &#10;        favoriteRepository.removeFromFavorites(userId, healthTip.getId(), new FavoriteRepository.FavoriteActionCallback() {&#10;            @Override&#10;            public void onSuccess() {&#10;                if (getView() != null) {&#10;                    getView().showRemoveFavoriteSuccess(&quot;Đã xóa khỏi danh sách yêu thích&quot;);&#10;                    // Tải lại danh sách sau khi xóa&#10;                    loadFavoriteHealthTips();&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                if (getView() != null) {&#10;                    getView().showRemoveFavoriteError(&quot;Không thể xóa khỏi danh sách yêu thích: &quot; + error);&#10;                }&#10;            }&#10;        });&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/profile/FavoriteView.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/profile/FavoriteView.java" />
              <option name="originalContent" value="package com.vhn.doan.presentation.profile;&#10;&#10;import com.vhn.doan.data.HealthTip;&#10;import com.vhn.doan.presentation.base.BaseView;&#10;&#10;import java.util.List;&#10;&#10;/**&#10; * Interface định nghĩa các phương thức view cho màn hình danh sách bài viết yêu thích&#10; */&#10;public interface FavoriteView extends BaseView {&#10;&#10;    /**&#10;     * Hiển thị danh sách bài viết yêu thích&#10;     * @param favoriteHealthTips danh sách bài viết yêu thích&#10;     */&#10;    void showFavoriteHealthTips(List&lt;HealthTip&gt; favoriteHealthTips);&#10;&#10;    /**&#10;     * Hiển thị trạng thái khi không có bài viết yêu thích nào&#10;     */&#10;    void showEmptyFavorites();&#10;&#10;    /**&#10;     * Điều hướng đến màn hình chi tiết bài viết&#10;     * @param healthTip bài viết được chọn&#10;     */&#10;    void navigateToHealthTipDetail(HealthTip healthTip);&#10;&#10;    /**&#10;     * Hiển thị thông báo khi xóa khỏi danh sách yêu thích thành công&#10;     * @param message thông báo&#10;     */&#10;    void showRemoveFavoriteSuccess(String message);&#10;&#10;    /**&#10;     * Hiển thị thông báo lỗi khi xóa khỏi danh sách yêu thích thất bại&#10;     * @param message thông báo lỗi&#10;     */&#10;    void showRemoveFavoriteError(String message);&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.profile;&#10;&#10;import com.vhn.doan.data.HealthTip;&#10;import com.vhn.doan.presentation.base.BaseView;&#10;&#10;import java.util.List;&#10;&#10;/**&#10; * Interface định nghĩa các phương thức view cho màn hình danh sách bài viết yêu thích&#10; */&#10;public interface FavoriteView extends BaseView {&#10;    &#10;    /**&#10;     * Hiển thị danh sách bài viết yêu thích&#10;     * @param favoriteHealthTips danh sách bài viết yêu thích&#10;     */&#10;    void showFavoriteHealthTips(List&lt;HealthTip&gt; favoriteHealthTips);&#10;    &#10;    /**&#10;     * Hiển thị trạng thái khi không có bài viết yêu thích nào&#10;     */&#10;    void showEmptyFavorites();&#10;    &#10;    /**&#10;     * Điều hướng đến màn hình chi tiết bài viết&#10;     * @param healthTip bài viết được chọn&#10;     */&#10;    void navigateToHealthTipDetail(HealthTip healthTip);&#10;    &#10;    /**&#10;     * Hiển thị thông báo khi xóa khỏi danh sách yêu thích thành công&#10;     * @param message thông báo&#10;     */&#10;    void showRemoveFavoriteSuccess(String message);&#10;    &#10;    /**&#10;     * Hiển thị thông báo lỗi khi xóa khỏi danh sách yêu thích thất bại&#10;     * @param message thông báo lỗi&#10;     */&#10;    void showRemoveFavoriteError(String message);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/bg_reminder_due.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/bg_reminder_due.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &#10;    &lt;!-- Màu nền nhấn mạnh cho nhắc nhở đã đến giờ --&gt;&#10;    &lt;solid android:color=&quot;#1AFF5722&quot; /&gt;&#10;    &#10;    &lt;!-- Bo góc --&gt;&#10;    &lt;corners android:radius=&quot;8dp&quot; /&gt;&#10;    &#10;    &lt;!-- Đường viền đỏ cam để làm nổi bật --&gt;&#10;    &lt;stroke&#10;        android:width=&quot;2dp&quot;&#10;        android:color=&quot;@color/status_due&quot; /&gt;&#10;        &#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_theme_toggle.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_theme_toggle.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;?attr/colorControlNormal&quot;&#10;        android:pathData=&quot;M12,3c-4.97,0 -9,4.03 -9,9s4.03,9 9,9s9,-4.03 9,-9c0,-0.46 -0.04,-0.92 -0.1,-1.36c-0.98,1.37 -2.58,2.26 -4.4,2.26c-2.98,0 -5.4,-2.42 -5.4,-5.4c0,-1.81 0.89,-3.42 2.26,-4.4C12.92,3.04 12.46,3 12,3L12,3z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_health_tip_detail.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_health_tip_detail.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;com.vhn.doan.presentation.healthtip.detail.SwipeToDismissLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:id=&quot;@+id/swipeToDismissLayout&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;#80000000&quot;&gt;&#10;&#10;    &lt;!-- Background dimming overlay - sẽ trở nên trong suốt khi kéo xuống --&gt;&#10;    &lt;View&#10;        android:id=&quot;@+id/backgroundOverlay&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:background=&quot;#40000000&quot; /&gt;&#10;&#10;    &lt;androidx.coordinatorlayout.widget.CoordinatorLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:background=&quot;?android:attr/colorBackground&quot;&#10;        tools:context=&quot;.presentation.healthtip.detail.HealthTipDetailActivity&quot;&gt;&#10;&#10;        &lt;!-- Drag handle indicator --&gt;&#10;        &lt;View&#10;            android:id=&quot;@+id/dragHandle&quot;&#10;            android:layout_width=&quot;40dp&quot;&#10;            android:layout_height=&quot;4dp&quot;&#10;            android:layout_gravity=&quot;top|center_horizontal&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:background=&quot;@drawable/drag_handle_background&quot;&#10;            android:elevation=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;com.google.android.material.appbar.AppBarLayout&#10;            android:id=&quot;@+id/appBarLayout&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:fitsSystemWindows=&quot;true&quot;&gt;&#10;&#10;            &lt;com.google.android.material.appbar.CollapsingToolbarLayout&#10;                android:id=&quot;@+id/collapsingToolbarLayout&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;250dp&quot;&#10;                app:contentScrim=&quot;?attr/colorPrimary&quot;&#10;                app:expandedTitleGravity=&quot;bottom|start&quot;&#10;                app:expandedTitleMarginBottom=&quot;16dp&quot;&#10;                app:expandedTitleMarginStart=&quot;16dp&quot;&#10;                app:layout_scrollFlags=&quot;scroll|exitUntilCollapsed&quot;&gt;&#10;&#10;                &lt;ImageView&#10;                    android:id=&quot;@+id/imageViewDetail&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:contentDescription=&quot;@string/health_tip_image&quot;&#10;                    android:scaleType=&quot;centerCrop&quot;&#10;                    app:layout_collapseMode=&quot;parallax&quot; /&gt;&#10;&#10;                &lt;androidx.appcompat.widget.Toolbar&#10;                    android:id=&quot;@+id/toolbar&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;?attr/actionBarSize&quot;&#10;                    app:layout_collapseMode=&quot;pin&quot;&#10;                    app:popupTheme=&quot;@style/ThemeOverlay.MaterialComponents.Light&quot; /&gt;&#10;&#10;            &lt;/com.google.android.material.appbar.CollapsingToolbarLayout&gt;&#10;&#10;        &lt;/com.google.android.material.appbar.AppBarLayout&gt;&#10;&#10;        &lt;androidx.core.widget.NestedScrollView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;&gt;&#10;&#10;            &lt;androidx.constraintlayout.widget.ConstraintLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:padding=&quot;16dp&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/textViewTitle&quot;&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot;&#10;                    android:textAppearance=&quot;@style/TextAppearance.MaterialComponents.Headline5&quot;&#10;                    android:textColor=&quot;?android:attr/textColorPrimary&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;                    app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;                    app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;                    tools:text=&quot;Tiêu đề bài viết sức khỏe&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/textViewCategory&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot;&#10;                    android:background=&quot;@drawable/bg_category_label&quot;&#10;                    android:paddingStart=&quot;8dp&quot;&#10;                    android:paddingTop=&quot;4dp&quot;&#10;                    android:paddingEnd=&quot;8dp&quot;&#10;                    android:paddingBottom=&quot;4dp&quot;&#10;                    android:textAppearance=&quot;@style/TextAppearance.MaterialComponents.Caption&quot;&#10;                    android:textColor=&quot;@color/black&quot;&#10;                    app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;                    app:layout_constraintTop_toBottomOf=&quot;@id/textViewTitle&quot;&#10;                    tools:text=&quot;Danh mục&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/textViewViewCount&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot;&#10;                    android:layout_marginEnd=&quot;8dp&quot;&#10;                    android:drawablePadding=&quot;4dp&quot;&#10;                    android:gravity=&quot;center_vertical&quot;&#10;                    android:textAppearance=&quot;@style/TextAppearance.MaterialComponents.Caption&quot;&#10;                    app:drawableStartCompat=&quot;@drawable/ic_visibility&quot;&#10;                    app:layout_constraintEnd_toStartOf=&quot;@id/textViewLikeCount&quot;&#10;                    app:layout_constraintTop_toBottomOf=&quot;@id/textViewTitle&quot;&#10;                    tools:text=&quot;125&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/textViewLikeCount&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:drawablePadding=&quot;4dp&quot;&#10;                    android:gravity=&quot;center_vertical&quot;&#10;                    android:textAppearance=&quot;@style/TextAppearance.MaterialComponents.Caption&quot;&#10;                    app:drawableStartCompat=&quot;@drawable/ic_favorite&quot;&#10;                    app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;                    app:layout_constraintTop_toTopOf=&quot;@id/textViewViewCount&quot;&#10;                    tools:text=&quot;48&quot; /&gt;&#10;&#10;                &lt;View&#10;                    android:id=&quot;@+id/divider&quot;&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;1dp&quot;&#10;                    android:layout_marginTop=&quot;16dp&quot;&#10;                    android:background=&quot;?android:attr/listDivider&quot;&#10;                    app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;                    app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;                    app:layout_constraintTop_toBottomOf=&quot;@id/textViewCategory&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/textViewContent&quot;&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginTop=&quot;16dp&quot;&#10;                    android:lineSpacingMultiplier=&quot;1.2&quot;&#10;                    android:textAppearance=&quot;@style/TextAppearance.MaterialComponents.Body1&quot;&#10;                    app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;                    app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;                    app:layout_constraintTop_toBottomOf=&quot;@id/divider&quot;&#10;                    tools:text=&quot;Nội dung chi tiết bài viết sức khỏe. Phần này sẽ chứa toàn bộ nội dung của mẹo sức khỏe được định dạng phù hợp.&quot; /&gt;&#10;&#10;                &lt;!-- Action buttons section --&gt;&#10;                &lt;LinearLayout&#10;                    android:id=&quot;@+id/layoutActionButtons&quot;&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginTop=&quot;24dp&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:gravity=&quot;center&quot;&#10;                    app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;                    app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;                    app:layout_constraintTop_toBottomOf=&quot;@id/textViewContent&quot;&gt;&#10;&#10;                    &lt;Button&#10;                        android:id=&quot;@+id/buttonLike&quot;&#10;                        style=&quot;@style/Widget.MaterialComponents.Button.OutlinedButton&quot;&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:layout_marginEnd=&quot;8dp&quot;&#10;                        android:text=&quot;@string/like&quot;&#10;                        android:drawableStart=&quot;@drawable/ic_favorite_border&quot;&#10;                        android:drawablePadding=&quot;8dp&quot;&#10;                        android:textColor=&quot;?attr/colorOnSurface&quot;&#10;                        app:strokeColor=&quot;?attr/colorOnSurface&quot; /&gt;&#10;&#10;                    &lt;Button&#10;                        android:id=&quot;@+id/buttonShare&quot;&#10;                        style=&quot;@style/Widget.MaterialComponents.Button.OutlinedButton&quot;&#10;                        android:layout_width=&quot;0dp&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_weight=&quot;1&quot;&#10;                        android:layout_marginStart=&quot;8dp&quot;&#10;                        android:text=&quot;@string/share&quot;&#10;                        android:drawableStart=&quot;@drawable/ic_share&quot;&#10;                        android:drawablePadding=&quot;8dp&quot;&#10;                        android:textColor=&quot;?attr/colorOnSurface&quot;&#10;                        app:strokeColor=&quot;?attr/colorOnSurface&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;                &lt;!-- Bottom spacing --&gt;&#10;                &lt;View&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;24dp&quot;&#10;                    app:layout_constraintTop_toBottomOf=&quot;@id/layoutActionButtons&quot; /&gt;&#10;&#10;            &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;        &lt;/androidx.core.widget.NestedScrollView&gt;&#10;&#10;        &lt;com.google.android.material.floatingactionbutton.FloatingActionButton&#10;            android:id=&quot;@+id/fabFavorite&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_margin=&quot;16dp&quot;&#10;            android:src=&quot;@drawable/ic_favorite_border&quot;&#10;            app:layout_anchor=&quot;@id/appBarLayout&quot;&#10;            app:layout_anchorGravity=&quot;bottom|end&quot; /&gt;&#10;&#10;        &lt;ProgressBar&#10;            android:id=&quot;@+id/progressBar&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_gravity=&quot;center&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;    &lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt;&#10;&#10;&lt;/com.vhn.doan.presentation.healthtip.detail.SwipeToDismissLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#13;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#13;&#10;    android:layout_width=&quot;match_parent&quot;&#13;&#10;    android:layout_height=&quot;match_parent&quot;&#13;&#10;    android:background=&quot;?android:attr/colorBackground&quot;&#13;&#10;    tools:context=&quot;.presentation.healthtip.detail.HealthTipDetailActivity&quot;&gt;&#13;&#10;&#13;&#10;    &lt;com.google.android.material.appbar.AppBarLayout&#13;&#10;        android:id=&quot;@+id/appBarLayout&quot;&#13;&#10;        android:layout_width=&quot;match_parent&quot;&#13;&#10;        android:layout_height=&quot;wrap_content&quot;&#13;&#10;        android:fitsSystemWindows=&quot;true&quot;&gt;&#13;&#10;&#13;&#10;        &lt;com.google.android.material.appbar.CollapsingToolbarLayout&#13;&#10;            android:id=&quot;@+id/collapsingToolbarLayout&quot;&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;250dp&quot;&#13;&#10;            app:contentScrim=&quot;?attr/colorPrimary&quot;&#13;&#10;            app:expandedTitleGravity=&quot;bottom|start&quot;&#13;&#10;            app:expandedTitleMarginBottom=&quot;16dp&quot;&#13;&#10;            app:expandedTitleMarginStart=&quot;16dp&quot;&#13;&#10;            app:layout_scrollFlags=&quot;scroll|exitUntilCollapsed&quot;&gt;&#13;&#10;&#13;&#10;            &lt;ImageView&#13;&#10;                android:id=&quot;@+id/imageViewDetail&quot;&#13;&#10;                android:layout_width=&quot;match_parent&quot;&#13;&#10;                android:layout_height=&quot;match_parent&quot;&#13;&#10;                android:contentDescription=&quot;@string/health_tip_image&quot;&#13;&#10;                android:scaleType=&quot;centerCrop&quot;&#13;&#10;                app:layout_collapseMode=&quot;parallax&quot; /&gt;&#13;&#10;&#13;&#10;            &lt;androidx.appcompat.widget.Toolbar&#13;&#10;                android:id=&quot;@+id/toolbar&quot;&#13;&#10;                android:layout_width=&quot;match_parent&quot;&#13;&#10;                android:layout_height=&quot;?attr/actionBarSize&quot;&#13;&#10;                app:layout_collapseMode=&quot;pin&quot;&#13;&#10;                app:popupTheme=&quot;@style/ThemeOverlay.MaterialComponents.Light&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;/com.google.android.material.appbar.CollapsingToolbarLayout&gt;&#13;&#10;&#13;&#10;    &lt;/com.google.android.material.appbar.AppBarLayout&gt;&#13;&#10;&#13;&#10;    &lt;androidx.core.widget.NestedScrollView&#13;&#10;        android:layout_width=&quot;match_parent&quot;&#13;&#10;        android:layout_height=&quot;match_parent&quot;&#13;&#10;        app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;&gt;&#13;&#10;&#13;&#10;        &lt;androidx.constraintlayout.widget.ConstraintLayout&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:padding=&quot;16dp&quot;&gt;&#13;&#10;&#13;&#10;            &lt;TextView&#13;&#10;                android:id=&quot;@+id/textViewTitle&quot;&#13;&#10;                android:layout_width=&quot;0dp&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:layout_marginTop=&quot;8dp&quot;&#13;&#10;                android:textAppearance=&quot;@style/TextAppearance.MaterialComponents.Headline5&quot;&#13;&#10;                android:textColor=&quot;?android:attr/textColorPrimary&quot;&#13;&#10;                android:textStyle=&quot;bold&quot;&#13;&#10;                app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#13;&#10;                app:layout_constraintStart_toStartOf=&quot;parent&quot;&#13;&#10;                app:layout_constraintTop_toTopOf=&quot;parent&quot;&#13;&#10;                tools:text=&quot;Tiêu đề bài viết sức khỏe&quot; /&gt;&#13;&#10;&#13;&#10;            &lt;TextView&#13;&#10;                android:id=&quot;@+id/textViewCategory&quot;&#13;&#10;                android:layout_width=&quot;wrap_content&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:layout_marginTop=&quot;8dp&quot;&#13;&#10;                android:background=&quot;@drawable/bg_category_label&quot;&#13;&#10;                android:paddingStart=&quot;8dp&quot;&#13;&#10;                android:paddingTop=&quot;4dp&quot;&#13;&#10;                android:paddingEnd=&quot;8dp&quot;&#13;&#10;                android:paddingBottom=&quot;4dp&quot;&#13;&#10;                android:textAppearance=&quot;@style/TextAppearance.MaterialComponents.Caption&quot;&#13;&#10;                android:textColor=&quot;@color/black&quot;&#13;&#10;                app:layout_constraintStart_toStartOf=&quot;parent&quot;&#13;&#10;                app:layout_constraintTop_toBottomOf=&quot;@id/textViewTitle&quot;&#13;&#10;                tools:text=&quot;Danh mục&quot; /&gt;&#13;&#10;&#13;&#10;            &lt;TextView&#13;&#10;                android:id=&quot;@+id/textViewViewCount&quot;&#13;&#10;                android:layout_width=&quot;wrap_content&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:layout_marginTop=&quot;8dp&quot;&#13;&#10;                android:layout_marginEnd=&quot;8dp&quot;&#13;&#10;                android:drawablePadding=&quot;4dp&quot;&#13;&#10;                android:gravity=&quot;center_vertical&quot;&#13;&#10;                android:textAppearance=&quot;@style/TextAppearance.MaterialComponents.Caption&quot;&#13;&#10;                app:drawableStartCompat=&quot;@drawable/ic_visibility&quot;&#13;&#10;                app:layout_constraintEnd_toStartOf=&quot;@id/textViewLikeCount&quot;&#13;&#10;                app:layout_constraintTop_toBottomOf=&quot;@id/textViewTitle&quot;&#13;&#10;                tools:text=&quot;125&quot; /&gt;&#13;&#10;&#13;&#10;            &lt;TextView&#13;&#10;                android:id=&quot;@+id/textViewLikeCount&quot;&#13;&#10;                android:layout_width=&quot;wrap_content&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:drawablePadding=&quot;4dp&quot;&#13;&#10;                android:gravity=&quot;center_vertical&quot;&#13;&#10;                android:textAppearance=&quot;@style/TextAppearance.MaterialComponents.Caption&quot;&#13;&#10;                app:drawableStartCompat=&quot;@drawable/ic_favorite&quot;&#13;&#10;                app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#13;&#10;                app:layout_constraintTop_toTopOf=&quot;@id/textViewViewCount&quot;&#13;&#10;                tools:text=&quot;48&quot; /&gt;&#13;&#10;&#13;&#10;            &lt;View&#13;&#10;                android:id=&quot;@+id/divider&quot;&#13;&#10;                android:layout_width=&quot;0dp&quot;&#13;&#10;                android:layout_height=&quot;1dp&quot;&#13;&#10;                android:layout_marginTop=&quot;16dp&quot;&#13;&#10;                android:background=&quot;?android:attr/listDivider&quot;&#13;&#10;                app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#13;&#10;                app:layout_constraintStart_toStartOf=&quot;parent&quot;&#13;&#10;                app:layout_constraintTop_toBottomOf=&quot;@id/textViewCategory&quot; /&gt;&#13;&#10;&#13;&#10;            &lt;TextView&#13;&#10;                android:id=&quot;@+id/textViewContent&quot;&#13;&#10;                android:layout_width=&quot;0dp&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:layout_marginTop=&quot;16dp&quot;&#13;&#10;                android:lineSpacingMultiplier=&quot;1.2&quot;&#13;&#10;                android:textAppearance=&quot;@style/TextAppearance.MaterialComponents.Body1&quot;&#13;&#10;                app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#13;&#10;                app:layout_constraintStart_toStartOf=&quot;parent&quot;&#13;&#10;                app:layout_constraintTop_toBottomOf=&quot;@id/divider&quot;&#13;&#10;                tools:text=&quot;Nội dung chi tiết bài viết sức khỏe. Phần này sẽ chứa toàn bộ nội dung của mẹo sức khỏe được định dạng phù hợp.&quot; /&gt;&#13;&#10;&#13;&#10;            &lt;!-- Action buttons section --&gt;&#13;&#10;            &lt;LinearLayout&#13;&#10;                android:id=&quot;@+id/layoutActionButtons&quot;&#13;&#10;                android:layout_width=&quot;0dp&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:layout_marginTop=&quot;24dp&quot;&#13;&#10;                android:orientation=&quot;horizontal&quot;&#13;&#10;                android:gravity=&quot;center&quot;&#13;&#10;                app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#13;&#10;                app:layout_constraintStart_toStartOf=&quot;parent&quot;&#13;&#10;                app:layout_constraintTop_toBottomOf=&quot;@id/textViewContent&quot;&gt;&#13;&#10;&#13;&#10;                &lt;Button&#13;&#10;                    android:id=&quot;@+id/buttonLike&quot;&#13;&#10;                    style=&quot;@style/Widget.MaterialComponents.Button.OutlinedButton&quot;&#13;&#10;                    android:layout_width=&quot;0dp&quot;&#13;&#10;                    android:layout_height=&quot;wrap_content&quot;&#13;&#10;                    android:layout_weight=&quot;1&quot;&#13;&#10;                    android:layout_marginEnd=&quot;8dp&quot;&#13;&#10;                    android:text=&quot;@string/like&quot;&#13;&#10;                    android:drawableStart=&quot;@drawable/ic_favorite_border&quot;&#13;&#10;                    android:drawablePadding=&quot;8dp&quot;&#13;&#10;                    android:textColor=&quot;?attr/colorOnSurface&quot;&#13;&#10;                    app:strokeColor=&quot;?attr/colorOnSurface&quot; /&gt;&#13;&#10;&#13;&#10;                &lt;Button&#13;&#10;                    android:id=&quot;@+id/buttonShare&quot;&#13;&#10;                    style=&quot;@style/Widget.MaterialComponents.Button.OutlinedButton&quot;&#13;&#10;                    android:layout_width=&quot;0dp&quot;&#13;&#10;                    android:layout_height=&quot;wrap_content&quot;&#13;&#10;                    android:layout_weight=&quot;1&quot;&#13;&#10;                    android:layout_marginStart=&quot;8dp&quot;&#13;&#10;                    android:text=&quot;@string/share&quot;&#13;&#10;                    android:drawableStart=&quot;@drawable/ic_share&quot;&#13;&#10;                    android:drawablePadding=&quot;8dp&quot;&#13;&#10;                    android:textColor=&quot;?attr/colorOnSurface&quot;&#13;&#10;                    app:strokeColor=&quot;?attr/colorOnSurface&quot; /&gt;&#13;&#10;&#13;&#10;            &lt;/LinearLayout&gt;&#13;&#10;&#13;&#10;            &lt;!-- Bottom spacing --&gt;&#13;&#10;            &lt;View&#13;&#10;                android:layout_width=&quot;match_parent&quot;&#13;&#10;                android:layout_height=&quot;24dp&quot;&#13;&#10;                app:layout_constraintTop_toBottomOf=&quot;@id/layoutActionButtons&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#13;&#10;    &lt;/androidx.core.widget.NestedScrollView&gt;&#13;&#10;&#13;&#10;    &lt;com.google.android.material.floatingactionbutton.FloatingActionButton&#13;&#10;        android:id=&quot;@+id/fabFavorite&quot;&#13;&#10;        android:layout_width=&quot;wrap_content&quot;&#13;&#10;        android:layout_height=&quot;wrap_content&quot;&#13;&#10;        android:layout_margin=&quot;16dp&quot;&#13;&#10;        android:src=&quot;@drawable/ic_favorite_border&quot;&#13;&#10;        app:layout_anchor=&quot;@id/appBarLayout&quot;&#13;&#10;        app:layout_anchorGravity=&quot;bottom|end&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;ProgressBar&#13;&#10;        android:id=&quot;@+id/progressBar&quot;&#13;&#10;        android:layout_width=&quot;wrap_content&quot;&#13;&#10;        android:layout_height=&quot;wrap_content&quot;&#13;&#10;        android:layout_gravity=&quot;center&quot;&#13;&#10;        android:visibility=&quot;gone&quot; /&gt;&#13;&#10;&#13;&#10;&lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/menu/bottom_navigation_menu.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/menu/bottom_navigation_menu.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_home&quot;&#10;        android:icon=&quot;@android:drawable/ic_menu_compass&quot;&#10;        android:title=&quot;@string/nav_home&quot; /&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_reminders&quot;&#10;        android:icon=&quot;@android:drawable/ic_popup_reminder&quot;&#10;        android:title=&quot;@string/nav_reminders&quot; /&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_videos&quot;&#10;        android:icon=&quot;@drawable/icon_video_short&quot;&#10;        android:title=&quot;@string/nav_videos&quot; /&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_favorites&quot;&#10;        android:icon=&quot;@android:drawable/ic_menu_save&quot;&#10;        android:title=&quot;@string/nav_favorites&quot; /&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_profile&quot;&#10;        android:icon=&quot;@android:drawable/ic_menu_myplaces&quot;&#10;        android:title=&quot;@string/nav_profile&quot; /&gt;&#10;&lt;/menu&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_home&quot;&#10;        android:icon=&quot;@android:drawable/ic_menu_compass&quot;&#10;        android:title=&quot;@string/nav_home&quot; /&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_reminders&quot;&#10;        android:icon=&quot;@android:drawable/ic_popup_reminder&quot;&#10;        android:title=&quot;@string/nav_reminders&quot; /&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_videos&quot;&#10;        android:icon=&quot;@drawable/icon_video_short&quot;&#10;        android:title=&quot;@string/nav_videos&quot; /&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_profile&quot;&#10;        android:icon=&quot;@android:drawable/ic_menu_myplaces&quot;&#10;        android:title=&quot;@string/nav_profile&quot; /&gt;&#10;&lt;/menu&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>