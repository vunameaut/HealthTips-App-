<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.google.gms.google.services)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.vhn.doan&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.vhn.doan&quot;&#10;        minSdk = 26&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        // Cấu hình MultiDex&#10;        multiDexEnabled = true&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        // Cấu hình Java 8+&#10;        sourceCompatibility = JavaVersion.VERSION_1_8&#10;        targetCompatibility = JavaVersion.VERSION_1_8&#10;&#10;        // Cho phép sử dụng các tính năng Java 8&#10;        isCoreLibraryDesugaringEnabled = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    // Cập nhật Firebase BoM lên phiên bản mới&#10;    implementation(platform(&quot;com.google.firebase:firebase-bom:33.5.1&quot;))&#10;&#10;    // Các Firebase libraries khác giữ nguyên&#10;    implementation(&quot;com.google.firebase:firebase-firestore&quot;)&#10;    implementation(&quot;com.google.firebase:firebase-auth&quot;)&#10;    implementation(&quot;com.google.firebase:firebase-analytics&quot;)&#10;    implementation(&quot;com.google.firebase:firebase-storage&quot;)&#10;    implementation(&quot;com.google.firebase:firebase-database&quot;)&#10;&#10;    implementation(libs.appcompat)&#10;    implementation(libs.material)&#10;    implementation(libs.activity)&#10;    implementation(libs.constraintlayout)&#10;&#10;    // Thêm thư viện MultiDex&#10;    implementation(&quot;androidx.multidex:multidex:2.0.1&quot;)&#10;    implementation(libs.firebase.storage)&#10;    implementation(libs.firebase.database)&#10;&#10;    // Thêm SwipeRefreshLayout cho FavoriteFragment&#10;    implementation(&quot;androidx.swiperefreshlayout:swiperefreshlayout:1.1.0&quot;)&#10;&#10;    // Thêm RecyclerView nếu chưa có&#10;    implementation(&quot;androidx.recyclerview:recyclerview:1.3.2&quot;)&#10;&#10;    // Thêm CardView cho layout items&#10;    implementation(&quot;androidx.cardview:cardview:1.0.0&quot;)&#10;&#10;&#10;    implementation(&quot;androidx.work:work-runtime:2.9.0&quot;)&#10;    implementation(libs.core)&#10;&#10;    // Thêm thư viện Desugaring để hỗ trợ tính năng Java 8+ trên các thiết bị cũ&#10;    coreLibraryDesugaring(&quot;com.android.tools:desugar_jdk_libs:2.0.3&quot;)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.ext.junit)&#10;    androidTestImplementation(libs.espresso.core)&#10;&#10;    // Thư viện Glide để load ảnh&#10;    implementation(&quot;com.github.bumptech.glide:glide:4.16.0&quot;)&#10;    annotationProcessor(&quot;com.github.bumptech.glide:compiler:4.16.0&quot;)&#10;&#10;    // Thêm OkHttp và Gson cho Chat API&#10;    implementation(&quot;com.squareup.okhttp3:okhttp:4.12.0&quot;)&#10;    implementation(&quot;com.squareup.okhttp3:logging-interceptor:4.12.0&quot;)&#10;    implementation(&quot;com.google.code.gson:gson:2.10.1&quot;)&#10;&#10;    // Thêm dependencies cho chức năng video ngắn&#10;    // CircleImageView cho avatar tròn&#10;    implementation(&quot;de.hdodenhof:circleimageview:3.1.0&quot;)&#10;&#10;    // Glide cho load ảnh/video&#10;    implementation(&quot;com.github.bumptech.glide:glide:4.16.0&quot;)&#10;    annotationProcessor(&quot;com.github.bumptech.glide:compiler:4.16.0&quot;)&#10;&#10;    // ExoPlayer cho video playback (tùy chọn thay thế VideoView)&#10;    implementation(&quot;com.google.android.exoplayer:exoplayer:2.19.1&quot;)&#10;&#10;    // Thêm Cloudinary SDK cho Android&#10;    implementation(&quot;com.cloudinary:cloudinary-android:2.8.0&quot;)&#10;    implementation(&quot;com.cloudinary:cloudinary-core:1.36.0&quot;)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.google.gms.google.services)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.vhn.doan&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.vhn.doan&quot;&#10;        minSdk = 26&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        // Cấu hình MultiDex&#10;        multiDexEnabled = true&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        // Cấu hình Java 8+&#10;        sourceCompatibility = JavaVersion.VERSION_1_8&#10;        targetCompatibility = JavaVersion.VERSION_1_8&#10;&#10;        // Cho phép sử dụng các tính năng Java 8&#10;        isCoreLibraryDesugaringEnabled = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    // Cập nhật Firebase BoM lên phiên bản mới&#10;    implementation(platform(&quot;com.google.firebase:firebase-bom:33.5.1&quot;))&#10;&#10;    // Các Firebase libraries khác giữ nguyên&#10;    implementation(&quot;com.google.firebase:firebase-firestore&quot;)&#10;    implementation(&quot;com.google.firebase:firebase-auth&quot;)&#10;    implementation(&quot;com.google.firebase:firebase-analytics&quot;)&#10;    implementation(&quot;com.google.firebase:firebase-storage&quot;) // Giữ lại cho avatar người dùng&#10;    implementation(&quot;com.google.firebase:firebase-database&quot;)&#10;&#10;    implementation(libs.appcompat)&#10;    implementation(libs.material)&#10;    implementation(libs.activity)&#10;    implementation(libs.constraintlayout)&#10;&#10;    // Thêm thư viện MultiDex&#10;    implementation(&quot;androidx.multidex:multidex:2.0.1&quot;)&#10;    implementation(libs.firebase.storage)&#10;    implementation(libs.firebase.database)&#10;&#10;    // Thêm SwipeRefreshLayout cho FavoriteFragment&#10;    implementation(&quot;androidx.swiperefreshlayout:swiperefreshlayout:1.1.0&quot;)&#10;&#10;    // Thêm RecyclerView nếu chưa có&#10;    implementation(&quot;androidx.recyclerview:recyclerview:1.3.2&quot;)&#10;&#10;    // Thêm CardView cho layout items&#10;    implementation(&quot;androidx.cardview:cardview:1.0.0&quot;)&#10;&#10;&#10;    implementation(&quot;androidx.work:work-runtime:2.9.0&quot;)&#10;    implementation(libs.core)&#10;&#10;    // Thêm thư viện Desugaring để hỗ trợ tính năng Java 8+ trên các thiết bị cũ&#10;    coreLibraryDesugaring(&quot;com.android.tools:desugar_jdk_libs:2.0.3&quot;)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.ext.junit)&#10;    androidTestImplementation(libs.espresso.core)&#10;&#10;    // Thư viện Glide để load ảnh&#10;    implementation(&quot;com.github.bumptech.glide:glide:4.16.0&quot;)&#10;    annotationProcessor(&quot;com.github.bumptech.glide:compiler:4.16.0&quot;)&#10;&#10;    // Thêm OkHttp và Gson cho Chat API&#10;    implementation(&quot;com.squareup.okhttp3:okhttp:4.12.0&quot;)&#10;    implementation(&quot;com.squareup.okhttp3:logging-interceptor:4.12.0&quot;)&#10;    implementation(&quot;com.google.code.gson:gson:2.10.1&quot;)&#10;&#10;    // Thêm dependencies cho chức năng video ngắn&#10;    // CircleImageView cho avatar tròn&#10;    implementation(&quot;de.hdodenhof:circleimageview:3.1.0&quot;)&#10;&#10;    // Glide cho load ảnh/video&#10;    implementation(&quot;com.github.bumptech.glide:glide:4.16.0&quot;)&#10;    annotationProcessor(&quot;com.github.bumptech.glide:compiler:4.16.0&quot;)&#10;&#10;    // ExoPlayer cho video playback (tùy chọn thay thế VideoView)&#10;    implementation(&quot;com.google.android.exoplayer:exoplayer:2.19.1&quot;)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/HealthTip.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/HealthTip.java" />
              <option name="originalContent" value="package com.vhn.doan.data;&#10;&#10;/**&#10; * Class đại diện cho một mẹo sức khỏe&#10; */&#10;public class HealthTip {&#10;    private String id;&#10;    private String title;&#10;    private String content;&#10;    private String categoryId;&#10;    private String categoryName; // Thêm field cho tên category&#10;    private int viewCount;&#10;    private int likeCount;&#10;    private String imageUrl;&#10;    private long createdAt;&#10;    private boolean isFavorite;&#10;    private boolean isLiked; // Thêm field cho trạng thái like&#10;&#10;    /**&#10;     * Constructor rỗng cho Firebase&#10;     */&#10;    public HealthTip() {&#10;        // Constructor rỗng cần thiết cho Firebase Realtime Database&#10;    }&#10;&#10;    /**&#10;     * Constructor đầy đủ&#10;     * @param id ID của mẹo sức khỏe&#10;     * @param title Tiêu đề mẹo sức khỏe&#10;     * @param content Nội dung chi tiết&#10;     * @param categoryId ID của danh mục chứa mẹo này&#10;     * @param viewCount Số lượt xem&#10;     * @param likeCount Số lượt thích&#10;     */&#10;    public HealthTip(String id, String title, String content, String categoryId, int viewCount, int likeCount) {&#10;        this.id = id;&#10;        this.title = title;&#10;        this.content = content;&#10;        this.categoryId = categoryId;&#10;        this.viewCount = viewCount;&#10;        this.likeCount = likeCount;&#10;        this.createdAt = System.currentTimeMillis();&#10;        this.isFavorite = false;&#10;        this.isLiked = false;&#10;    }&#10;&#10;    /**&#10;     * Constructor đầy đủ với ảnh và thời gian tạo&#10;     */&#10;    public HealthTip(String id, String title, String content, String categoryId, int viewCount,&#10;                     int likeCount, String imageUrl, long createdAt, boolean isFavorite) {&#10;        this.id = id;&#10;        this.title = title;&#10;        this.content = content;&#10;        this.categoryId = categoryId;&#10;        this.viewCount = viewCount;&#10;        this.likeCount = likeCount;&#10;        this.imageUrl = imageUrl;&#10;        this.createdAt = createdAt;&#10;        this.isFavorite = isFavorite;&#10;        this.isLiked = false;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public String getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(String id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getTitle() {&#10;        return title;&#10;    }&#10;&#10;    public void setTitle(String title) {&#10;        this.title = title;&#10;    }&#10;&#10;    public String getContent() {&#10;        return content;&#10;    }&#10;&#10;    public void setContent(String content) {&#10;        this.content = content;&#10;    }&#10;&#10;    public String getCategoryId() {&#10;        return categoryId;&#10;    }&#10;&#10;    public void setCategoryId(String categoryId) {&#10;        this.categoryId = categoryId;&#10;    }&#10;&#10;    // Thêm getter/setter cho categoryName&#10;    public String getCategoryName() {&#10;        return categoryName;&#10;    }&#10;&#10;    public void setCategoryName(String categoryName) {&#10;        this.categoryName = categoryName;&#10;    }&#10;&#10;    public int getViewCount() {&#10;        return viewCount;&#10;    }&#10;&#10;    public void setViewCount(int viewCount) {&#10;        this.viewCount = viewCount;&#10;    }&#10;&#10;    public int getLikeCount() {&#10;        return likeCount;&#10;    }&#10;&#10;    public void setLikeCount(int likeCount) {&#10;        this.likeCount = likeCount;&#10;    }&#10;&#10;    public String getImageUrl() {&#10;        return imageUrl;&#10;    }&#10;&#10;    public void setImageUrl(String imageUrl) {&#10;        this.imageUrl = imageUrl;&#10;    }&#10;&#10;    public long getCreatedAt() {&#10;        return createdAt;&#10;    }&#10;&#10;    public void setCreatedAt(long createdAt) {&#10;        this.createdAt = createdAt;&#10;    }&#10;&#10;    public boolean isFavorite() {&#10;        return isFavorite;&#10;    }&#10;&#10;    public void setFavorite(boolean favorite) {&#10;        isFavorite = favorite;&#10;    }&#10;&#10;    public boolean isLiked() {&#10;        return isLiked;&#10;    }&#10;&#10;    public void setLiked(boolean liked) {&#10;        isLiked = liked;&#10;    }&#10;&#10;    /**&#10;     * Lấy nội dung tóm tắt của mẹo sức khỏe (100 ký tự đầu)&#10;     * @return nội dung tóm tắt&#10;     */&#10;    public String getSummary() {&#10;        if (content == null || content.trim().isEmpty()) {&#10;            return &quot;Nội dung đang được cập nhật...&quot;;&#10;        }&#10;        if (content.length() &lt;= 100) {&#10;            return content;&#10;        }&#10;        return content.substring(0, 100) + &quot;...&quot;;&#10;    }&#10;&#10;    /**&#10;     * Kiểm tra xem HealthTip có hợp lệ không&#10;     * @return true nếu có đủ thông tin cơ bản&#10;     */&#10;    public boolean isValid() {&#10;        return id != null &amp;&amp; !id.isEmpty() &amp;&amp;&#10;               title != null &amp;&amp; !title.isEmpty() &amp;&amp;&#10;               content != null &amp;&amp; !content.isEmpty();&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;HealthTip{&quot; +&#10;                &quot;id='&quot; + id + '\'' +&#10;                &quot;, title='&quot; + title + '\'' +&#10;                &quot;, content='&quot; + content + '\'' +&#10;                &quot;, categoryId='&quot; + categoryId + '\'' +&#10;                &quot;, categoryName='&quot; + categoryName + '\'' +&#10;                &quot;, viewCount=&quot; + viewCount +&#10;                &quot;, likeCount=&quot; + likeCount +&#10;                &quot;, imageUrl='&quot; + imageUrl + '\'' +&#10;                &quot;, createdAt=&quot; + createdAt +&#10;                &quot;, isFavorite=&quot; + isFavorite +&#10;                &quot;, isLiked=&quot; + isLiked +&#10;                '}';&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.data;&#13;&#10;&#13;&#10;import com.vhn.doan.services.CloudinaryVideoHelper;&#13;&#10;&#13;&#10;/**&#13;&#10; * Class đại diện cho một mẹo sức khỏe&#13;&#10; * Hỗ trợ load ảnh từ Cloudinary với tối ưu hóa cho mobile&#13;&#10; */&#13;&#10;public class HealthTip {&#13;&#10;    private String id;&#13;&#10;    private String title;&#13;&#10;    private String content;&#13;&#10;    private String categoryId;&#13;&#10;    private String categoryName; // Thêm field cho tên category&#13;&#10;    private int viewCount;&#13;&#10;    private int likeCount;&#13;&#10;    private String imageUrl;&#13;&#10;    private long createdAt;&#13;&#10;    private boolean isFavorite;&#13;&#10;    private boolean isLiked; // Thêm field cho trạng thái like&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Constructor rỗng cho Firebase&#13;&#10;     */&#13;&#10;    public HealthTip() {&#13;&#10;        // Constructor rỗng cần thiết cho Firebase Realtime Database&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Constructor đầy đủ&#13;&#10;     * @param id ID của mẹo sức khỏe&#13;&#10;     * @param title Tiêu đề mẹo sức khỏe&#13;&#10;     * @param content Nội dung chi tiết&#13;&#10;     * @param categoryId ID của danh mục chứa mẹo này&#13;&#10;     * @param viewCount Số lượt xem&#13;&#10;     * @param likeCount Số lượt thích&#13;&#10;     */&#13;&#10;    public HealthTip(String id, String title, String content, String categoryId, int viewCount, int likeCount) {&#13;&#10;        this.id = id;&#13;&#10;        this.title = title;&#13;&#10;        this.content = content;&#13;&#10;        this.categoryId = categoryId;&#13;&#10;        this.viewCount = viewCount;&#13;&#10;        this.likeCount = likeCount;&#13;&#10;        this.createdAt = System.currentTimeMillis();&#13;&#10;        this.isFavorite = false;&#13;&#10;        this.isLiked = false;&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Constructor đầy đủ với ảnh và thời gian tạo&#13;&#10;     */&#13;&#10;    public HealthTip(String id, String title, String content, String categoryId, int viewCount,&#13;&#10;                     int likeCount, String imageUrl, long createdAt, boolean isFavorite) {&#13;&#10;        this.id = id;&#13;&#10;        this.title = title;&#13;&#10;        this.content = content;&#13;&#10;        this.categoryId = categoryId;&#13;&#10;        this.viewCount = viewCount;&#13;&#10;        this.likeCount = likeCount;&#13;&#10;        this.imageUrl = imageUrl;&#13;&#10;        this.createdAt = createdAt;&#13;&#10;        this.isFavorite = isFavorite;&#13;&#10;        this.isLiked = false;&#13;&#10;    }&#13;&#10;&#13;&#10;    // Getters and Setters&#13;&#10;    public String getId() {&#13;&#10;        return id;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setId(String id) {&#13;&#10;        this.id = id;&#13;&#10;    }&#13;&#10;&#13;&#10;    public String getTitle() {&#13;&#10;        return title;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setTitle(String title) {&#13;&#10;        this.title = title;&#13;&#10;    }&#13;&#10;&#13;&#10;    public String getContent() {&#13;&#10;        return content;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setContent(String content) {&#13;&#10;        this.content = content;&#13;&#10;    }&#13;&#10;&#13;&#10;    public String getCategoryId() {&#13;&#10;        return categoryId;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setCategoryId(String categoryId) {&#13;&#10;        this.categoryId = categoryId;&#13;&#10;    }&#13;&#10;&#13;&#10;    // Thêm getter/setter cho categoryName&#13;&#10;    public String getCategoryName() {&#13;&#10;        return categoryName;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setCategoryName(String categoryName) {&#13;&#10;        this.categoryName = categoryName;&#13;&#10;    }&#13;&#10;&#13;&#10;    public int getViewCount() {&#13;&#10;        return viewCount;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setViewCount(int viewCount) {&#13;&#10;        this.viewCount = viewCount;&#13;&#10;    }&#13;&#10;&#13;&#10;    public int getLikeCount() {&#13;&#10;        return likeCount;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setLikeCount(int likeCount) {&#13;&#10;        this.likeCount = likeCount;&#13;&#10;    }&#13;&#10;&#13;&#10;    public String getImageUrl() {&#13;&#10;        return imageUrl;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setImageUrl(String imageUrl) {&#13;&#10;        this.imageUrl = imageUrl;&#13;&#10;    }&#13;&#10;&#13;&#10;    public long getCreatedAt() {&#13;&#10;        return createdAt;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setCreatedAt(long createdAt) {&#13;&#10;        this.createdAt = createdAt;&#13;&#10;    }&#13;&#10;&#13;&#10;    public boolean isFavorite() {&#13;&#10;        return isFavorite;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setFavorite(boolean favorite) {&#13;&#10;        isFavorite = favorite;&#13;&#10;    }&#13;&#10;&#13;&#10;    public boolean isLiked() {&#13;&#10;        return isLiked;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setLiked(boolean liked) {&#13;&#10;        isLiked = liked;&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Lấy nội dung tóm tắt của mẹo sức khỏe (100 ký tự đầu)&#13;&#10;     * @return nội dung tóm tắt&#13;&#10;     */&#13;&#10;    public String getSummary() {&#13;&#10;        if (content == null || content.trim().isEmpty()) {&#13;&#10;            return &quot;Nội dung đang được cập nhật...&quot;;&#13;&#10;        }&#13;&#10;        if (content.length() &lt;= 100) {&#13;&#10;            return content;&#13;&#10;        }&#13;&#10;        return content.substring(0, 100) + &quot;...&quot;;&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Kiểm tra xem HealthTip có hợp lệ không&#13;&#10;     * @return true nếu có đủ thông tin cơ bản&#13;&#10;     */&#13;&#10;    public boolean isValid() {&#13;&#10;        return id != null &amp;&amp; !id.isEmpty() &amp;&amp;&#13;&#10;               title != null &amp;&amp; !title.isEmpty() &amp;&amp;&#13;&#10;               content != null &amp;&amp; !content.isEmpty();&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Kiểm tra xem ảnh có sử dụng Cloudinary không&#13;&#10;     * @return true nếu image URL từ Cloudinary&#13;&#10;     */&#13;&#10;    public boolean isCloudinaryImage() {&#13;&#10;        return CloudinaryVideoHelper.isCloudinaryImageUrl(this.imageUrl);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Lấy optimized image URL cho mobile&#13;&#10;     * @return URL ảnh được tối ưu cho mobile&#13;&#10;     */&#13;&#10;    public String getOptimizedImageUrl() {&#13;&#10;        if (isCloudinaryImage()) {&#13;&#10;            // Tạo URL tối ưu cho ảnh mobile&#13;&#10;            return getCloudinaryOptimizedImageUrl(this.imageUrl, 800, 600);&#13;&#10;        }&#13;&#10;        return this.imageUrl; // Trả về URL gốc nếu không phải Cloudinary&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Lấy thumbnail URL cho danh sách&#13;&#10;     * @return URL thumbnail nhỏ để hiển thị trong danh sách&#13;&#10;     */&#13;&#10;    public String getThumbnailUrl() {&#13;&#10;        if (isCloudinaryImage()) {&#13;&#10;            // Tạo thumbnail nhỏ cho danh sách&#13;&#10;            return getCloudinaryOptimizedImageUrl(this.imageUrl, 300, 200);&#13;&#10;        }&#13;&#10;        return this.imageUrl; // Trả về URL gốc nếu không phải Cloudinary&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Tạo URL ảnh Cloudinary được tối ưu&#13;&#10;     * @param originalUrl URL gốc&#13;&#10;     * @param width Chiều rộng mong muốn&#13;&#10;     * @param height Chiều cao mong muốn&#13;&#10;     * @return URL ảnh được tối ưu&#13;&#10;     */&#13;&#10;    private String getCloudinaryOptimizedImageUrl(String originalUrl, int width, int height) {&#13;&#10;        if (originalUrl == null || originalUrl.trim().isEmpty()) {&#13;&#10;            return &quot;&quot;;&#13;&#10;        }&#13;&#10;&#13;&#10;        try {&#13;&#10;            // Tìm vị trí của &quot;/upload/&quot; để chèn transformations&#13;&#10;            String uploadMarker = &quot;/upload/&quot;;&#13;&#10;            int uploadIndex = originalUrl.indexOf(uploadMarker);&#13;&#10;&#13;&#10;            if (uploadIndex != -1) {&#13;&#10;                String beforeUpload = originalUrl.substring(0, uploadIndex + uploadMarker.length());&#13;&#10;                String afterUpload = originalUrl.substring(uploadIndex + uploadMarker.length());&#13;&#10;&#13;&#10;                // Loại bỏ transformations cũ nếu có&#13;&#10;                if (afterUpload.matches(&quot;^[a-z]_.*&quot;)) {&#13;&#10;                    int firstSlash = afterUpload.indexOf('/');&#13;&#10;                    if (firstSlash != -1) {&#13;&#10;                        afterUpload = afterUpload.substring(firstSlash + 1);&#13;&#10;                    }&#13;&#10;                }&#13;&#10;&#13;&#10;                // Tạo URL với optimization cho mobile&#13;&#10;                String optimizedUrl =&#13;&#10;                    beforeUpload +&#13;&#10;                    &quot;w_&quot; + width + &quot;,h_&quot; + height + &quot;,c_fill,f_auto,q_auto:good/&quot; + afterUpload;&#13;&#10;&#13;&#10;                return optimizedUrl;&#13;&#10;            }&#13;&#10;        } catch (Exception e) {&#13;&#10;            android.util.Log.e(&quot;HealthTip&quot;, &quot;Lỗi khi tối ưu ảnh URL: &quot; + e.getMessage());&#13;&#10;        }&#13;&#10;&#13;&#10;        return originalUrl; // Trả về URL gốc nếu có lỗi&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public String toString() {&#13;&#10;        return &quot;HealthTip{&quot; +&#13;&#10;                &quot;id='&quot; + id + '\'' +&#13;&#10;                &quot;, title='&quot; + title + '\'' +&#13;&#10;                &quot;, content='&quot; + content + '\'' +&#13;&#10;                &quot;, categoryId='&quot; + categoryId + '\'' +&#13;&#10;                &quot;, categoryName='&quot; + categoryName + '\'' +&#13;&#10;                &quot;, viewCount=&quot; + viewCount +&#13;&#10;                &quot;, likeCount=&quot; + likeCount +&#13;&#10;                &quot;, imageUrl='&quot; + imageUrl + '\'' +&#13;&#10;                &quot;, createdAt=&quot; + createdAt +&#13;&#10;                &quot;, isFavorite=&quot; + isFavorite +&#13;&#10;                &quot;, isLiked=&quot; + isLiked +&#13;&#10;                '}';&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/ShortVideo.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/ShortVideo.java" />
              <option name="originalContent" value="package com.vhn.doan.data;&#10;&#10;import com.google.firebase.database.PropertyName;&#10;import com.vhn.doan.services.CloudinaryVideoHelper;&#10;import java.util.Map;&#10;&#10;/**&#10; * Model class để đại diện cho video ngắn trong ứng dụng&#10; * Được sử dụng với Firebase Realtime Database&#10; * Video URLs sẽ đến từ Cloudinary thay vì Firebase Storage&#10; */&#10;public class ShortVideo {&#10;    @PropertyName(&quot;id&quot;)&#10;    private String id;&#10;&#10;    @PropertyName(&quot;title&quot;)&#10;    private String title;&#10;&#10;    @PropertyName(&quot;caption&quot;)&#10;    private String caption;&#10;&#10;    @PropertyName(&quot;uploadDate&quot;)&#10;    private long uploadDate;&#10;&#10;    @PropertyName(&quot;videoUrl&quot;)&#10;    private String videoUrl;&#10;&#10;    @PropertyName(&quot;thumbnailUrl&quot;)&#10;    private String thumbnailUrl;&#10;&#10;    @PropertyName(&quot;categoryId&quot;)&#10;    private String categoryId;&#10;&#10;    @PropertyName(&quot;tags&quot;)&#10;    private Map&lt;String, Boolean&gt; tags;&#10;&#10;    @PropertyName(&quot;viewCount&quot;)&#10;    private int viewCount;&#10;&#10;    @PropertyName(&quot;likeCount&quot;)&#10;    private int likeCount;&#10;&#10;    @PropertyName(&quot;userId&quot;)&#10;    private String userId;&#10;&#10;    // Constructor mặc định cần thiết cho Firebase&#10;    public ShortVideo() {&#10;    }&#10;&#10;    // Constructor cập nhật - loại bỏ cloudinaryPublicId&#10;    public ShortVideo(String id, String title, String caption, long uploadDate,&#10;                     String videoUrl, String thumbnailUrl, String categoryId,&#10;                     Map&lt;String, Boolean&gt; tags, int viewCount, int likeCount, String userId) {&#10;        this.id = id;&#10;        this.title = title;&#10;        this.caption = caption;&#10;        this.uploadDate = uploadDate;&#10;        this.videoUrl = videoUrl;&#10;        this.thumbnailUrl = thumbnailUrl;&#10;        this.categoryId = categoryId;&#10;        this.tags = tags;&#10;        this.viewCount = viewCount;&#10;        this.likeCount = likeCount;&#10;        this.userId = userId;&#10;    }&#10;&#10;    // Getters và Setters&#10;    public String getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(String id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getTitle() {&#10;        return title;&#10;    }&#10;&#10;    public void setTitle(String title) {&#10;        this.title = title;&#10;    }&#10;&#10;    public String getCaption() {&#10;        return caption;&#10;    }&#10;&#10;    public void setCaption(String caption) {&#10;        this.caption = caption;&#10;    }&#10;&#10;    public long getUploadDate() {&#10;        return uploadDate;&#10;    }&#10;&#10;    public void setUploadDate(long uploadDate) {&#10;        this.uploadDate = uploadDate;&#10;    }&#10;&#10;    public String getVideoUrl() {&#10;        return videoUrl;&#10;    }&#10;&#10;    public void setVideoUrl(String videoUrl) {&#10;        this.videoUrl = videoUrl;&#10;    }&#10;&#10;    public String getThumbnailUrl() {&#10;        return thumbnailUrl;&#10;    }&#10;&#10;    public void setThumbnailUrl(String thumbnailUrl) {&#10;        this.thumbnailUrl = thumbnailUrl;&#10;    }&#10;&#10;    public String getCategoryId() {&#10;        return categoryId;&#10;    }&#10;&#10;    public void setCategoryId(String categoryId) {&#10;        this.categoryId = categoryId;&#10;    }&#10;&#10;    public Map&lt;String, Boolean&gt; getTags() {&#10;        return tags;&#10;    }&#10;&#10;    public void setTags(Map&lt;String, Boolean&gt; tags) {&#10;        this.tags = tags;&#10;    }&#10;&#10;    public int getViewCount() {&#10;        return viewCount;&#10;    }&#10;&#10;    public void setViewCount(int viewCount) {&#10;        this.viewCount = viewCount;&#10;    }&#10;&#10;    public int getLikeCount() {&#10;        return likeCount;&#10;    }&#10;&#10;    public void setLikeCount(int likeCount) {&#10;        this.likeCount = likeCount;&#10;    }&#10;&#10;    public String getUserId() {&#10;        return userId;&#10;    }&#10;&#10;    public void setUserId(String userId) {&#10;        this.userId = userId;&#10;    }&#10;&#10;    /**&#10;     * Kiểm tra xem video có sử dụng Cloudinary không&#10;     * @return true nếu video URL từ Cloudinary&#10;     */&#10;    public boolean isCloudinaryVideo() {&#10;        return CloudinaryVideoHelper.isCloudinaryVideoUrl(this.videoUrl);&#10;    }&#10;&#10;    /**&#10;     * Lấy optimized video URL cho mobile&#10;     * @return URL video được tối ưu cho mobile&#10;     */&#10;    public String getOptimizedVideoUrl() {&#10;        if (isCloudinaryVideo()) {&#10;            String publicId = CloudinaryVideoHelper.extractPublicIdFromUrl(this.videoUrl);&#10;            return CloudinaryVideoHelper.getOptimizedVideoUrl(publicId, &quot;auto:good&quot;);&#10;        }&#10;        return this.videoUrl; // Trả về URL gốc nếu không phải Cloudinary&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;ShortVideo{&quot; +&#10;                &quot;id='&quot; + id + '\'' +&#10;                &quot;, title='&quot; + title + '\'' +&#10;                &quot;, caption='&quot; + caption + '\'' +&#10;                &quot;, uploadDate=&quot; + uploadDate +&#10;                &quot;, videoUrl='&quot; + videoUrl + '\'' +&#10;                &quot;, thumbnailUrl='&quot; + thumbnailUrl + '\'' +&#10;                &quot;, categoryId='&quot; + categoryId + '\'' +&#10;                &quot;, tags=&quot; + tags +&#10;                &quot;, viewCount=&quot; + viewCount +&#10;                &quot;, likeCount=&quot; + likeCount +&#10;                &quot;, userId='&quot; + userId + '\'' +&#10;                '}';&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.data;&#10;&#10;import com.google.firebase.database.PropertyName;&#10;import com.vhn.doan.services.CloudinaryVideoHelper;&#10;import java.util.Map;&#10;&#10;/**&#10; * Model class để đại diện cho video ngắn trong ứng dụng&#10; * Được sử dụng với Firebase Realtime Database&#10; * Video URLs sẽ đến từ Cloudinary thay vì Firebase Storage&#10; */&#10;public class ShortVideo {&#10;    @PropertyName(&quot;id&quot;)&#10;    private String id;&#10;&#10;    @PropertyName(&quot;title&quot;)&#10;    private String title;&#10;&#10;    @PropertyName(&quot;caption&quot;)&#10;    private String caption;&#10;&#10;    @PropertyName(&quot;uploadDate&quot;)&#10;    private long uploadDate;&#10;&#10;    @PropertyName(&quot;videoUrl&quot;)&#10;    private String videoUrl;&#10;&#10;    @PropertyName(&quot;thumbnailUrl&quot;)&#10;    private String thumbnailUrl;&#10;&#10;    @PropertyName(&quot;categoryId&quot;)&#10;    private String categoryId;&#10;&#10;    @PropertyName(&quot;tags&quot;)&#10;    private Map&lt;String, Boolean&gt; tags;&#10;&#10;    @PropertyName(&quot;viewCount&quot;)&#10;    private int viewCount;&#10;&#10;    @PropertyName(&quot;likeCount&quot;)&#10;    private int likeCount;&#10;&#10;    @PropertyName(&quot;userId&quot;)&#10;    private String userId;&#10;&#10;    // Constructor mặc định cần thiết cho Firebase&#10;    public ShortVideo() {&#10;    }&#10;&#10;    // Constructor cập nhật - loại bỏ cloudinaryPublicId&#10;    public ShortVideo(String id, String title, String caption, long uploadDate,&#10;                     String videoUrl, String thumbnailUrl, String categoryId,&#10;                     Map&lt;String, Boolean&gt; tags, int viewCount, int likeCount, String userId) {&#10;        this.id = id;&#10;        this.title = title;&#10;        this.caption = caption;&#10;        this.uploadDate = uploadDate;&#10;        this.videoUrl = videoUrl;&#10;        this.thumbnailUrl = thumbnailUrl;&#10;        this.categoryId = categoryId;&#10;        this.tags = tags;&#10;        this.viewCount = viewCount;&#10;        this.likeCount = likeCount;&#10;        this.userId = userId;&#10;    }&#10;&#10;    // Getters và Setters&#10;    public String getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(String id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getTitle() {&#10;        return title;&#10;    }&#10;&#10;    public void setTitle(String title) {&#10;        this.title = title;&#10;    }&#10;&#10;    public String getCaption() {&#10;        return caption;&#10;    }&#10;&#10;    public void setCaption(String caption) {&#10;        this.caption = caption;&#10;    }&#10;&#10;    public long getUploadDate() {&#10;        return uploadDate;&#10;    }&#10;&#10;    public void setUploadDate(long uploadDate) {&#10;        this.uploadDate = uploadDate;&#10;    }&#10;&#10;    public String getVideoUrl() {&#10;        return videoUrl;&#10;    }&#10;&#10;    public void setVideoUrl(String videoUrl) {&#10;        this.videoUrl = videoUrl;&#10;    }&#10;&#10;    public String getThumbnailUrl() {&#10;        return thumbnailUrl;&#10;    }&#10;&#10;    public void setThumbnailUrl(String thumbnailUrl) {&#10;        this.thumbnailUrl = thumbnailUrl;&#10;    }&#10;&#10;    public String getCategoryId() {&#10;        return categoryId;&#10;    }&#10;&#10;    public void setCategoryId(String categoryId) {&#10;        this.categoryId = categoryId;&#10;    }&#10;&#10;    public Map&lt;String, Boolean&gt; getTags() {&#10;        return tags;&#10;    }&#10;&#10;    public void setTags(Map&lt;String, Boolean&gt; tags) {&#10;        this.tags = tags;&#10;    }&#10;&#10;    public int getViewCount() {&#10;        return viewCount;&#10;    }&#10;&#10;    public void setViewCount(int viewCount) {&#10;        this.viewCount = viewCount;&#10;    }&#10;&#10;    public int getLikeCount() {&#10;        return likeCount;&#10;    }&#10;&#10;    public void setLikeCount(int likeCount) {&#10;        this.likeCount = likeCount;&#10;    }&#10;&#10;    public String getUserId() {&#10;        return userId;&#10;    }&#10;&#10;    public void setUserId(String userId) {&#10;        this.userId = userId;&#10;    }&#10;&#10;    /**&#10;     * Kiểm tra xem video có sử dụng Cloudinary không&#10;     * @return true nếu video URL từ Cloudinary&#10;     */&#10;    public boolean isCloudinaryVideo() {&#10;        return CloudinaryVideoHelper.isCloudinaryVideoUrl(this.videoUrl);&#10;    }&#10;&#10;    /**&#10;     * Lấy optimized video URL cho mobile&#10;     * @return URL video được tối ưu cho mobile&#10;     */&#10;    public String getOptimizedVideoUrl() {&#10;        if (isCloudinaryVideo()) {&#10;            // Sử dụng trực tiếp URL gốc thay vì extract public ID&#10;            return CloudinaryVideoHelper.getOptimizedVideoUrl(this.videoUrl, &quot;auto:good&quot;);&#10;        }&#10;        return this.videoUrl; // Trả về URL gốc nếu không phải Cloudinary&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;ShortVideo{&quot; +&#10;                &quot;id='&quot; + id + '\'' +&#10;                &quot;, title='&quot; + title + '\'' +&#10;                &quot;, caption='&quot; + caption + '\'' +&#10;                &quot;, uploadDate=&quot; + uploadDate +&#10;                &quot;, videoUrl='&quot; + videoUrl + '\'' +&#10;                &quot;, thumbnailUrl='&quot; + thumbnailUrl + '\'' +&#10;                &quot;, categoryId='&quot; + categoryId + '\'' +&#10;                &quot;, tags=&quot; + tags +&#10;                &quot;, viewCount=&quot; + viewCount +&#10;                &quot;, likeCount=&quot; + likeCount +&#10;                &quot;, userId='&quot; + userId + '\'' +&#10;                '}';&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/model/ShortVideoModel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/model/ShortVideoModel.java" />
              <option name="originalContent" value="package com.vhn.doan.data.model;&#10;&#10;import java.util.Map;&#10;&#10;/**&#10; * Model class để ánh xạ dữ liệu video ngắn từ Firebase node /videos/{videoId}&#10; * Sử dụng cho chức năng hiển thị video ngắn trong ShortVideoFragment&#10; */&#10;public class ShortVideoModel {&#10;&#10;    private String id; // Thêm field ID&#10;    private String title;&#10;    private String caption;&#10;    private Long uploadDate;&#10;    private String videoUrl;&#10;    private String thumbnailUrl;&#10;    private String categoryId;&#10;    private Map&lt;String, Boolean&gt; tags;&#10;    private Long viewCount;&#10;    private Long likeCount;&#10;    private String userId;&#10;&#10;    /**&#10;     * Constructor rỗng bắt buộc cho Firebase Realtime Database&#10;     */&#10;    public ShortVideoModel() {&#10;        // Constructor rỗng để Firebase có thể khởi tạo object&#10;    }&#10;&#10;    /**&#10;     * Constructor đầy đủ tham số&#10;     */&#10;    public ShortVideoModel(String id, String title, String caption, Long uploadDate, String videoUrl,&#10;                          String thumbnailUrl, String categoryId, Map&lt;String, Boolean&gt; tags,&#10;                          Long viewCount, Long likeCount, String userId) {&#10;        this.id = id;&#10;        this.title = title;&#10;        this.caption = caption;&#10;        this.uploadDate = uploadDate;&#10;        this.videoUrl = videoUrl;&#10;        this.thumbnailUrl = thumbnailUrl;&#10;        this.categoryId = categoryId;&#10;        this.tags = tags;&#10;        this.viewCount = viewCount;&#10;        this.likeCount = likeCount;&#10;        this.userId = userId;&#10;    }&#10;&#10;    // Getter methods&#10;    public String getId() {&#10;        return id;&#10;    }&#10;&#10;    public String getTitle() {&#10;        return title;&#10;    }&#10;&#10;    public String getCaption() {&#10;        return caption;&#10;    }&#10;&#10;    public Long getUploadDate() {&#10;        return uploadDate;&#10;    }&#10;&#10;    public String getVideoUrl() {&#10;        return videoUrl;&#10;    }&#10;&#10;    public String getThumbnailUrl() {&#10;        return thumbnailUrl;&#10;    }&#10;&#10;    public String getCategoryId() {&#10;        return categoryId;&#10;    }&#10;&#10;    public Map&lt;String, Boolean&gt; getTags() {&#10;        return tags;&#10;    }&#10;&#10;    public Long getViewCount() {&#10;        return viewCount;&#10;    }&#10;&#10;    public Long getLikeCount() {&#10;        return likeCount;&#10;    }&#10;&#10;    public String getUserId() {&#10;        return userId;&#10;    }&#10;&#10;    // Setter methods&#10;    public void setId(String id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public void setTitle(String title) {&#10;        this.title = title;&#10;    }&#10;&#10;    public void setCaption(String caption) {&#10;        this.caption = caption;&#10;    }&#10;&#10;    public void setUploadDate(Long uploadDate) {&#10;        this.uploadDate = uploadDate;&#10;    }&#10;&#10;    public void setVideoUrl(String videoUrl) {&#10;        this.videoUrl = videoUrl;&#10;    }&#10;&#10;    public void setThumbnailUrl(String thumbnailUrl) {&#10;        this.thumbnailUrl = thumbnailUrl;&#10;    }&#10;&#10;    public void setCategoryId(String categoryId) {&#10;        this.categoryId = categoryId;&#10;    }&#10;&#10;    public void setTags(Map&lt;String, Boolean&gt; tags) {&#10;        this.tags = tags;&#10;    }&#10;&#10;    public void setViewCount(Long viewCount) {&#10;        this.viewCount = viewCount;&#10;    }&#10;&#10;    public void setLikeCount(Long likeCount) {&#10;        this.likeCount = likeCount;&#10;    }&#10;&#10;    public void setUserId(String userId) {&#10;        this.userId = userId;&#10;    }&#10;&#10;    /**&#10;     * Kiểm tra xem video có tag cụ thể hay không&#10;     * @param tag Tag cần kiểm tra&#10;     * @return true nếu video có tag này và tag được đánh dấu true&#10;     */&#10;    public boolean hasTag(String tag) {&#10;        return tags != null &amp;&amp; Boolean.TRUE.equals(tags.get(tag));&#10;    }&#10;&#10;    /**&#10;     * Thêm tag cho video&#10;     * @param tag Tag cần thêm&#10;     */&#10;    public void addTag(String tag) {&#10;        if (tags != null) {&#10;            tags.put(tag, true);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Xóa tag khỏi video&#10;     * @param tag Tag cần xóa&#10;     */&#10;    public void removeTag(String tag) {&#10;        if (tags != null) {&#10;            tags.remove(tag);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;ShortVideoModel{&quot; +&#10;                &quot;id='&quot; + id + '\'' +&#10;                &quot;, title='&quot; + title + '\'' +&#10;                &quot;, caption='&quot; + caption + '\'' +&#10;                &quot;, uploadDate=&quot; + uploadDate +&#10;                &quot;, videoUrl='&quot; + videoUrl + '\'' +&#10;                &quot;, thumbnailUrl='&quot; + thumbnailUrl + '\'' +&#10;                &quot;, categoryId='&quot; + categoryId + '\'' +&#10;                &quot;, tags=&quot; + tags +&#10;                &quot;, viewCount=&quot; + viewCount +&#10;                &quot;, likeCount=&quot; + likeCount +&#10;                &quot;, userId='&quot; + userId + '\'' +&#10;                '}';&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.data.model;&#10;&#10;import java.util.Map;&#10;&#10;/**&#10; * Model class để ánh xạ dữ liệu video ngắn từ Firebase node /videos/{videoId}&#10; * Sử dụng cho chức năng hiển thị video ngắn trong ShortVideoFragment&#10; */&#10;public class ShortVideoModel {&#10;&#10;    private String id; // Thêm field ID&#10;    private String title;&#10;    private String caption;&#10;    private Long uploadDate;&#10;    private String videoUrl;&#10;    private String thumbnailUrl;&#10;    private String categoryId;&#10;    private Map&lt;String, Boolean&gt; tags;&#10;    private Long viewCount;&#10;    private Long likeCount;&#10;    private String userId;&#10;&#10;    // Thêm các field mới cho metadata từ Firebase&#10;    private Boolean isActive;&#10;    private Integer duration; // Thời lượng video tính bằng giây&#10;&#10;    /**&#10;     * Constructor rỗng bắt buộc cho Firebase Realtime Database&#10;     */&#10;    public ShortVideoModel() {&#10;        // Constructor rỗng để Firebase có thể khởi tạo object&#10;    }&#10;&#10;    /**&#10;     * Constructor đầy đủ tham số&#10;     */&#10;    public ShortVideoModel(String id, String title, String caption, Long uploadDate, String videoUrl,&#10;                          String thumbnailUrl, String categoryId, Map&lt;String, Boolean&gt; tags,&#10;                          Long viewCount, Long likeCount, String userId) {&#10;        this.id = id;&#10;        this.title = title;&#10;        this.caption = caption;&#10;        this.uploadDate = uploadDate;&#10;        this.videoUrl = videoUrl;&#10;        this.thumbnailUrl = thumbnailUrl;&#10;        this.categoryId = categoryId;&#10;        this.tags = tags;&#10;        this.viewCount = viewCount;&#10;        this.likeCount = likeCount;&#10;        this.userId = userId;&#10;    }&#10;&#10;    /**&#10;     * Constructor đầy đủ tham số với các field mới&#10;     */&#10;    public ShortVideoModel(String id, String title, String caption, Long uploadDate, String videoUrl,&#10;                          String thumbnailUrl, String categoryId, Map&lt;String, Boolean&gt; tags,&#10;                          Long viewCount, Long likeCount, String userId, Boolean isActive, Integer duration) {&#10;        this.id = id;&#10;        this.title = title;&#10;        this.caption = caption;&#10;        this.uploadDate = uploadDate;&#10;        this.videoUrl = videoUrl;&#10;        this.thumbnailUrl = thumbnailUrl;&#10;        this.categoryId = categoryId;&#10;        this.tags = tags;&#10;        this.viewCount = viewCount;&#10;        this.likeCount = likeCount;&#10;        this.userId = userId;&#10;        this.isActive = isActive;&#10;        this.duration = duration;&#10;    }&#10;&#10;    // Getter methods&#10;    public String getId() {&#10;        return id;&#10;    }&#10;&#10;    public String getTitle() {&#10;        return title;&#10;    }&#10;&#10;    public String getCaption() {&#10;        return caption;&#10;    }&#10;&#10;    public Long getUploadDate() {&#10;        return uploadDate;&#10;    }&#10;&#10;    public String getVideoUrl() {&#10;        return videoUrl;&#10;    }&#10;&#10;    public String getThumbnailUrl() {&#10;        return thumbnailUrl;&#10;    }&#10;&#10;    public String getCategoryId() {&#10;        return categoryId;&#10;    }&#10;&#10;    public Map&lt;String, Boolean&gt; getTags() {&#10;        return tags;&#10;    }&#10;&#10;    public Long getViewCount() {&#10;        return viewCount;&#10;    }&#10;&#10;    public Long getLikeCount() {&#10;        return likeCount;&#10;    }&#10;&#10;    public String getUserId() {&#10;        return userId;&#10;    }&#10;&#10;    // Thêm getter cho các field mới&#10;    public Boolean getIsActive() {&#10;        return isActive;&#10;    }&#10;&#10;    public boolean isActive() {&#10;        return isActive != null ? isActive : false;&#10;    }&#10;&#10;    public Integer getDuration() {&#10;        return duration;&#10;    }&#10;&#10;    /**&#10;     * Lấy thời lượng video dưới dạng string (mm:ss)&#10;     * @return Thời lượng video format mm:ss&#10;     */&#10;    public String getFormattedDuration() {&#10;        if (duration == null || duration &lt;= 0) {&#10;            return &quot;00:00&quot;;&#10;        }&#10;&#10;        int minutes = duration / 60;&#10;        int seconds = duration % 60;&#10;        return String.format(&quot;%02d:%02d&quot;, minutes, seconds);&#10;    }&#10;&#10;    // Setter methods&#10;    public void setId(String id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public void setTitle(String title) {&#10;        this.title = title;&#10;    }&#10;&#10;    public void setCaption(String caption) {&#10;        this.caption = caption;&#10;    }&#10;&#10;    public void setUploadDate(Long uploadDate) {&#10;        this.uploadDate = uploadDate;&#10;    }&#10;&#10;    public void setVideoUrl(String videoUrl) {&#10;        this.videoUrl = videoUrl;&#10;    }&#10;&#10;    public void setThumbnailUrl(String thumbnailUrl) {&#10;        this.thumbnailUrl = thumbnailUrl;&#10;    }&#10;&#10;    public void setCategoryId(String categoryId) {&#10;        this.categoryId = categoryId;&#10;    }&#10;&#10;    public void setTags(Map&lt;String, Boolean&gt; tags) {&#10;        this.tags = tags;&#10;    }&#10;&#10;    public void setViewCount(Long viewCount) {&#10;        this.viewCount = viewCount;&#10;    }&#10;&#10;    public void setLikeCount(Long likeCount) {&#10;        this.likeCount = likeCount;&#10;    }&#10;&#10;    public void setUserId(String userId) {&#10;        this.userId = userId;&#10;    }&#10;&#10;    // Thêm setter cho các field mới&#10;    public void setIsActive(Boolean isActive) {&#10;        this.isActive = isActive;&#10;    }&#10;&#10;    public void setDuration(Integer duration) {&#10;        this.duration = duration;&#10;    }&#10;&#10;    /**&#10;     * Kiểm tra xem video có tag cụ thể hay không&#10;     * @param tag Tag cần kiểm tra&#10;     * @return true nếu video có tag này và tag được đánh dấu true&#10;     */&#10;    public boolean hasTag(String tag) {&#10;        return tags != null &amp;&amp; Boolean.TRUE.equals(tags.get(tag));&#10;    }&#10;&#10;    /**&#10;     * Thêm tag cho video&#10;     * @param tag Tag cần thêm&#10;     */&#10;    public void addTag(String tag) {&#10;        if (tags != null) {&#10;            tags.put(tag, true);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Xóa tag khỏi video&#10;     * @param tag Tag cần xóa&#10;     */&#10;    public void removeTag(String tag) {&#10;        if (tags != null) {&#10;            tags.remove(tag);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;ShortVideoModel{&quot; +&#10;                &quot;id='&quot; + id + '\'' +&#10;                &quot;, title='&quot; + title + '\'' +&#10;                &quot;, caption='&quot; + caption + '\'' +&#10;                &quot;, uploadDate=&quot; + uploadDate +&#10;                &quot;, videoUrl='&quot; + videoUrl + '\'' +&#10;                &quot;, thumbnailUrl='&quot; + thumbnailUrl + '\'' +&#10;                &quot;, categoryId='&quot; + categoryId + '\'' +&#10;                &quot;, tags=&quot; + tags +&#10;                &quot;, viewCount=&quot; + viewCount +&#10;                &quot;, likeCount=&quot; + likeCount +&#10;                &quot;, userId='&quot; + userId + '\'' +&#10;                &quot;, isActive=&quot; + isActive +&#10;                &quot;, duration=&quot; + duration +&#10;                '}';&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/model/UserPreferenceModel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/model/UserPreferenceModel.java" />
              <option name="updatedContent" value="package com.vhn.doan.data.model;&#10;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;/**&#10; * Model class để ánh xạ dữ liệu sở thích người dùng từ Firebase node /users/{userId}/preferences&#10; * Lưu trữ độ ưa thích của người dùng đối với các chủ đề dưới dạng Map&lt;String, Float&gt;&#10; * Giá trị Float từ 0.0 đến 1.0, trong đó 1.0 là ưa thích nhất&#10; */&#10;public class UserPreferenceModel {&#10;    &#10;    private Map&lt;String, Float&gt; preferences;&#10;&#10;    /**&#10;     * Constructor rỗng bắt buộc cho Firebase Realtime Database&#10;     */&#10;    public UserPreferenceModel() {&#10;        this.preferences = new HashMap&lt;&gt;();&#10;    }&#10;&#10;    /**&#10;     * Constructor với Map preferences&#10;     * @param preferences Map chứa sở thích người dùng (key: topic, value: preference score 0.0-1.0)&#10;     */&#10;    public UserPreferenceModel(Map&lt;String, Float&gt; preferences) {&#10;        this.preferences = preferences != null ? preferences : new HashMap&lt;&gt;();&#10;    }&#10;&#10;    // Getter và Setter&#10;    public Map&lt;String, Float&gt; getPreferences() {&#10;        return preferences;&#10;    }&#10;&#10;    public void setPreferences(Map&lt;String, Float&gt; preferences) {&#10;        this.preferences = preferences != null ? preferences : new HashMap&lt;&gt;();&#10;    }&#10;&#10;    /**&#10;     * Lấy điểm sở thích cho một chủ đề cụ thể&#10;     * @param topic Chủ đề cần lấy điểm&#10;     * @return Điểm sở thích (0.0-1.0) hoặc 0.0 nếu không tồn tại&#10;     */&#10;    public float getPreferenceScore(String topic) {&#10;        if (preferences == null || topic == null) {&#10;            return 0.0f;&#10;        }&#10;        Float score = preferences.get(topic);&#10;        return score != null ? score : 0.0f;&#10;    }&#10;&#10;    /**&#10;     * Cập nhật điểm sở thích cho một chủ đề&#10;     * @param topic Chủ đề cần cập nhật&#10;     * @param score Điểm sở thích mới (0.0-1.0)&#10;     */&#10;    public void setPreferenceScore(String topic, float score) {&#10;        if (preferences == null) {&#10;            preferences = new HashMap&lt;&gt;();&#10;        }&#10;        if (topic != null) {&#10;            // Đảm bảo điểm số trong khoảng 0.0-1.0&#10;            score = Math.max(0.0f, Math.min(1.0f, score));&#10;            preferences.put(topic, score);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Tăng điểm sở thích cho một chủ đề&#10;     * @param topic Chủ đề cần tăng điểm&#10;     * @param increment Mức tăng (có thể âm để giảm điểm)&#10;     */&#10;    public void incrementPreference(String topic, float increment) {&#10;        float currentScore = getPreferenceScore(topic);&#10;        setPreferenceScore(topic, currentScore + increment);&#10;    }&#10;&#10;    /**&#10;     * Xóa sở thích cho một chủ đề&#10;     * @param topic Chủ đề cần xóa&#10;     */&#10;    public void removePreference(String topic) {&#10;        if (preferences != null &amp;&amp; topic != null) {&#10;            preferences.remove(topic);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Kiểm tra xem có sở thích cho chủ đề nào không&#10;     * @param topic Chủ đề cần kiểm tra&#10;     * @return true nếu có sở thích cho chủ đề này&#10;     */&#10;    public boolean hasPreference(String topic) {&#10;        return preferences != null &amp;&amp; topic != null &amp;&amp; preferences.containsKey(topic);&#10;    }&#10;&#10;    /**&#10;     * Lấy số lượng chủ đề có sở thích&#10;     * @return Số lượng chủ đề&#10;     */&#10;    public int getPreferenceCount() {&#10;        return preferences != null ? preferences.size() : 0;&#10;    }&#10;&#10;    /**&#10;     * Xóa tất cả sở thích&#10;     */&#10;    public void clearPreferences() {&#10;        if (preferences != null) {&#10;            preferences.clear();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;UserPreferenceModel{&quot; +&#10;                &quot;preferences=&quot; + preferences +&#10;                '}';&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/model/UserTopicModel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/model/UserTopicModel.java" />
              <option name="updatedContent" value="package com.vhn.doan.data.model;&#10;&#10;import java.text.Normalizer;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;/**&#10; * Model class để ánh xạ dữ liệu chủ đề người dùng từ Firebase node /user_topics/{userId}&#10; * Lưu trữ số lần tương tác của người dùng với các chủ đề dưới dạng Map&lt;String, Long&gt;&#10; * Key có thể chứa khoảng trắng hoặc tiếng Việt, cần chuẩn hóa khi sử dụng làm tag&#10; */&#10;public class UserTopicModel {&#10;    &#10;    private Map&lt;String, Long&gt; topics;&#10;&#10;    /**&#10;     * Constructor rỗng bắt buộc cho Firebase Realtime Database&#10;     */&#10;    public UserTopicModel() {&#10;        this.topics = new HashMap&lt;&gt;();&#10;    }&#10;&#10;    /**&#10;     * Constructor với Map topics&#10;     * @param topics Map chứa chủ đề và số lần tương tác (key: topic name, value: interaction count)&#10;     */&#10;    public UserTopicModel(Map&lt;String, Long&gt; topics) {&#10;        this.topics = topics != null ? topics : new HashMap&lt;&gt;();&#10;    }&#10;&#10;    // Getter và Setter&#10;    public Map&lt;String, Long&gt; getTopics() {&#10;        return topics;&#10;    }&#10;&#10;    public void setTopics(Map&lt;String, Long&gt; topics) {&#10;        this.topics = topics != null ? topics : new HashMap&lt;&gt;();&#10;    }&#10;&#10;    /**&#10;     * Lấy số lần tương tác với một chủ đề cụ thể&#10;     * @param topic Tên chủ đề&#10;     * @return Số lần tương tác hoặc 0 nếu không tồn tại&#10;     */&#10;    public long getTopicCount(String topic) {&#10;        if (topics == null || topic == null) {&#10;            return 0L;&#10;        }&#10;        Long count = topics.get(topic);&#10;        return count != null ? count : 0L;&#10;    }&#10;&#10;    /**&#10;     * Cập nhật số lần tương tác cho một chủ đề&#10;     * @param topic Tên chủ đề&#10;     * @param count Số lần tương tác mới&#10;     */&#10;    public void setTopicCount(String topic, long count) {&#10;        if (topics == null) {&#10;            topics = new HashMap&lt;&gt;();&#10;        }&#10;        if (topic != null &amp;&amp; count &gt;= 0) {&#10;            topics.put(topic, count);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Tăng số lần tương tác cho một chủ đề&#10;     * @param topic Tên chủ đề&#10;     * @param increment Số lần tăng (mặc định là 1)&#10;     */&#10;    public void incrementTopicCount(String topic, long increment) {&#10;        long currentCount = getTopicCount(topic);&#10;        setTopicCount(topic, currentCount + increment);&#10;    }&#10;&#10;    /**&#10;     * Tăng số lần tương tác cho một chủ đề (tăng 1)&#10;     * @param topic Tên chủ đề&#10;     */&#10;    public void incrementTopicCount(String topic) {&#10;        incrementTopicCount(topic, 1L);&#10;    }&#10;&#10;    /**&#10;     * Xóa một chủ đề&#10;     * @param topic Tên chủ đề cần xóa&#10;     */&#10;    public void removeTopic(String topic) {&#10;        if (topics != null &amp;&amp; topic != null) {&#10;            topics.remove(topic);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Kiểm tra xem có chủ đề nào không&#10;     * @param topic Tên chủ đề cần kiểm tra&#10;     * @return true nếu có chủ đề này&#10;     */&#10;    public boolean hasTopic(String topic) {&#10;        return topics != null &amp;&amp; topic != null &amp;&amp; topics.containsKey(topic);&#10;    }&#10;&#10;    /**&#10;     * Lấy số lượng chủ đề&#10;     * @return Số lượng chủ đề&#10;     */&#10;    public int getTopicCount() {&#10;        return topics != null ? topics.size() : 0;&#10;    }&#10;&#10;    /**&#10;     * Xóa tất cả chủ đề&#10;     */&#10;    public void clearTopics() {&#10;        if (topics != null) {&#10;            topics.clear();&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Chuẩn hóa tên chủ đề thành tag sử dụng được&#10;     * Chuyển đổi các ký tự tiếng Việt có dấu thành không dấu&#10;     * Loại bỏ khoảng trắng và ký tự đặc biệt&#10;     * Chuyển thành chữ thường&#10;     * &#10;     * Ví dụ: &quot;Tim Mạch&quot; → &quot;timmach&quot;, &quot;Sức Khỏe&quot; → &quot;suckhoe&quot;&#10;     * &#10;     * @param topicName Tên chủ đề gốc&#10;     * @return Tag đã được chuẩn hóa&#10;     */&#10;    public static String normalizeTopicToTag(String topicName) {&#10;        if (topicName == null || topicName.trim().isEmpty()) {&#10;            return &quot;&quot;;&#10;        }&#10;&#10;        // Chuyển về chữ thường&#10;        String normalized = topicName.toLowerCase().trim();&#10;&#10;        // Loại bỏ dấu tiếng Việt&#10;        normalized = Normalizer.normalize(normalized, Normalizer.Form.NFD);&#10;        normalized = normalized.replaceAll(&quot;\\p{InCombiningDiacriticalMarks}+&quot;, &quot;&quot;);&#10;&#10;        // Thay thế các ký tự đặc biệt của tiếng Việt&#10;        normalized = normalized.replace(&quot;đ&quot;, &quot;d&quot;).replace(&quot;Đ&quot;, &quot;d&quot;);&#10;&#10;        // Loại bỏ khoảng trắng và ký tự đặc biệt, chỉ giữ lại chữ cái và số&#10;        normalized = normalized.replaceAll(&quot;[^a-zA-Z0-9]&quot;, &quot;&quot;);&#10;&#10;        return normalized;&#10;    }&#10;&#10;    /**&#10;     * Lấy tag đã chuẩn hóa từ một chủ đề có trong model&#10;     * @param topic Tên chủ đề&#10;     * @return Tag đã chuẩn hóa nếu chủ đề tồn tại, null nếu không tồn tại&#10;     */&#10;    public String getTopicTag(String topic) {&#10;        if (hasTopic(topic)) {&#10;            return normalizeTopicToTag(topic);&#10;        }&#10;        return null;&#10;    }&#10;&#10;    /**&#10;     * Lấy Map với key là tag đã chuẩn hóa và value là số lần tương tác&#10;     * @return Map&lt;tag_chuẩn_hóa, số_lần_tương_tác&gt;&#10;     */&#10;    public Map&lt;String, Long&gt; getTopicsAsTagMap() {&#10;        Map&lt;String, Long&gt; tagMap = new HashMap&lt;&gt;();&#10;        if (topics != null) {&#10;            for (Map.Entry&lt;String, Long&gt; entry : topics.entrySet()) {&#10;                String tag = normalizeTopicToTag(entry.getKey());&#10;                if (!tag.isEmpty()) {&#10;                    tagMap.put(tag, entry.getValue());&#10;                }&#10;            }&#10;        }&#10;        return tagMap;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;UserTopicModel{&quot; +&#10;                &quot;topics=&quot; + topics +&#10;                '}';&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/repository/HealthTipVideoRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/repository/HealthTipVideoRepository.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/repository/VideoRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/repository/VideoRepository.java" />
              <option name="updatedContent" value="package com.vhn.doan.data.repository;&#10;&#10;import com.vhn.doan.data.Video;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;public interface VideoRepository {&#10;    &#10;    /**&#10;     * Lấy danh sách video được đề xuất cho người dùng dựa trên preferences và topics&#10;     */&#10;    void getRecommendedVideos(String userId, RepositoryCallback&lt;List&lt;Video&gt;&gt; callback);&#10;    &#10;    /**&#10;     * Lấy video trending cho người dùng mới&#10;     */&#10;    void getTrendingVideos(String region, RepositoryCallback&lt;List&lt;Video&gt;&gt; callback);&#10;    &#10;    /**&#10;     * Lấy danh sách video theo category&#10;     */&#10;    void getVideosByCategory(String categoryId, RepositoryCallback&lt;List&lt;Video&gt;&gt; callback);&#10;    &#10;    /**&#10;     * Lấy danh sách video theo tags&#10;     */&#10;    void getVideosByTags(List&lt;String&gt; tags, RepositoryCallback&lt;List&lt;Video&gt;&gt; callback);&#10;    &#10;    /**&#10;     * Lấy chi tiết một video&#10;     */&#10;    void getVideoById(String videoId, RepositoryCallback&lt;Video&gt; callback);&#10;    &#10;    /**&#10;     * Tăng số lượt xem cho video&#10;     */&#10;    void incrementViewCount(String videoId, RepositoryCallback&lt;Void&gt; callback);&#10;    &#10;    /**&#10;     * Thích/bỏ thích video&#10;     */&#10;    void toggleLikeVideo(String videoId, String userId, boolean isLiked, RepositoryCallback&lt;Void&gt; callback);&#10;    &#10;    /**&#10;     * Kiểm tra người dùng đã thích video chưa&#10;     */&#10;    void isVideoLiked(String videoId, String userId, RepositoryCallback&lt;Boolean&gt; callback);&#10;    &#10;    /**&#10;     * Lưu lịch sử xem video của người dùng&#10;     */&#10;    void saveVideoView(String videoId, String userId, RepositoryCallback&lt;Void&gt; callback);&#10;    &#10;    /**&#10;     * Lấy user preferences để đề xuất video&#10;     */&#10;    void getUserPreferences(String userId, RepositoryCallback&lt;Map&lt;String, Double&gt;&gt; callback);&#10;    &#10;    /**&#10;     * Lấy user topics từ AI interactions để đề xuất video&#10;     */&#10;    void getUserTopics(String userId, RepositoryCallback&lt;Map&lt;String, Long&gt;&gt; callback);&#10;    &#10;    /**&#10;     * Cập nhật user preferences dựa trên hành vi xem video&#10;     */&#10;    void updateUserPreferences(String userId, String tag, double score, RepositoryCallback&lt;Void&gt; callback);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/repository/VideoRepositoryImpl.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/repository/VideoRepositoryImpl.java" />
              <option name="originalContent" value="package com.vhn.doan.data.repository;&#10;&#10;import com.google.firebase.database.DataSnapshot;&#10;import com.google.firebase.database.DatabaseError;&#10;import com.google.firebase.database.DatabaseReference;&#10;import com.google.firebase.database.FirebaseDatabase;&#10;import com.google.firebase.database.Query;&#10;import com.google.firebase.database.ValueEventListener;&#10;import com.vhn.doan.data.Video;&#10;&#10;import java.util.ArrayList;&#10;import java.util.Collections;&#10;import java.util.Comparator;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;public class VideoRepositoryImpl implements VideoRepository {&#10;&#10;    private DatabaseReference databaseReference;&#10;&#10;    public VideoRepositoryImpl() {&#10;        this.databaseReference = FirebaseDatabase.getInstance().getReference();&#10;    }&#10;&#10;    @Override&#10;    public void getRecommendedVideos(String userId, RepositoryCallback&lt;List&lt;Video&gt;&gt; callback) {&#10;        // Lấy preferences và topics của user để đề xuất video&#10;        getUserPreferences(userId, new RepositoryCallback&lt;Map&lt;String, Double&gt;&gt;() {&#10;            @Override&#10;            public void onSuccess(Map&lt;String, Double&gt; preferences) {&#10;                getUserTopics(userId, new RepositoryCallback&lt;Map&lt;String, Long&gt;&gt;() {&#10;                    @Override&#10;                    public void onSuccess(Map&lt;String, Long&gt; topics) {&#10;                        // Kết hợp preferences và topics để tạo danh sách tags ưu tiên&#10;                        Map&lt;String, Double&gt; combinedTags = combinePreferencesAndTopics(preferences, topics);&#10;&#10;                        // Lấy tất cả video và lọc theo tags ưu tiên&#10;                        getAllVideos(new RepositoryCallback&lt;List&lt;Video&gt;&gt;() {&#10;                            @Override&#10;                            public void onSuccess(List&lt;Video&gt; allVideos) {&#10;                                List&lt;Video&gt; recommendedVideos = filterAndSortByRecommendation(allVideos, combinedTags);&#10;                                callback.onSuccess(recommendedVideos);&#10;                            }&#10;&#10;                            @Override&#10;                            public void onFailure(String error) {&#10;                                // Nếu lỗi, fallback về trending videos&#10;                                getTrendingVideos(&quot;vietnam&quot;, callback);&#10;                            }&#10;                        });&#10;                    }&#10;&#10;                    @Override&#10;                    public void onFailure(String error) {&#10;                        // Nếu không có topics, chỉ dùng preferences&#10;                        getAllVideos(new RepositoryCallback&lt;List&lt;Video&gt;&gt;() {&#10;                            @Override&#10;                            public void onSuccess(List&lt;Video&gt; allVideos) {&#10;                                List&lt;Video&gt; recommendedVideos = filterAndSortByRecommendation(allVideos, preferences);&#10;                                callback.onSuccess(recommendedVideos);&#10;                            }&#10;&#10;                            @Override&#10;                            public void onFailure(String error) {&#10;                                getTrendingVideos(&quot;vietnam&quot;, callback);&#10;                            }&#10;                        });&#10;                    }&#10;                });&#10;            }&#10;&#10;            @Override&#10;            public void onFailure(String error) {&#10;                // Nếu người dùng mới, hiển thị trending videos&#10;                getTrendingVideos(&quot;vietnam&quot;, callback);&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void getTrendingVideos(String region, RepositoryCallback&lt;List&lt;Video&gt;&gt; callback) {&#10;        databaseReference.child(&quot;trendingVideos&quot;).child(region)&#10;            .addListenerForSingleValueEvent(new ValueEventListener() {&#10;                @Override&#10;                public void onDataChange(DataSnapshot snapshot) {&#10;                    List&lt;String&gt; trendingVideoIds = new ArrayList&lt;&gt;();&#10;                    for (DataSnapshot child : snapshot.getChildren()) {&#10;                        trendingVideoIds.add(child.getKey());&#10;                    }&#10;&#10;                    if (trendingVideoIds.isEmpty()) {&#10;                        // Fallback: lấy video có viewCount cao nhất&#10;                        getTopViewedVideos(callback);&#10;                    } else {&#10;                        getVideosByIds(trendingVideoIds, callback);&#10;                    }&#10;                }&#10;&#10;                @Override&#10;                public void onCancelled(DatabaseError error) {&#10;                    getTopViewedVideos(callback);&#10;                }&#10;            });&#10;    }&#10;&#10;    @Override&#10;    public void getVideosByCategory(String categoryId, RepositoryCallback&lt;List&lt;Video&gt;&gt; callback) {&#10;        databaseReference.child(&quot;videos&quot;)&#10;            .orderByChild(&quot;categoryId&quot;)&#10;            .equalTo(categoryId)&#10;            .addListenerForSingleValueEvent(new ValueEventListener() {&#10;                @Override&#10;                public void onDataChange(DataSnapshot snapshot) {&#10;                    List&lt;Video&gt; videos = new ArrayList&lt;&gt;();&#10;                    for (DataSnapshot child : snapshot.getChildren()) {&#10;                        Video video = child.getValue(Video.class);&#10;                        if (video != null) {&#10;                            videos.add(video);&#10;                        }&#10;                    }&#10;&#10;                    // Sắp xếp theo ngày upload mới nhất&#10;                    Collections.sort(videos, (v1, v2) -&gt; Long.compare(v2.getUploadDate(), v1.getUploadDate()));&#10;                    callback.onSuccess(videos);&#10;                }&#10;&#10;                @Override&#10;                public void onCancelled(DatabaseError error) {&#10;                    callback.onFailure(error.getMessage());&#10;                }&#10;            });&#10;    }&#10;&#10;    @Override&#10;    public void getVideosByTags(List&lt;String&gt; tags, RepositoryCallback&lt;List&lt;Video&gt;&gt; callback) {&#10;        getAllVideos(new RepositoryCallback&lt;List&lt;Video&gt;&gt;() {&#10;            @Override&#10;            public void onSuccess(List&lt;Video&gt; allVideos) {&#10;                List&lt;Video&gt; filteredVideos = new ArrayList&lt;&gt;();&#10;&#10;                for (Video video : allVideos) {&#10;                    if (video.getTags() != null) {&#10;                        boolean hasMatchingTag = false;&#10;                        for (String tag : tags) {&#10;                            if (video.getTags().containsKey(tag) &amp;&amp; video.getTags().get(tag)) {&#10;                                hasMatchingTag = true;&#10;                                break;&#10;                            }&#10;                        }&#10;                        if (hasMatchingTag) {&#10;                            filteredVideos.add(video);&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // Sắp xếp theo likeCount và viewCount&#10;                Collections.sort(filteredVideos, (v1, v2) -&gt; {&#10;                    int likeDiff = v2.getLikeCount() - v1.getLikeCount();&#10;                    if (likeDiff == 0) {&#10;                        return v2.getViewCount() - v1.getViewCount();&#10;                    }&#10;                    return likeDiff;&#10;                });&#10;&#10;                callback.onSuccess(filteredVideos);&#10;            }&#10;&#10;            @Override&#10;            public void onFailure(String error) {&#10;                callback.onFailure(error);&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void getVideoById(String videoId, RepositoryCallback&lt;Video&gt; callback) {&#10;        databaseReference.child(&quot;videos&quot;).child(videoId)&#10;            .addListenerForSingleValueEvent(new ValueEventListener() {&#10;                @Override&#10;                public void onDataChange(DataSnapshot snapshot) {&#10;                    Video video = snapshot.getValue(Video.class);&#10;                    if (video != null) {&#10;                        callback.onSuccess(video);&#10;                    } else {&#10;                        callback.onFailure(&quot;Video not found&quot;);&#10;                    }&#10;                }&#10;&#10;                @Override&#10;                public void onCancelled(DatabaseError error) {&#10;                    callback.onFailure(error.getMessage());&#10;                }&#10;            });&#10;    }&#10;&#10;    @Override&#10;    public void incrementViewCount(String videoId, RepositoryCallback&lt;Void&gt; callback) {&#10;        DatabaseReference videoRef = databaseReference.child(&quot;videos&quot;).child(videoId).child(&quot;viewCount&quot;);&#10;        videoRef.addListenerForSingleValueEvent(new ValueEventListener() {&#10;            @Override&#10;            public void onDataChange(DataSnapshot snapshot) {&#10;                int currentCount = snapshot.getValue(Integer.class) != null ? snapshot.getValue(Integer.class) : 0;&#10;                videoRef.setValue(currentCount + 1)&#10;                    .addOnSuccessListener(aVoid -&gt; callback.onSuccess(null))&#10;                    .addOnFailureListener(e -&gt; callback.onFailure(e.getMessage()));&#10;            }&#10;&#10;            @Override&#10;            public void onCancelled(DatabaseError error) {&#10;                callback.onFailure(error.getMessage());&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void toggleLikeVideo(String videoId, String userId, boolean isLiked, RepositoryCallback&lt;Void&gt; callback) {&#10;        DatabaseReference userLikesRef = databaseReference.child(&quot;user_likes&quot;).child(userId).child(videoId);&#10;        DatabaseReference videoLikeCountRef = databaseReference.child(&quot;videos&quot;).child(videoId).child(&quot;likeCount&quot;);&#10;&#10;        if (isLiked) {&#10;            // Thêm like&#10;            userLikesRef.setValue(true);&#10;            videoLikeCountRef.addListenerForSingleValueEvent(new ValueEventListener() {&#10;                @Override&#10;                public void onDataChange(DataSnapshot snapshot) {&#10;                    int currentCount = snapshot.getValue(Integer.class) != null ? snapshot.getValue(Integer.class) : 0;&#10;                    videoLikeCountRef.setValue(currentCount + 1)&#10;                        .addOnSuccessListener(aVoid -&gt; callback.onSuccess(null))&#10;                        .addOnFailureListener(e -&gt; callback.onFailure(e.getMessage()));&#10;                }&#10;&#10;                @Override&#10;                public void onCancelled(DatabaseError error) {&#10;                    callback.onFailure(error.getMessage());&#10;                }&#10;            });&#10;        } else {&#10;            // Bỏ like&#10;            userLikesRef.removeValue();&#10;            videoLikeCountRef.addListenerForSingleValueEvent(new ValueEventListener() {&#10;                @Override&#10;                public void onDataChange(DataSnapshot snapshot) {&#10;                    int currentCount = snapshot.getValue(Integer.class) != null ? snapshot.getValue(Integer.class) : 0;&#10;                    videoLikeCountRef.setValue(Math.max(0, currentCount - 1))&#10;                        .addOnSuccessListener(aVoid -&gt; callback.onSuccess(null))&#10;                        .addOnFailureListener(e -&gt; callback.onFailure(e.getMessage()));&#10;                }&#10;&#10;                @Override&#10;                public void onCancelled(DatabaseError error) {&#10;                    callback.onFailure(error.getMessage());&#10;                }&#10;            });&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void isVideoLiked(String videoId, String userId, RepositoryCallback&lt;Boolean&gt; callback) {&#10;        databaseReference.child(&quot;user_likes&quot;).child(userId).child(videoId)&#10;            .addListenerForSingleValueEvent(new ValueEventListener() {&#10;                @Override&#10;                public void onDataChange(DataSnapshot snapshot) {&#10;                    boolean isLiked = snapshot.exists() &amp;&amp; snapshot.getValue(Boolean.class) != null&#10;                        &amp;&amp; snapshot.getValue(Boolean.class);&#10;                    callback.onSuccess(isLiked);&#10;                }&#10;&#10;                @Override&#10;                public void onCancelled(DatabaseError error) {&#10;                    callback.onFailure(error.getMessage());&#10;                }&#10;            });&#10;    }&#10;&#10;    @Override&#10;    public void saveVideoView(String videoId, String userId, RepositoryCallback&lt;Void&gt; callback) {&#10;        long timestamp = System.currentTimeMillis();&#10;        databaseReference.child(&quot;user_views&quot;).child(userId).child(videoId).setValue(timestamp)&#10;            .addOnSuccessListener(aVoid -&gt; callback.onSuccess(null))&#10;            .addOnFailureListener(e -&gt; callback.onFailure(e.getMessage()));&#10;    }&#10;&#10;    @Override&#10;    public void getUserPreferences(String userId, RepositoryCallback&lt;Map&lt;String, Double&gt;&gt; callback) {&#10;        databaseReference.child(&quot;users&quot;).child(userId).child(&quot;preferences&quot;)&#10;            .addListenerForSingleValueEvent(new ValueEventListener() {&#10;                @Override&#10;                public void onDataChange(DataSnapshot snapshot) {&#10;                    Map&lt;String, Double&gt; preferences = new HashMap&lt;&gt;();&#10;                    if (snapshot.exists()) {&#10;                        for (DataSnapshot child : snapshot.getChildren()) {&#10;                            String tag = child.getKey();&#10;                            Double score = child.getValue(Double.class);&#10;                            if (tag != null &amp;&amp; score != null) {&#10;                                preferences.put(tag, score);&#10;                            }&#10;                        }&#10;                    }&#10;                    callback.onSuccess(preferences);&#10;                }&#10;&#10;                @Override&#10;                public void onCancelled(DatabaseError error) {&#10;                    callback.onFailure(error.getMessage());&#10;                }&#10;            });&#10;    }&#10;&#10;    @Override&#10;    public void getUserTopics(String userId, RepositoryCallback&lt;Map&lt;String, Long&gt;&gt; callback) {&#10;        databaseReference.child(&quot;user_topics&quot;).child(userId)&#10;            .addListenerForSingleValueEvent(new ValueEventListener() {&#10;                @Override&#10;                public void onDataChange(DataSnapshot snapshot) {&#10;                    Map&lt;String, Long&gt; topics = new HashMap&lt;&gt;();&#10;                    if (snapshot.exists()) {&#10;                        for (DataSnapshot child : snapshot.getChildren()) {&#10;                            String topic = child.getKey();&#10;                            Long timestamp = child.getValue(Long.class);&#10;                            if (topic != null &amp;&amp; timestamp != null) {&#10;                                topics.put(topic, timestamp);&#10;                            }&#10;                        }&#10;                    }&#10;                    callback.onSuccess(topics);&#10;                }&#10;&#10;                @Override&#10;                public void onCancelled(DatabaseError error) {&#10;                    callback.onFailure(error.getMessage());&#10;                }&#10;            });&#10;    }&#10;&#10;    @Override&#10;    public void updateUserPreferences(String userId, String tag, double score, RepositoryCallback&lt;Void&gt; callback) {&#10;        databaseReference.child(&quot;users&quot;).child(userId).child(&quot;preferences&quot;).child(tag).setValue(score)&#10;            .addOnSuccessListener(aVoid -&gt; callback.onSuccess(null))&#10;            .addOnFailureListener(e -&gt; callback.onFailure(e.getMessage()));&#10;    }&#10;&#10;    // Helper methods&#10;    private void getAllVideos(RepositoryCallback&lt;List&lt;Video&gt;&gt; callback) {&#10;        databaseReference.child(&quot;videos&quot;)&#10;            .addListenerForSingleValueEvent(new ValueEventListener() {&#10;                @Override&#10;                public void onDataChange(DataSnapshot snapshot) {&#10;                    List&lt;Video&gt; videos = new ArrayList&lt;&gt;();&#10;                    for (DataSnapshot child : snapshot.getChildren()) {&#10;                        Video video = child.getValue(Video.class);&#10;                        if (video != null) {&#10;                            videos.add(video);&#10;                        }&#10;                    }&#10;                    callback.onSuccess(videos);&#10;                }&#10;&#10;                @Override&#10;                public void onCancelled(DatabaseError error) {&#10;                    callback.onFailure(error.getMessage());&#10;                }&#10;            });&#10;    }&#10;&#10;    private void getTopViewedVideos(RepositoryCallback&lt;List&lt;Video&gt;&gt; callback) {&#10;        databaseReference.child(&quot;videos&quot;)&#10;            .orderByChild(&quot;viewCount&quot;)&#10;            .limitToLast(20)&#10;            .addListenerForSingleValueEvent(new ValueEventListener() {&#10;                @Override&#10;                public void onDataChange(DataSnapshot snapshot) {&#10;                    List&lt;Video&gt; videos = new ArrayList&lt;&gt;();&#10;                    for (DataSnapshot child : snapshot.getChildren()) {&#10;                        Video video = child.getValue(Video.class);&#10;                        if (video != null) {&#10;                            videos.add(video);&#10;                        }&#10;                    }&#10;&#10;                    // Đảo ngược để có viewCount cao nhất trước&#10;                    Collections.reverse(videos);&#10;                    callback.onSuccess(videos);&#10;                }&#10;&#10;                @Override&#10;                public void onCancelled(DatabaseError error) {&#10;                    callback.onFailure(error.getMessage());&#10;                }&#10;            });&#10;    }&#10;&#10;    private void getVideosByIds(List&lt;String&gt; videoIds, RepositoryCallback&lt;List&lt;Video&gt;&gt; callback) {&#10;        List&lt;Video&gt; videos = new ArrayList&lt;&gt;();&#10;        final int[] completedCount = {0};&#10;&#10;        if (videoIds.isEmpty()) {&#10;            callback.onSuccess(videos);&#10;            return;&#10;        }&#10;&#10;        for (String videoId : videoIds) {&#10;            getVideoById(videoId, new RepositoryCallback&lt;Video&gt;() {&#10;                @Override&#10;                public void onSuccess(Video video) {&#10;                    synchronized (videos) {&#10;                        videos.add(video);&#10;                        completedCount[0]++;&#10;                        if (completedCount[0] == videoIds.size()) {&#10;                            callback.onSuccess(videos);&#10;                        }&#10;                    }&#10;                }&#10;&#10;                @Override&#10;                public void onFailure(String error) {&#10;                    synchronized (videos) {&#10;                        completedCount[0]++;&#10;                        if (completedCount[0] == videoIds.size()) {&#10;                            callback.onSuccess(videos);&#10;                        }&#10;                    }&#10;                }&#10;            });&#10;        }&#10;    }&#10;&#10;    private Map&lt;String, Double&gt; combinePreferencesAndTopics(Map&lt;String, Double&gt; preferences, Map&lt;String, Long&gt; topics) {&#10;        Map&lt;String, Double&gt; combined = new HashMap&lt;&gt;(preferences);&#10;&#10;        // Chuyển đổi topics thành tags và thêm vào combined&#10;        for (Map.Entry&lt;String, Long&gt; entry : topics.entrySet()) {&#10;            String topic = entry.getKey();&#10;            String tag = mapTopicToTag(topic);&#10;&#10;            // Tính điểm dựa trên thời gian gần đây (topics mới có điểm cao hơn)&#10;            long currentTime = System.currentTimeMillis();&#10;            long timeDiff = currentTime - entry.getValue();&#10;            double timeScore = Math.max(0.1, 1.0 - (timeDiff / (7 * 24 * 60 * 60 * 1000.0))); // Giảm theo thời gian, tối thiểu 0.1&#10;&#10;            combined.put(tag, combined.getOrDefault(tag, 0.0) + timeScore);&#10;        }&#10;&#10;        return combined;&#10;    }&#10;&#10;    private String mapTopicToTag(String topic) {&#10;        // Ánh xạ các topic từ AI thành tags video tương ứng&#10;        String lowerTopic = topic.toLowerCase();&#10;&#10;        if (lowerTopic.contains(&quot;giảm cân&quot;) || lowerTopic.contains(&quot;giamcan&quot;)) {&#10;            return &quot;giamcan&quot;;&#10;        } else if (lowerTopic.contains(&quot;tập luyện&quot;) || lowerTopic.contains(&quot;tapluyen&quot;) || lowerTopic.contains(&quot;thể dục&quot;)) {&#10;            return &quot;tapluyen&quot;;&#10;        } else if (lowerTopic.contains(&quot;tim mạch&quot;) || lowerTopic.contains(&quot;timmach&quot;) || lowerTopic.contains(&quot;huyết áp&quot;)) {&#10;            return &quot;timmach&quot;;&#10;        } else if (lowerTopic.contains(&quot;dinh dưỡng&quot;) || lowerTopic.contains(&quot;dinhduong&quot;) || lowerTopic.contains(&quot;ăn uống&quot;)) {&#10;            return &quot;dinhduong&quot;;&#10;        } else if (lowerTopic.contains(&quot;yoga&quot;) || lowerTopic.contains(&quot;thiền&quot;)) {&#10;            return &quot;yoga&quot;;&#10;        } else if (lowerTopic.contains(&quot;ngủ&quot;) || lowerTopic.contains(&quot;giấc ngủ&quot;)) {&#10;            return &quot;giacngu&quot;;&#10;        } else {&#10;            return &quot;suckhoe&quot;; // Default tag cho các topic khác&#10;        }&#10;    }&#10;&#10;    private List&lt;Video&gt; filterAndSortByRecommendation(List&lt;Video&gt; videos, Map&lt;String, Double&gt; userTags) {&#10;        List&lt;VideoScore&gt; videoScores = new ArrayList&lt;&gt;();&#10;&#10;        for (Video video : videos) {&#10;            double score = calculateRecommendationScore(video, userTags);&#10;            if (score &gt; 0) {&#10;                videoScores.add(new VideoScore(video, score));&#10;            }&#10;        }&#10;&#10;        // Sắp xếp theo điểm recommendation và thời gian upload&#10;        Collections.sort(videoScores, (vs1, vs2) -&gt; {&#10;            int scoreCompare = Double.compare(vs2.score, vs1.score);&#10;            if (scoreCompare == 0) {&#10;                return Long.compare(vs2.video.getUploadDate(), vs1.video.getUploadDate());&#10;            }&#10;            return scoreCompare;&#10;        });&#10;&#10;        List&lt;Video&gt; recommendedVideos = new ArrayList&lt;&gt;();&#10;        for (VideoScore vs : videoScores) {&#10;            recommendedVideos.add(vs.video);&#10;        }&#10;&#10;        return recommendedVideos;&#10;    }&#10;&#10;    private double calculateRecommendationScore(Video video, Map&lt;String, Double&gt; userTags) {&#10;        double score = 0.0;&#10;&#10;        if (video.getTags() != null) {&#10;            for (Map.Entry&lt;String, Boolean&gt; tagEntry : video.getTags().entrySet()) {&#10;                if (tagEntry.getValue() &amp;&amp; userTags.containsKey(tagEntry.getKey())) {&#10;                    score += userTags.get(tagEntry.getKey());&#10;                }&#10;            }&#10;        }&#10;&#10;        // Thêm điểm bonus cho video có viewCount và likeCount cao&#10;        score += Math.log(video.getViewCount() + 1) * 0.1;&#10;        score += Math.log(video.getLikeCount() + 1) * 0.2;&#10;&#10;        // Thêm điểm bonus cho video mới&#10;        long daysSinceUpload = (System.currentTimeMillis() - video.getUploadDate()) / (24 * 60 * 60 * 1000);&#10;        if (daysSinceUpload &lt; 7) {&#10;            score += 0.5; // Bonus cho video mới trong 7 ngày&#10;        }&#10;&#10;        return score;&#10;    }&#10;&#10;    private static class VideoScore {&#10;        Video video;&#10;        double score;&#10;&#10;        VideoScore(Video video, double score) {&#10;            this.video = video;&#10;            this.score = score;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.data.repository;&#10;&#10;import com.google.firebase.database.DataSnapshot;&#10;import com.google.firebase.database.DatabaseError;&#10;import com.google.firebase.database.DatabaseReference;&#10;import com.google.firebase.database.FirebaseDatabase;&#10;import com.google.firebase.database.Query;&#10;import com.google.firebase.database.ValueEventListener;&#10;import com.vhn.doan.data.Video;&#10;&#10;import java.util.ArrayList;&#10;import java.util.Collections;&#10;import java.util.Comparator;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;public class VideoRepositoryImpl implements VideoRepository {&#10;&#10;    private DatabaseReference databaseReference;&#10;&#10;    public VideoRepositoryImpl() {&#10;        this.databaseReference = FirebaseDatabase.getInstance().getReference();&#10;    }&#10;&#10;    @Override&#10;    public void getRecommendedVideos(String userId, RepositoryCallback&lt;List&lt;Video&gt;&gt; callback) {&#10;        // Lấy preferences và topics của user để đề xuất video&#10;        getUserPreferences(userId, new RepositoryCallback&lt;Map&lt;String, Double&gt;&gt;() {&#10;            @Override&#10;            public void onSuccess(Map&lt;String, Double&gt; preferences) {&#10;                getUserTopics(userId, new RepositoryCallback&lt;Map&lt;String, Long&gt;&gt;() {&#10;                    @Override&#10;                    public void onSuccess(Map&lt;String, Long&gt; topics) {&#10;                        // Kết hợp preferences và topics để tạo danh sách tags ưu tiên&#10;                        Map&lt;String, Double&gt; combinedTags = combinePreferencesAndTopics(preferences, topics);&#10;&#10;                        // Lấy tất cả video và lọc theo tags ưu tiên&#10;                        getAllVideos(new RepositoryCallback&lt;List&lt;Video&gt;&gt;() {&#10;                            @Override&#10;                            public void onSuccess(List&lt;Video&gt; allVideos) {&#10;                                List&lt;Video&gt; recommendedVideos = filterAndSortByRecommendation(allVideos, combinedTags);&#10;                                callback.onSuccess(recommendedVideos);&#10;                            }&#10;&#10;                            @Override&#10;                            public void onError(String error) {&#10;                                // Nếu lỗi, fallback về trending videos&#10;                                getTrendingVideos(&quot;vietnam&quot;, callback);&#10;                            }&#10;                        });&#10;                    }&#10;&#10;                    @Override&#10;                    public void onError(String error) {&#10;                        // Nếu không có topics, chỉ dùng preferences&#10;                        getAllVideos(new RepositoryCallback&lt;List&lt;Video&gt;&gt;() {&#10;                            @Override&#10;                            public void onSuccess(List&lt;Video&gt; allVideos) {&#10;                                List&lt;Video&gt; recommendedVideos = filterAndSortByRecommendation(allVideos, preferences);&#10;                                callback.onSuccess(recommendedVideos);&#10;                            }&#10;&#10;                            @Override&#10;                            public void onError(String error) {&#10;                                getTrendingVideos(&quot;vietnam&quot;, callback);&#10;                            }&#10;                        });&#10;                    }&#10;                });&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                // Nếu người dùng mới, hiển thị trending videos&#10;                getTrendingVideos(&quot;vietnam&quot;, callback);&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void getTrendingVideos(String region, RepositoryCallback&lt;List&lt;Video&gt;&gt; callback) {&#10;        databaseReference.child(&quot;trendingVideos&quot;).child(region)&#10;            .addListenerForSingleValueEvent(new ValueEventListener() {&#10;                @Override&#10;                public void onDataChange(DataSnapshot snapshot) {&#10;                    List&lt;String&gt; trendingVideoIds = new ArrayList&lt;&gt;();&#10;                    for (DataSnapshot child : snapshot.getChildren()) {&#10;                        trendingVideoIds.add(child.getKey());&#10;                    }&#10;&#10;                    if (trendingVideoIds.isEmpty()) {&#10;                        // Fallback: lấy video có viewCount cao nhất&#10;                        getTopViewedVideos(callback);&#10;                    } else {&#10;                        getVideosByIds(trendingVideoIds, callback);&#10;                    }&#10;                }&#10;&#10;                @Override&#10;                public void onCancelled(DatabaseError error) {&#10;                    getTopViewedVideos(callback);&#10;                }&#10;            });&#10;    }&#10;&#10;    @Override&#10;    public void getVideosByCategory(String categoryId, RepositoryCallback&lt;List&lt;Video&gt;&gt; callback) {&#10;        databaseReference.child(&quot;videos&quot;)&#10;            .orderByChild(&quot;categoryId&quot;)&#10;            .equalTo(categoryId)&#10;            .addListenerForSingleValueEvent(new ValueEventListener() {&#10;                @Override&#10;                public void onDataChange(DataSnapshot snapshot) {&#10;                    List&lt;Video&gt; videos = new ArrayList&lt;&gt;();&#10;                    for (DataSnapshot child : snapshot.getChildren()) {&#10;                        Video video = child.getValue(Video.class);&#10;                        if (video != null) {&#10;                            videos.add(video);&#10;                        }&#10;                    }&#10;&#10;                    // Sắp xếp theo ngày upload mới nhất&#10;                    Collections.sort(videos, (v1, v2) -&gt; Long.compare(v2.getUploadDate(), v1.getUploadDate()));&#10;                    callback.onSuccess(videos);&#10;                }&#10;&#10;                @Override&#10;                public void onCancelled(DatabaseError error) {&#10;                    callback.onError(error.getMessage());&#10;                }&#10;            });&#10;    }&#10;&#10;    @Override&#10;    public void getVideosByTags(List&lt;String&gt; tags, RepositoryCallback&lt;List&lt;Video&gt;&gt; callback) {&#10;        getAllVideos(new RepositoryCallback&lt;List&lt;Video&gt;&gt;() {&#10;            @Override&#10;            public void onSuccess(List&lt;Video&gt; allVideos) {&#10;                List&lt;Video&gt; filteredVideos = new ArrayList&lt;&gt;();&#10;&#10;                for (Video video : allVideos) {&#10;                    if (video.getTags() != null) {&#10;                        boolean hasMatchingTag = false;&#10;                        for (String tag : tags) {&#10;                            if (video.getTags().containsKey(tag) &amp;&amp; video.getTags().get(tag)) {&#10;                                hasMatchingTag = true;&#10;                                break;&#10;                            }&#10;                        }&#10;                        if (hasMatchingTag) {&#10;                            filteredVideos.add(video);&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // Sắp xếp theo likeCount và viewCount&#10;                Collections.sort(filteredVideos, (v1, v2) -&gt; {&#10;                    int likeDiff = v2.getLikeCount() - v1.getLikeCount();&#10;                    if (likeDiff == 0) {&#10;                        return v2.getViewCount() - v1.getViewCount();&#10;                    }&#10;                    return likeDiff;&#10;                });&#10;&#10;                callback.onSuccess(filteredVideos);&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                callback.onError(error);&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void getVideoById(String videoId, RepositoryCallback&lt;Video&gt; callback) {&#10;        databaseReference.child(&quot;videos&quot;).child(videoId)&#10;            .addListenerForSingleValueEvent(new ValueEventListener() {&#10;                @Override&#10;                public void onDataChange(DataSnapshot snapshot) {&#10;                    Video video = snapshot.getValue(Video.class);&#10;                    if (video != null) {&#10;                        callback.onSuccess(video);&#10;                    } else {&#10;                        callback.onError(&quot;Video not found&quot;);&#10;                    }&#10;                }&#10;&#10;                @Override&#10;                public void onCancelled(DatabaseError error) {&#10;                    callback.onError(error.getMessage());&#10;                }&#10;            });&#10;    }&#10;&#10;    @Override&#10;    public void incrementViewCount(String videoId, RepositoryCallback&lt;Void&gt; callback) {&#10;        DatabaseReference videoRef = databaseReference.child(&quot;videos&quot;).child(videoId).child(&quot;viewCount&quot;);&#10;        videoRef.addListenerForSingleValueEvent(new ValueEventListener() {&#10;            @Override&#10;            public void onDataChange(DataSnapshot snapshot) {&#10;                int currentCount = snapshot.getValue(Integer.class) != null ? snapshot.getValue(Integer.class) : 0;&#10;                videoRef.setValue(currentCount + 1)&#10;                    .addOnSuccessListener(aVoid -&gt; callback.onSuccess(null))&#10;                    .addOnFailureListener(e -&gt; callback.onError(e.getMessage()));&#10;            }&#10;&#10;            @Override&#10;            public void onCancelled(DatabaseError error) {&#10;                callback.onError(error.getMessage());&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void toggleLikeVideo(String videoId, String userId, boolean isLiked, RepositoryCallback&lt;Void&gt; callback) {&#10;        DatabaseReference userLikesRef = databaseReference.child(&quot;user_likes&quot;).child(userId).child(videoId);&#10;        DatabaseReference videoLikeCountRef = databaseReference.child(&quot;videos&quot;).child(videoId).child(&quot;likeCount&quot;);&#10;&#10;        if (isLiked) {&#10;            // Thêm like&#10;            userLikesRef.setValue(true);&#10;            videoLikeCountRef.addListenerForSingleValueEvent(new ValueEventListener() {&#10;                @Override&#10;                public void onDataChange(DataSnapshot snapshot) {&#10;                    int currentCount = snapshot.getValue(Integer.class) != null ? snapshot.getValue(Integer.class) : 0;&#10;                    videoLikeCountRef.setValue(currentCount + 1)&#10;                        .addOnSuccessListener(aVoid -&gt; callback.onSuccess(null))&#10;                        .addOnFailureListener(e -&gt; callback.onError(e.getMessage()));&#10;                }&#10;&#10;                @Override&#10;                public void onCancelled(DatabaseError error) {&#10;                    callback.onError(error.getMessage());&#10;                }&#10;            });&#10;        } else {&#10;            // Bỏ like&#10;            userLikesRef.removeValue();&#10;            videoLikeCountRef.addListenerForSingleValueEvent(new ValueEventListener() {&#10;                @Override&#10;                public void onDataChange(DataSnapshot snapshot) {&#10;                    int currentCount = snapshot.getValue(Integer.class) != null ? snapshot.getValue(Integer.class) : 0;&#10;                    videoLikeCountRef.setValue(Math.max(0, currentCount - 1))&#10;                        .addOnSuccessListener(aVoid -&gt; callback.onSuccess(null))&#10;                        .addOnFailureListener(e -&gt; callback.onError(e.getMessage()));&#10;                }&#10;&#10;                @Override&#10;                public void onCancelled(DatabaseError error) {&#10;                    callback.onError(error.getMessage());&#10;                }&#10;            });&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void isVideoLiked(String videoId, String userId, RepositoryCallback&lt;Boolean&gt; callback) {&#10;        databaseReference.child(&quot;user_likes&quot;).child(userId).child(videoId)&#10;            .addListenerForSingleValueEvent(new ValueEventListener() {&#10;                @Override&#10;                public void onDataChange(DataSnapshot snapshot) {&#10;                    boolean isLiked = snapshot.exists() &amp;&amp; snapshot.getValue(Boolean.class) != null &#10;                        &amp;&amp; snapshot.getValue(Boolean.class);&#10;                    callback.onSuccess(isLiked);&#10;                }&#10;&#10;                @Override&#10;                public void onCancelled(DatabaseError error) {&#10;                    callback.onError(error.getMessage());&#10;                }&#10;            });&#10;    }&#10;&#10;    @Override&#10;    public void saveVideoView(String videoId, String userId, RepositoryCallback&lt;Void&gt; callback) {&#10;        long timestamp = System.currentTimeMillis();&#10;        databaseReference.child(&quot;user_views&quot;).child(userId).child(videoId).setValue(timestamp)&#10;            .addOnSuccessListener(aVoid -&gt; callback.onSuccess(null))&#10;            .addOnFailureListener(e -&gt; callback.onError(e.getMessage()));&#10;    }&#10;&#10;    @Override&#10;    public void getUserPreferences(String userId, RepositoryCallback&lt;Map&lt;String, Double&gt;&gt; callback) {&#10;        databaseReference.child(&quot;users&quot;).child(userId).child(&quot;preferences&quot;)&#10;            .addListenerForSingleValueEvent(new ValueEventListener() {&#10;                @Override&#10;                public void onDataChange(DataSnapshot snapshot) {&#10;                    Map&lt;String, Double&gt; preferences = new HashMap&lt;&gt;();&#10;                    if (snapshot.exists()) {&#10;                        for (DataSnapshot child : snapshot.getChildren()) {&#10;                            String tag = child.getKey();&#10;                            Double score = child.getValue(Double.class);&#10;                            if (tag != null &amp;&amp; score != null) {&#10;                                preferences.put(tag, score);&#10;                            }&#10;                        }&#10;                    }&#10;                    callback.onSuccess(preferences);&#10;                }&#10;&#10;                @Override&#10;                public void onCancelled(DatabaseError error) {&#10;                    callback.onError(error.getMessage());&#10;                }&#10;            });&#10;    }&#10;&#10;    @Override&#10;    public void getUserTopics(String userId, RepositoryCallback&lt;Map&lt;String, Long&gt;&gt; callback) {&#10;        databaseReference.child(&quot;user_topics&quot;).child(userId)&#10;            .addListenerForSingleValueEvent(new ValueEventListener() {&#10;                @Override&#10;                public void onDataChange(DataSnapshot snapshot) {&#10;                    Map&lt;String, Long&gt; topics = new HashMap&lt;&gt;();&#10;                    if (snapshot.exists()) {&#10;                        for (DataSnapshot child : snapshot.getChildren()) {&#10;                            String topic = child.getKey();&#10;                            Long timestamp = child.getValue(Long.class);&#10;                            if (topic != null &amp;&amp; timestamp != null) {&#10;                                topics.put(topic, timestamp);&#10;                            }&#10;                        }&#10;                    }&#10;                    callback.onSuccess(topics);&#10;                }&#10;&#10;                @Override&#10;                public void onCancelled(DatabaseError error) {&#10;                    callback.onError(error.getMessage());&#10;                }&#10;            });&#10;    }&#10;&#10;    @Override&#10;    public void updateUserPreferences(String userId, String tag, double score, RepositoryCallback&lt;Void&gt; callback) {&#10;        databaseReference.child(&quot;users&quot;).child(userId).child(&quot;preferences&quot;).child(tag).setValue(score)&#10;            .addOnSuccessListener(aVoid -&gt; callback.onSuccess(null))&#10;            .addOnFailureListener(e -&gt; callback.onError(e.getMessage()));&#10;    }&#10;&#10;    // Helper methods&#10;    private void getAllVideos(RepositoryCallback&lt;List&lt;Video&gt;&gt; callback) {&#10;        databaseReference.child(&quot;videos&quot;)&#10;            .addListenerForSingleValueEvent(new ValueEventListener() {&#10;                @Override&#10;                public void onDataChange(DataSnapshot snapshot) {&#10;                    List&lt;Video&gt; videos = new ArrayList&lt;&gt;();&#10;                    for (DataSnapshot child : snapshot.getChildren()) {&#10;                        Video video = child.getValue(Video.class);&#10;                        if (video != null) {&#10;                            videos.add(video);&#10;                        }&#10;                    }&#10;                    callback.onSuccess(videos);&#10;                }&#10;&#10;                @Override&#10;                public void onCancelled(DatabaseError error) {&#10;                    callback.onError(error.getMessage());&#10;                }&#10;            });&#10;    }&#10;&#10;    private void getTopViewedVideos(RepositoryCallback&lt;List&lt;Video&gt;&gt; callback) {&#10;        databaseReference.child(&quot;videos&quot;)&#10;            .orderByChild(&quot;viewCount&quot;)&#10;            .limitToLast(20)&#10;            .addListenerForSingleValueEvent(new ValueEventListener() {&#10;                @Override&#10;                public void onDataChange(DataSnapshot snapshot) {&#10;                    List&lt;Video&gt; videos = new ArrayList&lt;&gt;();&#10;                    for (DataSnapshot child : snapshot.getChildren()) {&#10;                        Video video = child.getValue(Video.class);&#10;                        if (video != null) {&#10;                            videos.add(video);&#10;                        }&#10;                    }&#10;&#10;                    // Đảo ngược để có viewCount cao nhất trước&#10;                    Collections.reverse(videos);&#10;                    callback.onSuccess(videos);&#10;                }&#10;&#10;                @Override&#10;                public void onCancelled(DatabaseError error) {&#10;                    callback.onError(error.getMessage());&#10;                }&#10;            });&#10;    }&#10;&#10;    private void getVideosByIds(List&lt;String&gt; videoIds, RepositoryCallback&lt;List&lt;Video&gt;&gt; callback) {&#10;        List&lt;Video&gt; videos = new ArrayList&lt;&gt;();&#10;        final int[] completedCount = {0};&#10;&#10;        if (videoIds.isEmpty()) {&#10;            callback.onSuccess(videos);&#10;            return;&#10;        }&#10;&#10;        for (String videoId : videoIds) {&#10;            getVideoById(videoId, new RepositoryCallback&lt;Video&gt;() {&#10;                @Override&#10;                public void onSuccess(Video video) {&#10;                    synchronized (videos) {&#10;                        videos.add(video);&#10;                        completedCount[0]++;&#10;                        if (completedCount[0] == videoIds.size()) {&#10;                            callback.onSuccess(videos);&#10;                        }&#10;                    }&#10;                }&#10;&#10;                @Override&#10;                public void onError(String error) {&#10;                    synchronized (videos) {&#10;                        completedCount[0]++;&#10;                        if (completedCount[0] == videoIds.size()) {&#10;                            callback.onSuccess(videos);&#10;                        }&#10;                    }&#10;                }&#10;            });&#10;        }&#10;    }&#10;&#10;    private Map&lt;String, Double&gt; combinePreferencesAndTopics(Map&lt;String, Double&gt; preferences, Map&lt;String, Long&gt; topics) {&#10;        Map&lt;String, Double&gt; combined = new HashMap&lt;&gt;(preferences);&#10;&#10;        // Chuyển đổi topics thành tags và thêm vào combined&#10;        for (Map.Entry&lt;String, Long&gt; entry : topics.entrySet()) {&#10;            String topic = entry.getKey();&#10;            String tag = mapTopicToTag(topic);&#10;&#10;            // Tính điểm dựa trên thời gian gần đây (topics mới có điểm cao hơn)&#10;            long currentTime = System.currentTimeMillis();&#10;            long timeDiff = currentTime - entry.getValue();&#10;            double timeScore = Math.max(0.1, 1.0 - (timeDiff / (7 * 24 * 60 * 60 * 1000.0))); // Giảm theo thời gian, tối thiểu 0.1&#10;&#10;            combined.put(tag, combined.getOrDefault(tag, 0.0) + timeScore);&#10;        }&#10;&#10;        return combined;&#10;    }&#10;&#10;    private String mapTopicToTag(String topic) {&#10;        // Ánh xạ các topic từ AI thành tags video tương ứng&#10;        String lowerTopic = topic.toLowerCase();&#10;&#10;        if (lowerTopic.contains(&quot;giảm cân&quot;) || lowerTopic.contains(&quot;giamcan&quot;)) {&#10;            return &quot;giamcan&quot;;&#10;        } else if (lowerTopic.contains(&quot;tập luyện&quot;) || lowerTopic.contains(&quot;tapluyen&quot;) || lowerTopic.contains(&quot;thể dục&quot;)) {&#10;            return &quot;tapluyen&quot;;&#10;        } else if (lowerTopic.contains(&quot;tim mạch&quot;) || lowerTopic.contains(&quot;timmach&quot;) || lowerTopic.contains(&quot;huyết áp&quot;)) {&#10;            return &quot;timmach&quot;;&#10;        } else if (lowerTopic.contains(&quot;dinh dưỡng&quot;) || lowerTopic.contains(&quot;dinhduong&quot;) || lowerTopic.contains(&quot;ăn uống&quot;)) {&#10;            return &quot;dinhduong&quot;;&#10;        } else if (lowerTopic.contains(&quot;yoga&quot;) || lowerTopic.contains(&quot;thiền&quot;)) {&#10;            return &quot;yoga&quot;;&#10;        } else if (lowerTopic.contains(&quot;ngủ&quot;) || lowerTopic.contains(&quot;giấc ngủ&quot;)) {&#10;            return &quot;giacngu&quot;;&#10;        } else {&#10;            return &quot;suckhoe&quot;; // Default tag cho các topic khác&#10;        }&#10;    }&#10;&#10;    private List&lt;Video&gt; filterAndSortByRecommendation(List&lt;Video&gt; videos, Map&lt;String, Double&gt; userTags) {&#10;        List&lt;VideoScore&gt; videoScores = new ArrayList&lt;&gt;();&#10;&#10;        for (Video video : videos) {&#10;            double score = calculateRecommendationScore(video, userTags);&#10;            if (score &gt; 0) {&#10;                videoScores.add(new VideoScore(video, score));&#10;            }&#10;        }&#10;&#10;        // Sắp xếp theo điểm recommendation và thời gian upload&#10;        Collections.sort(videoScores, (vs1, vs2) -&gt; {&#10;            int scoreCompare = Double.compare(vs2.score, vs1.score);&#10;            if (scoreCompare == 0) {&#10;                return Long.compare(vs2.video.getUploadDate(), vs1.video.getUploadDate());&#10;            }&#10;            return scoreCompare;&#10;        });&#10;&#10;        List&lt;Video&gt; recommendedVideos = new ArrayList&lt;&gt;();&#10;        for (VideoScore vs : videoScores) {&#10;            recommendedVideos.add(vs.video);&#10;        }&#10;&#10;        return recommendedVideos;&#10;    }&#10;&#10;    private double calculateRecommendationScore(Video video, Map&lt;String, Double&gt; userTags) {&#10;        double score = 0.0;&#10;&#10;        if (video.getTags() != null) {&#10;            for (Map.Entry&lt;String, Boolean&gt; tagEntry : video.getTags().entrySet()) {&#10;                if (tagEntry.getValue() &amp;&amp; userTags.containsKey(tagEntry.getKey())) {&#10;                    score += userTags.get(tagEntry.getKey());&#10;                }&#10;            }&#10;        }&#10;&#10;        // Thêm điểm bonus cho video có viewCount và likeCount cao&#10;        score += Math.log(video.getViewCount() + 1) * 0.1;&#10;        score += Math.log(video.getLikeCount() + 1) * 0.2;&#10;&#10;        // Thêm điểm bonus cho video mới&#10;        long daysSinceUpload = (System.currentTimeMillis() - video.getUploadDate()) / (24 * 60 * 60 * 1000);&#10;        if (daysSinceUpload &lt; 7) {&#10;            score += 0.5; // Bonus cho video mới trong 7 ngày&#10;        }&#10;&#10;        return score;&#10;    }&#10;&#10;    private static class VideoScore {&#10;        Video video;&#10;        double score;&#10;&#10;        VideoScore(Video video, double score) {&#10;            this.video = video;&#10;            this.score = score;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/category/detail/HealthTipAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/category/detail/HealthTipAdapter.java" />
              <option name="originalContent" value="package com.vhn.doan.presentation.category.detail;&#10;&#10;import android.content.Context;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.ImageView;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.bumptech.glide.Glide;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.auth.FirebaseUser;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.data.HealthTip;&#10;import com.vhn.doan.data.repository.FavoriteRepository;&#10;import com.vhn.doan.data.repository.FavoriteRepositoryImpl;&#10;&#10;import java.text.SimpleDateFormat;&#10;import java.util.ArrayList;&#10;import java.util.Date;&#10;import java.util.HashSet;&#10;import java.util.List;&#10;import java.util.Locale;&#10;import java.util.Set;&#10;&#10;/**&#10; * Adapter hiển thị danh sách mẹo sức khỏe trong RecyclerView&#10; * Đã được cập nhật để hỗ trợ chức năng yêu thích&#10; */&#10;public class HealthTipAdapter extends RecyclerView.Adapter&lt;HealthTipAdapter.HealthTipViewHolder&gt; {&#10;&#10;    private List&lt;HealthTip&gt; healthTips = new ArrayList&lt;&gt;();&#10;    private final Context context;&#10;    private final HealthTipClickListener listener;&#10;    private final FavoriteRepository favoriteRepository;&#10;    private final FirebaseAuth firebaseAuth;&#10;    private final Set&lt;String&gt; favoriteHealthTipIds; // Cache để theo dõi trạng thái yêu thích&#10;&#10;    /**&#10;     * Interface để xử lý sự kiện khi nhấp vào mẹo sức khỏe&#10;     * Đã thống nhất với home adapter&#10;     */&#10;    public interface HealthTipClickListener {&#10;        void onHealthTipClick(HealthTip healthTip);&#10;        void onFavoriteClick(HealthTip healthTip, boolean isFavorite);&#10;    }&#10;&#10;    /**&#10;     * Constructor nhận context và listener&#10;     * @param context Context của activity hoặc fragment&#10;     * @param listener Listener xử lý sự kiện click&#10;     */&#10;    public HealthTipAdapter(Context context, HealthTipClickListener listener) {&#10;        this.context = context;&#10;        this.listener = listener;&#10;        this.favoriteRepository = new FavoriteRepositoryImpl();&#10;        this.firebaseAuth = FirebaseAuth.getInstance();&#10;        this.favoriteHealthTipIds = new HashSet&lt;&gt;();&#10;&#10;        // Load danh sách yêu thích khi khởi tạo adapter&#10;        loadUserFavorites();&#10;    }&#10;&#10;    /**&#10;     * Constructor với FavoriteRepository tùy chỉnh (cho testing)&#10;     */&#10;    public HealthTipAdapter(Context context, HealthTipClickListener listener, FavoriteRepository favoriteRepository) {&#10;        this.context = context;&#10;        this.listener = listener;&#10;        this.favoriteRepository = favoriteRepository;&#10;        this.firebaseAuth = FirebaseAuth.getInstance();&#10;        this.favoriteHealthTipIds = new HashSet&lt;&gt;();&#10;&#10;        loadUserFavorites();&#10;    }&#10;&#10;    /**&#10;     * Cập nhật dữ liệu mới cho adapter&#10;     * @param healthTips Danh sách mẹo sức khỏe mới&#10;     */&#10;    public void updateHealthTips(List&lt;HealthTip&gt; healthTips) {&#10;        this.healthTips.clear();&#10;        if (healthTips != null) {&#10;            this.healthTips.addAll(healthTips);&#10;        }&#10;        notifyDataSetChanged();&#10;        // Reload favorites sau khi cập nhật danh sách&#10;        loadUserFavorites();&#10;    }&#10;&#10;    /**&#10;     * Lấy danh sách health tips hiện tại&#10;     * @return Danh sách health tips&#10;     */&#10;    public List&lt;HealthTip&gt; getHealthTipsList() {&#10;        return new ArrayList&lt;&gt;(healthTips);&#10;    }&#10;&#10;    /**&#10;     * Load danh sách yêu thích của người dùng hiện tại&#10;     */&#10;    private void loadUserFavorites() {&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#10;        if (currentUser == null) {&#10;            return;&#10;        }&#10;&#10;        favoriteRepository.getFavoriteHealthTipIds(currentUser.getUid(), new FavoriteRepository.FavoriteListCallback() {&#10;            @Override&#10;            public void onSuccess(List&lt;HealthTip&gt; favoriteHealthTips) {&#10;                favoriteHealthTipIds.clear();&#10;                for (HealthTip healthTip : favoriteHealthTips) {&#10;                    favoriteHealthTipIds.add(healthTip.getId());&#10;                }&#10;                notifyDataSetChanged(); // Cập nhật UI&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                // Log error nhưng không hiển thị Toast để tránh spam&#10;                android.util.Log.e(&quot;HealthTipAdapter&quot;, &quot;Lỗi khi tải danh sách yêu thích: &quot; + error);&#10;            }&#10;        });&#10;    }&#10;&#10;    /**&#10;     * Toggle trạng thái yêu thích cho một mẹo sức khỏe&#10;     */&#10;    public void toggleFavorite(HealthTip healthTip, ImageView favoriteIcon) {&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#10;        if (currentUser == null) {&#10;            Toast.makeText(context, &quot;Vui lòng đăng nhập để sử dụng chức năng yêu thích&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        String userId = currentUser.getUid();&#10;        String healthTipId = healthTip.getId();&#10;        boolean isCurrentlyFavorite = favoriteHealthTipIds.contains(healthTipId);&#10;&#10;        // Cập nhật UI ngay lập tức cho UX tốt hơn&#10;        updateFavoriteIcon(favoriteIcon, !isCurrentlyFavorite);&#10;&#10;        if (isCurrentlyFavorite) {&#10;            // Xóa khỏi yêu thích&#10;            favoriteRepository.removeFromFavorites(userId, healthTipId, new FavoriteRepository.FavoriteActionCallback() {&#10;                @Override&#10;                public void onSuccess() {&#10;                    favoriteHealthTipIds.remove(healthTipId);&#10;                    if (listener != null) {&#10;                        listener.onFavoriteClick(healthTip, false);&#10;                    }&#10;                }&#10;&#10;                @Override&#10;                public void onError(String error) {&#10;                    // Revert UI changes on error&#10;                    updateFavoriteIcon(favoriteIcon, isCurrentlyFavorite);&#10;                    Toast.makeText(context, &quot;Lỗi khi xóa khỏi yêu thích: &quot; + error, Toast.LENGTH_SHORT).show();&#10;                }&#10;            });&#10;        } else {&#10;            // Thêm vào yêu thích&#10;            favoriteRepository.addToFavorites(userId, healthTipId, new FavoriteRepository.FavoriteActionCallback() {&#10;                @Override&#10;                public void onSuccess() {&#10;                    favoriteHealthTipIds.add(healthTipId);&#10;                    if (listener != null) {&#10;                        listener.onFavoriteClick(healthTip, true);&#10;                    }&#10;                }&#10;&#10;                @Override&#10;                public void onError(String error) {&#10;                    // Revert UI changes on error&#10;                    updateFavoriteIcon(favoriteIcon, isCurrentlyFavorite);&#10;                    Toast.makeText(context, &quot;Lỗi khi thêm vào yêu thích: &quot; + error, Toast.LENGTH_SHORT).show();&#10;                }&#10;            });&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Cập nhật icon yêu thích&#10;     */&#10;    private void updateFavoriteIcon(ImageView favoriteIcon, boolean isFavorite) {&#10;        if (isFavorite) {&#10;            favoriteIcon.setImageResource(R.drawable.ic_favorite_filled);&#10;            favoriteIcon.setColorFilter(context.getResources().getColor(R.color.favorite_color, null));&#10;        } else {&#10;            favoriteIcon.setImageResource(R.drawable.ic_favorite_outline);&#10;            favoriteIcon.setColorFilter(context.getResources().getColor(R.color.icon_color, null));&#10;        }&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public HealthTipViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View itemView = LayoutInflater.from(context).inflate(R.layout.item_health_tip, parent, false);&#10;        return new HealthTipViewHolder(itemView);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull HealthTipViewHolder holder, int position) {&#10;        HealthTip healthTip = healthTips.get(position);&#10;        boolean isFavorite = favoriteHealthTipIds.contains(healthTip.getId());&#10;        holder.bind(healthTip, listener, isFavorite, this);&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return healthTips.size();&#10;    }&#10;&#10;    /**&#10;     * ViewHolder cho từng item trong RecyclerView&#10;     */&#10;    public static class HealthTipViewHolder extends RecyclerView.ViewHolder {&#10;        private final ImageView imageView;&#10;        private final TextView titleTextView;&#10;        private final TextView summaryTextView;&#10;        private final TextView dateTextView;&#10;        private final TextView viewCountTextView;&#10;        private final TextView likeCountTextView;&#10;        private final ImageView favoriteIcon;&#10;        private final SimpleDateFormat dateFormat;&#10;&#10;        public HealthTipViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            imageView = itemView.findViewById(R.id.imageViewHealthTip);&#10;            titleTextView = itemView.findViewById(R.id.textViewHealthTipTitle);&#10;            summaryTextView = itemView.findViewById(R.id.textViewHealthTipSummary);&#10;            dateTextView = itemView.findViewById(R.id.textViewDate);&#10;            viewCountTextView = itemView.findViewById(R.id.textViewViewCount);&#10;            likeCountTextView = itemView.findViewById(R.id.textViewLikeCount);&#10;            favoriteIcon = itemView.findViewById(R.id.imageViewFavorite);&#10;            dateFormat = new SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault());&#10;        }&#10;&#10;        public void bind(HealthTip healthTip, HealthTipClickListener listener, boolean isFavorite, HealthTipAdapter adapter) {&#10;            // Thiết lập tiêu đề - kiểm tra null&#10;            String title = healthTip.getTitle();&#10;            titleTextView.setText(title != null ? title : &quot;Không có tiêu đề&quot;);&#10;&#10;            // Thiết lập tóm tắt - sử dụng getContent() thay vì getSummary() và kiểm tra null&#10;            String content = healthTip.getContent();&#10;            summaryTextView.setText(content != null ? content : &quot;Không có nội dung&quot;);&#10;&#10;            // Thiết lập ngày - kiểm tra createdAt &gt; 0 thay vì != null vì là primitive long&#10;            if (healthTip.getCreatedAt() &gt; 0) {&#10;                dateTextView.setText(dateFormat.format(new Date(healthTip.getCreatedAt())));&#10;            } else {&#10;                dateTextView.setText(dateFormat.format(new Date()));&#10;            }&#10;&#10;            // Thiết lập số lượt xem và thích&#10;            viewCountTextView.setText(String.valueOf(healthTip.getViewCount()));&#10;            likeCountTextView.setText(String.valueOf(healthTip.getLikeCount()));&#10;&#10;            // Tải hình ảnh với Glide - đã có kiểm tra null&#10;            if (healthTip.getImageUrl() != null &amp;&amp; !healthTip.getImageUrl().isEmpty()) {&#10;                Glide.with(itemView.getContext())&#10;                        .load(healthTip.getImageUrl())&#10;                        .centerCrop()&#10;                        .placeholder(R.drawable.placeholder_image)&#10;                        .error(R.drawable.error_image)&#10;                        .into(imageView);&#10;            } else {&#10;                imageView.setImageResource(R.drawable.placeholder_image);&#10;            }&#10;&#10;            // Cập nhật icon yêu thích&#10;            adapter.updateFavoriteIcon(favoriteIcon, isFavorite);&#10;&#10;            // Thiết lập sự kiện click cho item&#10;            itemView.setOnClickListener(v -&gt; {&#10;                if (listener != null) {&#10;                    listener.onHealthTipClick(healthTip);&#10;                }&#10;            });&#10;&#10;            // Thiết lập sự kiện click cho nút yêu thích&#10;            favoriteIcon.setOnClickListener(v -&gt; adapter.toggleFavorite(healthTip, favoriteIcon));&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.category.detail;&#13;&#10;&#13;&#10;import android.content.Context;&#13;&#10;import android.view.LayoutInflater;&#13;&#10;import android.view.View;&#13;&#10;import android.view.ViewGroup;&#13;&#10;import android.widget.ImageView;&#13;&#10;import android.widget.TextView;&#13;&#10;import android.widget.Toast;&#13;&#10;&#13;&#10;import androidx.annotation.NonNull;&#13;&#10;import androidx.recyclerview.widget.RecyclerView;&#13;&#10;&#13;&#10;import com.bumptech.glide.Glide;&#13;&#10;import com.google.firebase.auth.FirebaseAuth;&#13;&#10;import com.google.firebase.auth.FirebaseUser;&#13;&#10;import com.vhn.doan.R;&#13;&#10;import com.vhn.doan.data.HealthTip;&#13;&#10;import com.vhn.doan.data.repository.FavoriteRepository;&#13;&#10;import com.vhn.doan.data.repository.FavoriteRepositoryImpl;&#13;&#10;&#13;&#10;import java.text.SimpleDateFormat;&#13;&#10;import java.util.ArrayList;&#13;&#10;import java.util.Date;&#13;&#10;import java.util.HashSet;&#13;&#10;import java.util.List;&#13;&#10;import java.util.Locale;&#13;&#10;import java.util.Set;&#13;&#10;&#13;&#10;/**&#13;&#10; * Adapter hiển thị danh sách mẹo sức khỏe trong RecyclerView&#13;&#10; * Đã được cập nhật để hỗ trợ chức năng yêu thích&#13;&#10; */&#13;&#10;public class HealthTipAdapter extends RecyclerView.Adapter&lt;HealthTipAdapter.HealthTipViewHolder&gt; {&#13;&#10;&#13;&#10;    private List&lt;HealthTip&gt; healthTips = new ArrayList&lt;&gt;();&#13;&#10;    private final Context context;&#13;&#10;    private final HealthTipClickListener listener;&#13;&#10;    private final FavoriteRepository favoriteRepository;&#13;&#10;    private final FirebaseAuth firebaseAuth;&#13;&#10;    private final Set&lt;String&gt; favoriteHealthTipIds; // Cache để theo dõi trạng thái yêu thích&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Interface để xử lý sự kiện khi nhấp vào mẹo sức khỏe&#13;&#10;     * Đã thống nhất với home adapter&#13;&#10;     */&#13;&#10;    public interface HealthTipClickListener {&#13;&#10;        void onHealthTipClick(HealthTip healthTip);&#13;&#10;        void onFavoriteClick(HealthTip healthTip, boolean isFavorite);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Constructor nhận context và listener&#13;&#10;     * @param context Context của activity hoặc fragment&#13;&#10;     * @param listener Listener xử lý sự kiện click&#13;&#10;     */&#13;&#10;    public HealthTipAdapter(Context context, HealthTipClickListener listener) {&#13;&#10;        this.context = context;&#13;&#10;        this.listener = listener;&#13;&#10;        this.favoriteRepository = new FavoriteRepositoryImpl();&#13;&#10;        this.firebaseAuth = FirebaseAuth.getInstance();&#13;&#10;        this.favoriteHealthTipIds = new HashSet&lt;&gt;();&#13;&#10;&#13;&#10;        // Load danh sách yêu thích khi khởi tạo adapter&#13;&#10;        loadUserFavorites();&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Constructor với FavoriteRepository tùy chỉnh (cho testing)&#13;&#10;     */&#13;&#10;    public HealthTipAdapter(Context context, HealthTipClickListener listener, FavoriteRepository favoriteRepository) {&#13;&#10;        this.context = context;&#13;&#10;        this.listener = listener;&#13;&#10;        this.favoriteRepository = favoriteRepository;&#13;&#10;        this.firebaseAuth = FirebaseAuth.getInstance();&#13;&#10;        this.favoriteHealthTipIds = new HashSet&lt;&gt;();&#13;&#10;&#13;&#10;        loadUserFavorites();&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Cập nhật dữ liệu mới cho adapter&#13;&#10;     * @param healthTips Danh sách mẹo sức khỏe mới&#13;&#10;     */&#13;&#10;    public void updateHealthTips(List&lt;HealthTip&gt; healthTips) {&#13;&#10;        this.healthTips.clear();&#13;&#10;        if (healthTips != null) {&#13;&#10;            this.healthTips.addAll(healthTips);&#13;&#10;        }&#13;&#10;        notifyDataSetChanged();&#13;&#10;        // Reload favorites sau khi cập nhật danh sách&#13;&#10;        loadUserFavorites();&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Lấy danh sách health tips hiện tại&#13;&#10;     * @return Danh sách health tips&#13;&#10;     */&#13;&#10;    public List&lt;HealthTip&gt; getHealthTipsList() {&#13;&#10;        return new ArrayList&lt;&gt;(healthTips);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Load danh sách yêu thích của người dùng hiện tại&#13;&#10;     */&#13;&#10;    private void loadUserFavorites() {&#13;&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#13;&#10;        if (currentUser == null) {&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        favoriteRepository.getFavoriteHealthTipIds(currentUser.getUid(), new FavoriteRepository.FavoriteListCallback() {&#13;&#10;            @Override&#13;&#10;            public void onSuccess(List&lt;HealthTip&gt; favoriteHealthTips) {&#13;&#10;                favoriteHealthTipIds.clear();&#13;&#10;                for (HealthTip healthTip : favoriteHealthTips) {&#13;&#10;                    favoriteHealthTipIds.add(healthTip.getId());&#13;&#10;                }&#13;&#10;                notifyDataSetChanged(); // Cập nhật UI&#13;&#10;            }&#13;&#10;&#13;&#10;            @Override&#13;&#10;            public void onError(String error) {&#13;&#10;                // Log error nhưng không hiển thị Toast để tránh spam&#13;&#10;                android.util.Log.e(&quot;HealthTipAdapter&quot;, &quot;Lỗi khi tải danh sách yêu thích: &quot; + error);&#13;&#10;            }&#13;&#10;        });&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Toggle trạng thái yêu thích cho một mẹo sức khỏe&#13;&#10;     */&#13;&#10;    public void toggleFavorite(HealthTip healthTip, ImageView favoriteIcon) {&#13;&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#13;&#10;        if (currentUser == null) {&#13;&#10;            Toast.makeText(context, &quot;Vui lòng đăng nhập để sử dụng chức năng yêu thích&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        String userId = currentUser.getUid();&#13;&#10;        String healthTipId = healthTip.getId();&#13;&#10;        boolean isCurrentlyFavorite = favoriteHealthTipIds.contains(healthTipId);&#13;&#10;&#13;&#10;        // Cập nhật UI ngay lập tức cho UX tốt hơn&#13;&#10;        updateFavoriteIcon(favoriteIcon, !isCurrentlyFavorite);&#13;&#10;&#13;&#10;        if (isCurrentlyFavorite) {&#13;&#10;            // Xóa khỏi yêu thích&#13;&#10;            favoriteRepository.removeFromFavorites(userId, healthTipId, new FavoriteRepository.FavoriteActionCallback() {&#13;&#10;                @Override&#13;&#10;                public void onSuccess() {&#13;&#10;                    favoriteHealthTipIds.remove(healthTipId);&#13;&#10;                    if (listener != null) {&#13;&#10;                        listener.onFavoriteClick(healthTip, false);&#13;&#10;                    }&#13;&#10;                }&#13;&#10;&#13;&#10;                @Override&#13;&#10;                public void onError(String error) {&#13;&#10;                    // Revert UI changes on error&#13;&#10;                    updateFavoriteIcon(favoriteIcon, isCurrentlyFavorite);&#13;&#10;                    Toast.makeText(context, &quot;Lỗi khi xóa khỏi yêu thích: &quot; + error, Toast.LENGTH_SHORT).show();&#13;&#10;                }&#13;&#10;            });&#13;&#10;        } else {&#13;&#10;            // Thêm vào yêu thích&#13;&#10;            favoriteRepository.addToFavorites(userId, healthTipId, new FavoriteRepository.FavoriteActionCallback() {&#13;&#10;                @Override&#13;&#10;                public void onSuccess() {&#13;&#10;                    favoriteHealthTipIds.add(healthTipId);&#13;&#10;                    if (listener != null) {&#13;&#10;                        listener.onFavoriteClick(healthTip, true);&#13;&#10;                    }&#13;&#10;                }&#13;&#10;&#13;&#10;                @Override&#13;&#10;                public void onError(String error) {&#13;&#10;                    // Revert UI changes on error&#13;&#10;                    updateFavoriteIcon(favoriteIcon, isCurrentlyFavorite);&#13;&#10;                    Toast.makeText(context, &quot;Lỗi khi thêm vào yêu thích: &quot; + error, Toast.LENGTH_SHORT).show();&#13;&#10;                }&#13;&#10;            });&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Cập nhật icon yêu thích&#13;&#10;     */&#13;&#10;    private void updateFavoriteIcon(ImageView favoriteIcon, boolean isFavorite) {&#13;&#10;        if (isFavorite) {&#13;&#10;            favoriteIcon.setImageResource(R.drawable.ic_favorite_filled);&#13;&#10;            favoriteIcon.setColorFilter(context.getResources().getColor(R.color.favorite_color, null));&#13;&#10;        } else {&#13;&#10;            favoriteIcon.setImageResource(R.drawable.ic_favorite_outline);&#13;&#10;            favoriteIcon.setColorFilter(context.getResources().getColor(R.color.icon_color, null));&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @NonNull&#13;&#10;    @Override&#13;&#10;    public HealthTipViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#13;&#10;        View itemView = LayoutInflater.from(context).inflate(R.layout.item_health_tip, parent, false);&#13;&#10;        return new HealthTipViewHolder(itemView);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void onBindViewHolder(@NonNull HealthTipViewHolder holder, int position) {&#13;&#10;        HealthTip healthTip = healthTips.get(position);&#13;&#10;        boolean isFavorite = favoriteHealthTipIds.contains(healthTip.getId());&#13;&#10;        holder.bind(healthTip, listener, isFavorite, this);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public int getItemCount() {&#13;&#10;        return healthTips.size();&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * ViewHolder cho từng item trong RecyclerView&#13;&#10;     */&#13;&#10;    public static class HealthTipViewHolder extends RecyclerView.ViewHolder {&#13;&#10;        private final ImageView imageView;&#13;&#10;        private final TextView titleTextView;&#13;&#10;        private final TextView summaryTextView;&#13;&#10;        private final TextView dateTextView;&#13;&#10;        private final TextView viewCountTextView;&#13;&#10;        private final TextView likeCountTextView;&#13;&#10;        private final ImageView favoriteIcon;&#13;&#10;        private final SimpleDateFormat dateFormat;&#13;&#10;&#13;&#10;        public HealthTipViewHolder(@NonNull View itemView) {&#13;&#10;            super(itemView);&#13;&#10;            imageView = itemView.findViewById(R.id.imageViewHealthTip);&#13;&#10;            titleTextView = itemView.findViewById(R.id.textViewHealthTipTitle);&#13;&#10;            summaryTextView = itemView.findViewById(R.id.textViewHealthTipSummary);&#13;&#10;            dateTextView = itemView.findViewById(R.id.textViewDate);&#13;&#10;            viewCountTextView = itemView.findViewById(R.id.textViewViewCount);&#13;&#10;            likeCountTextView = itemView.findViewById(R.id.textViewLikeCount);&#13;&#10;            favoriteIcon = itemView.findViewById(R.id.imageViewFavorite);&#13;&#10;            dateFormat = new SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault());&#13;&#10;        }&#13;&#10;&#13;&#10;        public void bind(HealthTip healthTip, HealthTipClickListener listener, boolean isFavorite, HealthTipAdapter adapter) {&#13;&#10;            // Thiết lập tiêu đề - kiểm tra null&#13;&#10;            String title = healthTip.getTitle();&#13;&#10;            titleTextView.setText(title != null ? title : &quot;Không có tiêu đề&quot;);&#13;&#10;&#13;&#10;            // Thiết lập tóm tắt - sử dụng getContent() thay vì getSummary() và kiểm tra null&#13;&#10;            String content = healthTip.getContent();&#13;&#10;            summaryTextView.setText(content != null ? content : &quot;Không có nội dung&quot;);&#13;&#10;&#13;&#10;            // Thiết lập ngày - kiểm tra createdAt &gt; 0 thay vì != null vì là primitive long&#13;&#10;            if (healthTip.getCreatedAt() &gt; 0) {&#13;&#10;                dateTextView.setText(dateFormat.format(new Date(healthTip.getCreatedAt())));&#13;&#10;            } else {&#13;&#10;                dateTextView.setText(dateFormat.format(new Date()));&#13;&#10;            }&#13;&#10;&#13;&#10;            // Thiết lập số lượt xem và thích&#13;&#10;            viewCountTextView.setText(String.valueOf(healthTip.getViewCount()));&#13;&#10;            likeCountTextView.setText(String.valueOf(healthTip.getLikeCount()));&#13;&#10;&#13;&#10;            // Tải hình ảnh với Glide và Cloudinary optimization&#13;&#10;            String imageUrl = healthTip.getImageUrl();&#13;&#10;            if (imageUrl != null &amp;&amp; !imageUrl.isEmpty()) {&#13;&#10;                // Sử dụng optimized image URL cho mobile&#13;&#10;                String optimizedImageUrl = healthTip.getOptimizedImageUrl();&#13;&#10;                &#13;&#10;                android.util.Log.d(&quot;CategoryHealthTipAdapter&quot;, &quot;Loading image - Original: &quot; + imageUrl);&#13;&#10;                android.util.Log.d(&quot;CategoryHealthTipAdapter&quot;, &quot;Loading image - Optimized: &quot; + optimizedImageUrl);&#13;&#10;                &#13;&#10;                Glide.with(itemView.getContext())&#13;&#10;                        .load(optimizedImageUrl)&#13;&#10;                        .centerCrop()&#13;&#10;                        .placeholder(R.drawable.placeholder_image)&#13;&#10;                        .error(R.drawable.error_image)&#13;&#10;                        .into(imageView);&#13;&#10;            } else {&#13;&#10;                imageView.setImageResource(R.drawable.placeholder_image);&#13;&#10;            }&#13;&#10;&#13;&#10;            // Cập nhật icon yêu thích&#13;&#10;            adapter.updateFavoriteIcon(favoriteIcon, isFavorite);&#13;&#10;&#13;&#10;            // Thiết lập sự kiện click cho item&#13;&#10;            itemView.setOnClickListener(v -&gt; {&#13;&#10;                if (listener != null) {&#13;&#10;                    listener.onHealthTipClick(healthTip);&#13;&#10;                }&#13;&#10;            });&#13;&#10;&#13;&#10;            // Thiết lập sự kiện click cho nút yêu thích&#13;&#10;            favoriteIcon.setOnClickListener(v -&gt; adapter.toggleFavorite(healthTip, favoriteIcon));&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/home/adapter/HealthTipAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/home/adapter/HealthTipAdapter.java" />
              <option name="originalContent" value="package com.vhn.doan.presentation.home.adapter;&#10;&#10;import android.content.Context;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.ImageView;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.cardview.widget.CardView;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.bumptech.glide.Glide;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.auth.FirebaseUser;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.data.HealthTip;&#10;import com.vhn.doan.data.repository.FavoriteRepository;&#10;import com.vhn.doan.data.repository.FavoriteRepositoryImpl;&#10;&#10;import java.util.HashSet;&#10;import java.util.List;&#10;import java.util.Set;&#10;&#10;/**&#10; * Adapter để hiển thị danh sách mẹo sức khỏe trong RecyclerView&#10; * Tuân theo mô hình MVP và hỗ trợ chức năng yêu thích&#10; */&#10;public class HealthTipAdapter extends RecyclerView.Adapter&lt;HealthTipAdapter.HealthTipViewHolder&gt; {&#10;&#10;    private final List&lt;HealthTip&gt; healthTips;&#10;    private final HealthTipClickListener listener;&#10;    private final Context context;&#10;    private final FavoriteRepository favoriteRepository;&#10;    private final FirebaseAuth firebaseAuth;&#10;    private final Set&lt;String&gt; favoriteHealthTipIds; // Cache để theo dõi trạng thái yêu thích&#10;&#10;    /**&#10;     * Interface cho sự kiện click vào mẹo sức khỏe&#10;     */&#10;    public interface HealthTipClickListener {&#10;        void onHealthTipClick(HealthTip healthTip);&#10;        void onFavoriteClick(HealthTip healthTip, boolean isFavorite); // Callback cho sự kiện yêu thích&#10;    }&#10;&#10;    /**&#10;     * Constructor&#10;     * @param context Context&#10;     * @param healthTips Danh sách mẹo sức khỏe cần hiển thị&#10;     * @param listener Listener xử lý sự kiện click&#10;     */&#10;    public HealthTipAdapter(Context context, List&lt;HealthTip&gt; healthTips, HealthTipClickListener listener) {&#10;        this.context = context;&#10;        this.healthTips = healthTips;&#10;        this.listener = listener;&#10;        this.favoriteRepository = new FavoriteRepositoryImpl();&#10;        this.firebaseAuth = FirebaseAuth.getInstance();&#10;        this.favoriteHealthTipIds = new HashSet&lt;&gt;();&#10;&#10;        // Load danh sách yêu thích khi khởi tạo adapter&#10;        loadUserFavorites();&#10;    }&#10;&#10;    /**&#10;     * Constructor với FavoriteRepository tùy chỉnh (cho testing)&#10;     */&#10;    public HealthTipAdapter(Context context, List&lt;HealthTip&gt; healthTips, HealthTipClickListener listener,&#10;                           FavoriteRepository favoriteRepository) {&#10;        this.context = context;&#10;        this.healthTips = healthTips;&#10;        this.listener = listener;&#10;        this.favoriteRepository = favoriteRepository;&#10;        this.firebaseAuth = FirebaseAuth.getInstance();&#10;        this.favoriteHealthTipIds = new HashSet&lt;&gt;();&#10;&#10;        loadUserFavorites();&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public HealthTipViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(context).inflate(R.layout.item_health_tip, parent, false);&#10;        return new HealthTipViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull HealthTipViewHolder holder, int position) {&#10;        HealthTip healthTip = healthTips.get(position);&#10;        boolean isFavorite = favoriteHealthTipIds.contains(healthTip.getId());&#10;        holder.bind(healthTip, listener, isFavorite, this);&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return healthTips != null ? healthTips.size() : 0;&#10;    }&#10;&#10;    /**&#10;     * Cập nhật danh sách mẹo sức khỏe&#10;     * @param newHealthTips Danh sách mẹo sức khỏe mới&#10;     */&#10;    public void updateHealthTips(List&lt;HealthTip&gt; newHealthTips) {&#10;        healthTips.clear();&#10;        healthTips.addAll(newHealthTips);&#10;        notifyDataSetChanged();&#10;        // Reload favorites sau khi cập nhật danh sách&#10;        loadUserFavorites();&#10;    }&#10;&#10;    /**&#10;     * Load danh sách yêu thích của người dùng hiện tại&#10;     */&#10;    private void loadUserFavorites() {&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#10;        if (currentUser == null) {&#10;            return;&#10;        }&#10;&#10;        favoriteRepository.getFavoriteHealthTipIds(currentUser.getUid(), new FavoriteRepository.FavoriteListCallback() {&#10;            @Override&#10;            public void onSuccess(List&lt;HealthTip&gt; favoriteHealthTips) {&#10;                favoriteHealthTipIds.clear();&#10;                for (HealthTip healthTip : favoriteHealthTips) {&#10;                    favoriteHealthTipIds.add(healthTip.getId());&#10;                }&#10;                notifyDataSetChanged(); // Cập nhật UI&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                // Log error nhưng không hiển thị Toast để tránh spam&#10;                android.util.Log.e(&quot;HealthTipAdapter&quot;, &quot;Lỗi khi tải danh sách yêu thích: &quot; + error);&#10;            }&#10;        });&#10;    }&#10;&#10;    /**&#10;     * Toggle trạng thái yêu thích cho một mẹo sức khỏe&#10;     */&#10;    public void toggleFavorite(HealthTip healthTip, ImageView favoriteIcon) {&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#10;        if (currentUser == null) {&#10;            Toast.makeText(context, &quot;Vui lòng đăng nhập để sử dụng chức năng yêu thích&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        String userId = currentUser.getUid();&#10;        String healthTipId = healthTip.getId();&#10;        boolean isCurrentlyFavorite = favoriteHealthTipIds.contains(healthTipId);&#10;&#10;        // Cập nhật UI ngay lập tức cho UX tốt hơn&#10;        updateFavoriteIcon(favoriteIcon, !isCurrentlyFavorite);&#10;&#10;        if (isCurrentlyFavorite) {&#10;            // Xóa khỏi yêu thích&#10;            favoriteRepository.removeFromFavorites(userId, healthTipId, new FavoriteRepository.FavoriteActionCallback() {&#10;                @Override&#10;                public void onSuccess() {&#10;                    favoriteHealthTipIds.remove(healthTipId);&#10;                    if (listener != null) {&#10;                        listener.onFavoriteClick(healthTip, false);&#10;                    }&#10;                }&#10;&#10;                @Override&#10;                public void onError(String error) {&#10;                    // Revert UI changes on error&#10;                    updateFavoriteIcon(favoriteIcon, isCurrentlyFavorite);&#10;                    Toast.makeText(context, &quot;Lỗi khi xóa khỏi yêu thích: &quot; + error, Toast.LENGTH_SHORT).show();&#10;                }&#10;            });&#10;        } else {&#10;            // Thêm vào yêu thích&#10;            favoriteRepository.addToFavorites(userId, healthTipId, new FavoriteRepository.FavoriteActionCallback() {&#10;                @Override&#10;                public void onSuccess() {&#10;                    favoriteHealthTipIds.add(healthTipId);&#10;                    if (listener != null) {&#10;                        listener.onFavoriteClick(healthTip, true);&#10;                    }&#10;                }&#10;&#10;                @Override&#10;                public void onError(String error) {&#10;                    // Revert UI changes on error&#10;                    updateFavoriteIcon(favoriteIcon, isCurrentlyFavorite);&#10;                    Toast.makeText(context, &quot;Lỗi khi thêm vào yêu thích: &quot; + error, Toast.LENGTH_SHORT).show();&#10;                }&#10;            });&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Cập nhật icon yêu thích&#10;     */&#10;    private void updateFavoriteIcon(ImageView favoriteIcon, boolean isFavorite) {&#10;        if (isFavorite) {&#10;            favoriteIcon.setImageResource(R.drawable.ic_favorite_filled);&#10;            favoriteIcon.setColorFilter(context.getResources().getColor(R.color.favorite_color, null));&#10;        } else {&#10;            favoriteIcon.setImageResource(R.drawable.ic_favorite_outline);&#10;            favoriteIcon.setColorFilter(context.getResources().getColor(R.color.icon_color, null));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Cập nhật trạng thái yêu thích cho một health tip cụ thể&#10;     * Method này được gọi từ HomeFragment để đồng bộ trạng thái giữa các adapter&#10;     * @param healthTipId ID của health tip cần cập nhật&#10;     * @param isFavorite Trạng thái yêu thích mới&#10;     */&#10;    public void updateFavoriteStatus(String healthTipId, boolean isFavorite) {&#10;        if (healthTipId == null) return;&#10;&#10;        // Cập nhật cache trạng thái yêu thích&#10;        if (isFavorite) {&#10;            favoriteHealthTipIds.add(healthTipId);&#10;        } else {&#10;            favoriteHealthTipIds.remove(healthTipId);&#10;        }&#10;&#10;        // Tìm và cập nhật UI cho item có ID tương ứng&#10;        for (int i = 0; i &lt; healthTips.size(); i++) {&#10;            HealthTip healthTip = healthTips.get(i);&#10;            if (healthTip != null &amp;&amp; healthTipId.equals(healthTip.getId())) {&#10;                // Chỉ cập nhật item cụ thể thay vì toàn bộ danh sách&#10;                notifyItemChanged(i);&#10;                break;&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * ViewHolder cho item mẹo sức khỏe&#10;     */&#10;    public static class HealthTipViewHolder extends RecyclerView.ViewHolder {&#10;        private final ImageView imageViewThumbnail;&#10;        private final TextView textViewTitle;&#10;        private final TextView textViewShortDesc;&#10;        private final TextView textViewViewCount;&#10;        private final TextView textViewLikeCount;&#10;        private final CardView cardViewHealthTip;&#10;        private final ImageView imageViewFavorite;&#10;&#10;        public HealthTipViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            imageViewThumbnail = itemView.findViewById(R.id.imageViewHealthTip);&#10;            textViewTitle = itemView.findViewById(R.id.textViewHealthTipTitle);&#10;            textViewShortDesc = itemView.findViewById(R.id.textViewHealthTipSummary);&#10;            textViewViewCount = itemView.findViewById(R.id.textViewViewCount);&#10;            textViewLikeCount = itemView.findViewById(R.id.textViewLikeCount);&#10;            cardViewHealthTip = (CardView) itemView;&#10;            imageViewFavorite = itemView.findViewById(R.id.imageViewFavorite);&#10;        }&#10;&#10;        public void bind(final HealthTip healthTip, final HealthTipClickListener listener,&#10;                        boolean isFavorite, final HealthTipAdapter adapter) {&#10;            // Đặt tiêu đề - kiểm tra null&#10;            String title = healthTip.getTitle();&#10;            textViewTitle.setText(title != null ? title : &quot;Không có tiêu đề&quot;);&#10;&#10;            // Đặt mô tả ngắn - lấy 50 ký tự đầu tiên của nội dung&#10;            String shortDesc = healthTip.getContent();&#10;            if (shortDesc != null &amp;&amp; !shortDesc.isEmpty()) {&#10;                if (shortDesc.length() &gt; 50) {&#10;                    shortDesc = shortDesc.substring(0, 50) + &quot;...&quot;;&#10;                }&#10;                textViewShortDesc.setText(shortDesc);&#10;            } else {&#10;                textViewShortDesc.setText(&quot;Không có nội dung&quot;);&#10;            }&#10;&#10;            // Hiển thị số lượt xem và số lượt thích&#10;            textViewViewCount.setText(String.valueOf(healthTip.getViewCount()));&#10;            textViewLikeCount.setText(String.valueOf(healthTip.getLikeCount()));&#10;&#10;            // Tải hình ảnh thumbnail bằng Glide&#10;            if (healthTip.getImageUrl() != null &amp;&amp; !healthTip.getImageUrl().isEmpty()) {&#10;                Glide.with(itemView.getContext())&#10;                        .load(healthTip.getImageUrl())&#10;                        .centerCrop()&#10;                        .placeholder(R.drawable.placeholder_image)&#10;                        .error(R.drawable.error_image)&#10;                        .into(imageViewThumbnail);&#10;            } else {&#10;                imageViewThumbnail.setImageResource(R.drawable.placeholder_image);&#10;            }&#10;&#10;            // Cập nhật icon yêu thích&#10;            adapter.updateFavoriteIcon(imageViewFavorite, isFavorite);&#10;&#10;            // Xử lý sự kiện click vào card&#10;            cardViewHealthTip.setOnClickListener(v -&gt; {&#10;                if (listener != null) {&#10;                    listener.onHealthTipClick(healthTip);&#10;                }&#10;            });&#10;&#10;            // Xử lý sự kiện click vào nút yêu thích&#10;            imageViewFavorite.setOnClickListener(v -&gt; adapter.toggleFavorite(healthTip, imageViewFavorite));&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.home.adapter;&#13;&#10;&#13;&#10;import android.content.Context;&#13;&#10;import android.view.LayoutInflater;&#13;&#10;import android.view.View;&#13;&#10;import android.view.ViewGroup;&#13;&#10;import android.widget.ImageView;&#13;&#10;import android.widget.TextView;&#13;&#10;import android.widget.Toast;&#13;&#10;&#13;&#10;import androidx.annotation.NonNull;&#13;&#10;import androidx.cardview.widget.CardView;&#13;&#10;import androidx.recyclerview.widget.RecyclerView;&#13;&#10;&#13;&#10;import com.bumptech.glide.Glide;&#13;&#10;import com.google.firebase.auth.FirebaseAuth;&#13;&#10;import com.google.firebase.auth.FirebaseUser;&#13;&#10;import com.vhn.doan.R;&#13;&#10;import com.vhn.doan.data.HealthTip;&#13;&#10;import com.vhn.doan.data.repository.FavoriteRepository;&#13;&#10;import com.vhn.doan.data.repository.FavoriteRepositoryImpl;&#13;&#10;&#13;&#10;import java.util.HashSet;&#13;&#10;import java.util.List;&#13;&#10;import java.util.Set;&#13;&#10;&#13;&#10;/**&#13;&#10; * Adapter để hiển thị danh sách mẹo sức khỏe trong RecyclerView&#13;&#10; * Tuân theo mô hình MVP và hỗ trợ chức năng yêu thích&#13;&#10; */&#13;&#10;public class HealthTipAdapter extends RecyclerView.Adapter&lt;HealthTipAdapter.HealthTipViewHolder&gt; {&#13;&#10;&#13;&#10;    private final List&lt;HealthTip&gt; healthTips;&#13;&#10;    private final HealthTipClickListener listener;&#13;&#10;    private final Context context;&#13;&#10;    private final FavoriteRepository favoriteRepository;&#13;&#10;    private final FirebaseAuth firebaseAuth;&#13;&#10;    private final Set&lt;String&gt; favoriteHealthTipIds; // Cache để theo dõi trạng thái yêu thích&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Interface cho sự kiện click vào mẹo sức khỏe&#13;&#10;     */&#13;&#10;    public interface HealthTipClickListener {&#13;&#10;        void onHealthTipClick(HealthTip healthTip);&#13;&#10;        void onFavoriteClick(HealthTip healthTip, boolean isFavorite); // Callback cho sự kiện yêu thích&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Constructor&#13;&#10;     * @param context Context&#13;&#10;     * @param healthTips Danh sách mẹo sức khỏe cần hiển thị&#13;&#10;     * @param listener Listener xử lý sự kiện click&#13;&#10;     */&#13;&#10;    public HealthTipAdapter(Context context, List&lt;HealthTip&gt; healthTips, HealthTipClickListener listener) {&#13;&#10;        this.context = context;&#13;&#10;        this.healthTips = healthTips;&#13;&#10;        this.listener = listener;&#13;&#10;        this.favoriteRepository = new FavoriteRepositoryImpl();&#13;&#10;        this.firebaseAuth = FirebaseAuth.getInstance();&#13;&#10;        this.favoriteHealthTipIds = new HashSet&lt;&gt;();&#13;&#10;&#13;&#10;        // Load danh sách yêu thích khi khởi tạo adapter&#13;&#10;        loadUserFavorites();&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Constructor với FavoriteRepository tùy chỉnh (cho testing)&#13;&#10;     */&#13;&#10;    public HealthTipAdapter(Context context, List&lt;HealthTip&gt; healthTips, HealthTipClickListener listener,&#13;&#10;                           FavoriteRepository favoriteRepository) {&#13;&#10;        this.context = context;&#13;&#10;        this.healthTips = healthTips;&#13;&#10;        this.listener = listener;&#13;&#10;        this.favoriteRepository = favoriteRepository;&#13;&#10;        this.firebaseAuth = FirebaseAuth.getInstance();&#13;&#10;        this.favoriteHealthTipIds = new HashSet&lt;&gt;();&#13;&#10;&#13;&#10;        loadUserFavorites();&#13;&#10;    }&#13;&#10;&#13;&#10;    @NonNull&#13;&#10;    @Override&#13;&#10;    public HealthTipViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#13;&#10;        View view = LayoutInflater.from(context).inflate(R.layout.item_health_tip, parent, false);&#13;&#10;        return new HealthTipViewHolder(view);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void onBindViewHolder(@NonNull HealthTipViewHolder holder, int position) {&#13;&#10;        HealthTip healthTip = healthTips.get(position);&#13;&#10;        boolean isFavorite = favoriteHealthTipIds.contains(healthTip.getId());&#13;&#10;        holder.bind(healthTip, listener, isFavorite, this);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public int getItemCount() {&#13;&#10;        return healthTips != null ? healthTips.size() : 0;&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Cập nhật danh sách mẹo sức khỏe&#13;&#10;     * @param newHealthTips Danh sách mẹo sức khỏe mới&#13;&#10;     */&#13;&#10;    public void updateHealthTips(List&lt;HealthTip&gt; newHealthTips) {&#13;&#10;        healthTips.clear();&#13;&#10;        healthTips.addAll(newHealthTips);&#13;&#10;        notifyDataSetChanged();&#13;&#10;        // Reload favorites sau khi cập nhật danh sách&#13;&#10;        loadUserFavorites();&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Load danh sách yêu thích của người dùng hiện tại&#13;&#10;     */&#13;&#10;    private void loadUserFavorites() {&#13;&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#13;&#10;        if (currentUser == null) {&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        favoriteRepository.getFavoriteHealthTipIds(currentUser.getUid(), new FavoriteRepository.FavoriteListCallback() {&#13;&#10;            @Override&#13;&#10;            public void onSuccess(List&lt;HealthTip&gt; favoriteHealthTips) {&#13;&#10;                favoriteHealthTipIds.clear();&#13;&#10;                for (HealthTip healthTip : favoriteHealthTips) {&#13;&#10;                    favoriteHealthTipIds.add(healthTip.getId());&#13;&#10;                }&#13;&#10;                notifyDataSetChanged(); // Cập nhật UI&#13;&#10;            }&#13;&#10;&#13;&#10;            @Override&#13;&#10;            public void onError(String error) {&#13;&#10;                // Log error nhưng không hiển thị Toast để tránh spam&#13;&#10;                android.util.Log.e(&quot;HealthTipAdapter&quot;, &quot;Lỗi khi tải danh sách yêu thích: &quot; + error);&#13;&#10;            }&#13;&#10;        });&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Toggle trạng thái yêu thích cho một mẹo sức khỏe&#13;&#10;     */&#13;&#10;    public void toggleFavorite(HealthTip healthTip, ImageView favoriteIcon) {&#13;&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#13;&#10;        if (currentUser == null) {&#13;&#10;            Toast.makeText(context, &quot;Vui lòng đăng nhập để sử dụng chức năng yêu thích&quot;, Toast.LENGTH_SHORT).show();&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        String userId = currentUser.getUid();&#13;&#10;        String healthTipId = healthTip.getId();&#13;&#10;        boolean isCurrentlyFavorite = favoriteHealthTipIds.contains(healthTipId);&#13;&#10;&#13;&#10;        // Cập nhật UI ngay lập tức cho UX tốt hơn&#13;&#10;        updateFavoriteIcon(favoriteIcon, !isCurrentlyFavorite);&#13;&#10;&#13;&#10;        if (isCurrentlyFavorite) {&#13;&#10;            // Xóa khỏi yêu thích&#13;&#10;            favoriteRepository.removeFromFavorites(userId, healthTipId, new FavoriteRepository.FavoriteActionCallback() {&#13;&#10;                @Override&#13;&#10;                public void onSuccess() {&#13;&#10;                    favoriteHealthTipIds.remove(healthTipId);&#13;&#10;                    if (listener != null) {&#13;&#10;                        listener.onFavoriteClick(healthTip, false);&#13;&#10;                    }&#13;&#10;                }&#13;&#10;&#13;&#10;                @Override&#13;&#10;                public void onError(String error) {&#13;&#10;                    // Revert UI changes on error&#13;&#10;                    updateFavoriteIcon(favoriteIcon, isCurrentlyFavorite);&#13;&#10;                    Toast.makeText(context, &quot;Lỗi khi xóa khỏi yêu thích: &quot; + error, Toast.LENGTH_SHORT).show();&#13;&#10;                }&#13;&#10;            });&#13;&#10;        } else {&#13;&#10;            // Thêm vào yêu thích&#13;&#10;            favoriteRepository.addToFavorites(userId, healthTipId, new FavoriteRepository.FavoriteActionCallback() {&#13;&#10;                @Override&#13;&#10;                public void onSuccess() {&#13;&#10;                    favoriteHealthTipIds.add(healthTipId);&#13;&#10;                    if (listener != null) {&#13;&#10;                        listener.onFavoriteClick(healthTip, true);&#13;&#10;                    }&#13;&#10;                }&#13;&#10;&#13;&#10;                @Override&#13;&#10;                public void onError(String error) {&#13;&#10;                    // Revert UI changes on error&#13;&#10;                    updateFavoriteIcon(favoriteIcon, isCurrentlyFavorite);&#13;&#10;                    Toast.makeText(context, &quot;Lỗi khi thêm vào yêu thích: &quot; + error, Toast.LENGTH_SHORT).show();&#13;&#10;                }&#13;&#10;            });&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Cập nhật icon yêu thích&#13;&#10;     */&#13;&#10;    private void updateFavoriteIcon(ImageView favoriteIcon, boolean isFavorite) {&#13;&#10;        if (isFavorite) {&#13;&#10;            favoriteIcon.setImageResource(R.drawable.ic_favorite_filled);&#13;&#10;            favoriteIcon.setColorFilter(context.getResources().getColor(R.color.favorite_color, null));&#13;&#10;        } else {&#13;&#10;            favoriteIcon.setImageResource(R.drawable.ic_favorite_outline);&#13;&#10;            favoriteIcon.setColorFilter(context.getResources().getColor(R.color.icon_color, null));&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Cập nhật trạng thái yêu thích cho một health tip cụ thể&#13;&#10;     * Method này được gọi từ HomeFragment để đồng bộ trạng thái giữa các adapter&#13;&#10;     * @param healthTipId ID của health tip cần cập nhật&#13;&#10;     * @param isFavorite Trạng thái yêu thích mới&#13;&#10;     */&#13;&#10;    public void updateFavoriteStatus(String healthTipId, boolean isFavorite) {&#13;&#10;        if (healthTipId == null) return;&#13;&#10;&#13;&#10;        // Cập nhật cache trạng thái yêu thích&#13;&#10;        if (isFavorite) {&#13;&#10;            favoriteHealthTipIds.add(healthTipId);&#13;&#10;        } else {&#13;&#10;            favoriteHealthTipIds.remove(healthTipId);&#13;&#10;        }&#13;&#10;&#13;&#10;        // Tìm và cập nhật UI cho item có ID tương ứng&#13;&#10;        for (int i = 0; i &lt; healthTips.size(); i++) {&#13;&#10;            HealthTip healthTip = healthTips.get(i);&#13;&#10;            if (healthTip != null &amp;&amp; healthTipId.equals(healthTip.getId())) {&#13;&#10;                // Chỉ cập nhật item cụ thể thay vì toàn bộ danh sách&#13;&#10;                notifyItemChanged(i);&#13;&#10;                break;&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * ViewHolder cho item mẹo sức khỏe&#13;&#10;     */&#13;&#10;    public static class HealthTipViewHolder extends RecyclerView.ViewHolder {&#13;&#10;        private final ImageView imageViewThumbnail;&#13;&#10;        private final TextView textViewTitle;&#13;&#10;        private final TextView textViewShortDesc;&#13;&#10;        private final TextView textViewViewCount;&#13;&#10;        private final TextView textViewLikeCount;&#13;&#10;        private final CardView cardViewHealthTip;&#13;&#10;        private final ImageView imageViewFavorite;&#13;&#10;&#13;&#10;        public HealthTipViewHolder(@NonNull View itemView) {&#13;&#10;            super(itemView);&#13;&#10;            imageViewThumbnail = itemView.findViewById(R.id.imageViewHealthTip);&#13;&#10;            textViewTitle = itemView.findViewById(R.id.textViewHealthTipTitle);&#13;&#10;            textViewShortDesc = itemView.findViewById(R.id.textViewHealthTipSummary);&#13;&#10;            textViewViewCount = itemView.findViewById(R.id.textViewViewCount);&#13;&#10;            textViewLikeCount = itemView.findViewById(R.id.textViewLikeCount);&#13;&#10;            cardViewHealthTip = (CardView) itemView;&#13;&#10;            imageViewFavorite = itemView.findViewById(R.id.imageViewFavorite);&#13;&#10;        }&#13;&#10;&#13;&#10;        public void bind(final HealthTip healthTip, final HealthTipClickListener listener,&#13;&#10;                        boolean isFavorite, final HealthTipAdapter adapter) {&#13;&#10;            // Đặt tiêu đề - kiểm tra null&#13;&#10;            String title = healthTip.getTitle();&#13;&#10;            textViewTitle.setText(title != null ? title : &quot;Không có tiêu đề&quot;);&#13;&#10;&#13;&#10;            // Đặt mô tả ngắn - lấy 50 ký tự đầu tiên của nội dung&#13;&#10;            String shortDesc = healthTip.getContent();&#13;&#10;            if (shortDesc != null &amp;&amp; !shortDesc.isEmpty()) {&#13;&#10;                if (shortDesc.length() &gt; 50) {&#13;&#10;                    shortDesc = shortDesc.substring(0, 50) + &quot;...&quot;;&#13;&#10;                }&#13;&#10;                textViewShortDesc.setText(shortDesc);&#13;&#10;            } else {&#13;&#10;                textViewShortDesc.setText(&quot;Không có nội dung&quot;);&#13;&#10;            }&#13;&#10;&#13;&#10;            // Hiển thị số lượt xem và số lượt thích&#13;&#10;            textViewViewCount.setText(String.valueOf(healthTip.getViewCount()));&#13;&#10;            textViewLikeCount.setText(String.valueOf(healthTip.getLikeCount()));&#13;&#10;&#13;&#10;            // Tải hình ảnh thumbnail bằng Glide với Cloudinary optimization&#13;&#10;            String imageUrl = healthTip.getImageUrl();&#13;&#10;            if (imageUrl != null &amp;&amp; !imageUrl.isEmpty()) {&#13;&#10;                // Sử dụng thumbnail URL được tối ưu cho danh sách&#13;&#10;                String optimizedImageUrl = healthTip.getThumbnailUrl();&#13;&#10;                &#13;&#10;                android.util.Log.d(&quot;HealthTipAdapter&quot;, &quot;Loading image - Original: &quot; + imageUrl);&#13;&#10;                android.util.Log.d(&quot;HealthTipAdapter&quot;, &quot;Loading image - Optimized: &quot; + optimizedImageUrl);&#13;&#10;                &#13;&#10;                Glide.with(itemView.getContext())&#13;&#10;                        .load(optimizedImageUrl)&#13;&#10;                        .centerCrop()&#13;&#10;                        .placeholder(R.drawable.placeholder_image)&#13;&#10;                        .error(R.drawable.error_image)&#13;&#10;                        .into(imageViewThumbnail);&#13;&#10;            } else {&#13;&#10;                imageViewThumbnail.setImageResource(R.drawable.placeholder_image);&#13;&#10;            }&#13;&#10;&#13;&#10;            // Cập nhật icon yêu thích&#13;&#10;            adapter.updateFavoriteIcon(imageViewFavorite, isFavorite);&#13;&#10;&#13;&#10;            // Xử lý sự kiện click vào card&#13;&#10;            cardViewHealthTip.setOnClickListener(v -&gt; {&#13;&#10;                if (listener != null) {&#13;&#10;                    listener.onHealthTipClick(healthTip);&#13;&#10;                }&#13;&#10;            });&#13;&#10;&#13;&#10;            // Xử lý sự kiện click vào nút yêu thích&#13;&#10;            imageViewFavorite.setOnClickListener(v -&gt; adapter.toggleFavorite(healthTip, imageViewFavorite));&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/shortvideo/ShortVideoAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/shortvideo/ShortVideoAdapter.java" />
              <option name="originalContent" value="package com.vhn.doan.presentation.shortvideo;&#10;&#10;import android.graphics.Matrix;&#10;import android.graphics.SurfaceTexture;&#10;import android.media.MediaPlayer;&#10;import android.net.Uri;&#10;import android.view.LayoutInflater;&#10;import android.view.Surface;&#10;import android.view.TextureView;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.ImageView;&#10;import android.widget.TextView;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.bumptech.glide.Glide;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.data.ShortVideo;&#10;&#10;import java.io.IOException;&#10;import java.text.SimpleDateFormat;&#10;import java.util.Date;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;/**&#10; * Adapter cho RecyclerView hiển thị danh sách video ngắn&#10; * Tối ưu hóa cho hiệu ứng vuốt giống TikTok/Facebook Reels&#10; * Sử dụng TextureView để loại bỏ letterbox và hiển thị video full màn hình&#10; */&#10;public class ShortVideoAdapter extends RecyclerView.Adapter&lt;ShortVideoAdapter.VideoViewHolder&gt; {&#10;&#10;    private final List&lt;ShortVideo&gt; videos;&#10;    private final VideoInteractionListener listener;&#10;    private int currentPlayingPosition = -1;&#10;&#10;    public interface VideoInteractionListener {&#10;        void onVideoLiked(int position, String videoId, boolean isCurrentlyLiked);&#10;        void onVideoShared(int position, String videoId);&#10;        void onVideoCommented(int position, String videoId);&#10;        void onVideoViewed(int position, String videoId);&#10;        void onVideoProfileClicked(int position, String userId);&#10;    }&#10;&#10;    public ShortVideoAdapter(List&lt;ShortVideo&gt; videos, VideoInteractionListener listener) {&#10;        this.videos = videos;&#10;        this.listener = listener;&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public VideoViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(parent.getContext())&#10;                .inflate(R.layout.item_short_video, parent, false);&#10;        return new VideoViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull VideoViewHolder holder, int position) {&#10;        ShortVideo video = videos.get(position);&#10;        holder.bind(video, position);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull VideoViewHolder holder, int position, @NonNull List&lt;Object&gt; payloads) {&#10;        if (payloads.isEmpty()) {&#10;            super.onBindViewHolder(holder, position, payloads);&#10;        } else {&#10;            ShortVideo video = videos.get(position);&#10;            holder.bind(video, position, payloads);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return videos.size();&#10;    }&#10;&#10;    public void updateVideos(List&lt;ShortVideo&gt; newVideos) {&#10;        this.videos.clear();&#10;        this.videos.addAll(newVideos);&#10;        notifyDataSetChanged();&#10;    }&#10;&#10;    public void updateVideoLike(int position, boolean isLiked, int newLikeCount) {&#10;        if (position &gt;= 0 &amp;&amp; position &lt; videos.size()) {&#10;            videos.get(position).setLikeCount(newLikeCount);&#10;            notifyItemChanged(position, &quot;like_update&quot;);&#10;        }&#10;    }&#10;&#10;    public void updateVideoView(int position, int newViewCount) {&#10;        if (position &gt;= 0 &amp;&amp; position &lt; videos.size()) {&#10;            videos.get(position).setViewCount(newViewCount);&#10;            notifyItemChanged(position, &quot;view_update&quot;);&#10;        }&#10;    }&#10;&#10;    public void playVideoAt(int position) {&#10;        if (currentPlayingPosition != -1 &amp;&amp; currentPlayingPosition != position) {&#10;            notifyItemChanged(currentPlayingPosition, &quot;pause&quot;);&#10;        }&#10;        currentPlayingPosition = position;&#10;        notifyItemChanged(position, &quot;play&quot;);&#10;    }&#10;&#10;    public void pauseVideoAt(int position) {&#10;        if (position &gt;= 0 &amp;&amp; position &lt; getItemCount()) {&#10;            notifyItemChanged(position, &quot;pause&quot;);&#10;        }&#10;    }&#10;&#10;    public void pauseCurrentVideo() {&#10;        if (currentPlayingPosition != -1) {&#10;            notifyItemChanged(currentPlayingPosition, &quot;pause&quot;);&#10;        }&#10;    }&#10;&#10;    public void resumeCurrentVideo() {&#10;        if (currentPlayingPosition != -1) {&#10;            notifyItemChanged(currentPlayingPosition, &quot;resume&quot;);&#10;        }&#10;    }&#10;&#10;    public void pauseAllVideos() {&#10;        for (int i = 0; i &lt; getItemCount(); i++) {&#10;            notifyItemChanged(i, &quot;pause&quot;);&#10;        }&#10;        currentPlayingPosition = -1;&#10;    }&#10;&#10;    public class VideoViewHolder extends RecyclerView.ViewHolder implements TextureView.SurfaceTextureListener {&#10;        private TextureView textureView;&#10;        private MediaPlayer mediaPlayer;&#10;        private Surface surface;&#10;        private ImageView imgThumbnail;&#10;        private ImageView imgPlayPause;&#10;        private TextView txtTitle;&#10;        private TextView txtCaption;&#10;        private TextView txtViewCount;&#10;        private TextView txtLikeCount;&#10;        private TextView txtUploadDate;&#10;        private ImageView btnLike;&#10;        private ImageView btnShare;&#10;        private ImageView btnComment;&#10;&#10;        private boolean isLiked = false;&#10;        private boolean isVideoLoaded = false;&#10;        private boolean isTextureAvailable = false;&#10;        private String pendingVideoUrl = null;&#10;&#10;        public VideoViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            initViews();&#10;            setupClickListeners();&#10;            setupTextureView();&#10;        }&#10;&#10;        private void initViews() {&#10;            textureView = itemView.findViewById(R.id.textureView);&#10;            imgThumbnail = itemView.findViewById(R.id.imgThumbnail);&#10;            imgPlayPause = itemView.findViewById(R.id.imgPlayPause);&#10;            txtTitle = itemView.findViewById(R.id.txtTitle);&#10;            txtCaption = itemView.findViewById(R.id.txtCaption);&#10;            txtViewCount = itemView.findViewById(R.id.txtViewCount);&#10;            txtLikeCount = itemView.findViewById(R.id.txtLikeCount);&#10;            txtUploadDate = itemView.findViewById(R.id.txtUploadDate);&#10;            btnLike = itemView.findViewById(R.id.btnLike);&#10;            btnShare = itemView.findViewById(R.id.btnShare);&#10;            btnComment = itemView.findViewById(R.id.btnComment);&#10;        }&#10;&#10;        private void setupTextureView() {&#10;            textureView.setSurfaceTextureListener(this);&#10;        }&#10;&#10;        // Implement TextureView.SurfaceTextureListener&#10;        @Override&#10;        public void onSurfaceTextureAvailable(SurfaceTexture surfaceTexture, int width, int height) {&#10;            surface = new Surface(surfaceTexture);&#10;            isTextureAvailable = true;&#10;&#10;            // Nếu có video đang chờ được load, load ngay&#10;            if (pendingVideoUrl != null) {&#10;                setupVideo(pendingVideoUrl);&#10;                pendingVideoUrl = null;&#10;            }&#10;        }&#10;&#10;        @Override&#10;        public void onSurfaceTextureSizeChanged(SurfaceTexture surfaceTexture, int width, int height) {&#10;            adjustVideoSize();&#10;        }&#10;&#10;        @Override&#10;        public boolean onSurfaceTextureDestroyed(SurfaceTexture surfaceTexture) {&#10;            releaseMediaPlayer();&#10;            if (surface != null) {&#10;                surface.release();&#10;                surface = null;&#10;            }&#10;            isTextureAvailable = false;&#10;            return true;&#10;        }&#10;&#10;        @Override&#10;        public void onSurfaceTextureUpdated(SurfaceTexture surfaceTexture) {&#10;            // Không cần xử lý gì&#10;        }&#10;&#10;        private void adjustVideoSize() {&#10;            if (mediaPlayer == null || textureView == null) return;&#10;&#10;            try {&#10;                int videoWidth = mediaPlayer.getVideoWidth();&#10;                int videoHeight = mediaPlayer.getVideoHeight();&#10;                int viewWidth = textureView.getWidth();&#10;                int viewHeight = textureView.getHeight();&#10;&#10;                if (videoWidth == 0 || videoHeight == 0 || viewWidth == 0 || viewHeight == 0) {&#10;                    return;&#10;                }&#10;&#10;                // Tính toán tỷ lệ khung hình&#10;                float videoAspectRatio = (float) videoWidth / videoHeight;&#10;                float viewAspectRatio = (float) viewWidth / viewHeight;&#10;&#10;                float scaleX = 1.0f;&#10;                float scaleY = 1.0f;&#10;&#10;                // Logic mới: Scale để fill màn hình NHƯNG ưu tiên giữ nguyên nội dung&#10;                if (videoAspectRatio &gt; viewAspectRatio) {&#10;                    // Video rộng hơn -&gt; scale theo width, có thể có letterbox nhỏ trên/dưới&#10;                    scaleX = (float) viewWidth / videoWidth;&#10;                    scaleY = scaleX;&#10;                } else {&#10;                    // Video cao hơn -&gt; scale theo height, có thể có letterbox nhỏ trái/phải&#10;                    scaleY = (float) viewHeight / videoHeight;&#10;                    scaleX = scaleY;&#10;                }&#10;&#10;                // Tăng scale một chút để loại bỏ letterbox nhưng không crop quá nhiều&#10;                float adjustmentFactor = 1.05f; // Tăng 5% để loại bỏ letterbox&#10;                scaleX *= adjustmentFactor;&#10;                scaleY *= adjustmentFactor;&#10;&#10;                // Đảm bảo không scale quá mức&#10;                float maxScale = 1.2f; // Giới hạn scale tối đa&#10;                scaleX = Math.min(scaleX, maxScale);&#10;                scaleY = Math.min(scaleY, maxScale);&#10;&#10;                // Tính toán kích thước sau scale&#10;                float scaledWidth = videoWidth * scaleX;&#10;                float scaledHeight = videoHeight * scaleY;&#10;&#10;                // Tính translation để center video&#10;                float translationX = (viewWidth - scaledWidth) / 2f;&#10;                float translationY = (viewHeight - scaledHeight) / 2f;&#10;&#10;                // Tạo Matrix&#10;                Matrix matrix = new Matrix();&#10;                matrix.reset();&#10;&#10;                // Áp dụng scale từ center&#10;                matrix.setScale(scaleX, scaleY, viewWidth / 2f, viewHeight / 2f);&#10;&#10;                // Thêm translation để center hoàn hảo&#10;                matrix.postTranslate(translationX, translationY);&#10;&#10;                textureView.setTransform(matrix);&#10;&#10;                android.util.Log.d(&quot;VideoAdjust&quot;, String.format(&#10;                    &quot;Video: %dx%d (ratio:%.2f), View: %dx%d (ratio:%.2f), Scale: %.2fx%.2f, Scaled: %.1fx%.1f, Translation: %.1f,%.1f&quot;,&#10;                    videoWidth, videoHeight, videoAspectRatio,&#10;                    viewWidth, viewHeight, viewAspectRatio,&#10;                    scaleX, scaleY, scaledWidth, scaledHeight, translationX, translationY));&#10;&#10;            } catch (Exception e) {&#10;                android.util.Log.e(&quot;VideoAdjust&quot;, &quot;Error adjusting video size&quot;, e);&#10;            }&#10;        }&#10;&#10;        private void setupClickListeners() {&#10;            // Click video để play/pause&#10;            textureView.setOnClickListener(v -&gt; togglePlayPause());&#10;            imgPlayPause.setOnClickListener(v -&gt; togglePlayPause());&#10;&#10;            // Click like button&#10;            btnLike.setOnClickListener(v -&gt; {&#10;                if (listener != null) {&#10;                    int position = getAdapterPosition();&#10;                    if (position != RecyclerView.NO_POSITION) {&#10;                        ShortVideo video = videos.get(position);&#10;                        listener.onVideoLiked(position, video.getId(), isLiked);&#10;                    }&#10;                }&#10;            });&#10;&#10;            // Click share button&#10;            btnShare.setOnClickListener(v -&gt; {&#10;                if (listener != null) {&#10;                    int position = getAdapterPosition();&#10;                    if (position != RecyclerView.NO_POSITION) {&#10;                        ShortVideo video = videos.get(position);&#10;                        listener.onVideoShared(position, video.getId());&#10;                    }&#10;                }&#10;            });&#10;&#10;            // Click comment button&#10;            btnComment.setOnClickListener(v -&gt; {&#10;                if (listener != null) {&#10;                    int position = getAdapterPosition();&#10;                    if (position != RecyclerView.NO_POSITION) {&#10;                        ShortVideo video = videos.get(position);&#10;                        listener.onVideoCommented(position, video.getId());&#10;                    }&#10;                }&#10;            });&#10;&#10;            // Loại bỏ click listeners cho user info vì không còn tồn tại&#10;            // imgUserAvatar và txtUsername đã bị ẩn hoàn toàn&#10;        }&#10;&#10;        public void bind(ShortVideo video, int position) {&#10;            // Hiển thị thông tin video&#10;            txtTitle.setText(video.getTitle());&#10;            txtCaption.setText(video.getCaption());&#10;            txtViewCount.setText(formatCount(video.getViewCount()) + &quot; lượt xem&quot;);&#10;            txtLikeCount.setText(formatCount(video.getLikeCount()));&#10;&#10;            // Format ngày upload&#10;            SimpleDateFormat sdf = new SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault());&#10;            txtUploadDate.setText(sdf.format(new Date(video.getUploadDate())));&#10;&#10;            // Load thumbnail&#10;            Glide.with(itemView.getContext())&#10;                    .load(video.getThumbnailUrl())&#10;                    .placeholder(R.drawable.ic_video_placeholder)&#10;                    .error(R.drawable.ic_video_error)&#10;                    .centerCrop()&#10;                    .into(imgThumbnail);&#10;&#10;            // Setup video&#10;            setupVideo(video.getVideoUrl());&#10;&#10;            // Reset trạng thái&#10;            isVideoLoaded = false;&#10;            imgPlayPause.setVisibility(View.VISIBLE);&#10;            imgThumbnail.setVisibility(View.VISIBLE);&#10;        }&#10;&#10;        public void bind(ShortVideo video, int position, List&lt;Object&gt; payloads) {&#10;            if (payloads.isEmpty()) {&#10;                bind(video, position);&#10;                return;&#10;            }&#10;&#10;            for (Object payload : payloads) {&#10;                if (&quot;like_update&quot;.equals(payload)) {&#10;                    txtLikeCount.setText(formatCount(video.getLikeCount()));&#10;                    updateLikeButton();&#10;                } else if (&quot;view_update&quot;.equals(payload)) {&#10;                    txtViewCount.setText(formatCount(video.getViewCount()) + &quot; lượt xem&quot;);&#10;                } else if (&quot;play&quot;.equals(payload)) {&#10;                    playVideo();&#10;                } else if (&quot;pause&quot;.equals(payload)) {&#10;                    pauseVideo();&#10;                } else if (&quot;resume&quot;.equals(payload)) {&#10;                    resumeVideo();&#10;                }&#10;            }&#10;        }&#10;&#10;        private void setupVideo(String videoUrl) {&#10;            if (videoUrl == null || videoUrl.isEmpty()) {&#10;                return;&#10;            }&#10;&#10;            // Nếu TextureView chưa sẵn sàng, lưu URL để setup sau&#10;            if (!isTextureAvailable || surface == null) {&#10;                pendingVideoUrl = videoUrl;&#10;                return;&#10;            }&#10;&#10;            try {&#10;                // Giải phóng MediaPlayer cũ nếu có&#10;                releaseMediaPlayer();&#10;&#10;                mediaPlayer = new MediaPlayer();&#10;                mediaPlayer.setDataSource(itemView.getContext(), Uri.parse(videoUrl));&#10;&#10;                // Quan trọng: Set surface TRƯỚC khi prepare&#10;                mediaPlayer.setSurface(surface);&#10;&#10;                mediaPlayer.setOnPreparedListener(mp -&gt; {&#10;                    isVideoLoaded = true;&#10;                    mp.setLooping(true);&#10;&#10;                    // Điều chỉnh kích thước video sau khi prepared&#10;                    adjustVideoSize();&#10;&#10;                    // Tự động phát nếu đây là video hiện tại&#10;                    int position = getAdapterPosition();&#10;                    if (position == currentPlayingPosition) {&#10;                        playVideo();&#10;                    }&#10;                });&#10;&#10;                mediaPlayer.setOnErrorListener((mp, what, extra) -&gt; {&#10;                    // Hiển thị thumbnail khi có lỗi&#10;                    imgThumbnail.setVisibility(View.VISIBLE);&#10;                    imgPlayPause.setVisibility(View.VISIBLE);&#10;                    return true;&#10;                });&#10;&#10;                mediaPlayer.setOnVideoSizeChangedListener((mp, width, height) -&gt; {&#10;                    // Điều chỉnh lại kích thước khi video size thay đổi&#10;                    adjustVideoSize();&#10;                });&#10;&#10;                mediaPlayer.prepareAsync();&#10;&#10;            } catch (IOException e) {&#10;                e.printStackTrace();&#10;                // Hiển thị thumbnail khi có lỗi&#10;                imgThumbnail.setVisibility(View.VISIBLE);&#10;                imgPlayPause.setVisibility(View.VISIBLE);&#10;            }&#10;        }&#10;&#10;        private void togglePlayPause() {&#10;            if (mediaPlayer != null &amp;&amp; mediaPlayer.isPlaying()) {&#10;                pauseVideo();&#10;            } else {&#10;                playVideo();&#10;            }&#10;        }&#10;&#10;        private void playVideo() {&#10;            if (isVideoLoaded &amp;&amp; mediaPlayer != null &amp;&amp; !mediaPlayer.isPlaying()) {&#10;                mediaPlayer.start();&#10;                imgPlayPause.setVisibility(View.GONE);&#10;                imgThumbnail.setVisibility(View.GONE);&#10;&#10;                // Thông báo về việc xem video&#10;                if (listener != null) {&#10;                    int position = getAdapterPosition();&#10;                    if (position != RecyclerView.NO_POSITION) {&#10;                        ShortVideo video = videos.get(position);&#10;                        listener.onVideoViewed(position, video.getId());&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        private void pauseVideo() {&#10;            if (mediaPlayer != null &amp;&amp; mediaPlayer.isPlaying()) {&#10;                mediaPlayer.pause();&#10;                imgPlayPause.setVisibility(View.VISIBLE);&#10;            }&#10;        }&#10;&#10;        private void resumeVideo() {&#10;            if (isVideoLoaded &amp;&amp; mediaPlayer != null &amp;&amp; !mediaPlayer.isPlaying()) {&#10;                mediaPlayer.start();&#10;                imgPlayPause.setVisibility(View.GONE);&#10;            }&#10;        }&#10;&#10;        private void releaseMediaPlayer() {&#10;            if (mediaPlayer != null) {&#10;                try {&#10;                    if (mediaPlayer.isPlaying()) {&#10;                        mediaPlayer.stop();&#10;                    }&#10;                    mediaPlayer.release();&#10;                } catch (Exception e) {&#10;                    e.printStackTrace();&#10;                } finally {&#10;                    mediaPlayer = null;&#10;                    isVideoLoaded = false;&#10;                }&#10;            }&#10;        }&#10;&#10;        private void updateLikeButton() {&#10;            if (isLiked) {&#10;                btnLike.setImageResource(R.drawable.ic_heart_filled);&#10;                btnLike.setColorFilter(itemView.getContext().getResources().getColor(R.color.color_like));&#10;            } else {&#10;                btnLike.setImageResource(R.drawable.ic_heart_outline);&#10;                btnLike.setColorFilter(itemView.getContext().getResources().getColor(R.color.white));&#10;            }&#10;        }&#10;&#10;        private String formatCount(int count) {&#10;            if (count &lt; 1000) {&#10;                return String.valueOf(count);&#10;            } else if (count &lt; 1000000) {&#10;                return String.format(Locale.getDefault(), &quot;%.1fK&quot;, count / 1000.0);&#10;            } else {&#10;                return String.format(Locale.getDefault(), &quot;%.1fM&quot;, count / 1000000.0);&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.shortvideo;&#10;&#10;import android.graphics.Matrix;&#10;import android.graphics.SurfaceTexture;&#10;import android.media.MediaPlayer;&#10;import android.net.Uri;&#10;import android.view.LayoutInflater;&#10;import android.view.Surface;&#10;import android.view.TextureView;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.ImageView;&#10;import android.widget.TextView;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.bumptech.glide.Glide;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.data.ShortVideo;&#10;import com.vhn.doan.services.CloudinaryVideoHelper;&#10;&#10;import java.io.IOException;&#10;import java.text.SimpleDateFormat;&#10;import java.util.Date;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;/**&#10; * Adapter cho RecyclerView hiển thị danh sách video ngắn&#10; * Tối ưu hóa cho hiệu ứng vuốt giống TikTok/Facebook Reels&#10; * Sử dụng TextureView để loại bỏ letterbox và hiển thị video full màn hình&#10; */&#10;public class ShortVideoAdapter extends RecyclerView.Adapter&lt;ShortVideoAdapter.VideoViewHolder&gt; {&#10;&#10;    private final List&lt;ShortVideo&gt; videos;&#10;    private final VideoInteractionListener listener;&#10;    private int currentPlayingPosition = -1;&#10;&#10;    public interface VideoInteractionListener {&#10;        void onVideoLiked(int position, String videoId, boolean isCurrentlyLiked);&#10;        void onVideoShared(int position, String videoId);&#10;        void onVideoCommented(int position, String videoId);&#10;        void onVideoViewed(int position, String videoId);&#10;        void onVideoProfileClicked(int position, String userId);&#10;    }&#10;&#10;    public ShortVideoAdapter(List&lt;ShortVideo&gt; videos, VideoInteractionListener listener) {&#10;        this.videos = videos;&#10;        this.listener = listener;&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public VideoViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(parent.getContext())&#10;                .inflate(R.layout.item_short_video, parent, false);&#10;        return new VideoViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull VideoViewHolder holder, int position) {&#10;        ShortVideo video = videos.get(position);&#10;        holder.bind(video, position);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull VideoViewHolder holder, int position, @NonNull List&lt;Object&gt; payloads) {&#10;        if (payloads.isEmpty()) {&#10;            super.onBindViewHolder(holder, position, payloads);&#10;        } else {&#10;            ShortVideo video = videos.get(position);&#10;            holder.bind(video, position, payloads);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return videos.size();&#10;    }&#10;&#10;    public void updateVideos(List&lt;ShortVideo&gt; newVideos) {&#10;        this.videos.clear();&#10;        this.videos.addAll(newVideos);&#10;        notifyDataSetChanged();&#10;    }&#10;&#10;    public void updateVideoLike(int position, boolean isLiked, int newLikeCount) {&#10;        if (position &gt;= 0 &amp;&amp; position &lt; videos.size()) {&#10;            videos.get(position).setLikeCount(newLikeCount);&#10;            notifyItemChanged(position, &quot;like_update&quot;);&#10;        }&#10;    }&#10;&#10;    public void updateVideoView(int position, int newViewCount) {&#10;        if (position &gt;= 0 &amp;&amp; position &lt; videos.size()) {&#10;            videos.get(position).setViewCount(newViewCount);&#10;            notifyItemChanged(position, &quot;view_update&quot;);&#10;        }&#10;    }&#10;&#10;    public void playVideoAt(int position) {&#10;        if (currentPlayingPosition != -1 &amp;&amp; currentPlayingPosition != position) {&#10;            notifyItemChanged(currentPlayingPosition, &quot;pause&quot;);&#10;        }&#10;        currentPlayingPosition = position;&#10;        notifyItemChanged(position, &quot;play&quot;);&#10;    }&#10;&#10;    public void pauseVideoAt(int position) {&#10;        if (position &gt;= 0 &amp;&amp; position &lt; getItemCount()) {&#10;            notifyItemChanged(position, &quot;pause&quot;);&#10;        }&#10;    }&#10;&#10;    public void pauseCurrentVideo() {&#10;        if (currentPlayingPosition != -1) {&#10;            notifyItemChanged(currentPlayingPosition, &quot;pause&quot;);&#10;        }&#10;    }&#10;&#10;    public void resumeCurrentVideo() {&#10;        if (currentPlayingPosition != -1) {&#10;            notifyItemChanged(currentPlayingPosition, &quot;resume&quot;);&#10;        }&#10;    }&#10;&#10;    public void pauseAllVideos() {&#10;        for (int i = 0; i &lt; getItemCount(); i++) {&#10;            notifyItemChanged(i, &quot;pause&quot;);&#10;        }&#10;        currentPlayingPosition = -1;&#10;    }&#10;&#10;    public class VideoViewHolder extends RecyclerView.ViewHolder implements TextureView.SurfaceTextureListener {&#10;        private TextureView textureView;&#10;        private MediaPlayer mediaPlayer;&#10;        private Surface surface;&#10;        private ImageView imgThumbnail;&#10;        private ImageView imgPlayPause;&#10;        private TextView txtTitle;&#10;        private TextView txtCaption;&#10;        private TextView txtViewCount;&#10;        private TextView txtLikeCount;&#10;        private TextView txtUploadDate;&#10;        private ImageView btnLike;&#10;        private ImageView btnShare;&#10;        private ImageView btnComment;&#10;&#10;        private boolean isLiked = false;&#10;        private boolean isVideoLoaded = false;&#10;        private boolean isTextureAvailable = false;&#10;        private String pendingVideoUrl = null;&#10;&#10;        public VideoViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            initViews();&#10;            setupClickListeners();&#10;            setupTextureView();&#10;        }&#10;&#10;        private void initViews() {&#10;            textureView = itemView.findViewById(R.id.textureView);&#10;            imgThumbnail = itemView.findViewById(R.id.imgThumbnail);&#10;            imgPlayPause = itemView.findViewById(R.id.imgPlayPause);&#10;            txtTitle = itemView.findViewById(R.id.txtTitle);&#10;            txtCaption = itemView.findViewById(R.id.txtCaption);&#10;            txtViewCount = itemView.findViewById(R.id.txtViewCount);&#10;            txtLikeCount = itemView.findViewById(R.id.txtLikeCount);&#10;            txtUploadDate = itemView.findViewById(R.id.txtUploadDate);&#10;            btnLike = itemView.findViewById(R.id.btnLike);&#10;            btnShare = itemView.findViewById(R.id.btnShare);&#10;            btnComment = itemView.findViewById(R.id.btnComment);&#10;        }&#10;&#10;        private void setupTextureView() {&#10;            textureView.setSurfaceTextureListener(this);&#10;        }&#10;&#10;        // Implement TextureView.SurfaceTextureListener&#10;        @Override&#10;        public void onSurfaceTextureAvailable(SurfaceTexture surfaceTexture, int width, int height) {&#10;            surface = new Surface(surfaceTexture);&#10;            isTextureAvailable = true;&#10;&#10;            // Nếu có video đang chờ được load, load ngay&#10;            if (pendingVideoUrl != null) {&#10;                setupVideo(pendingVideoUrl);&#10;                pendingVideoUrl = null;&#10;            }&#10;        }&#10;&#10;        @Override&#10;        public void onSurfaceTextureSizeChanged(SurfaceTexture surfaceTexture, int width, int height) {&#10;            adjustVideoSize();&#10;        }&#10;&#10;        @Override&#10;        public boolean onSurfaceTextureDestroyed(SurfaceTexture surfaceTexture) {&#10;            releaseMediaPlayer();&#10;            if (surface != null) {&#10;                surface.release();&#10;                surface = null;&#10;            }&#10;            isTextureAvailable = false;&#10;            return true;&#10;        }&#10;&#10;        @Override&#10;        public void onSurfaceTextureUpdated(SurfaceTexture surfaceTexture) {&#10;            // Không cần xử lý gì&#10;        }&#10;&#10;        private void adjustVideoSize() {&#10;            if (mediaPlayer == null || textureView == null) return;&#10;&#10;            try {&#10;                int videoWidth = mediaPlayer.getVideoWidth();&#10;                int videoHeight = mediaPlayer.getVideoHeight();&#10;                int viewWidth = textureView.getWidth();&#10;                int viewHeight = textureView.getHeight();&#10;&#10;                if (videoWidth == 0 || videoHeight == 0 || viewWidth == 0 || viewHeight == 0) {&#10;                    return;&#10;                }&#10;&#10;                // Tính toán tỷ lệ khung hình&#10;                float videoAspectRatio = (float) videoWidth / videoHeight;&#10;                float viewAspectRatio = (float) viewWidth / viewHeight;&#10;&#10;                float scaleX = 1.0f;&#10;                float scaleY = 1.0f;&#10;&#10;                // Logic mới: Scale để fill màn hình NHƯNG ưu tiên giữ nguyên nội dung&#10;                if (videoAspectRatio &gt; viewAspectRatio) {&#10;                    // Video rộng hơn -&gt; scale theo width, có thể có letterbox nhỏ trên/dưới&#10;                    scaleX = (float) viewWidth / videoWidth;&#10;                    scaleY = scaleX;&#10;                } else {&#10;                    // Video cao hơn -&gt; scale theo height, có thể có letterbox nhỏ trái/phải&#10;                    scaleY = (float) viewHeight / videoHeight;&#10;                    scaleX = scaleY;&#10;                }&#10;&#10;                // Tăng scale một chút để loại bỏ letterbox nhưng không crop quá nhiều&#10;                float adjustmentFactor = 1.05f; // Tăng 5% để loại bỏ letterbox&#10;                scaleX *= adjustmentFactor;&#10;                scaleY *= adjustmentFactor;&#10;&#10;                // Đảm bảo không scale quá mức&#10;                float maxScale = 1.2f; // Giới hạn scale tối đa&#10;                scaleX = Math.min(scaleX, maxScale);&#10;                scaleY = Math.min(scaleY, maxScale);&#10;&#10;                // Tính toán kích thước sau scale&#10;                float scaledWidth = videoWidth * scaleX;&#10;                float scaledHeight = videoHeight * scaleY;&#10;&#10;                // Tính translation để center video&#10;                float translationX = (viewWidth - scaledWidth) / 2f;&#10;                float translationY = (viewHeight - scaledHeight) / 2f;&#10;&#10;                // Tạo Matrix&#10;                Matrix matrix = new Matrix();&#10;                matrix.reset();&#10;&#10;                // Áp dụng scale từ center&#10;                matrix.setScale(scaleX, scaleY, viewWidth / 2f, viewHeight / 2f);&#10;&#10;                // Thêm translation để center hoàn hảo&#10;                matrix.postTranslate(translationX, translationY);&#10;&#10;                textureView.setTransform(matrix);&#10;&#10;                android.util.Log.d(&quot;VideoAdjust&quot;, String.format(&#10;                    &quot;Video: %dx%d (ratio:%.2f), View: %dx%d (ratio:%.2f), Scale: %.2fx%.2f, Scaled: %.1fx%.1f, Translation: %.1f,%.1f&quot;,&#10;                    videoWidth, videoHeight, videoAspectRatio,&#10;                    viewWidth, viewHeight, viewAspectRatio,&#10;                    scaleX, scaleY, scaledWidth, scaledHeight, translationX, translationY));&#10;&#10;            } catch (Exception e) {&#10;                android.util.Log.e(&quot;VideoAdjust&quot;, &quot;Error adjusting video size&quot;, e);&#10;            }&#10;        }&#10;&#10;        private void setupClickListeners() {&#10;            // Click video để play/pause&#10;            textureView.setOnClickListener(v -&gt; togglePlayPause());&#10;            imgPlayPause.setOnClickListener(v -&gt; togglePlayPause());&#10;&#10;            // Click like button&#10;            btnLike.setOnClickListener(v -&gt; {&#10;                if (listener != null) {&#10;                    int position = getAdapterPosition();&#10;                    if (position != RecyclerView.NO_POSITION) {&#10;                        ShortVideo video = videos.get(position);&#10;                        listener.onVideoLiked(position, video.getId(), isLiked);&#10;                    }&#10;                }&#10;            });&#10;&#10;            // Click share button&#10;            btnShare.setOnClickListener(v -&gt; {&#10;                if (listener != null) {&#10;                    int position = getAdapterPosition();&#10;                    if (position != RecyclerView.NO_POSITION) {&#10;                        ShortVideo video = videos.get(position);&#10;                        listener.onVideoShared(position, video.getId());&#10;                    }&#10;                }&#10;            });&#10;&#10;            // Click comment button&#10;            btnComment.setOnClickListener(v -&gt; {&#10;                if (listener != null) {&#10;                    int position = getAdapterPosition();&#10;                    if (position != RecyclerView.NO_POSITION) {&#10;                        ShortVideo video = videos.get(position);&#10;                        listener.onVideoCommented(position, video.getId());&#10;                    }&#10;                }&#10;            });&#10;&#10;            // Loại bỏ click listeners cho user info vì không còn tồn tại&#10;            // imgUserAvatar và txtUsername đã bị ẩn hoàn toàn&#10;        }&#10;&#10;        public void bind(ShortVideo video, int position) {&#10;            // Hiển thị thông tin video&#10;            txtTitle.setText(video.getTitle());&#10;            txtCaption.setText(video.getCaption());&#10;            txtViewCount.setText(formatCount(video.getViewCount()) + &quot; lượt xem&quot;);&#10;            txtLikeCount.setText(formatCount(video.getLikeCount()));&#10;&#10;            // Format ngày upload&#10;            SimpleDateFormat sdf = new SimpleDateFormat(&quot;dd/MM/yyyy&quot;, Locale.getDefault());&#10;            txtUploadDate.setText(sdf.format(new Date(video.getUploadDate())));&#10;&#10;            // Load thumbnail - Sử dụng Cloudinary thumbnail nếu có&#10;            String thumbnailUrl = video.getThumbnailUrl();&#10;            if (video.isCloudinaryVideo() &amp;&amp; (thumbnailUrl == null || thumbnailUrl.isEmpty())) {&#10;                // Tự động tạo thumbnail từ video URL nếu chưa có&#10;                thumbnailUrl = CloudinaryVideoHelper.getThumbnailFromVideoUrl(video.getVideoUrl());&#10;            }&#10;            &#10;            Glide.with(itemView.getContext())&#10;                    .load(thumbnailUrl)&#10;                    .placeholder(R.drawable.ic_video_placeholder)&#10;                    .error(R.drawable.ic_video_error)&#10;                    .centerCrop()&#10;                    .into(imgThumbnail);&#10;&#10;            // Setup video - Sử dụng URL được tối ưu cho mobile&#10;            String optimizedVideoUrl = video.getOptimizedVideoUrl();&#10;            android.util.Log.d(&quot;ShortVideoAdapter&quot;, &quot;Loading video - Original: &quot; + video.getVideoUrl());&#10;            android.util.Log.d(&quot;ShortVideoAdapter&quot;, &quot;Loading video - Optimized: &quot; + optimizedVideoUrl);&#10;            setupVideo(optimizedVideoUrl);&#10;&#10;            // Reset trạng thái&#10;            isVideoLoaded = false;&#10;            imgPlayPause.setVisibility(View.VISIBLE);&#10;            imgThumbnail.setVisibility(View.VISIBLE);&#10;        }&#10;&#10;        public void bind(ShortVideo video, int position, List&lt;Object&gt; payloads) {&#10;            if (payloads.isEmpty()) {&#10;                bind(video, position);&#10;                return;&#10;            }&#10;&#10;            for (Object payload : payloads) {&#10;                if (&quot;like_update&quot;.equals(payload)) {&#10;                    txtLikeCount.setText(formatCount(video.getLikeCount()));&#10;                    updateLikeButton();&#10;                } else if (&quot;view_update&quot;.equals(payload)) {&#10;                    txtViewCount.setText(formatCount(video.getViewCount()) + &quot; lượt xem&quot;);&#10;                } else if (&quot;play&quot;.equals(payload)) {&#10;                    playVideo();&#10;                } else if (&quot;pause&quot;.equals(payload)) {&#10;                    pauseVideo();&#10;                } else if (&quot;resume&quot;.equals(payload)) {&#10;                    resumeVideo();&#10;                }&#10;            }&#10;        }&#10;&#10;        private void setupVideo(String videoUrl) {&#10;            if (videoUrl == null || videoUrl.isEmpty()) {&#10;                return;&#10;            }&#10;&#10;            // Nếu TextureView chưa sẵn sàng, lưu URL để setup sau&#10;            if (!isTextureAvailable || surface == null) {&#10;                pendingVideoUrl = videoUrl;&#10;                return;&#10;            }&#10;&#10;            try {&#10;                // Giải phóng MediaPlayer cũ nếu có&#10;                releaseMediaPlayer();&#10;&#10;                mediaPlayer = new MediaPlayer();&#10;                mediaPlayer.setDataSource(itemView.getContext(), Uri.parse(videoUrl));&#10;&#10;                // Quan trọng: Set surface TRƯỚC khi prepare&#10;                mediaPlayer.setSurface(surface);&#10;&#10;                mediaPlayer.setOnPreparedListener(mp -&gt; {&#10;                    isVideoLoaded = true;&#10;                    mp.setLooping(true);&#10;&#10;                    // Điều chỉnh kích thước video sau khi prepared&#10;                    adjustVideoSize();&#10;&#10;                    // Tự động phát nếu đây là video hiện tại&#10;                    int position = getAdapterPosition();&#10;                    if (position == currentPlayingPosition) {&#10;                        playVideo();&#10;                    }&#10;                });&#10;&#10;                mediaPlayer.setOnErrorListener((mp, what, extra) -&gt; {&#10;                    // Hiển thị thumbnail khi có lỗi&#10;                    imgThumbnail.setVisibility(View.VISIBLE);&#10;                    imgPlayPause.setVisibility(View.VISIBLE);&#10;                    return true;&#10;                });&#10;&#10;                mediaPlayer.setOnVideoSizeChangedListener((mp, width, height) -&gt; {&#10;                    // Điều chỉnh lại kích thước khi video size thay đổi&#10;                    adjustVideoSize();&#10;                });&#10;&#10;                mediaPlayer.prepareAsync();&#10;&#10;            } catch (IOException e) {&#10;                e.printStackTrace();&#10;                // Hiển thị thumbnail khi có lỗi&#10;                imgThumbnail.setVisibility(View.VISIBLE);&#10;                imgPlayPause.setVisibility(View.VISIBLE);&#10;            }&#10;        }&#10;&#10;        private void togglePlayPause() {&#10;            if (mediaPlayer != null &amp;&amp; mediaPlayer.isPlaying()) {&#10;                pauseVideo();&#10;            } else {&#10;                playVideo();&#10;            }&#10;        }&#10;&#10;        private void playVideo() {&#10;            if (isVideoLoaded &amp;&amp; mediaPlayer != null &amp;&amp; !mediaPlayer.isPlaying()) {&#10;                mediaPlayer.start();&#10;                imgPlayPause.setVisibility(View.GONE);&#10;                imgThumbnail.setVisibility(View.GONE);&#10;&#10;                // Thông báo về việc xem video&#10;                if (listener != null) {&#10;                    int position = getAdapterPosition();&#10;                    if (position != RecyclerView.NO_POSITION) {&#10;                        ShortVideo video = videos.get(position);&#10;                        listener.onVideoViewed(position, video.getId());&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        private void pauseVideo() {&#10;            if (mediaPlayer != null &amp;&amp; mediaPlayer.isPlaying()) {&#10;                mediaPlayer.pause();&#10;                imgPlayPause.setVisibility(View.VISIBLE);&#10;            }&#10;        }&#10;&#10;        private void resumeVideo() {&#10;            if (isVideoLoaded &amp;&amp; mediaPlayer != null &amp;&amp; !mediaPlayer.isPlaying()) {&#10;                mediaPlayer.start();&#10;                imgPlayPause.setVisibility(View.GONE);&#10;            }&#10;        }&#10;&#10;        private void releaseMediaPlayer() {&#10;            if (mediaPlayer != null) {&#10;                try {&#10;                    if (mediaPlayer.isPlaying()) {&#10;                        mediaPlayer.stop();&#10;                    }&#10;                    mediaPlayer.release();&#10;                } catch (Exception e) {&#10;                    e.printStackTrace();&#10;                } finally {&#10;                    mediaPlayer = null;&#10;                    isVideoLoaded = false;&#10;                }&#10;            }&#10;        }&#10;&#10;        private void updateLikeButton() {&#10;            if (isLiked) {&#10;                btnLike.setImageResource(R.drawable.ic_heart_filled);&#10;                btnLike.setColorFilter(itemView.getContext().getResources().getColor(R.color.color_like));&#10;            } else {&#10;                btnLike.setImageResource(R.drawable.ic_heart_outline);&#10;                btnLike.setColorFilter(itemView.getContext().getResources().getColor(R.color.white));&#10;            }&#10;        }&#10;&#10;        private String formatCount(int count) {&#10;            if (count &lt; 1000) {&#10;                return String.valueOf(count);&#10;            } else if (count &lt; 1000000) {&#10;                return String.format(Locale.getDefault(), &quot;%.1fK&quot;, count / 1000.0);&#10;            } else {&#10;                return String.format(Locale.getDefault(), &quot;%.1fM&quot;, count / 1000000.0);&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/video/ShortVideoAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/video/ShortVideoAdapter.java" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.video;&#10;&#10;import android.content.Context;&#10;import android.media.MediaMetadataRetriever;&#10;import android.net.Uri;&#10;import android.text.format.DateUtils;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.ImageView;&#10;import android.widget.LinearLayout;&#10;import android.widget.ProgressBar;&#10;import android.widget.TextView;&#10;import android.widget.VideoView;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.bumptech.glide.Glide;&#10;import com.bumptech.glide.load.engine.DiskCacheStrategy;&#10;import com.google.android.flexbox.FlexboxLayout;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.data.Video;&#10;import com.vhn.doan.utils.FormatUtils;&#10;&#10;import java.text.NumberFormat;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Locale;&#10;import java.util.Map;&#10;&#10;public class ShortVideoAdapter extends RecyclerView.Adapter&lt;ShortVideoAdapter.VideoViewHolder&gt; {&#10;&#10;    private List&lt;Video&gt; videos;&#10;    private VideoInteractionListener listener;&#10;    private int currentPlayingPosition = -1;&#10;&#10;    public interface VideoInteractionListener {&#10;        void onVideoLiked(String videoId, boolean isCurrentlyLiked);&#10;        void onVideoShared(String videoId);&#10;        void onVideoClicked(Video video);&#10;        void onVideoViewed(String videoId);&#10;        void onVideoStarted(String videoId);&#10;        void onVideoCompleted(String videoId);&#10;    }&#10;&#10;    public ShortVideoAdapter(VideoInteractionListener listener) {&#10;        this.videos = new ArrayList&lt;&gt;();&#10;        this.listener = listener;&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public VideoViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(parent.getContext())&#10;                .inflate(R.layout.item_short_video, parent, false);&#10;        return new VideoViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull VideoViewHolder holder, int position) {&#10;        Video video = videos.get(position);&#10;        holder.bind(video, position);&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return videos.size();&#10;    }&#10;&#10;    public void updateVideos(List&lt;Video&gt; newVideos) {&#10;        this.videos.clear();&#10;        this.videos.addAll(newVideos);&#10;        notifyDataSetChanged();&#10;    }&#10;&#10;    public void addMoreVideos(List&lt;Video&gt; moreVideos) {&#10;        int startPosition = videos.size();&#10;        this.videos.addAll(moreVideos);&#10;        notifyItemRangeInserted(startPosition, moreVideos.size());&#10;    }&#10;&#10;    public void updateLikeStatus(String videoId, boolean isLiked, int likeCount) {&#10;        for (int i = 0; i &lt; videos.size(); i++) {&#10;            Video video = videos.get(i);&#10;            if (video.getId().equals(videoId)) {&#10;                video.setLikeCount(likeCount);&#10;                notifyItemChanged(i);&#10;                break;&#10;            }&#10;        }&#10;    }&#10;&#10;    public void updateViewCount(String videoId, int viewCount) {&#10;        for (int i = 0; i &lt; videos.size(); i++) {&#10;            Video video = videos.get(i);&#10;            if (video.getId().equals(videoId)) {&#10;                video.setViewCount(viewCount);&#10;                notifyItemChanged(i);&#10;                break;&#10;            }&#10;        }&#10;    }&#10;&#10;    public void playVideoAtPosition(int position) {&#10;        if (position &gt;= 0 &amp;&amp; position &lt; videos.size()) {&#10;            // Pause video hiện tại nếu có&#10;            pauseAllVideos();&#10;            &#10;            currentPlayingPosition = position;&#10;            notifyItemChanged(position);&#10;        }&#10;    }&#10;&#10;    public void pauseAllVideos() {&#10;        currentPlayingPosition = -1;&#10;        notifyDataSetChanged();&#10;    }&#10;&#10;    public class VideoViewHolder extends RecyclerView.ViewHolder {&#10;        private VideoView videoView;&#10;        private ImageView ivThumbnail;&#10;        private ImageView ivPlayButton;&#10;        private ProgressBar progressBarVideo;&#10;        private TextView tvTitle;&#10;        private TextView tvCaption;&#10;        private FlexboxLayout layoutTags;&#10;        private TextView tvViewCount;&#10;        private TextView tvUploadDate;&#10;        private LinearLayout layoutLike;&#10;        private ImageView ivLike;&#10;        private TextView tvLikeCount;&#10;        private LinearLayout layoutShare;&#10;        private LinearLayout layoutMore;&#10;        private ProgressBar progressBarVideoProgress;&#10;&#10;        private boolean isLiked = false;&#10;        private boolean isVideoLoaded = false;&#10;&#10;        public VideoViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            initViews();&#10;            setupClickListeners();&#10;        }&#10;&#10;        private void initViews() {&#10;            videoView = itemView.findViewById(R.id.videoView);&#10;            ivThumbnail = itemView.findViewById(R.id.ivThumbnail);&#10;            ivPlayButton = itemView.findViewById(R.id.ivPlayButton);&#10;            progressBarVideo = itemView.findViewById(R.id.progressBarVideo);&#10;            tvTitle = itemView.findViewById(R.id.tvTitle);&#10;            tvCaption = itemView.findViewById(R.id.tvCaption);&#10;            layoutTags = itemView.findViewById(R.id.layoutTags);&#10;            tvViewCount = itemView.findViewById(R.id.tvViewCount);&#10;            tvUploadDate = itemView.findViewById(R.id.tvUploadDate);&#10;            layoutLike = itemView.findViewById(R.id.layoutLike);&#10;            ivLike = itemView.findViewById(R.id.ivLike);&#10;            tvLikeCount = itemView.findViewById(R.id.tvLikeCount);&#10;            layoutShare = itemView.findViewById(R.id.layoutShare);&#10;            layoutMore = itemView.findViewById(R.id.layoutMore);&#10;            progressBarVideoProgress = itemView.findViewById(R.id.progressBarVideoProgress);&#10;        }&#10;&#10;        private void setupClickListeners() {&#10;            // Click vào video để play/pause&#10;            videoView.setOnClickListener(v -&gt; {&#10;                if (videoView.isPlaying()) {&#10;                    videoView.pause();&#10;                    ivPlayButton.setVisibility(View.VISIBLE);&#10;                } else {&#10;                    videoView.start();&#10;                    ivPlayButton.setVisibility(View.GONE);&#10;                    if (listener != null) {&#10;                        Video video = videos.get(getAdapterPosition());&#10;                        listener.onVideoStarted(video.getId());&#10;                    }&#10;                }&#10;            });&#10;&#10;            // Click vào thumbnail để bắt đầu phát video&#10;            ivThumbnail.setOnClickListener(v -&gt; {&#10;                loadAndPlayVideo();&#10;            });&#10;&#10;            ivPlayButton.setOnClickListener(v -&gt; {&#10;                loadAndPlayVideo();&#10;            });&#10;&#10;            // Like button&#10;            layoutLike.setOnClickListener(v -&gt; {&#10;                if (listener != null) {&#10;                    Video video = videos.get(getAdapterPosition());&#10;                    listener.onVideoLiked(video.getId(), isLiked);&#10;                }&#10;            });&#10;&#10;            // Share button&#10;            layoutShare.setOnClickListener(v -&gt; {&#10;                if (listener != null) {&#10;                    Video video = videos.get(getAdapterPosition());&#10;                    listener.onVideoShared(video.getId());&#10;                }&#10;            });&#10;&#10;            // More options&#10;            layoutMore.setOnClickListener(v -&gt; {&#10;                // TODO: Implement more options menu&#10;            });&#10;&#10;            // Double tap to like&#10;            itemView.setOnClickListener(v -&gt; {&#10;                if (listener != null) {&#10;                    Video video = videos.get(getAdapterPosition());&#10;                    listener.onVideoClicked(video);&#10;                }&#10;            });&#10;        }&#10;&#10;        public void bind(Video video, int position) {&#10;            // Set video info&#10;            tvTitle.setText(video.getTitle());&#10;            tvCaption.setText(video.getCaption());&#10;            &#10;            // Format view count&#10;            String viewCountText = FormatUtils.formatCount(video.getViewCount()) + &quot; &quot; + &#10;                    itemView.getContext().getString(R.string.views);&#10;            tvViewCount.setText(viewCountText);&#10;            &#10;            // Format upload date&#10;            String uploadDateText = FormatUtils.formatTimeAgo(itemView.getContext(), video.getUploadDate());&#10;            tvUploadDate.setText(uploadDateText);&#10;            &#10;            // Format like count&#10;            tvLikeCount.setText(FormatUtils.formatCount(video.getLikeCount()));&#10;            &#10;            // Load thumbnail&#10;            if (video.getThumbnailUrl() != null &amp;&amp; !video.getThumbnailUrl().isEmpty()) {&#10;                Glide.with(itemView.getContext())&#10;                        .load(video.getThumbnailUrl())&#10;                        .diskCacheStrategy(DiskCacheStrategy.ALL)&#10;                        .placeholder(R.drawable.placeholder_image)&#10;                        .error(R.drawable.error_image)&#10;                        .into(ivThumbnail);&#10;            }&#10;            &#10;            // Setup tags&#10;            setupTags(video.getTags());&#10;            &#10;            // Reset video state&#10;            resetVideoState();&#10;            &#10;            // Auto play if this is the current position&#10;            if (position == currentPlayingPosition) {&#10;                loadAndPlayVideo();&#10;            }&#10;            &#10;            // Check like status&#10;            // TODO: Implement like status check với presenter&#10;        }&#10;&#10;        private void setupTags(Map&lt;String, Boolean&gt; tags) {&#10;            layoutTags.removeAllViews();&#10;            &#10;            if (tags != null) {&#10;                for (Map.Entry&lt;String, Boolean&gt; entry : tags.entrySet()) {&#10;                    if (entry.getValue()) {&#10;                        TextView tagView = createTagView(entry.getKey());&#10;                        layoutTags.addView(tagView);&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        private TextView createTagView(String tag) {&#10;            TextView tagView = new TextView(itemView.getContext());&#10;            tagView.setText(&quot;#&quot; + tag);&#10;            tagView.setTextColor(itemView.getContext().getColor(android.R.color.white));&#10;            tagView.setTextSize(12);&#10;            tagView.setPadding(16, 8, 16, 8);&#10;            tagView.setBackground(itemView.getContext().getDrawable(R.drawable.bg_category_label));&#10;            &#10;            // Set margin&#10;            FlexboxLayout.LayoutParams params = new FlexboxLayout.LayoutParams(&#10;                    ViewGroup.LayoutParams.WRAP_CONTENT,&#10;                    ViewGroup.LayoutParams.WRAP_CONTENT&#10;            );&#10;            params.setMargins(0, 0, 12, 8);&#10;            tagView.setLayoutParams(params);&#10;            &#10;            return tagView;&#10;        }&#10;&#10;        private void loadAndPlayVideo() {&#10;            if (!isVideoLoaded) {&#10;                Video video = videos.get(getAdapterPosition());&#10;                &#10;                progressBarVideo.setVisibility(View.VISIBLE);&#10;                ivPlayButton.setVisibility(View.GONE);&#10;                &#10;                videoView.setVideoURI(Uri.parse(video.getVideoUrl()));&#10;                &#10;                videoView.setOnPreparedListener(mp -&gt; {&#10;                    progressBarVideo.setVisibility(View.GONE);&#10;                    ivThumbnail.setVisibility(View.GONE);&#10;                    ivPlayButton.setVisibility(View.GONE);&#10;                    &#10;                    isVideoLoaded = true;&#10;                    videoView.start();&#10;                    &#10;                    // Thông báo video đã được xem&#10;                    if (listener != null) {&#10;                        listener.onVideoViewed(video.getId());&#10;                        listener.onVideoStarted(video.getId());&#10;                    }&#10;                    &#10;                    // Set video to loop&#10;                    mp.setLooping(true);&#10;                });&#10;                &#10;                videoView.setOnErrorListener((mp, what, extra) -&gt; {&#10;                    progressBarVideo.setVisibility(View.GONE);&#10;                    ivPlayButton.setVisibility(View.VISIBLE);&#10;                    // TODO: Show error message&#10;                    return true;&#10;                });&#10;                &#10;                videoView.setOnCompletionListener(mp -&gt; {&#10;                    if (listener != null) {&#10;                        listener.onVideoCompleted(video.getId());&#10;                    }&#10;                });&#10;                &#10;            } else {&#10;                // Video đã load, chỉ cần play&#10;                ivThumbnail.setVisibility(View.GONE);&#10;                ivPlayButton.setVisibility(View.GONE);&#10;                videoView.start();&#10;                &#10;                if (listener != null) {&#10;                    Video video = videos.get(getAdapterPosition());&#10;                    listener.onVideoStarted(video.getId());&#10;                }&#10;            }&#10;        }&#10;&#10;        private void resetVideoState() {&#10;            videoView.stopPlayback();&#10;            isVideoLoaded = false;&#10;            ivThumbnail.setVisibility(View.VISIBLE);&#10;            ivPlayButton.setVisibility(View.VISIBLE);&#10;            progressBarVideo.setVisibility(View.GONE);&#10;            progressBarVideoProgress.setVisibility(View.GONE);&#10;        }&#10;&#10;        public void updateLikeState(boolean liked) {&#10;            isLiked = liked;&#10;            ivLike.setImageResource(liked ? R.drawable.ic_favorite : R.drawable.ic_favorite_border);&#10;            ivLike.setColorFilter(liked ? &#10;                    itemView.getContext().getColor(R.color.error_color) : &#10;                    itemView.getContext().getColor(android.R.color.white));&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/video/ShortVideoContract.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/video/ShortVideoContract.java" />
              <option name="originalContent" value="package com.vhn.doan.presentation.video;&#10;&#10;import com.vhn.doan.data.Video;&#10;import com.vhn.doan.presentation.base.BasePresenter;&#10;import com.vhn.doan.presentation.base.BaseView;&#10;&#10;import java.util.List;&#10;&#10;public interface ShortVideoContract {&#10;&#10;    interface View extends BaseView {&#10;        /**&#10;         * Hiển thị danh sách video được đề xuất&#10;         */&#10;        void showRecommendedVideos(List&lt;Video&gt; videos);&#10;&#10;        /**&#10;         * Hiển thị video trending cho người dùng mới&#10;         */&#10;        void showTrendingVideos(List&lt;Video&gt; videos);&#10;&#10;        /**&#10;         * Hiển thị trạng thái loading&#10;         */&#10;        void showLoading();&#10;&#10;        /**&#10;         * Ẩn trạng thái loading&#10;         */&#10;        void hideLoading();&#10;&#10;        /**&#10;         * Hiển thị thông báo lỗi&#10;         */&#10;        void showError(String message);&#10;&#10;        /**&#10;         * Cập nhật trạng thái like của video&#10;         */&#10;        void updateLikeStatus(String videoId, boolean isLiked, int likeCount);&#10;&#10;        /**&#10;         * Cập nhật số lượt xem của video&#10;         */&#10;        void updateViewCount(String videoId, int viewCount);&#10;&#10;        /**&#10;         * Hiển thị thông báo thành công&#10;         */&#10;        void showSuccessMessage(String message);&#10;&#10;        /**&#10;         * Chuyển đến màn hình phát video toàn màn hình&#10;         */&#10;        void navigateToFullScreenVideo(Video video);&#10;&#10;        /**&#10;         * Hiển thị dialog chia sẻ video&#10;         */&#10;        void showShareDialog(Video video);&#10;&#10;        /**&#10;         * Refresh danh sách video&#10;         */&#10;        void refreshVideoList();&#10;&#10;        /**&#10;         * Load thêm video (pagination)&#10;         */&#10;        void loadMoreVideos(List&lt;Video&gt; moreVideos);&#10;    }&#10;&#10;    interface Presenter extends BasePresenter&lt;ShortVideoContract.View&gt; {&#10;        /**&#10;         * Load video được đề xuất cho người dùng hiện tại&#10;         */&#10;        void loadRecommendedVideos();&#10;&#10;        /**&#10;         * Load video trending&#10;         */&#10;        void loadTrendingVideos();&#10;&#10;        /**&#10;         * Xử lý khi người dùng like/unlike video&#10;         */&#10;        void onVideoLiked(String videoId, boolean isCurrentlyLiked);&#10;&#10;        /**&#10;         * Xử lý khi video được xem&#10;         */&#10;        void onVideoViewed(String videoId);&#10;&#10;        /**&#10;         * Xử lý khi người dùng chia sẻ video&#10;         */&#10;        void onVideoShared(String videoId);&#10;&#10;        /**&#10;         * Xử lý khi người dùng click vào video để xem toàn màn hình&#10;         */&#10;        void onVideoClicked(Video video);&#10;&#10;        /**&#10;         * Refresh danh sách video&#10;         */&#10;        void refreshVideos();&#10;&#10;        /**&#10;         * Load thêm video (khi scroll đến cuối)&#10;         */&#10;        void loadMoreVideos();&#10;&#10;        /**&#10;         * Xử lý khi video bắt đầu phát&#10;         */&#10;        void onVideoStarted(String videoId);&#10;&#10;        /**&#10;         * Xử lý khi video kết thúc&#10;         */&#10;        void onVideoCompleted(String videoId);&#10;&#10;        /**&#10;         * Lấy user ID hiện tại&#10;         */&#10;        String getCurrentUserId();&#10;&#10;        /**&#10;         * Kiểm tra trạng thái like của video&#10;         */&#10;        void checkLikeStatus(String videoId);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.video;&#10;&#10;import com.vhn.doan.data.Video;&#10;import com.vhn.doan.presentation.base.BaseView;&#10;&#10;import java.util.List;&#10;&#10;public interface ShortVideoContract {&#10;&#10;    interface View extends BaseView {&#10;        /**&#10;         * Hiển thị danh sách video được đề xuất&#10;         */&#10;        void showRecommendedVideos(List&lt;Video&gt; videos);&#10;&#10;        /**&#10;         * Hiển thị video trending cho người dùng mới&#10;         */&#10;        void showTrendingVideos(List&lt;Video&gt; videos);&#10;&#10;        /**&#10;         * Hiển thị trạng thái loading&#10;         */&#10;        void showLoading();&#10;&#10;        /**&#10;         * Ẩn trạng thái loading&#10;         */&#10;        void hideLoading();&#10;&#10;        /**&#10;         * Hiển thị thông báo lỗi&#10;         */&#10;        void showError(String message);&#10;&#10;        /**&#10;         * Cập nhật trạng thái like của video&#10;         */&#10;        void updateLikeStatus(String videoId, boolean isLiked, int likeCount);&#10;&#10;        /**&#10;         * Cập nhật số lượt xem của video&#10;         */&#10;        void updateViewCount(String videoId, int viewCount);&#10;&#10;        /**&#10;         * Hiển thị thông báo thành công&#10;         */&#10;        void showSuccessMessage(String message);&#10;&#10;        /**&#10;         * Chuyển đến màn hình phát video toàn màn hình&#10;         */&#10;        void navigateToFullScreenVideo(Video video);&#10;&#10;        /**&#10;         * Hiển thị dialog chia sẻ video&#10;         */&#10;        void showShareDialog(Video video);&#10;&#10;        /**&#10;         * Refresh danh sách video&#10;         */&#10;        void refreshVideoList();&#10;&#10;        /**&#10;         * Load thêm video (pagination)&#10;         */&#10;        void loadMoreVideos(List&lt;Video&gt; moreVideos);&#10;    }&#10;&#10;    interface Presenter {&#10;        /**&#10;         * Gắn view vào presenter&#10;         */&#10;        void attachView(ShortVideoContract.View view);&#10;&#10;        /**&#10;         * Gỡ bỏ view khỏi presenter&#10;         */&#10;        void detachView();&#10;&#10;        /**&#10;         * Bắt đầu presenter&#10;         */&#10;        void start();&#10;&#10;        /**&#10;         * Load video được đề xuất cho người dùng hiện tại&#10;         */&#10;        void loadRecommendedVideos();&#10;&#10;        /**&#10;         * Load video trending&#10;         */&#10;        void loadTrendingVideos();&#10;&#10;        /**&#10;         * Xử lý khi người dùng like/unlike video&#10;         */&#10;        void onVideoLiked(String videoId, boolean isCurrentlyLiked);&#10;&#10;        /**&#10;         * Xử lý khi video được xem&#10;         */&#10;        void onVideoViewed(String videoId);&#10;&#10;        /**&#10;         * Xử lý khi người dùng chia sẻ video&#10;         */&#10;        void onVideoShared(String videoId);&#10;&#10;        /**&#10;         * Xử lý khi người dùng click vào video để xem toàn màn hình&#10;         */&#10;        void onVideoClicked(Video video);&#10;&#10;        /**&#10;         * Refresh danh sách video&#10;         */&#10;        void refreshVideos();&#10;&#10;        /**&#10;         * Load thêm video (khi scroll đến cuối)&#10;         */&#10;        void loadMoreVideos();&#10;&#10;        /**&#10;         * Xử lý khi video bắt đầu phát&#10;         */&#10;        void onVideoStarted(String videoId);&#10;&#10;        /**&#10;         * Xử lý khi video kết thúc&#10;         */&#10;        void onVideoCompleted(String videoId);&#10;&#10;        /**&#10;         * Lấy user ID hiện tại&#10;         */&#10;        String getCurrentUserId();&#10;&#10;        /**&#10;         * Kiểm tra trạng thái like của video&#10;         */&#10;        void checkLikeStatus(String videoId);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/video/ShortVideoItem.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/video/ShortVideoItem.java" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.video;&#10;&#10;/**&#10; * Model đại diện cho một video ngắn&#10; */&#10;public class ShortVideoItem {&#10;    private String id;&#10;    private String title;&#10;    private String description;&#10;    private String videoUrl;&#10;    private String thumbnailUrl;&#10;    private String duration;&#10;    private int viewCount;&#10;    private int likeCount;&#10;    private int commentCount;&#10;&#10;    public ShortVideoItem() {&#10;        // Constructor rỗng cho Firebase&#10;    }&#10;&#10;    public ShortVideoItem(String id, String title, String description, String videoUrl, &#10;                         String thumbnailUrl, String duration, int viewCount, &#10;                         int likeCount, int commentCount) {&#10;        this.id = id;&#10;        this.title = title;&#10;        this.description = description;&#10;        this.videoUrl = videoUrl;&#10;        this.thumbnailUrl = thumbnailUrl;&#10;        this.duration = duration;&#10;        this.viewCount = viewCount;&#10;        this.likeCount = likeCount;&#10;        this.commentCount = commentCount;&#10;    }&#10;&#10;    // Getters&#10;    public String getId() { return id; }&#10;    public String getTitle() { return title; }&#10;    public String getDescription() { return description; }&#10;    public String getVideoUrl() { return videoUrl; }&#10;    public String getThumbnailUrl() { return thumbnailUrl; }&#10;    public String getDuration() { return duration; }&#10;    public int getViewCount() { return viewCount; }&#10;    public int getLikeCount() { return likeCount; }&#10;    public int getCommentCount() { return commentCount; }&#10;&#10;    // Setters&#10;    public void setId(String id) { this.id = id; }&#10;    public void setTitle(String title) { this.title = title; }&#10;    public void setDescription(String description) { this.description = description; }&#10;    public void setVideoUrl(String videoUrl) { this.videoUrl = videoUrl; }&#10;    public void setThumbnailUrl(String thumbnailUrl) { this.thumbnailUrl = thumbnailUrl; }&#10;    public void setDuration(String duration) { this.duration = duration; }&#10;    public void setViewCount(int viewCount) { this.viewCount = viewCount; }&#10;    public void setLikeCount(int likeCount) { this.likeCount = likeCount; }&#10;    public void setCommentCount(int commentCount) { this.commentCount = commentCount; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/videoplayer/VideoPlayerActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/videoplayer/VideoPlayerActivity.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/videoshort/VideoShortAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/videoshort/VideoShortAdapter.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/videoshort/VideoShortContract.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/videoshort/VideoShortContract.java" />
              <option name="updatedContent" value="    interface View {&#10;        void showLoading();&#10;        void hideLoading();&#10;        void showVideos(List&lt;HealthTipVideo&gt; videos);&#10;        void showError(String message);&#10;        void showNoVideos();&#10;        void updateVideoLikeStatus(String videoId, boolean isLiked, int likeCount);&#10;        void showVideoDetails(HealthTipVideo video);&#10;        void showNetworkError();&#10;        void navigateToVideoPlayer(HealthTipVideo video);&#10;        void showSearchResults(List&lt;HealthTipVideo&gt; videos);&#10;        void clearSearchResults();&#10;        &#10;        // Thêm method cho TikTok-style pagination&#10;        void addMoreVideos(List&lt;HealthTipVideo&gt; newVideos);&#10;        void showLoadingMore();&#10;        void hideLoadingMore();&#10;    }" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/videoshort/VideoShortFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/videoshort/VideoShortFragment.java" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.videoshort;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.Toast;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.viewpager2.widget.ViewPager2;&#10;import com.google.android.material.progressindicator.CircularProgressIndicator;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.data.HealthTipVideo;&#10;import javax.inject.Inject;&#10;import java.util.List;&#10;&#10;public class VideoShortFragment extends Fragment implements VideoShortContract.View {&#10;&#10;    private static final String TAG = &quot;VideoShortFragment&quot;;&#10;&#10;    @Inject&#10;    VideoShortPresenter presenter;&#10;&#10;    // Views - TikTok style vertical ViewPager&#10;    private ViewPager2 vpVideos;&#10;    private CircularProgressIndicator progressBar;&#10;    private View layoutErrorState;&#10;&#10;    // Adapter - TikTok style vertical video adapter&#10;    private VideoShortVerticalAdapter videoAdapter;&#10;&#10;    // State&#10;    private boolean isLoading = false;&#10;    private int currentPosition = 0;&#10;&#10;    public static VideoShortFragment newInstance() {&#10;        return new VideoShortFragment();&#10;    }&#10;&#10;    @Override&#10;    public void onCreate(@Nullable Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        // Dagger injection sẽ được thực hiện ở đây&#10;    }&#10;&#10;    @Nullable&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,&#10;                            @Nullable Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_video_short_vertical, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;        initViews(view);&#10;        setupVerticalViewPager();&#10;        setupPresenter();&#10;&#10;        // Load dữ liệu ban đầu&#10;        loadInitialData();&#10;    }&#10;&#10;    private void initViews(View view) {&#10;        vpVideos = view.findViewById(R.id.vp_videos);&#10;        progressBar = view.findViewById(R.id.progress_bar);&#10;        layoutErrorState = view.findViewById(R.id.layout_error_state);&#10;    }&#10;&#10;    private void setupVerticalViewPager() {&#10;        videoAdapter = new VideoShortVerticalAdapter(requireContext());&#10;        vpVideos.setAdapter(videoAdapter);&#10;        vpVideos.setOrientation(ViewPager2.ORIENTATION_VERTICAL);&#10;&#10;        // Thiết lập listeners cho adapter&#10;        videoAdapter.setOnVideoInteractionListener(new VideoShortVerticalAdapter.OnVideoInteractionListener() {&#10;            @Override&#10;            public void onVideoLike(HealthTipVideo video, boolean isLiked) {&#10;                if (presenter != null) {&#10;                    presenter.onVideoLiked(video, isLiked);&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onVideoShare(HealthTipVideo video) {&#10;                shareVideo(video);&#10;            }&#10;&#10;            @Override&#10;            public void onVideoComment(HealthTipVideo video) {&#10;                // TODO: Implement comment functionality&#10;                Toast.makeText(requireContext(), &quot;Chức năng bình luận đang phát triển&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;&#10;            @Override&#10;            public void onVideoView(HealthTipVideo video) {&#10;                if (presenter != null) {&#10;                    presenter.onVideoViewed(video);&#10;                }&#10;            }&#10;        });&#10;&#10;        // Thiết lập page change callback để load more và pause/play video&#10;        vpVideos.registerOnPageChangeCallback(new ViewPager2.OnPageChangeCallback() {&#10;            @Override&#10;            public void onPageSelected(int position) {&#10;                super.onPageSelected(position);&#10;                currentPosition = position;&#10;&#10;                // Pause video ở vị trí cũ và play video ở vị trí mới&#10;                videoAdapter.pauseAllVideos();&#10;                videoAdapter.playVideoAt(position);&#10;&#10;                // Load more videos khi gần hết&#10;                if (position &gt;= videoAdapter.getItemCount() - 3) {&#10;                    loadMoreVideos();&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onPageScrollStateChanged(int state) {&#10;                super.onPageScrollStateChanged(state);&#10;                // Có thể thêm logic để pause video khi đang scroll&#10;                if (state == ViewPager2.SCROLL_STATE_DRAGGING) {&#10;                    videoAdapter.pauseAllVideos();&#10;                } else if (state == ViewPager2.SCROLL_STATE_IDLE) {&#10;                    videoAdapter.playVideoAt(currentPosition);&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    private void setupPresenter() {&#10;        if (presenter != null) {&#10;            presenter.attachView(this);&#10;        }&#10;    }&#10;&#10;    private void loadInitialData() {&#10;        if (presenter != null) {&#10;            presenter.loadRecommendedVideos();&#10;        }&#10;    }&#10;&#10;    private void loadMoreVideos() {&#10;        if (!isLoading &amp;&amp; presenter != null) {&#10;            presenter.loadMoreVideos();&#10;        }&#10;    }&#10;&#10;    private void shareVideo(HealthTipVideo video) {&#10;        Intent shareIntent = new Intent(Intent.ACTION_SEND);&#10;        shareIntent.setType(&quot;text/plain&quot;);&#10;        shareIntent.putExtra(Intent.EXTRA_TEXT,&#10;            &quot;Xem video mẹo sức khỏe hay này: &quot; + video.getTitle() + &quot;\n&quot; + video.getVideoUrl());&#10;        shareIntent.putExtra(Intent.EXTRA_SUBJECT, &quot;Mẹo sức khỏe từ HealthTips&quot;);&#10;&#10;        Intent chooser = Intent.createChooser(shareIntent, &quot;Chia sẻ video&quot;);&#10;        if (shareIntent.resolveActivity(requireContext().getPackageManager()) != null) {&#10;            startActivity(chooser);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onResume() {&#10;        super.onResume();&#10;        if (presenter != null) {&#10;            presenter.attachView(this);&#10;        }&#10;        // Resume video hiện tại&#10;        if (videoAdapter != null) {&#10;            videoAdapter.playVideoAt(currentPosition);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onPause() {&#10;        super.onPause();&#10;        // Pause tất cả video khi fragment bị pause&#10;        if (videoAdapter != null) {&#10;            videoAdapter.pauseAllVideos();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onDestroyView() {&#10;        super.onDestroyView();&#10;        if (presenter != null) {&#10;            presenter.detachView();&#10;        }&#10;        if (videoAdapter != null) {&#10;            videoAdapter.releaseAllPlayers();&#10;        }&#10;    }&#10;&#10;    // Implement VideoShortContract.View methods&#10;&#10;    @Override&#10;    public void showLoading() {&#10;        if (!isLoading) {&#10;            isLoading = true;&#10;            if (progressBar != null) {&#10;                progressBar.setVisibility(View.VISIBLE);&#10;            }&#10;        }&#10;        hideErrorState();&#10;    }&#10;&#10;    @Override&#10;    public void hideLoading() {&#10;        isLoading = false;&#10;        if (progressBar != null) {&#10;            progressBar.setVisibility(View.GONE);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showVideos(List&lt;HealthTipVideo&gt; videos) {&#10;        hideErrorState();&#10;        if (videoAdapter != null) {&#10;            videoAdapter.setVideos(videos);&#10;            // Auto play video đầu tiên&#10;            if (!videos.isEmpty()) {&#10;                videoAdapter.playVideoAt(0);&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showError(String message) {&#10;        hideLoading();&#10;        if (layoutErrorState != null) {&#10;            layoutErrorState.setVisibility(View.VISIBLE);&#10;        }&#10;        Toast.makeText(requireContext(), message, Toast.LENGTH_SHORT).show();&#10;    }&#10;&#10;    @Override&#10;    public void showNoVideos() {&#10;        hideLoading();&#10;        Toast.makeText(requireContext(), &quot;Không có video nào để hiển thị&quot;, Toast.LENGTH_SHORT).show();&#10;    }&#10;&#10;    @Override&#10;    public void updateVideoLikeStatus(String videoId, boolean isLiked, int likeCount) {&#10;        if (videoAdapter != null) {&#10;            videoAdapter.updateVideoLikeStatus(videoId, isLiked, likeCount);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showVideoDetails(HealthTipVideo video) {&#10;        // Có thể implement bottom sheet hiển thị chi tiết video&#10;    }&#10;&#10;    @Override&#10;    public void showNetworkError() {&#10;        showError(getString(R.string.network_error_message));&#10;    }&#10;&#10;    @Override&#10;    public void navigateToVideoPlayer(HealthTipVideo video) {&#10;        // Trong TikTok style, video đã được phát ngay trong fragment&#10;        // Có thể implement fullscreen mode hoặc detail view&#10;    }&#10;&#10;    @Override&#10;    public void showSearchResults(List&lt;HealthTipVideo&gt; videos) {&#10;        showVideos(videos);&#10;    }&#10;&#10;    @Override&#10;    public void clearSearchResults() {&#10;        loadInitialData();&#10;    }&#10;    &#10;    // Implement các method mới cho TikTok-style pagination&#10;    @Override&#10;    public void addMoreVideos(List&lt;HealthTipVideo&gt; newVideos) {&#10;        if (videoAdapter != null &amp;&amp; newVideos != null &amp;&amp; !newVideos.isEmpty()) {&#10;            videoAdapter.addVideos(newVideos);&#10;        }&#10;    }&#10;    &#10;    @Override&#10;    public void showLoadingMore() {&#10;        // Có thể hiển thị loading indicator nhỏ ở cuối danh sách&#10;        // hoặc để trống vì TikTok style thường không hiển thị loading khi load more&#10;    }&#10;    &#10;    @Override&#10;    public void hideLoadingMore() {&#10;        // Ẩn loading indicator nếu có&#10;    }&#10;    &#10;    // Public methods for external access&#10;    public void refreshVideos() {&#10;        if (presenter != null) {&#10;            presenter.refreshVideos();&#10;        }&#10;    }&#10;    &#10;    public void searchVideos(String query) {&#10;        if (presenter != null) {&#10;            presenter.searchVideos(query);&#10;        }&#10;    }&#10;    &#10;    // Method để handle double tap like trên video (như TikTok)&#10;    public void handleDoubleTapLike(HealthTipVideo video) {&#10;        if (presenter != null &amp;&amp; video != null) {&#10;            presenter.onVideoLiked(video, true);&#10;            // Show heart animation effect&#10;            showLikeAnimation();&#10;        }&#10;    }&#10;    &#10;    private void showLikeAnimation() {&#10;        // TODO: Implement heart animation effect khi double tap&#10;        // Có thể sử dụng Lottie animation hoặc custom animation&#10;    }&#10;    &#10;    // Method để pause/resume video khi app vào background&#10;    @Override&#10;    public void onStop() {&#10;        super.onStop();&#10;        if (videoAdapter != null) {&#10;            videoAdapter.pauseAllVideos();&#10;        }&#10;    }&#10;    &#10;    @Override&#10;    public void onStart() {&#10;        super.onStart();&#10;        if (videoAdapter != null &amp;&amp; currentPosition &gt;= 0) {&#10;            videoAdapter.playVideoAt(currentPosition);&#10;        }&#10;    }&#10;    &#10;    private void hideErrorState() {&#10;        if (layoutErrorState != null) {&#10;            layoutErrorState.setVisibility(View.GONE);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/videoshort/VideoShortPresenter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/videoshort/VideoShortPresenter.java" />
              <option name="updatedContent" value="    @Override&#10;    public void loadMoreVideos() {&#10;        // TODO: Implement pagination for loading more videos&#10;        Log.d(TAG, &quot;Load more videos - chưa implement&quot;);&#10;    }&#10;    &#10;    // Phương thức hỗ trợ&#10;    private void recordVideoView(HealthTipVideo video) {&#10;        videoRepository.recordVideoView(video.getId(), new RepositoryCallback&lt;Boolean&gt;() {&#10;            @Override&#10;            public void onSuccess(Boolean success) {&#10;                if (success) {&#10;                    // Tăng view count&#10;                    videoRepository.incrementViewCount(video.getId(), new RepositoryCallback&lt;Boolean&gt;() {&#10;                        @Override&#10;                        public void onSuccess(Boolean incrementSuccess) {&#10;                            if (incrementSuccess) {&#10;                                video.setViewCount(video.getViewCount() + 1);&#10;                                Log.d(TAG, &quot;Đã tăng view count cho video: &quot; + video.getId());&#10;                            }&#10;                        }&#10;                        &#10;                        @Override&#10;                        public void onError(String error) {&#10;                            Log.e(TAG, &quot;Lỗi khi tăng view count: &quot; + error);&#10;                        }&#10;                    });&#10;                }&#10;            }&#10;            &#10;            @Override&#10;            public void onError(String error) {&#10;                Log.e(TAG, &quot;Lỗi khi ghi nhận lượt xem: &quot; + error);&#10;            }&#10;        });&#10;    }&#10;    &#10;    public List&lt;HealthTipVideo&gt; getCurrentVideos() {&#10;        return new ArrayList&lt;&gt;(currentVideos);&#10;    }&#10;    &#10;    public boolean isCurrentlyLoading() {&#10;        return isLoading;&#10;    }&#10;    &#10;    // Pagination support&#10;    private int currentPage = 0;&#10;    private static final int PAGE_SIZE = 5;&#10;    private boolean hasMoreVideos = true;&#10;    &#10;    @Override&#10;    public void loadMoreVideos() {&#10;        if (isLoading || !hasMoreVideos || view == null) return;&#10;        &#10;        isLoading = true;&#10;        currentPage++;&#10;        &#10;        // Load videos theo page hiện tại&#10;        loadVideosWithPagination(currentPage, PAGE_SIZE);&#10;    }&#10;    &#10;    private void loadVideosWithPagination(int page, int pageSize) {&#10;        // Tạm thời sử dụng recommended videos, có thể customize theo nhu cầu&#10;        videoRepository.getRecommendedVideos(pageSize, new RepositoryCallback&lt;List&lt;HealthTipVideo&gt;&gt;() {&#10;            @Override&#10;            public void onSuccess(List&lt;HealthTipVideo&gt; newVideos) {&#10;                isLoading = false;&#10;                if (view != null) {&#10;                    if (newVideos.isEmpty() || newVideos.size() &lt; pageSize) {&#10;                        hasMoreVideos = false;&#10;                    }&#10;                    &#10;                    if (!newVideos.isEmpty()) {&#10;                        // Filter để tránh duplicate videos&#10;                        List&lt;HealthTipVideo&gt; filteredVideos = filterDuplicateVideos(newVideos);&#10;                        if (!filteredVideos.isEmpty()) {&#10;                            currentVideos.addAll(filteredVideos);&#10;                            addMoreVideosToView(filteredVideos);&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;            &#10;            @Override&#10;            public void onError(String error) {&#10;                isLoading = false;&#10;                currentPage--; // Rollback page nếu lỗi&#10;                Log.e(TAG, &quot;Lỗi khi tải thêm video: &quot; + error);&#10;                if (view != null) {&#10;                    view.showError(&quot;Không thể tải thêm video. Vui lòng thử lại.&quot;);&#10;                }&#10;            }&#10;        });&#10;    }&#10;    &#10;    private List&lt;HealthTipVideo&gt; filterDuplicateVideos(List&lt;HealthTipVideo&gt; newVideos) {&#10;        List&lt;HealthTipVideo&gt; filteredVideos = new ArrayList&lt;&gt;();&#10;        for (HealthTipVideo newVideo : newVideos) {&#10;            boolean isDuplicate = false;&#10;            for (HealthTipVideo existingVideo : currentVideos) {&#10;                if (existingVideo.getId().equals(newVideo.getId())) {&#10;                    isDuplicate = true;&#10;                    break;&#10;                }&#10;            }&#10;            if (!isDuplicate) {&#10;                filteredVideos.add(newVideo);&#10;            }&#10;        }&#10;        return filteredVideos;&#10;    }&#10;    &#10;    private void addMoreVideosToView(List&lt;HealthTipVideo&gt; newVideos) {&#10;        // Gọi method mới trong view để add videos thay vì replace&#10;        if (view instanceof VideoShortFragment) {&#10;            VideoShortFragment fragment = (VideoShortFragment) view;&#10;            // Sẽ cần thêm method này vào contract&#10;        }&#10;    }&#10;    &#10;    // Reset pagination khi refresh&#10;    @Override&#10;    public void refreshVideos() {&#10;        currentVideos.clear();&#10;        currentPage = 0;&#10;        hasMoreVideos = true;&#10;        if (currentCategoryId != null) {&#10;            loadVideosByCategory(currentCategoryId);&#10;        } else {&#10;            loadRecommendedVideos();&#10;        }&#10;    }" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/videoshort/VideoShortVerticalAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/videoshort/VideoShortVerticalAdapter.java" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.videoshort;&#10;&#10;import android.content.Context;&#10;import android.net.Uri;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.ImageView;&#10;import android.widget.TextView;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.bumptech.glide.Glide;&#10;import com.google.android.exoplayer2.ExoPlayer;&#10;import com.google.android.exoplayer2.MediaItem;&#10;import com.google.android.exoplayer2.Player;&#10;import com.google.android.exoplayer2.ui.StyledPlayerView;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.data.HealthTipVideo;&#10;import java.text.SimpleDateFormat;&#10;import java.util.ArrayList;&#10;import java.util.Date;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;public class VideoShortVerticalAdapter extends RecyclerView.Adapter&lt;VideoShortVerticalAdapter.VideoViewHolder&gt; {&#10;    &#10;    private List&lt;HealthTipVideo&gt; videos;&#10;    private Context context;&#10;    private OnVideoInteractionListener listener;&#10;    private List&lt;ExoPlayer&gt; players; // Quản lý multiple players&#10;    &#10;    public interface OnVideoInteractionListener {&#10;        void onVideoLike(HealthTipVideo video, boolean isLiked);&#10;        void onVideoShare(HealthTipVideo video);&#10;        void onVideoComment(HealthTipVideo video);&#10;        void onVideoView(HealthTipVideo video);&#10;    }&#10;    &#10;    public VideoShortVerticalAdapter(Context context) {&#10;        this.context = context;&#10;        this.videos = new ArrayList&lt;&gt;();&#10;        this.players = new ArrayList&lt;&gt;();&#10;    }&#10;    &#10;    public void setOnVideoInteractionListener(OnVideoInteractionListener listener) {&#10;        this.listener = listener;&#10;    }&#10;    &#10;    public void setVideos(List&lt;HealthTipVideo&gt; videos) {&#10;        // Release old players&#10;        releaseAllPlayers();&#10;        &#10;        this.videos.clear();&#10;        this.players.clear();&#10;        &#10;        if (videos != null) {&#10;            this.videos.addAll(videos);&#10;            // Tạo players cho mỗi video&#10;            for (int i = 0; i &lt; videos.size(); i++) {&#10;                ExoPlayer player = new ExoPlayer.Builder(context).build();&#10;                players.add(player);&#10;            }&#10;        }&#10;        notifyDataSetChanged();&#10;    }&#10;    &#10;    public void addVideos(List&lt;HealthTipVideo&gt; newVideos) {&#10;        if (newVideos != null &amp;&amp; !newVideos.isEmpty()) {&#10;            int startPosition = this.videos.size();&#10;            this.videos.addAll(newVideos);&#10;            &#10;            // Tạo players cho videos mới&#10;            for (int i = 0; i &lt; newVideos.size(); i++) {&#10;                ExoPlayer player = new ExoPlayer.Builder(context).build();&#10;                players.add(player);&#10;            }&#10;            &#10;            notifyItemRangeInserted(startPosition, newVideos.size());&#10;        }&#10;    }&#10;    &#10;    public void updateVideoLikeStatus(String videoId, boolean isLiked, int likeCount) {&#10;        for (int i = 0; i &lt; videos.size(); i++) {&#10;            HealthTipVideo video = videos.get(i);&#10;            if (video.getId().equals(videoId)) {&#10;                video.setLikeCount(likeCount);&#10;                notifyItemChanged(i);&#10;                break;&#10;            }&#10;        }&#10;    }&#10;    &#10;    public void playVideoAt(int position) {&#10;        if (position &gt;= 0 &amp;&amp; position &lt; players.size()) {&#10;            ExoPlayer player = players.get(position);&#10;            if (player != null) {&#10;                player.setPlayWhenReady(true);&#10;                &#10;                // Gọi callback cho presenter để record view&#10;                if (listener != null &amp;&amp; position &lt; videos.size()) {&#10;                    listener.onVideoView(videos.get(position));&#10;                }&#10;            }&#10;        }&#10;    }&#10;    &#10;    public void pauseAllVideos() {&#10;        for (ExoPlayer player : players) {&#10;            if (player != null) {&#10;                player.setPlayWhenReady(false);&#10;            }&#10;        }&#10;    }&#10;    &#10;    public void releaseAllPlayers() {&#10;        for (ExoPlayer player : players) {&#10;            if (player != null) {&#10;                player.release();&#10;            }&#10;        }&#10;        players.clear();&#10;    }&#10;    &#10;    @NonNull&#10;    @Override&#10;    public VideoViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(parent.getContext())&#10;                .inflate(R.layout.item_video_short_vertical, parent, false);&#10;        return new VideoViewHolder(view);&#10;    }&#10;    &#10;    @Override&#10;    public void onBindViewHolder(@NonNull VideoViewHolder holder, int position) {&#10;        HealthTipVideo video = videos.get(position);&#10;        ExoPlayer player = players.get(position);&#10;        holder.bind(video, player, position);&#10;    }&#10;    &#10;    @Override&#10;    public int getItemCount() {&#10;        return videos.size();&#10;    }&#10;    &#10;    public class VideoViewHolder extends RecyclerView.ViewHolder {&#10;        private StyledPlayerView playerView;&#10;        private TextView tvTitle;&#10;        private TextView tvDescription;&#10;        private TextView tvAuthor;&#10;        private TextView tvViewCount;&#10;        private TextView tvLikeCount;&#10;        private TextView tvCommentCount;&#10;        private ImageView ivLike;&#10;        private ImageView ivComment;&#10;        private ImageView ivShare;&#10;        private ImageView ivUserAvatar;&#10;        private View btnFollow;&#10;        &#10;        // State&#10;        private boolean isLiked = false;&#10;        &#10;        public VideoViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            initViews(itemView);&#10;        }&#10;        &#10;        private void initViews(View itemView) {&#10;            playerView = itemView.findViewById(R.id.player_view);&#10;            tvTitle = itemView.findViewById(R.id.tv_title);&#10;            tvDescription = itemView.findViewById(R.id.tv_description);&#10;            tvAuthor = itemView.findViewById(R.id.tv_author);&#10;            tvViewCount = itemView.findViewById(R.id.tv_view_count);&#10;            tvLikeCount = itemView.findViewById(R.id.tv_like_count);&#10;            tvCommentCount = itemView.findViewById(R.id.tv_comment_count);&#10;            ivLike = itemView.findViewById(R.id.iv_like);&#10;            ivComment = itemView.findViewById(R.id.iv_comment);&#10;            ivShare = itemView.findViewById(R.id.iv_share);&#10;            ivUserAvatar = itemView.findViewById(R.id.iv_user_avatar);&#10;            btnFollow = itemView.findViewById(R.id.btn_follow);&#10;        }&#10;        &#10;        public void bind(HealthTipVideo video, ExoPlayer player, int position) {&#10;            // Thiết lập thông tin video&#10;            tvTitle.setText(video.getTitle());&#10;            tvDescription.setText(video.getDescription());&#10;            tvAuthor.setText(&quot;@healthtips&quot;); // Có thể lấy từ authorId&#10;            tvViewCount.setText(formatCount(video.getViewCount()) + &quot; lượt xem&quot;);&#10;            tvLikeCount.setText(formatCount(video.getLikeCount()));&#10;            tvCommentCount.setText(&quot;0&quot;); // TODO: Implement comment count&#10;            &#10;            // Thiết lập video player&#10;            setupVideoPlayer(video, player);&#10;            &#10;            // Thiết lập user avatar&#10;            setupUserAvatar();&#10;            &#10;            // Thiết lập click listeners&#10;            setupClickListeners(video, position);&#10;            &#10;            // Check like status (tạm thời set false, sẽ được update từ presenter)&#10;            updateLikeButton(false);&#10;        }&#10;        &#10;        private void setupVideoPlayer(HealthTipVideo video, ExoPlayer player) {&#10;            playerView.setPlayer(player);&#10;            playerView.setUseController(false); // Tắt controls mặc định như TikTok&#10;            playerView.setShowBuffering(StyledPlayerView.SHOW_BUFFERING_WHEN_PLAYING);&#10;            &#10;            // Thiết lập media item&#10;            if (video.getVideoUrl() != null &amp;&amp; !video.getVideoUrl().isEmpty()) {&#10;                MediaItem mediaItem = MediaItem.fromUri(Uri.parse(video.getVideoUrl()));&#10;                player.setMediaItem(mediaItem);&#10;                player.prepare();&#10;                player.setRepeatMode(Player.REPEAT_MODE_ONE); // Loop video như TikTok&#10;            }&#10;            &#10;            // Double tap để like (như TikTok)&#10;            playerView.setOnClickListener(v -&gt; {&#10;                // Single tap pause/play&#10;                if (player.isPlaying()) {&#10;                    player.setPlayWhenReady(false);&#10;                } else {&#10;                    player.setPlayWhenReady(true);&#10;                }&#10;            });&#10;        }&#10;        &#10;        private void setupUserAvatar() {&#10;            // Load avatar placeholder&#10;            Glide.with(context)&#10;                    .load(R.drawable.ic_user_avatar_placeholder)&#10;                    .circleCrop()&#10;                    .into(ivUserAvatar);&#10;        }&#10;        &#10;        private void setupClickListeners(HealthTipVideo video, int position) {&#10;            // Like button&#10;            ivLike.setOnClickListener(v -&gt; {&#10;                isLiked = !isLiked;&#10;                updateLikeButton(isLiked);&#10;                if (listener != null) {&#10;                    listener.onVideoLike(video, isLiked);&#10;                }&#10;                &#10;                // Animation effect như TikTok&#10;                animateLikeButton();&#10;            });&#10;            &#10;            // Comment button&#10;            ivComment.setOnClickListener(v -&gt; {&#10;                if (listener != null) {&#10;                    listener.onVideoComment(video);&#10;                }&#10;            });&#10;            &#10;            // Share button&#10;            ivShare.setOnClickListener(v -&gt; {&#10;                if (listener != null) {&#10;                    listener.onVideoShare(video);&#10;                }&#10;            });&#10;            &#10;            // Follow button&#10;            btnFollow.setOnClickListener(v -&gt; {&#10;                // TODO: Implement follow functionality&#10;            });&#10;            &#10;            // User avatar click&#10;            ivUserAvatar.setOnClickListener(v -&gt; {&#10;                // TODO: Navigate to user profile&#10;            });&#10;        }&#10;        &#10;        private void updateLikeButton(boolean isLiked) {&#10;            if (isLiked) {&#10;                ivLike.setImageResource(R.drawable.ic_heart_filled);&#10;                ivLike.setColorFilter(context.getResources().getColor(R.color.red_like));&#10;            } else {&#10;                ivLike.setImageResource(R.drawable.ic_heart_outline);&#10;                ivLike.setColorFilter(context.getResources().getColor(R.color.white));&#10;            }&#10;        }&#10;        &#10;        private void animateLikeButton() {&#10;            // Simple scale animation&#10;            ivLike.animate()&#10;                    .scaleX(1.2f)&#10;                    .scaleY(1.2f)&#10;                    .setDuration(100)&#10;                    .withEndAction(() -&gt; {&#10;                        ivLike.animate()&#10;                                .scaleX(1.0f)&#10;                                .scaleY(1.0f)&#10;                                .setDuration(100)&#10;                                .start();&#10;                    })&#10;                    .start();&#10;        }&#10;        &#10;        private String formatCount(int count) {&#10;            if (count &lt; 1000) {&#10;                return String.valueOf(count);&#10;            } else if (count &lt; 1000000) {&#10;                return String.format(Locale.getDefault(), &quot;%.1fK&quot;, count / 1000.0);&#10;            } else {&#10;                return String.format(Locale.getDefault(), &quot;%.1fM&quot;, count / 1000000.0);&#10;            }&#10;        }&#10;    }&#10;    &#10;    public List&lt;HealthTipVideo&gt; getVideos() {&#10;        return new ArrayList&lt;&gt;(videos);&#10;    }&#10;    &#10;    public HealthTipVideo getVideoAt(int position) {&#10;        if (position &gt;= 0 &amp;&amp; position &lt; videos.size()) {&#10;            return videos.get(position);&#10;        }&#10;        return null;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/services/CloudinaryManager.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/services/CloudinaryManager.java" />
              <option name="updatedContent" value="package com.vhn.doan.services;&#10;&#10;import android.content.Context;&#10;import android.net.Uri;&#10;import android.util.Log;&#10;&#10;import com.cloudinary.Cloudinary;&#10;import com.cloudinary.utils.ObjectUtils;&#10;&#10;import java.io.IOException;&#10;import java.io.InputStream;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;import java.util.concurrent.ExecutorService;&#10;import java.util.concurrent.Executors;&#10;&#10;/**&#10; * Manager để quản lý upload video lên Cloudinary&#10; * Thay thế Firebase Storage cho chức năng video ngắn&#10; */&#10;public class CloudinaryManager {&#10;    private static final String TAG = &quot;CloudinaryManager&quot;;&#10;    private static CloudinaryManager instance;&#10;    private Cloudinary cloudinary;&#10;    private ExecutorService executorService;&#10;&#10;    // Callback interface cho upload&#10;    public interface CloudinaryUploadCallback {&#10;        void onSuccess(String publicId, String videoUrl, String thumbnailUrl);&#10;        void onError(String error);&#10;        void onProgress(int progress);&#10;    }&#10;&#10;    private CloudinaryManager() {&#10;        // Khởi tạo Cloudinary với thông tin cấu hình&#10;        // Bạn cần thay thế các giá trị này bằng thông tin từ Cloudinary dashboard&#10;        Map&lt;String, String&gt; config = new HashMap&lt;&gt;();&#10;        config.put(&quot;cloud_name&quot;, &quot;YOUR_CLOUD_NAME&quot;); // Thay bằng cloud name của bạn&#10;        config.put(&quot;api_key&quot;, &quot;YOUR_API_KEY&quot;); // Thay bằng API key của bạn&#10;        config.put(&quot;api_secret&quot;, &quot;YOUR_API_SECRET&quot;); // Thay bằng API secret của bạn&#10;        config.put(&quot;secure&quot;, &quot;true&quot;);&#10;        &#10;        cloudinary = new Cloudinary(config);&#10;        executorService = Executors.newFixedThreadPool(3);&#10;    }&#10;&#10;    public static synchronized CloudinaryManager getInstance() {&#10;        if (instance == null) {&#10;            instance = new CloudinaryManager();&#10;        }&#10;        return instance;&#10;    }&#10;&#10;    /**&#10;     * Upload video lên Cloudinary&#10;     * @param context Context của ứng dụng&#10;     * @param videoUri URI của video cần upload&#10;     * @param videoTitle Tiêu đề video (dùng làm public_id)&#10;     * @param callback Callback để nhận kết quả&#10;     */&#10;    public void uploadVideo(Context context, Uri videoUri, String videoTitle, CloudinaryUploadCallback callback) {&#10;        executorService.execute(() -&gt; {&#10;            try {&#10;                // Tạo public_id từ title và timestamp để tránh trùng lặp&#10;                String publicId = &quot;videos/&quot; + sanitizeTitle(videoTitle) + &quot;_&quot; + System.currentTimeMillis();&#10;                &#10;                // Mở InputStream từ URI&#10;                InputStream inputStream = context.getContentResolver().openInputStream(videoUri);&#10;                if (inputStream == null) {&#10;                    callback.onError(&quot;Không thể đọc file video&quot;);&#10;                    return;&#10;                }&#10;&#10;                // Cấu hình upload options&#10;                Map&lt;String, Object&gt; uploadOptions = ObjectUtils.asMap(&#10;                    &quot;public_id&quot;, publicId,&#10;                    &quot;resource_type&quot;, &quot;video&quot;,&#10;                    &quot;folder&quot;, &quot;health_tips_videos&quot;,&#10;                    &quot;format&quot;, &quot;mp4&quot;,&#10;                    &quot;quality&quot;, &quot;auto:good&quot;,&#10;                    &quot;eager&quot;, ObjectUtils.asArray(&#10;                        ObjectUtils.asMap(&#10;                            &quot;width&quot;, 720,&#10;                            &quot;height&quot;, 1280,&#10;                            &quot;crop&quot;, &quot;fill&quot;,&#10;                            &quot;format&quot;, &quot;mp4&quot;,&#10;                            &quot;quality&quot;, &quot;auto:good&quot;&#10;                        )&#10;                    ),&#10;                    &quot;eager_async&quot;, true,&#10;                    &quot;notification_url&quot;, &quot;&quot; // Có thể thêm webhook URL nếu cần&#10;                );&#10;&#10;                Log.d(TAG, &quot;Bắt đầu upload video: &quot; + publicId);&#10;                callback.onProgress(10);&#10;&#10;                // Thực hiện upload&#10;                Map uploadResult = cloudinary.uploader().upload(inputStream, uploadOptions);&#10;                &#10;                inputStream.close();&#10;                &#10;                callback.onProgress(90);&#10;&#10;                // Lấy URL video và thumbnail&#10;                String videoUrl = (String) uploadResult.get(&quot;secure_url&quot;);&#10;                String thumbnailUrl = generateThumbnailUrl(publicId);&#10;                &#10;                Log.d(TAG, &quot;Upload thành công - Video URL: &quot; + videoUrl);&#10;                Log.d(TAG, &quot;Thumbnail URL: &quot; + thumbnailUrl);&#10;                &#10;                callback.onProgress(100);&#10;                callback.onSuccess(publicId, videoUrl, thumbnailUrl);&#10;&#10;            } catch (IOException e) {&#10;                Log.e(TAG, &quot;Lỗi upload video: &quot; + e.getMessage(), e);&#10;                callback.onError(&quot;Lỗi upload video: &quot; + e.getMessage());&#10;            } catch (Exception e) {&#10;                Log.e(TAG, &quot;Lỗi không xác định: &quot; + e.getMessage(), e);&#10;                callback.onError(&quot;Lỗi không xác định: &quot; + e.getMessage());&#10;            }&#10;        });&#10;    }&#10;&#10;    /**&#10;     * Tạo URL thumbnail từ public_id của video&#10;     */&#10;    private String generateThumbnailUrl(String publicId) {&#10;        try {&#10;            Map&lt;String, Object&gt; options = ObjectUtils.asMap(&#10;                &quot;width&quot;, 480,&#10;                &quot;height&quot;, 854,&#10;                &quot;crop&quot;, &quot;fill&quot;,&#10;                &quot;format&quot;, &quot;jpg&quot;,&#10;                &quot;quality&quot;, &quot;auto:good&quot;&#10;            );&#10;            &#10;            return cloudinary.url()&#10;                .resourceType(&quot;video&quot;)&#10;                .transformation(options)&#10;                .generate(publicId);&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Lỗi tạo thumbnail URL: &quot; + e.getMessage());&#10;            return &quot;&quot;;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Làm sạch title để sử dụng làm public_id&#10;     */&#10;    private String sanitizeTitle(String title) {&#10;        if (title == null || title.trim().isEmpty()) {&#10;            return &quot;untitled&quot;;&#10;        }&#10;        &#10;        return title.trim()&#10;                .toLowerCase()&#10;                .replaceAll(&quot;[^a-zA-Z0-9]&quot;, &quot;_&quot;)&#10;                .replaceAll(&quot;_{2,}&quot;, &quot;_&quot;)&#10;                .replaceAll(&quot;^_|_$&quot;, &quot;&quot;);&#10;    }&#10;&#10;    /**&#10;     * Xóa video từ Cloudinary&#10;     */&#10;    public void deleteVideo(String publicId, CloudinaryUploadCallback callback) {&#10;        executorService.execute(() -&gt; {&#10;            try {&#10;                Map result = cloudinary.uploader().destroy(publicId, &#10;                    ObjectUtils.asMap(&quot;resource_type&quot;, &quot;video&quot;));&#10;                &#10;                String resultStatus = (String) result.get(&quot;result&quot;);&#10;                if (&quot;ok&quot;.equals(resultStatus)) {&#10;                    Log.d(TAG, &quot;Xóa video thành công: &quot; + publicId);&#10;                    callback.onSuccess(publicId, &quot;&quot;, &quot;&quot;);&#10;                } else {&#10;                    Log.e(TAG, &quot;Lỗi xóa video: &quot; + result.toString());&#10;                    callback.onError(&quot;Không thể xóa video&quot;);&#10;                }&#10;            } catch (Exception e) {&#10;                Log.e(TAG, &quot;Lỗi xóa video: &quot; + e.getMessage(), e);&#10;                callback.onError(&quot;Lỗi xóa video: &quot; + e.getMessage());&#10;            }&#10;        });&#10;    }&#10;&#10;    /**&#10;     * Lấy thông tin video từ Cloudinary&#10;     */&#10;    public void getVideoInfo(String publicId, CloudinaryUploadCallback callback) {&#10;        executorService.execute(() -&gt; {&#10;            try {&#10;                Map result = cloudinary.api().resource(publicId, &#10;                    ObjectUtils.asMap(&quot;resource_type&quot;, &quot;video&quot;));&#10;                &#10;                String videoUrl = (String) result.get(&quot;secure_url&quot;);&#10;                String thumbnailUrl = generateThumbnailUrl(publicId);&#10;                &#10;                callback.onSuccess(publicId, videoUrl, thumbnailUrl);&#10;            } catch (Exception e) {&#10;                Log.e(TAG, &quot;Lỗi lấy thông tin video: &quot; + e.getMessage(), e);&#10;                callback.onError(&quot;Lỗi lấy thông tin video: &quot; + e.getMessage());&#10;            }&#10;        });&#10;    }&#10;&#10;    /**&#10;     * Cleanup resources&#10;     */&#10;    public void shutdown() {&#10;        if (executorService != null &amp;&amp; !executorService.isShutdown()) {&#10;            executorService.shutdown();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/services/CloudinaryVideoHelper.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/services/CloudinaryVideoHelper.java" />
              <option name="originalContent" value="package com.vhn.doan.services;&#10;&#10;import android.util.Log;&#10;&#10;/**&#10; * Helper class để xử lý video URLs từ Cloudinary&#10; * Chỉ dùng để load video, không upload&#10; */&#10;public class CloudinaryVideoHelper {&#10;    private static final String TAG = &quot;CloudinaryVideoHelper&quot;;&#10;    &#10;    // Base URL của Cloudinary (thay đổi theo cloud name của bạn)&#10;    private static final String CLOUDINARY_BASE_URL = &quot;https://res.cloudinary.com/YOUR_CLOUD_NAME&quot;;&#10;    private static final String VIDEO_PATH = &quot;/video/upload&quot;;&#10;    private static final String IMAGE_PATH = &quot;/image/upload&quot;;&#10;    &#10;    /**&#10;     * Tạo URL video từ public ID&#10;     * @param publicId Public ID của video trên Cloudinary&#10;     * @return URL đầy đủ của video&#10;     */&#10;    public static String getVideoUrl(String publicId) {&#10;        if (publicId == null || publicId.trim().isEmpty()) {&#10;            Log.w(TAG, &quot;Public ID is null or empty&quot;);&#10;            return &quot;&quot;;&#10;        }&#10;        &#10;        // Format: https://res.cloudinary.com/YOUR_CLOUD_NAME/video/upload/v1234567890/folder/video_name.mp4&#10;        String videoUrl = CLOUDINARY_BASE_URL + VIDEO_PATH + &quot;/&quot; + publicId;&#10;        Log.d(TAG, &quot;Generated video URL: &quot; + videoUrl);&#10;        return videoUrl;&#10;    }&#10;    &#10;    /**&#10;     * Tạo URL thumbnail từ public ID của video&#10;     * @param publicId Public ID của video trên Cloudinary&#10;     * @return URL thumbnail của video&#10;     */&#10;    public static String getThumbnailUrl(String publicId) {&#10;        if (publicId == null || publicId.trim().isEmpty()) {&#10;            Log.w(TAG, &quot;Public ID is null or empty for thumbnail&quot;);&#10;            return &quot;&quot;;&#10;        }&#10;        &#10;        // Tạo thumbnail từ video với transformations&#10;        // Format: https://res.cloudinary.com/YOUR_CLOUD_NAME/video/upload/w_480,h_854,c_fill,f_jpg/folder/video_name.jpg&#10;        String thumbnailUrl = CLOUDINARY_BASE_URL + VIDEO_PATH + &quot;/w_480,h_854,c_fill,f_jpg/&quot; + publicId + &quot;.jpg&quot;;&#10;        Log.d(TAG, &quot;Generated thumbnail URL: &quot; + thumbnailUrl);&#10;        return thumbnailUrl;&#10;    }&#10;    &#10;    /**&#10;     * Tạo URL video với quality optimization cho mobile&#10;     * @param publicId Public ID của video trên Cloudinary&#10;     * @param quality Quality level (auto:low, auto:good, auto:best)&#10;     * @return URL video được optimize&#10;     */&#10;    public static String getOptimizedVideoUrl(String publicId, String quality) {&#10;        if (publicId == null || publicId.trim().isEmpty()) {&#10;            Log.w(TAG, &quot;Public ID is null or empty for optimized video&quot;);&#10;            return &quot;&quot;;&#10;        }&#10;        &#10;        if (quality == null || quality.trim().isEmpty()) {&#10;            quality = &quot;auto:good&quot;; // Default quality&#10;        }&#10;        &#10;        // Format với quality optimization: &#10;        // https://res.cloudinary.com/YOUR_CLOUD_NAME/video/upload/q_auto:good,w_720,h_1280/folder/video_name.mp4&#10;        String optimizedUrl = CLOUDINARY_BASE_URL + VIDEO_PATH + &quot;/q_&quot; + quality + &quot;,w_720,h_1280/&quot; + publicId;&#10;        Log.d(TAG, &quot;Generated optimized video URL: &quot; + optimizedUrl);&#10;        return optimizedUrl;&#10;    }&#10;    &#10;    /**&#10;     * Kiểm tra xem URL có phải là Cloudinary video URL không&#10;     * @param url URL cần kiểm tra&#10;     * @return true nếu là Cloudinary URL&#10;     */&#10;    public static boolean isCloudinaryVideoUrl(String url) {&#10;        return url != null &amp;&amp; url.contains(&quot;cloudinary.com&quot;) &amp;&amp; url.contains(&quot;/video/upload/&quot;);&#10;    }&#10;    &#10;    /**&#10;     * Trích xuất public ID từ Cloudinary URL&#10;     * @param cloudinaryUrl URL Cloudinary&#10;     * @return Public ID của video&#10;     */&#10;    public static String extractPublicIdFromUrl(String cloudinaryUrl) {&#10;        if (!isCloudinaryVideoUrl(cloudinaryUrl)) {&#10;            Log.w(TAG, &quot;Not a valid Cloudinary video URL: &quot; + cloudinaryUrl);&#10;            return &quot;&quot;;&#10;        }&#10;        &#10;        try {&#10;            // Tìm vị trí của &quot;/video/upload/&quot; và lấy phần sau đó&#10;            String marker = &quot;/video/upload/&quot;;&#10;            int startIndex = cloudinaryUrl.indexOf(marker);&#10;            if (startIndex != -1) {&#10;                String afterMarker = cloudinaryUrl.substring(startIndex + marker.length());&#10;                &#10;                // Loại bỏ các transformations nếu có (ví dụ: q_auto:good,w_720,h_1280/)&#10;                if (afterMarker.contains(&quot;/&quot;)) {&#10;                    String[] parts = afterMarker.split(&quot;/&quot;);&#10;                    // Lấy phần cuối cùng (public ID)&#10;                    return parts[parts.length - 1].replace(&quot;.mp4&quot;, &quot;&quot;).replace(&quot;.mov&quot;, &quot;&quot;);&#10;                } else {&#10;                    return afterMarker.replace(&quot;.mp4&quot;, &quot;&quot;).replace(&quot;.mov&quot;, &quot;&quot;);&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Error extracting public ID from URL: &quot; + e.getMessage());&#10;        }&#10;        &#10;        return &quot;&quot;;&#10;    }&#10;    &#10;    /**&#10;     * Cập nhật cloud name (gọi khi khởi tạo app hoặc khi có thay đổi config)&#10;     * @param cloudName Tên cloud của bạn trên Cloudinary&#10;     */&#10;    public static void updateCloudName(String cloudName) {&#10;        // Trong thực tế, bạn có thể lưu vào SharedPreferences hoặc config file&#10;        Log.d(TAG, &quot;Cloud name updated to: &quot; + cloudName);&#10;        // Có thể implement cập nhật CLOUDINARY_BASE_URL ở đây&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.services;&#10;&#10;import android.util.Log;&#10;&#10;/**&#10; * Helper class để xử lý video URLs từ Cloudinary&#10; * Chỉ dùng để load video từ links có sẵn, không upload&#10; * Phù hợp với việc sử dụng Firebase Realtime Database để lưu metadata và Cloudinary URLs&#10; */&#10;public class CloudinaryVideoHelper {&#10;    private static final String TAG = &quot;CloudinaryVideoHelper&quot;;&#10;    &#10;    /**&#10;     * Tạo URL video được tối ưu cho mobile từ URL gốc&#10;     * @param originalUrl URL gốc của video từ Cloudinary&#10;     * @param quality Quality level (auto:low, auto:good, auto:best)&#10;     * @return URL video được tối ưu cho mobile&#10;     */&#10;    public static String getOptimizedVideoUrl(String originalUrl, String quality) {&#10;        if (originalUrl == null || originalUrl.trim().isEmpty()) {&#10;            Log.w(TAG, &quot;URL gốc null hoặc rỗng&quot;);&#10;            return &quot;&quot;;&#10;        }&#10;        &#10;        if (!isCloudinaryVideoUrl(originalUrl)) {&#10;            Log.d(TAG, &quot;Không phải URL Cloudinary, trả về URL gốc: &quot; + originalUrl);&#10;            return originalUrl;&#10;        }&#10;        &#10;        if (quality == null || quality.trim().isEmpty()) {&#10;            quality = &quot;auto:good&quot;; // Chất lượng mặc định&#10;        }&#10;        &#10;        try {&#10;            // Tìm vị trí của &quot;/upload/&quot; để chèn transformations&#10;            String uploadMarker = &quot;/upload/&quot;;&#10;            int uploadIndex = originalUrl.indexOf(uploadMarker);&#10;            &#10;            if (uploadIndex != -1) {&#10;                String beforeUpload = originalUrl.substring(0, uploadIndex + uploadMarker.length());&#10;                String afterUpload = originalUrl.substring(uploadIndex + uploadMarker.length());&#10;                &#10;                // Loại bỏ transformations cũ nếu có (bắt đầu bằng v_... hoặc q_... etc.)&#10;                if (afterUpload.matches(&quot;^[a-z]_.*&quot;)) {&#10;                    // Tìm dấu &quot;/&quot; đầu tiên sau transformations để lấy public ID&#10;                    int firstSlash = afterUpload.indexOf('/');&#10;                    if (firstSlash != -1) {&#10;                        afterUpload = afterUpload.substring(firstSlash + 1);&#10;                    }&#10;                }&#10;                &#10;                // Tạo URL với optimization cho mobile&#10;                String optimizedUrl = beforeUpload + &quot;q_&quot; + quality + &quot;,w_720,h_1280,c_fill/&quot; + afterUpload;&#10;                Log.d(TAG, &quot;URL được tối ưu: &quot; + optimizedUrl);&#10;                return optimizedUrl;&#10;            }&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Lỗi khi tối ưu URL: &quot; + e.getMessage());&#10;        }&#10;        &#10;        return originalUrl; // Trả về URL gốc nếu có lỗi&#10;    }&#10;    &#10;    /**&#10;     * Tạo URL thumbnail từ URL video Cloudinary&#10;     * @param videoUrl URL video gốc&#10;     * @return URL thumbnail được tạo từ video&#10;     */&#10;    public static String getThumbnailFromVideoUrl(String videoUrl) {&#10;        if (videoUrl == null || videoUrl.trim().isEmpty()) {&#10;            Log.w(TAG, &quot;Video URL null hoặc rỗng cho thumbnail&quot;);&#10;            return &quot;&quot;;&#10;        }&#10;        &#10;        if (!isCloudinaryVideoUrl(videoUrl)) {&#10;            Log.d(TAG, &quot;Không phải URL Cloudinary video, không thể tạo thumbnail&quot;);&#10;            return &quot;&quot;;&#10;        }&#10;        &#10;        try {&#10;            // Thay đổi resource type từ video sang image và thêm transformations&#10;            String thumbnailUrl = videoUrl.replace(&quot;/video/upload/&quot;, &quot;/video/upload/w_480,h_854,c_fill,f_jpg/&quot;)&#10;                                           .replaceAll(&quot;\\.(mp4|mov|avi)$&quot;, &quot;.jpg&quot;);&#10;            &#10;            Log.d(TAG, &quot;URL thumbnail được tạo: &quot; + thumbnailUrl);&#10;            return thumbnailUrl;&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Lỗi khi tạo thumbnail URL: &quot; + e.getMessage());&#10;            return &quot;&quot;;&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Kiểm tra xem URL có phải là Cloudinary video URL không&#10;     * @param url URL cần kiểm tra&#10;     * @return true nếu là Cloudinary video URL&#10;     */&#10;    public static boolean isCloudinaryVideoUrl(String url) {&#10;        return url != null &amp;&amp; &#10;               url.contains(&quot;cloudinary.com&quot;) &amp;&amp; &#10;               url.contains(&quot;/video/upload/&quot;);&#10;    }&#10;    &#10;    /**&#10;     * Kiểm tra xem URL có phải là Cloudinary image URL không&#10;     * @param url URL cần kiểm tra&#10;     * @return true nếu là Cloudinary image URL&#10;     */&#10;    public static boolean isCloudinaryImageUrl(String url) {&#10;        return url != null &amp;&amp; &#10;               url.contains(&quot;cloudinary.com&quot;) &amp;&amp; &#10;               url.contains(&quot;/image/upload/&quot;);&#10;    }&#10;    &#10;    /**&#10;     * Lấy URL với chất lượng thấp cho preview hoặc loading nhanh&#10;     * @param originalUrl URL gốc&#10;     * @return URL với chất lượng thấp&#10;     */&#10;    public static String getLowQualityUrl(String originalUrl) {&#10;        return getOptimizedVideoUrl(originalUrl, &quot;auto:low&quot;);&#10;    }&#10;    &#10;    /**&#10;     * Lấy URL với chất lượng cao&#10;     * @param originalUrl URL gốc&#10;     * @return URL với chất lượng cao&#10;     */&#10;    public static String getHighQualityUrl(String originalUrl) {&#10;        return getOptimizedVideoUrl(originalUrl, &quot;auto:best&quot;);&#10;    }&#10;    &#10;    /**&#10;     * Tạo URL video responsive dựa trên kích thước màn hình&#10;     * @param originalUrl URL gốc&#10;     * @param screenWidth Chiều rộng màn hình (px)&#10;     * @param screenHeight Chiều cao màn hình (px)&#10;     * @return URL video phù hợp với màn hình&#10;     */&#10;    public static String getResponsiveVideoUrl(String originalUrl, int screenWidth, int screenHeight) {&#10;        if (originalUrl == null || originalUrl.trim().isEmpty()) {&#10;            return &quot;&quot;;&#10;        }&#10;        &#10;        if (!isCloudinaryVideoUrl(originalUrl)) {&#10;            return originalUrl;&#10;        }&#10;        &#10;        try {&#10;            String uploadMarker = &quot;/upload/&quot;;&#10;            int uploadIndex = originalUrl.indexOf(uploadMarker);&#10;            &#10;            if (uploadIndex != -1) {&#10;                String beforeUpload = originalUrl.substring(0, uploadIndex + uploadMarker.length());&#10;                String afterUpload = originalUrl.substring(uploadIndex + uploadMarker.length());&#10;                &#10;                // Loại bỏ transformations cũ&#10;                if (afterUpload.matches(&quot;^[a-z]_.*&quot;)) {&#10;                    int firstSlash = afterUpload.indexOf('/');&#10;                    if (firstSlash != -1) {&#10;                        afterUpload = afterUpload.substring(firstSlash + 1);&#10;                    }&#10;                }&#10;                &#10;                // Tính toán kích thước phù hợp (giới hạn tối đa để tiết kiệm bandwidth)&#10;                int maxWidth = Math.min(screenWidth, 1080);&#10;                int maxHeight = Math.min(screenHeight, 1920);&#10;                &#10;                String responsiveUrl = beforeUpload + &#10;                    &quot;q_auto:good,w_&quot; + maxWidth + &quot;,h_&quot; + maxHeight + &quot;,c_fill/&quot; + afterUpload;&#10;                &#10;                Log.d(TAG, &quot;URL responsive: &quot; + responsiveUrl + &quot; (Màn hình: &quot; + screenWidth + &quot;x&quot; + screenHeight + &quot;)&quot;);&#10;                return responsiveUrl;&#10;            }&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Lỗi khi tạo responsive URL: &quot; + e.getMessage());&#10;        }&#10;        &#10;        return originalUrl;&#10;    }&#10;    &#10;    /**&#10;     * Kiểm tra tính hợp lệ của Cloudinary URL&#10;     * @param url URL cần kiểm tra&#10;     * @return true nếu URL hợp lệ và có thể truy cập được&#10;     */&#10;    public static boolean isValidCloudinaryUrl(String url) {&#10;        if (url == null || url.trim().isEmpty()) {&#10;            return false;&#10;        }&#10;        &#10;        // Kiểm tra format cơ bản&#10;        return (isCloudinaryVideoUrl(url) || isCloudinaryImageUrl(url)) &amp;&amp;&#10;               url.startsWith(&quot;https://&quot;) &amp;&amp;&#10;               !url.contains(&quot; &quot;) &amp;&amp; // Không có khoảng trắng&#10;               url.length() &gt; 50; // Độ dài tối thiểu hợp lý&#10;    }&#10;    &#10;    /**&#10;     * Log thông tin debug về URL Cloudinary&#10;     * @param url URL cần debug&#10;     * @param context Ngữ cảnh sử dụng&#10;     */&#10;    public static void debugUrl(String url, String context) {&#10;        Log.d(TAG, &quot;=== DEBUG URL ===&quot;);&#10;        Log.d(TAG, &quot;Context: &quot; + context);&#10;        Log.d(TAG, &quot;URL: &quot; + url);&#10;        Log.d(TAG, &quot;Is Cloudinary Video: &quot; + isCloudinaryVideoUrl(url));&#10;        Log.d(TAG, &quot;Is Cloudinary Image: &quot; + isCloudinaryImageUrl(url));&#10;        Log.d(TAG, &quot;Is Valid: &quot; + isValidCloudinaryUrl(url));&#10;        Log.d(TAG, &quot;================&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/services/CloudinaryVideoUploadService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/services/CloudinaryVideoUploadService.java" />
              <option name="updatedContent" value="package com.vhn.doan.services;&#10;&#10;import android.content.Context;&#10;import android.net.Uri;&#10;import android.util.Log;&#10;&#10;/**&#10; * Implementation của VideoUploadService sử dụng Cloudinary&#10; * Thay thế Firebase Storage cho việc upload video&#10; */&#10;public class CloudinaryVideoUploadService implements VideoUploadService {&#10;    private static final String TAG = &quot;CloudinaryVideoUpload&quot;;&#10;    private Context context;&#10;    private CloudinaryManager cloudinaryManager;&#10;&#10;    public CloudinaryVideoUploadService(Context context) {&#10;        this.context = context;&#10;        this.cloudinaryManager = CloudinaryManager.getInstance();&#10;    }&#10;&#10;    @Override&#10;    public void uploadVideo(Uri videoUri, String title, VideoUploadCallback callback) {&#10;        Log.d(TAG, &quot;Bắt đầu upload video: &quot; + title);&#10;        callback.onUploadStart();&#10;&#10;        cloudinaryManager.uploadVideo(context, videoUri, title, new CloudinaryManager.CloudinaryUploadCallback() {&#10;            @Override&#10;            public void onSuccess(String publicId, String videoUrl, String thumbnailUrl) {&#10;                Log.d(TAG, &quot;Upload video thành công - PublicId: &quot; + publicId);&#10;                callback.onUploadSuccess(videoUrl, thumbnailUrl, publicId);&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                Log.e(TAG, &quot;Lỗi upload video: &quot; + error);&#10;                callback.onUploadError(error);&#10;            }&#10;&#10;            @Override&#10;            public void onProgress(int progress) {&#10;                Log.d(TAG, &quot;Tiến trình upload: &quot; + progress + &quot;%&quot;);&#10;                callback.onUploadProgress(progress);&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void deleteVideo(String publicId, VideoUploadCallback callback) {&#10;        Log.d(TAG, &quot;Bắt đầu xóa video: &quot; + publicId);&#10;        &#10;        cloudinaryManager.deleteVideo(publicId, new CloudinaryManager.CloudinaryUploadCallback() {&#10;            @Override&#10;            public void onSuccess(String publicId, String videoUrl, String thumbnailUrl) {&#10;                Log.d(TAG, &quot;Xóa video thành công: &quot; + publicId);&#10;                callback.onUploadSuccess(&quot;&quot;, &quot;&quot;, publicId);&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                Log.e(TAG, &quot;Lỗi xóa video: &quot; + error);&#10;                callback.onUploadError(error);&#10;            }&#10;&#10;            @Override&#10;            public void onProgress(int progress) {&#10;                // Không cần progress cho delete&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void checkVideoExists(String publicId, VideoUploadCallback callback) {&#10;        Log.d(TAG, &quot;Kiểm tra video tồn tại: &quot; + publicId);&#10;        &#10;        cloudinaryManager.getVideoInfo(publicId, new CloudinaryManager.CloudinaryUploadCallback() {&#10;            @Override&#10;            public void onSuccess(String publicId, String videoUrl, String thumbnailUrl) {&#10;                Log.d(TAG, &quot;Video tồn tại: &quot; + publicId);&#10;                callback.onUploadSuccess(videoUrl, thumbnailUrl, publicId);&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                Log.e(TAG, &quot;Video không tồn tại hoặc lỗi: &quot; + error);&#10;                callback.onUploadError(error);&#10;            }&#10;&#10;            @Override&#10;            public void onProgress(int progress) {&#10;                // Không cần progress cho check&#10;            }&#10;        });&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/services/VideoUploadService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/services/VideoUploadService.java" />
              <option name="updatedContent" value="package com.vhn.doan.services;&#10;&#10;import android.net.Uri;&#10;&#10;/**&#10; * Interface cho service upload video&#10; * Định nghĩa các phương thức cần thiết cho việc upload video&#10; */&#10;public interface VideoUploadService {&#10;    &#10;    /**&#10;     * Callback interface cho upload video&#10;     */&#10;    interface VideoUploadCallback {&#10;        void onUploadStart();&#10;        void onUploadProgress(int progress);&#10;        void onUploadSuccess(String videoUrl, String thumbnailUrl, String publicId);&#10;        void onUploadError(String error);&#10;    }&#10;&#10;    /**&#10;     * Upload video lên cloud storage&#10;     * @param videoUri URI của video cần upload&#10;     * @param title Tiêu đề video&#10;     * @param callback Callback để nhận kết quả&#10;     */&#10;    void uploadVideo(Uri videoUri, String title, VideoUploadCallback callback);&#10;&#10;    /**&#10;     * Xóa video từ cloud storage&#10;     * @param publicId ID của video trên cloud&#10;     * @param callback Callback để nhận kết quả&#10;     */&#10;    void deleteVideo(String publicId, VideoUploadCallback callback);&#10;&#10;    /**&#10;     * Kiểm tra video có tồn tại không&#10;     * @param publicId ID của video trên cloud&#10;     * @param callback Callback để nhận kết quả&#10;     */&#10;    void checkVideoExists(String publicId, VideoUploadCallback callback);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/utils/FirebaseTestDataUploader.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/utils/FirebaseTestDataUploader.java" />
              <option name="updatedContent" value="package com.vhn.doan.utils;&#10;&#10;import com.google.firebase.database.DatabaseReference;&#10;import com.google.firebase.database.FirebaseDatabase;&#10;import com.vhn.doan.data.model.ShortVideoModel;&#10;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;/**&#10; * Utility class để upload dữ liệu test lên Firebase&#10; * CHỈ SỬ DỤNG CHO TESTING - XÓA SAU KHI HOÀN THÀNH&#10; */&#10;public class FirebaseTestDataUploader {&#10;&#10;    private static final String FIREBASE_URL = &quot;https://reminderwater-84694-default-rtdb.firebaseio.com/&quot;;&#10;&#10;    /**&#10;     * Upload dữ liệu video test lên Firebase&#10;     * GỌI METHOD NÀY MỘT LẦN DUY NHẤT để upload dữ liệu test&#10;     */&#10;    public static void uploadTestVideoData() {&#10;        FirebaseDatabase database = FirebaseDatabase.getInstance(FIREBASE_URL);&#10;        DatabaseReference videosRef = database.getReference(&quot;videos&quot;);&#10;&#10;        // Tạo dữ liệu video test&#10;        Map&lt;String, ShortVideoModel&gt; videosData = createTestVideoData();&#10;&#10;        // Upload lên Firebase&#10;        videosRef.setValue(videosData)&#10;                .addOnSuccessListener(aVoid -&gt; {&#10;                    android.util.Log.d(&quot;FirebaseUploader&quot;, &quot;✅ Upload video data thành công!&quot;);&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    android.util.Log.e(&quot;FirebaseUploader&quot;, &quot;❌ Lỗi upload video data: &quot; + e.getMessage());&#10;                });&#10;    }&#10;&#10;    /**&#10;     * Tạo dữ liệu video test giống như trong firebase_test_data.json&#10;     */&#10;    private static Map&lt;String, ShortVideoModel&gt; createTestVideoData() {&#10;        Map&lt;String, ShortVideoModel&gt; videos = new HashMap&lt;&gt;();&#10;&#10;        // Video 001&#10;        ShortVideoModel video001 = new ShortVideoModel();&#10;        video001.setTitle(&quot;10 Bài tập cardio đốt cháy mỡ bụng hiệu quả&quot;);&#10;        video001.setCaption(&quot;Hướng dẫn 10 bài tập cardio đơn giản giúp đốt cháy mỡ bụng tại nhà, phù hợp cho người mới bắt đầu. Thực hiện 15-20 phút mỗi ngày để có hiệu quả tốt nhất.&quot;);&#10;        video001.setUploadDate(1733472000000L);&#10;        video001.setVideoUrl(&quot;https://firebasestorage.googleapis.com/v0/b/reminderwater-84694.appspot.com/o/video%2F247419804982081.mp4?alt=media&amp;token=4204f472-b1f2-4110-9b0f-ed0e2cfcede2&quot;);&#10;        video001.setThumbnailUrl(&quot;https://firebasestorage.googleapis.com/v0/b/reminderwater-84694.appspot.com/o/image%2Fretouch_2024050322414530.jpg?alt=media&amp;token=8a0f4e12-8116-4633-96f1-a1997720f2ea&quot;);&#10;        video001.setCategoryId(&quot;cat002&quot;);&#10;        Map&lt;String, Boolean&gt; tags001 = new HashMap&lt;&gt;();&#10;        tags001.put(&quot;giamcan&quot;, true);&#10;        tags001.put(&quot;tapluyen&quot;, true);&#10;        tags001.put(&quot;cardio&quot;, true);&#10;        tags001.put(&quot;tainhanewbie&quot;, true);&#10;        video001.setTags(tags001);&#10;        video001.setViewCount(2840L);&#10;        video001.setLikeCount(187L);&#10;        video001.setUserId(&quot;user001&quot;);&#10;        videos.put(&quot;video001&quot;, video001);&#10;&#10;        // Video 002&#10;        ShortVideoModel video002 = new ShortVideoModel();&#10;        video002.setTitle(&quot;Yoga buổi sáng 15 phút cho năng lượng cả ngày&quot;);&#10;        video002.setCaption(&quot;Bài tập yoga nhẹ nhàng giúp khởi động cơ thể, giải tỏa căng thẳng và tạo năng lượng tích cực cho ngày mới. Phù hợp cho mọi độ tuổi.&quot;);&#10;        video002.setUploadDate(1733385600000L);&#10;        video002.setVideoUrl(&quot;https://firebasestorage.googleapis.com/v0/b/reminderwater-84694.appspot.com/o/video%2F247419804982081.mp4?alt=media&amp;token=4204f472-b1f2-4110-9b0f-ed0e2cfcede2&quot;);&#10;        video002.setThumbnailUrl(&quot;https://firebasestorage.googleapis.com/v0/b/reminderwater-84694.appspot.com/o/image%2Fretouch_2024050322414530.jpg?alt=media&amp;token=8a0f4e12-8116-4633-96f1-a1997720f2ea&quot;);&#10;        video002.setCategoryId(&quot;cat004&quot;);&#10;        Map&lt;String, Boolean&gt; tags002 = new HashMap&lt;&gt;();&#10;        tags002.put(&quot;yoga&quot;, true);&#10;        tags002.put(&quot;thientanh&quot;, true);&#10;        tags002.put(&quot;buoisang&quot;, true);&#10;        tags002.put(&quot;suckhoetirithan&quot;, true);&#10;        video002.setTags(tags002);&#10;        video002.setViewCount(1956L);&#10;        video002.setLikeCount(143L);&#10;        video002.setUserId(&quot;user002&quot;);&#10;        videos.put(&quot;video002&quot;, video002);&#10;&#10;        // Video 003&#10;        ShortVideoModel video003 = new ShortVideoModel();&#10;        video003.setTitle(&quot;Cách pha nước detox giảm cân từ chanh và mật ong&quot;);&#10;        video003.setCaption(&quot;Công thức đơn giản pha nước detox giúp thanh lọc cơ thể, tăng cường trao đổi chất và hỗ trợ giảm cân hiệu quả. Nguyên liệu dễ tìm tại nhà.&quot;);&#10;        video003.setUploadDate(1733299200000L);&#10;        video003.setVideoUrl(&quot;https://firebasestorage.googleapis.com/v0/b/reminderwater-84694.appspot.com/o/video%2F247419804982081.mp4?alt=media&amp;token=4204f472-b1f2-4110-9b0f-ed0e2cfcede2&quot;);&#10;        video003.setThumbnailUrl(&quot;https://firebasestorage.googleapis.com/v0/b/reminderwater-84694.appspot.com/o/image%2Fretouch_2024050322414530.jpg?alt=media&amp;token=8a0f4e12-8116-4633-96f1-a1997720f2ea&quot;);&#10;        video003.setCategoryId(&quot;cat001&quot;);&#10;        Map&lt;String, Boolean&gt; tags003 = new HashMap&lt;&gt;();&#10;        tags003.put(&quot;detox&quot;, true);&#10;        tags003.put(&quot;giamcan&quot;, true);&#10;        tags003.put(&quot;dinhdong&quot;, true);&#10;        tags003.put(&quot;chanh&quot;, true);&#10;        tags003.put(&quot;matong&quot;, true);&#10;        video003.setTags(tags003);&#10;        video003.setViewCount(3214L);&#10;        video003.setLikeCount(298L);&#10;        video003.setUserId(&quot;user003&quot;);&#10;        videos.put(&quot;video003&quot;, video003);&#10;&#10;        // Video 004&#10;        ShortVideoModel video004 = new ShortVideoModel();&#10;        video004.setTitle(&quot;5 Phút massage giảm đau vai gáy hiệu quả&quot;);&#10;        video004.setCaption(&quot;Hướng dẫn massage tự thực hiện tại nhà để giải tỏa đau mỏi vai gáy cho dân văn phòng. Chỉ cần 5 phút mỗi ngày để cải thiện tình trạng.&quot;);&#10;        video004.setUploadDate(1733212800000L);&#10;        video004.setVideoUrl(&quot;https://firebasestorage.googleapis.com/v0/b/reminderwater-84694.appspot.com/o/video%2F247419804982081.mp4?alt=media&amp;token=4204f472-b1f2-4110-9b0f-ed0e2cfcede2&quot;);&#10;        video004.setThumbnailUrl(&quot;https://firebasestorage.googleapis.com/v0/b/reminderwater-84694.appspot.com/o/image%2Fretouch_2024050322414530.jpg?alt=media&amp;token=8a0f4e12-8116-4633-96f1-a1997720f2ea&quot;);&#10;        video004.setCategoryId(&quot;cat004&quot;);&#10;        Map&lt;String, Boolean&gt; tags004 = new HashMap&lt;&gt;();&#10;        tags004.put(&quot;massage&quot;, true);&#10;        tags004.put(&quot;vaigay&quot;, true);&#10;        tags004.put(&quot;danvanphong&quot;, true);&#10;        tags004.put(&quot;giamdau&quot;, true);&#10;        video004.setTags(tags004);&#10;        video004.setViewCount(1687L);&#10;        video004.setLikeCount(124L);&#10;        video004.setUserId(&quot;user001&quot;);&#10;        videos.put(&quot;video004&quot;, video004);&#10;&#10;        // Video 005&#10;        ShortVideoModel video005 = new ShortVideoModel();&#10;        video005.setTitle(&quot;Thực đơn eat clean 7 ngày cho người bận rộn&quot;);&#10;        video005.setCaption(&quot;Menu ăn sạch 7 ngày với các món ăn đơn giản, dễ làm phù hợp cho người bận rộn. Đầy đủ dinh dưỡng và hỗ trợ giảm cân hiệu quả.&quot;);&#10;        video005.setUploadDate(1733126400000L);&#10;        video005.setVideoUrl(&quot;https://firebasestorage.googleapis.com/v0/b/reminderwater-84694.appspot.com/o/video%2F247419804982081.mp4?alt=media&amp;token=4204f472-b1f2-4110-9b0f-ed0e2cfcede2&quot;);&#10;        video005.setThumbnailUrl(&quot;https://firebasestorage.googleapis.com/v0/b/reminderwater-84694.appspot.com/o/image%2Fretouch_2024050322414530.jpg?alt=media&amp;token=8a0f4e12-8116-4633-96f1-a1997720f2ea&quot;);&#10;        video005.setCategoryId(&quot;cat001&quot;);&#10;        Map&lt;String, Boolean&gt; tags005 = new HashMap&lt;&gt;();&#10;        tags005.put(&quot;eatclean&quot;, true);&#10;        tags005.put(&quot;thucdon&quot;, true);&#10;        tags005.put(&quot;dinhdong&quot;, true);&#10;        tags005.put(&quot;giamcan&quot;, true);&#10;        tags005.put(&quot;banron&quot;, true);&#10;        video005.setTags(tags005);&#10;        video005.setViewCount(4521L);&#10;        video005.setLikeCount(378L);&#10;        video005.setUserId(&quot;user004&quot;);&#10;        videos.put(&quot;video005&quot;, video005);&#10;&#10;        return videos;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/utils/FormatUtils.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/utils/FormatUtils.java" />
              <option name="updatedContent" value="package com.vhn.doan.utils;&#10;&#10;import android.content.Context;&#10;import com.vhn.doan.R;&#10;&#10;import java.text.NumberFormat;&#10;import java.util.Locale;&#10;&#10;public class FormatUtils {&#10;&#10;    /**&#10;     * Format số lượng (view count, like count) thành định dạng ngắn gọn&#10;     * Ví dụ: 1200 -&gt; 1.2K, 1500000 -&gt; 1.5M&#10;     */&#10;    public static String formatCount(int count) {&#10;        if (count &lt; 1000) {&#10;            return String.valueOf(count);&#10;        } else if (count &lt; 1000000) {&#10;            if (count % 1000 == 0) {&#10;                return (count / 1000) + &quot;K&quot;;&#10;            } else {&#10;                return String.format(Locale.getDefault(), &quot;%.1fK&quot;, count / 1000.0);&#10;            }&#10;        } else if (count &lt; 1000000000) {&#10;            if (count % 1000000 == 0) {&#10;                return (count / 1000000) + &quot;M&quot;;&#10;            } else {&#10;                return String.format(Locale.getDefault(), &quot;%.1fM&quot;, count / 1000000.0);&#10;            }&#10;        } else {&#10;            if (count % 1000000000 == 0) {&#10;                return (count / 1000000000) + &quot;B&quot;;&#10;            } else {&#10;                return String.format(Locale.getDefault(), &quot;%.1fB&quot;, count / 1000000000.0);&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Format thời gian upload thành chuỗi &quot;x ngày trước&quot;, &quot;x giờ trước&quot;, v.v&#10;     */&#10;    public static String formatTimeAgo(Context context, long timestamp) {&#10;        long currentTime = System.currentTimeMillis();&#10;        long timeDiff = currentTime - timestamp;&#10;&#10;        // Chuyển đổi thành giây&#10;        long seconds = timeDiff / 1000;&#10;        &#10;        if (seconds &lt; 60) {&#10;            return context.getString(R.string.just_now);&#10;        }&#10;&#10;        // Chuyển đổi thành phút&#10;        long minutes = seconds / 60;&#10;        if (minutes &lt; 60) {&#10;            return context.getString(R.string.minutes_ago, (int) minutes);&#10;        }&#10;&#10;        // Chuyển đổi thành giờ&#10;        long hours = minutes / 60;&#10;        if (hours &lt; 24) {&#10;            return context.getString(R.string.hours_ago, (int) hours);&#10;        }&#10;&#10;        // Chuyển đổi thành ngày&#10;        long days = hours / 24;&#10;        if (days &lt; 30) {&#10;            return context.getString(R.string.days_ago, (int) days);&#10;        }&#10;&#10;        // Nếu quá 30 ngày, hiển thị số tháng&#10;        long months = days / 30;&#10;        if (months &lt; 12) {&#10;            return months + &quot; tháng trước&quot;;&#10;        }&#10;&#10;        // Nếu quá 12 tháng, hiển thị số năm&#10;        long years = months / 12;&#10;        return years + &quot; năm trước&quot;;&#10;    }&#10;&#10;    /**&#10;     * Format thời lượng video từ milliseconds thành định dạng mm:ss hoặc hh:mm:ss&#10;     */&#10;    public static String formatVideoDuration(long durationMs) {&#10;        long seconds = durationMs / 1000;&#10;        long minutes = seconds / 60;&#10;        long hours = minutes / 60;&#10;&#10;        seconds = seconds % 60;&#10;        minutes = minutes % 60;&#10;&#10;        if (hours &gt; 0) {&#10;            return String.format(Locale.getDefault(), &quot;%02d:%02d:%02d&quot;, hours, minutes, seconds);&#10;        } else {&#10;            return String.format(Locale.getDefault(), &quot;%02d:%02d&quot;, minutes, seconds);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Format số với định dạng địa phương (có dấu phẩy phân cách)&#10;     */&#10;    public static String formatNumber(int number) {&#10;        NumberFormat numberFormat = NumberFormat.getNumberInstance(Locale.getDefault());&#10;        return numberFormat.format(number);&#10;    }&#10;&#10;    /**&#10;     * Kiểm tra và trả về chuỗi an toàn (không null)&#10;     */&#10;    public static String getSafeString(String input) {&#10;        return input != null ? input : &quot;&quot;;&#10;    }&#10;&#10;    /**&#10;     * Cắt ngắn chuỗi nếu quá dài&#10;     */&#10;    public static String truncateString(String input, int maxLength) {&#10;        if (input == null) {&#10;            return &quot;&quot;;&#10;        }&#10;        &#10;        if (input.length() &lt;= maxLength) {&#10;            return input;&#10;        }&#10;        &#10;        return input.substring(0, maxLength - 3) + &quot;...&quot;;&#10;    }&#10;&#10;    /**&#10;     * Format file size thành định dạng dễ đọc&#10;     */&#10;    public static String formatFileSize(long bytes) {&#10;        if (bytes &lt; 1024) {&#10;            return bytes + &quot; B&quot;;&#10;        } else if (bytes &lt; 1024 * 1024) {&#10;            return String.format(Locale.getDefault(), &quot;%.1f KB&quot;, bytes / 1024.0);&#10;        } else if (bytes &lt; 1024 * 1024 * 1024) {&#10;            return String.format(Locale.getDefault(), &quot;%.1f MB&quot;, bytes / (1024.0 * 1024.0));&#10;        } else {&#10;            return String.format(Locale.getDefault(), &quot;%.1f GB&quot;, bytes / (1024.0 * 1024.0 * 1024.0));&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/utils/VideoRecommendationUtils.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/utils/VideoRecommendationUtils.java" />
              <option name="updatedContent" value="package com.vhn.doan.utils;&#10;&#10;import com.vhn.doan.data.model.ShortVideoModel;&#10;import com.vhn.doan.data.model.UserTopicModel;&#10;&#10;import java.util.ArrayList;&#10;import java.util.Collections;&#10;import java.util.Comparator;&#10;import java.util.HashMap;&#10;import java.util.HashSet;&#10;import java.util.List;&#10;import java.util.Map;&#10;import java.util.Set;&#10;&#10;/**&#10; * Utility class để xử lý logic đề xuất video cho người dùng&#10; * Dựa trên sở thích (preferences), chủ đề quan tâm (topics) và các yếu tố khác&#10; */&#10;public class VideoRecommendationUtils {&#10;&#10;    /**&#10;     * Hàm chính để đề xuất video cho người dùng&#10;     * &#10;     * @param allVideos Danh sách tất cả video có sẵn&#10;     * @param preferences Map sở thích từ /users/{userId}/preferences (key: topic, value: preference score 0.0-1.0)&#10;     * @param topics Map chủ đề từ /user_topics/{userId} (key: topic name, value: interaction count)&#10;     * @param limit Số lượng video tối đa cần lấy&#10;     * @return Danh sách video được đề xuất, đã sắp xếp theo độ ưu tiên&#10;     */&#10;    public static List&lt;ShortVideoModel&gt; recommendVideos(&#10;            List&lt;ShortVideoModel&gt; allVideos,&#10;            Map&lt;String, Float&gt; preferences,&#10;            Map&lt;String, Long&gt; topics,&#10;            int limit) {&#10;        &#10;        if (allVideos == null || allVideos.isEmpty() || limit &lt;= 0) {&#10;            return new ArrayList&lt;&gt;();&#10;        }&#10;&#10;        // Chuẩn hóa input parameters&#10;        Map&lt;String, Float&gt; userPreferences = preferences != null ? preferences : new HashMap&lt;&gt;();&#10;        Map&lt;String, Long&gt; userTopics = topics != null ? topics : new HashMap&lt;&gt;();&#10;&#10;        // Tạo set các tag từ preferences và topics đã chuẩn hóa&#10;        Set&lt;String&gt; userInterestTags = getUserInterestTags(userPreferences, userTopics);&#10;&#10;        List&lt;ShortVideoModel&gt; result = new ArrayList&lt;&gt;();&#10;        List&lt;ShortVideoModel&gt; remainingVideos = new ArrayList&lt;&gt;(allVideos);&#10;&#10;        // B1: Ưu tiên video có tag trùng với tag trong preferences hoặc topics&#10;        List&lt;ShortVideoModel&gt; matchingVideos = getVideosWithMatchingTags(remainingVideos, userInterestTags);&#10;        &#10;        // Sắp xếp video có tag trùng theo điểm ưu tiên&#10;        matchingVideos = sortVideosByPriority(matchingVideos, userPreferences, userTopics);&#10;        &#10;        // Thêm video matching vào kết quả&#10;        int addedCount = Math.min(matchingVideos.size(), limit);&#10;        result.addAll(matchingVideos.subList(0, addedCount));&#10;        &#10;        // Loại bỏ các video đã thêm khỏi danh sách còn lại&#10;        remainingVideos.removeAll(result);&#10;&#10;        // B2: Nếu chưa đủ số lượng, ưu tiên video có viewCount hoặc likeCount cao&#10;        if (result.size() &lt; limit &amp;&amp; !remainingVideos.isEmpty()) {&#10;            List&lt;ShortVideoModel&gt; popularVideos = sortVideosByPopularity(remainingVideos);&#10;            int needMore = limit - result.size();&#10;            int addMore = Math.min(popularVideos.size(), needMore);&#10;            result.addAll(popularVideos.subList(0, addMore));&#10;            &#10;            // Cập nhật danh sách còn lại&#10;            remainingVideos.removeAll(result.subList(result.size() - addMore, result.size()));&#10;        }&#10;&#10;        // B3: Nếu không đủ số lượng, bổ sung thêm video cùng categoryId&#10;        if (result.size() &lt; limit &amp;&amp; !remainingVideos.isEmpty()) {&#10;            List&lt;ShortVideoModel&gt; sameCategoryVideos = getVideosBySameCategory(remainingVideos, result);&#10;            sameCategoryVideos = sortVideosByPopularity(sameCategoryVideos);&#10;            &#10;            int needMore = limit - result.size();&#10;            int addMore = Math.min(sameCategoryVideos.size(), needMore);&#10;            result.addAll(sameCategoryVideos.subList(0, addMore));&#10;            &#10;            // Cập nhật danh sách còn lại&#10;            remainingVideos.removeAll(result.subList(result.size() - addMore, result.size()));&#10;        }&#10;&#10;        // B4: Nếu không có sở thích hoặc vẫn chưa đủ, trả về video trending&#10;        if (result.size() &lt; limit &amp;&amp; !remainingVideos.isEmpty()) {&#10;            List&lt;ShortVideoModel&gt; trendingVideos = getTrendingVideos(remainingVideos);&#10;            &#10;            int needMore = limit - result.size();&#10;            int addMore = Math.min(trendingVideos.size(), needMore);&#10;            result.addAll(trendingVideos.subList(0, addMore));&#10;        }&#10;&#10;        return result;&#10;    }&#10;&#10;    /**&#10;     * Tạo set các tag quan tâm từ preferences và topics&#10;     */&#10;    private static Set&lt;String&gt; getUserInterestTags(Map&lt;String, Float&gt; preferences, Map&lt;String, Long&gt; topics) {&#10;        Set&lt;String&gt; tags = new HashSet&lt;&gt;();&#10;        &#10;        // Thêm tags từ preferences (chỉ lấy những tag có điểm &gt; 0.3)&#10;        for (Map.Entry&lt;String, Float&gt; entry : preferences.entrySet()) {&#10;            if (entry.getValue() != null &amp;&amp; entry.getValue() &gt; 0.3f) {&#10;                String normalizedTag = UserTopicModel.normalizeTopicToTag(entry.getKey());&#10;                if (!normalizedTag.isEmpty()) {&#10;                    tags.add(normalizedTag);&#10;                }&#10;            }&#10;        }&#10;        &#10;        // Thêm tags từ topics (chỉ lấy những topic có tương tác &gt;= 3 lần)&#10;        for (Map.Entry&lt;String, Long&gt; entry : topics.entrySet()) {&#10;            if (entry.getValue() != null &amp;&amp; entry.getValue() &gt;= 3L) {&#10;                String normalizedTag = UserTopicModel.normalizeTopicToTag(entry.getKey());&#10;                if (!normalizedTag.isEmpty()) {&#10;                    tags.add(normalizedTag);&#10;                }&#10;            }&#10;        }&#10;        &#10;        return tags;&#10;    }&#10;&#10;    /**&#10;     * Lấy danh sách video có tag trùng với sở thích người dùng&#10;     */&#10;    private static List&lt;ShortVideoModel&gt; getVideosWithMatchingTags(&#10;            List&lt;ShortVideoModel&gt; videos, Set&lt;String&gt; userTags) {&#10;        &#10;        List&lt;ShortVideoModel&gt; matchingVideos = new ArrayList&lt;&gt;();&#10;        &#10;        for (ShortVideoModel video : videos) {&#10;            if (video.getTags() != null &amp;&amp; hasMatchingTag(video.getTags(), userTags)) {&#10;                matchingVideos.add(video);&#10;            }&#10;        }&#10;        &#10;        return matchingVideos;&#10;    }&#10;&#10;    /**&#10;     * Kiểm tra xem video có tag trùng với sở thích người dùng không&#10;     */&#10;    private static boolean hasMatchingTag(Map&lt;String, Boolean&gt; videoTags, Set&lt;String&gt; userTags) {&#10;        for (Map.Entry&lt;String, Boolean&gt; entry : videoTags.entrySet()) {&#10;            if (Boolean.TRUE.equals(entry.getValue())) {&#10;                String normalizedTag = UserTopicModel.normalizeTopicToTag(entry.getKey());&#10;                if (userTags.contains(normalizedTag)) {&#10;                    return true;&#10;                }&#10;            }&#10;        }&#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Sắp xếp video theo độ ưu tiên dựa trên preferences và topics&#10;     */&#10;    private static List&lt;ShortVideoModel&gt; sortVideosByPriority(&#10;            List&lt;ShortVideoModel&gt; videos,&#10;            Map&lt;String, Float&gt; preferences,&#10;            Map&lt;String, Long&gt; topics) {&#10;        &#10;        List&lt;ShortVideoModel&gt; sortedVideos = new ArrayList&lt;&gt;(videos);&#10;        &#10;        Collections.sort(sortedVideos, new Comparator&lt;ShortVideoModel&gt;() {&#10;            @Override&#10;            public int compare(ShortVideoModel v1, ShortVideoModel v2) {&#10;                // Tính điểm ưu tiên cho từng video&#10;                double score1 = calculatePriorityScore(v1, preferences, topics);&#10;                double score2 = calculatePriorityScore(v2, preferences, topics);&#10;                &#10;                // Sắp xếp giảm dần theo điểm&#10;                return Double.compare(score2, score1);&#10;            }&#10;        });&#10;        &#10;        return sortedVideos;&#10;    }&#10;&#10;    /**&#10;     * Tính điểm ưu tiên cho video dựa trên preferences và topics&#10;     */&#10;    private static double calculatePriorityScore(&#10;            ShortVideoModel video,&#10;            Map&lt;String, Float&gt; preferences,&#10;            Map&lt;String, Long&gt; topics) {&#10;        &#10;        double score = 0.0;&#10;        &#10;        if (video.getTags() != null) {&#10;            for (Map.Entry&lt;String, Boolean&gt; tagEntry : video.getTags().entrySet()) {&#10;                if (Boolean.TRUE.equals(tagEntry.getValue())) {&#10;                    String tag = tagEntry.getKey();&#10;                    String normalizedTag = UserTopicModel.normalizeTopicToTag(tag);&#10;                    &#10;                    // Điểm từ preferences (trọng số 0.7)&#10;                    Float prefScore = preferences.get(tag);&#10;                    if (prefScore != null) {&#10;                        score += prefScore * 0.7;&#10;                    }&#10;                    &#10;                    // Điểm từ topics (trọng số 0.3, chuẩn hóa theo log)&#10;                    for (Map.Entry&lt;String, Long&gt; topicEntry : topics.entrySet()) {&#10;                        String topicNormalized = UserTopicModel.normalizeTopicToTag(topicEntry.getKey());&#10;                        if (normalizedTag.equals(topicNormalized)) {&#10;                            Long count = topicEntry.getValue();&#10;                            if (count != null &amp;&amp; count &gt; 0) {&#10;                                // Sử dụng log để giảm ảnh hưởng của số lần tương tác quá lớn&#10;                                double topicScore = Math.log(count + 1) / Math.log(100); // Chuẩn hóa về 0-1&#10;                                score += Math.min(topicScore, 1.0) * 0.3;&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        &#10;        // Thêm điểm bonus nhỏ cho video có popularity cao&#10;        long viewCount = video.getViewCount() != null ? video.getViewCount() : 0L;&#10;        long likeCount = video.getLikeCount() != null ? video.getLikeCount() : 0L;&#10;        double popularityBonus = Math.log(viewCount + likeCount + 1) / Math.log(10000); // Bonus nhỏ&#10;        score += Math.min(popularityBonus, 0.2); // Tối đa 0.2 điểm bonus&#10;        &#10;        return score;&#10;    }&#10;&#10;    /**&#10;     * Sắp xếp video theo độ phổ biến (viewCount + likeCount)&#10;     */&#10;    private static List&lt;ShortVideoModel&gt; sortVideosByPopularity(List&lt;ShortVideoModel&gt; videos) {&#10;        List&lt;ShortVideoModel&gt; sortedVideos = new ArrayList&lt;&gt;(videos);&#10;        &#10;        Collections.sort(sortedVideos, new Comparator&lt;ShortVideoModel&gt;() {&#10;            @Override&#10;            public int compare(ShortVideoModel v1, ShortVideoModel v2) {&#10;                long popularity1 = getVideoPopularity(v1);&#10;                long popularity2 = getVideoPopularity(v2);&#10;                return Long.compare(popularity2, popularity1); // Sắp xếp giảm dần&#10;            }&#10;        });&#10;        &#10;        return sortedVideos;&#10;    }&#10;&#10;    /**&#10;     * Tính độ phổ biến của video&#10;     */&#10;    private static long getVideoPopularity(ShortVideoModel video) {&#10;        long viewCount = video.getViewCount() != null ? video.getViewCount() : 0L;&#10;        long likeCount = video.getLikeCount() != null ? video.getLikeCount() : 0L;&#10;        &#10;        // Trọng số: view = 1, like = 3 (like quan trọng hơn view)&#10;        return viewCount + (likeCount * 3);&#10;    }&#10;&#10;    /**&#10;     * Lấy video cùng category với các video đã được chọn&#10;     */&#10;    private static List&lt;ShortVideoModel&gt; getVideosBySameCategory(&#10;            List&lt;ShortVideoModel&gt; remainingVideos,&#10;            List&lt;ShortVideoModel&gt; selectedVideos) {&#10;        &#10;        // Lấy tất cả categoryId từ video đã chọn&#10;        Set&lt;String&gt; selectedCategories = new HashSet&lt;&gt;();&#10;        for (ShortVideoModel video : selectedVideos) {&#10;            if (video.getCategoryId() != null) {&#10;                selectedCategories.add(video.getCategoryId());&#10;            }&#10;        }&#10;        &#10;        // Lọc video có cùng category&#10;        List&lt;ShortVideoModel&gt; sameCategoryVideos = new ArrayList&lt;&gt;();&#10;        for (ShortVideoModel video : remainingVideos) {&#10;            if (video.getCategoryId() != null &amp;&amp; selectedCategories.contains(video.getCategoryId())) {&#10;                sameCategoryVideos.add(video);&#10;            }&#10;        }&#10;        &#10;        return sameCategoryVideos;&#10;    }&#10;&#10;    /**&#10;     * Lấy video trending (mock data - có thể thay thế bằng logic thực từ Firebase)&#10;     */&#10;    private static List&lt;ShortVideoModel&gt; getTrendingVideos(List&lt;ShortVideoModel&gt; videos) {&#10;        // Hiện tại sử dụng logic đơn giản: video có (viewCount + likeCount * 2) cao nhất&#10;        List&lt;ShortVideoModel&gt; trendingVideos = new ArrayList&lt;&gt;(videos);&#10;        &#10;        Collections.sort(trendingVideos, new Comparator&lt;ShortVideoModel&gt;() {&#10;            @Override&#10;            public int compare(ShortVideoModel v1, ShortVideoModel v2) {&#10;                long trend1 = getTrendingScore(v1);&#10;                long trend2 = getTrendingScore(v2);&#10;                return Long.compare(trend2, trend1); // Sắp xếp giảm dần&#10;            }&#10;        });&#10;        &#10;        return trendingVideos;&#10;    }&#10;&#10;    /**&#10;     * Tính điểm trending cho video&#10;     */&#10;    private static long getTrendingScore(ShortVideoModel video) {&#10;        long viewCount = video.getViewCount() != null ? video.getViewCount() : 0L;&#10;        long likeCount = video.getLikeCount() != null ? video.getLikeCount() : 0L;&#10;        Long uploadDate = video.getUploadDate();&#10;        &#10;        // Điểm cơ bản&#10;        long baseScore = viewCount + (likeCount * 2);&#10;        &#10;        // Bonus cho video mới (trong vòng 7 ngày gần đây)&#10;        if (uploadDate != null) {&#10;            long currentTime = System.currentTimeMillis();&#10;            long daysSinceUpload = (currentTime - uploadDate) / (1000 * 60 * 60 * 24);&#10;            &#10;            if (daysSinceUpload &lt;= 7) {&#10;                // Video mới được bonus&#10;                double recencyBonus = (7 - daysSinceUpload) / 7.0; // Từ 0 đến 1&#10;                baseScore += (long) (baseScore * recencyBonus * 0.3); // Tối đa 30% bonus&#10;            }&#10;        }&#10;        &#10;        return baseScore;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/bg_circle_red.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/bg_circle_red.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;oval&quot;&gt;&#10;    &lt;solid android:color=&quot;@color/red_like&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/bg_circle_white.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/bg_circle_white.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;oval&quot;&gt;&#10;    &lt;solid android:color=&quot;@color/white&quot; /&gt;&#10;    &lt;stroke android:width=&quot;2dp&quot; android:color=&quot;@color/white&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/bg_duration.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/bg_duration.xml" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/bg_follow_button.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/bg_follow_button.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;corners android:radius=&quot;4dp&quot; /&gt;&#10;    &lt;stroke android:width=&quot;1dp&quot; android:color=&quot;@color/white&quot; /&gt;&#10;    &lt;solid android:color=&quot;@color/black_overlay&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/bg_gradient_bottom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/bg_gradient_bottom.xml" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/bg_gradient_bottom_overlay.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/bg_gradient_bottom_overlay.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;gradient&#10;        android:angle=&quot;90&quot;&#10;        android:startColor=&quot;@android:color/transparent&quot;&#10;        android:centerColor=&quot;@color/semi_transparent_black&quot;&#10;        android:endColor=&quot;@color/semi_transparent_dark&quot;&#10;        android:type=&quot;linear&quot; /&gt;&#10;    &lt;corners android:radius=&quot;0dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/bg_gradient_top.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/bg_gradient_top.xml" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/bg_play_button.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/bg_play_button.xml" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/bg_rounded_dark_semi_transparent.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/bg_rounded_dark_semi_transparent.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;@color/semi_transparent_black&quot; /&gt;&#10;    &lt;corners android:radius=&quot;8dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/bg_video_thumbnail.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/bg_video_thumbnail.xml" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/circle_background_semi_transparent.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/circle_background_semi_transparent.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;oval&quot;&gt;&#10;    &lt;solid android:color=&quot;#80000000&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_error_outline.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_error_outline.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M12,2C13.1,2 14,2.9 14,4C14,5.1 13.1,6 12,6C10.9,6 10,5.1 10,4C10,2.9 10.9,2 12,2ZM21,9V7L15,7V9C15,10.65 13.65,12 12,12C10.35,12 9,10.65 9,9V7L3,7V9C3,11.76 5.24,14 8,14V16H16V14C18.76,14 21,11.76 21,9ZM12,17.5C11.2,17.5 10.5,18.2 10.5,19C10.5,19.8 11.2,20.5 12,20.5C12.8,20.5 13.5,19.8 13.5,19C13.5,18.2 12.8,17.5 12,17.5Z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_more_vert.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_more_vert.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2zM13,17h-2v-6h2v6zM13,9h-2L11,7h2v2z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_play_circle.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_play_circle.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M8,5v14l11,-7z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_upload.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_upload.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z&quot;/&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M12,19L8,15H10.5V12H13.5V15H16L12,19Z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_video_player.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_video_player.xml" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/custom_player_control.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/custom_player_control.xml" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_video_short.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_video_short.xml" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_video_short_vertical.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_video_short_vertical.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@color/black&quot;&gt;&#10;&#10;    &lt;!-- ViewPager2 cho video vertical như TikTok --&gt;&#10;    &lt;androidx.viewpager2.widget.ViewPager2&#10;        android:id=&quot;@+id/vp_videos&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:orientation=&quot;vertical&quot; /&gt;&#10;&#10;    &lt;!-- Loading indicator --&gt;&#10;    &lt;com.google.android.material.progressindicator.CircularProgressIndicator&#10;        android:id=&quot;@+id/progress_bar&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_gravity=&quot;center&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        app:indicatorColor=&quot;@color/white&quot; /&gt;&#10;&#10;    &lt;!-- Error State --&gt;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/layout_error_state&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;32dp&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        android:background=&quot;@color/black&quot;&gt;&#10;&#10;        &lt;ImageView&#10;            android:layout_width=&quot;120dp&quot;&#10;            android:layout_height=&quot;120dp&quot;&#10;            android:alpha=&quot;0.6&quot;&#10;            android:src=&quot;@drawable/ic_error_outline&quot;&#10;            android:tint=&quot;@color/white&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:text=&quot;@string/error_loading_videos&quot;&#10;            android:textColor=&quot;@color/white&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:text=&quot;@string/error_loading_videos_description&quot;&#10;            android:textColor=&quot;@color/white_50&quot;&#10;            android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;        &lt;com.google.android.material.button.MaterialButton&#10;            android:id=&quot;@+id/btn_retry&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:text=&quot;@string/retry&quot;&#10;            android:textColor=&quot;@color/black&quot;&#10;            android:backgroundTint=&quot;@color/white&quot;&#10;            style=&quot;@style/Widget.Material3.Button&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/FrameLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_video_short.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_video_short.xml" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_video_short_vertical.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_video_short_vertical.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@color/black&quot;&gt;&#10;&#10;    &lt;!-- Video Player - Full Screen như TikTok --&gt;&#10;    &lt;com.google.android.exoplayer2.ui.StyledPlayerView&#10;        android:id=&quot;@+id/player_view&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:background=&quot;@color/black&quot;&#10;        app:use_controller=&quot;false&quot;&#10;        app:resize_mode=&quot;zoom&quot;&#10;        app:show_buffering=&quot;when_playing&quot; /&gt;&#10;&#10;    &lt;!-- Overlay Content như TikTok --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;        &lt;!-- Left side - Video info và interaction area --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:gravity=&quot;bottom&quot;&#10;            android:padding=&quot;16dp&quot;&gt;&#10;&#10;            &lt;!-- Video Information --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:layout_marginBottom=&quot;20dp&quot;&gt;&#10;&#10;                &lt;!-- Author info --&gt;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;horizontal&quot;&#10;                    android:gravity=&quot;center_vertical&quot;&#10;                    android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;&#10;                    &lt;ImageView&#10;                        android:id=&quot;@+id/iv_user_avatar&quot;&#10;                        android:layout_width=&quot;32dp&quot;&#10;                        android:layout_height=&quot;32dp&quot;&#10;                        android:background=&quot;@drawable/bg_circle_white&quot;&#10;                        android:padding=&quot;1dp&quot;&#10;                        tools:src=&quot;@drawable/ic_user_avatar_placeholder&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tv_author&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:layout_marginStart=&quot;8dp&quot;&#10;                        android:layout_marginEnd=&quot;12dp&quot;&#10;                        android:textColor=&quot;@color/white&quot;&#10;                        android:textSize=&quot;14sp&quot;&#10;                        android:textStyle=&quot;bold&quot;&#10;                        tools:text=&quot;@healthtips&quot; /&gt;&#10;&#10;                    &lt;View&#10;                        android:id=&quot;@+id/btn_follow&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:background=&quot;@drawable/bg_follow_button&quot;&#10;                        android:padding=&quot;6dp&quot;&#10;                        android:clickable=&quot;true&quot;&#10;                        android:focusable=&quot;true&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;                &lt;!-- Video title --&gt;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tv_title&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:textColor=&quot;@color/white&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:maxLines=&quot;2&quot;&#10;                    android:ellipsize=&quot;end&quot;&#10;                    android:layout_marginBottom=&quot;4dp&quot;&#10;                    tools:text=&quot;5 cách uống nước đúng cách để tăng cường sức khỏe&quot; /&gt;&#10;&#10;                &lt;!-- Video description --&gt;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tv_description&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:textColor=&quot;@color/white_50&quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:maxLines=&quot;3&quot;&#10;                    android:ellipsize=&quot;end&quot;&#10;                    android:layout_marginBottom=&quot;8dp&quot;&#10;                    tools:text=&quot;Trong video này, chúng ta sẽ học cách uống nước đúng cách để có sức khỏe tốt nhất...&quot; /&gt;&#10;&#10;                &lt;!-- Video stats --&gt;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tv_view_count&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:textColor=&quot;@color/white_50&quot;&#10;                    android:textSize=&quot;12sp&quot;&#10;                    tools:text=&quot;1.2K lượt xem&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Right side - Action buttons như TikTok --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;80dp&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:gravity=&quot;bottom&quot;&#10;            android:padding=&quot;12dp&quot;&gt;&#10;&#10;            &lt;!-- User Avatar với Follow button --&gt;&#10;            &lt;FrameLayout&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_gravity=&quot;center_horizontal&quot;&#10;                android:layout_marginBottom=&quot;20dp&quot;&gt;&#10;&#10;                &lt;ImageView&#10;                    android:id=&quot;@+id/iv_user_avatar_large&quot;&#10;                    android:layout_width=&quot;48dp&quot;&#10;                    android:layout_height=&quot;48dp&quot;&#10;                    android:background=&quot;@drawable/bg_circle_white&quot;&#10;                    android:padding=&quot;2dp&quot;&#10;                    tools:src=&quot;@drawable/ic_user_avatar_placeholder&quot; /&gt;&#10;&#10;                &lt;!-- Plus button for follow --&gt;&#10;                &lt;ImageView&#10;                    android:layout_width=&quot;20dp&quot;&#10;                    android:layout_height=&quot;20dp&quot;&#10;                    android:layout_gravity=&quot;bottom|center_horizontal&quot;&#10;                    android:layout_marginBottom=&quot;-10dp&quot;&#10;                    android:background=&quot;@drawable/bg_circle_red&quot;&#10;                    android:src=&quot;@drawable/ic_add&quot;&#10;                    android:padding=&quot;4dp&quot;&#10;                    android:tint=&quot;@color/white&quot; /&gt;&#10;&#10;            &lt;/FrameLayout&gt;&#10;&#10;            &lt;!-- Like button --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:gravity=&quot;center_horizontal&quot;&#10;                android:layout_marginBottom=&quot;20dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;                android:padding=&quot;8dp&quot;&gt;&#10;&#10;                &lt;ImageView&#10;                    android:id=&quot;@+id/iv_like&quot;&#10;                    android:layout_width=&quot;32dp&quot;&#10;                    android:layout_height=&quot;32dp&quot;&#10;                    android:src=&quot;@drawable/ic_heart_outline&quot;&#10;                    android:tint=&quot;@color/white&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tv_like_count&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginTop=&quot;4dp&quot;&#10;                    android:textColor=&quot;@color/white&quot;&#10;                    android:textSize=&quot;12sp&quot;&#10;                    android:gravity=&quot;center&quot;&#10;                    tools:text=&quot;350&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;            &lt;!-- Comment button --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:gravity=&quot;center_horizontal&quot;&#10;                android:layout_marginBottom=&quot;20dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;                android:padding=&quot;8dp&quot;&gt;&#10;&#10;                &lt;ImageView&#10;                    android:id=&quot;@+id/iv_comment&quot;&#10;                    android:layout_width=&quot;32dp&quot;&#10;                    android:layout_height=&quot;32dp&quot;&#10;                    android:src=&quot;@drawable/ic_comment&quot;&#10;                    android:tint=&quot;@color/white&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tv_comment_count&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginTop=&quot;4dp&quot;&#10;                    android:textColor=&quot;@color/white&quot;&#10;                    android:textSize=&quot;12sp&quot;&#10;                    android:gravity=&quot;center&quot;&#10;                    tools:text=&quot;42&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;            &lt;!-- Share button --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:gravity=&quot;center_horizontal&quot;&#10;                android:layout_marginBottom=&quot;20dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;                android:padding=&quot;8dp&quot;&gt;&#10;&#10;                &lt;ImageView&#10;                    android:id=&quot;@+id/iv_share&quot;&#10;                    android:layout_width=&quot;32dp&quot;&#10;                    android:layout_height=&quot;32dp&quot;&#10;                    android:src=&quot;@drawable/ic_share&quot;&#10;                    android:tint=&quot;@color/white&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginTop=&quot;4dp&quot;&#10;                    android:textColor=&quot;@color/white&quot;&#10;                    android:textSize=&quot;12sp&quot;&#10;                    android:gravity=&quot;center&quot;&#10;                    android:text=&quot;Chia sẻ&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;            &lt;!-- More options button --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:gravity=&quot;center_horizontal&quot;&#10;                android:layout_marginBottom=&quot;80dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;                android:padding=&quot;8dp&quot;&gt;&#10;&#10;                &lt;ImageView&#10;                    android:id=&quot;@+id/iv_more&quot;&#10;                    android:layout_width=&quot;32dp&quot;&#10;                    android:layout_height=&quot;32dp&quot;&#10;                    android:src=&quot;@drawable/ic_more_vert&quot;&#10;                    android:tint=&quot;@color/white&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Video progress indicator (optional) --&gt;&#10;    &lt;ProgressBar&#10;        android:id=&quot;@+id/progress_video&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;2dp&quot;&#10;        android:layout_gravity=&quot;bottom&quot;&#10;        android:layout_marginBottom=&quot;100dp&quot;&#10;        android:progressTint=&quot;@color/white&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        style=&quot;?android:attr/progressBarStyleHorizontal&quot; /&gt;&#10;&#10;&lt;/FrameLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/firebase-database-rules.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/firebase-database-rules.json" />
              <option name="updatedContent" value="{&#10;  &quot;rules&quot;: {&#10;    &quot;conversations&quot;: {&#10;      &quot;$userId&quot;: {&#10;        &quot;.read&quot;: &quot;auth != null &amp;&amp; auth.uid == $userId&quot;,&#10;        &quot;.write&quot;: &quot;auth != null &amp;&amp; auth.uid == $userId&quot;,&#10;        &quot;$conversationId&quot;: {&#10;          &quot;.validate&quot;: &quot;newData.hasChildren(['userId', 'title', 'createdTime', 'lastMessageTime']) &amp;&amp; newData.child('userId').val() == auth.uid&quot;&#10;        }&#10;      }&#10;    },&#10;    &quot;chat_messages&quot;: {&#10;      &quot;$conversationId&quot;: {&#10;        &quot;.read&quot;: &quot;auth != null &amp;&amp; root.child('conversations').child(auth.uid).child($conversationId).exists()&quot;,&#10;        &quot;.write&quot;: &quot;auth != null &amp;&amp; root.child('conversations').child(auth.uid).child($conversationId).exists()&quot;,&#10;        &quot;$messageId&quot;: {&#10;          &quot;.validate&quot;: &quot;newData.hasChildren(['conversationId', 'content', 'timestamp', 'isBot']) &amp;&amp; newData.child('conversationId').val() == $conversationId&quot;&#10;        }&#10;      }&#10;    },&#10;    &quot;user_topics&quot;: {&#10;      &quot;$userId&quot;: {&#10;        &quot;.read&quot;: &quot;auth != null &amp;&amp; auth.uid == $userId&quot;,&#10;        &quot;.write&quot;: &quot;auth != null &amp;&amp; auth.uid == $userId&quot;&#10;      }&#10;    },&#10;    &quot;health_tips&quot;: {&#10;      &quot;.read&quot;: &quot;auth != null&quot;,&#10;      &quot;.write&quot;: &quot;auth != null&quot;&#10;    },&#10;    &quot;categories&quot;: {&#10;      &quot;.read&quot;: &quot;auth != null&quot;,&#10;      &quot;.write&quot;: &quot;auth != null&quot;&#10;    },&#10;    &quot;users&quot;: {&#10;      &quot;$userId&quot;: {&#10;        &quot;.read&quot;: &quot;auth != null &amp;&amp; auth.uid == $userId&quot;,&#10;        &quot;.write&quot;: &quot;auth != null &amp;&amp; auth.uid == $userId&quot;,&#10;        &quot;.validate&quot;: &quot;newData.hasChildren(['email', 'fullName', 'createdAt']) &amp;&amp; newData.child('email').val() == auth.token.email&quot;&#10;      }&#10;    },&#10;    &quot;reminders&quot;: {&#10;      &quot;$userId&quot;: {&#10;        &quot;.read&quot;: &quot;auth != null &amp;&amp; auth.uid == $userId&quot;,&#10;        &quot;.write&quot;: &quot;auth != null &amp;&amp; auth.uid == $userId&quot;&#10;      }&#10;    }&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/firebase_video_test_data.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/firebase_video_test_data.json" />
              <option name="updatedContent" value="{&#10;  &quot;videos&quot;: {&#10;    &quot;video_001&quot;: {&#10;      &quot;id&quot;: &quot;video_001&quot;,&#10;      &quot;title&quot;: &quot;5 cách uống nước đúng cách để tăng cường sức khỏe&quot;,&#10;      &quot;description&quot;: &quot;Trong video này, chúng ta sẽ học cách uống nước đúng cách để có sức khỏe tốt nhất. Việc uống nước đúng cách sẽ giúp bạn cải thiện sức khỏe một cách đáng kể.&quot;,&#10;      &quot;videoUrl&quot;: &quot;https://storage.googleapis.com/healthtips-videos/water_tips.mp4&quot;,&#10;      &quot;thumbnailUrl&quot;: &quot;https://storage.googleapis.com/healthtips-thumbnails/water_tips_thumb.jpg&quot;,&#10;      &quot;categoryId&quot;: &quot;nutrition&quot;,&#10;      &quot;tags&quot;: [&quot;uống nước&quot;, &quot;hydration&quot;, &quot;sức khỏe&quot;, &quot;dinh dưỡng&quot;],&#10;      &quot;viewCount&quot;: 1250,&#10;      &quot;likeCount&quot;: 89,&#10;      &quot;duration&quot;: 45,&#10;      &quot;publishDate&quot;: 1704067200000,&#10;      &quot;authorId&quot;: &quot;healthtips_official&quot;&#10;    },&#10;    &quot;video_002&quot;: {&#10;      &quot;id&quot;: &quot;video_002&quot;, &#10;      &quot;title&quot;: &quot;3 bài tập yoga buổi sáng cho năng lượng cả ngày&quot;,&#10;      &quot;description&quot;: &quot;Khởi đầu ngày mới với 3 bài tập yoga đơn giản nhưng hiệu quả. Chỉ cần 10 phút mỗi sáng để có năng lượng tươi mới cho cả ngày.&quot;,&#10;      &quot;videoUrl&quot;: &quot;https://storage.googleapis.com/healthtips-videos/morning_yoga.mp4&quot;,&#10;      &quot;thumbnailUrl&quot;: &quot;https://storage.googleapis.com/healthtips-thumbnails/morning_yoga_thumb.jpg&quot;,&#10;      &quot;categoryId&quot;: &quot;exercise&quot;,&#10;      &quot;tags&quot;: [&quot;yoga&quot;, &quot;tập luyện&quot;, &quot;buổi sáng&quot;, &quot;năng lượng&quot;],&#10;      &quot;viewCount&quot;: 2100,&#10;      &quot;likeCount&quot;: 156,&#10;      &quot;duration&quot;: 60,&#10;      &quot;publishDate&quot;: 1704153600000,&#10;      &quot;authorId&quot;: &quot;healthtips_official&quot;&#10;    },&#10;    &quot;video_003&quot;: {&#10;      &quot;id&quot;: &quot;video_003&quot;,&#10;      &quot;title&quot;: &quot;Cách giảm stress hiệu quả trong 2 phút&quot;,&#10;      &quot;description&quot;: &quot;Kỹ thuật thở sâu và thiền ngắn giúp bạn giảm stress ngay lập tức. Áp dụng mọi lúc mọi nơi, đặc biệt hữu ích khi làm việc.&quot;,&#10;      &quot;videoUrl&quot;: &quot;https://storage.googleapis.com/healthtips-videos/stress_relief.mp4&quot;,&#10;      &quot;thumbnailUrl&quot;: &quot;https://storage.googleapis.com/healthtips-thumbnails/stress_relief_thumb.jpg&quot;,&#10;      &quot;categoryId&quot;: &quot;mental_health&quot;,&#10;      &quot;tags&quot;: [&quot;stress&quot;, &quot;thiền&quot;, &quot;thở sâu&quot;, &quot;sức khỏe tinh thần&quot;],&#10;      &quot;viewCount&quot;: 890,&#10;      &quot;likeCount&quot;: 67,&#10;      &quot;duration&quot;: 120,&#10;      &quot;publishDate&quot;: 1704240000000,&#10;      &quot;authorId&quot;: &quot;healthtips_official&quot;&#10;    },&#10;    &quot;video_004&quot;: {&#10;      &quot;id&quot;: &quot;video_004&quot;,&#10;      &quot;title&quot;: &quot;Smoothie xanh tăng cường miễn dịch&quot;,&#10;      &quot;description&quot;: &quot;Công thức smoothie xanh với rau cải xoăn, táo và gừng. Bổ sung vitamin C và chất chống oxy hóa tự nhiên cho cơ thể.&quot;,&#10;      &quot;videoUrl&quot;: &quot;https://storage.googleapis.com/healthtips-videos/green_smoothie.mp4&quot;, &#10;      &quot;thumbnailUrl&quot;: &quot;https://storage.googleapis.com/healthtips-thumbnails/green_smoothie_thumb.jpg&quot;,&#10;      &quot;categoryId&quot;: &quot;nutrition&quot;,&#10;      &quot;tags&quot;: [&quot;smoothie&quot;, &quot;miễn dịch&quot;, &quot;vitamin&quot;, &quot;rau xanh&quot;],&#10;      &quot;viewCount&quot;: 1456,&#10;      &quot;likeCount&quot;: 112,&#10;      &quot;duration&quot;: 90,&#10;      &quot;publishDate&quot;: 1704326400000,&#10;      &quot;authorId&quot;: &quot;healthtips_official&quot;&#10;    },&#10;    &quot;video_005&quot;: {&#10;      &quot;id&quot;: &quot;video_005&quot;,&#10;      &quot;title&quot;: &quot;Bài tập giảm mỡ bụng tại nhà&quot;,&#10;      &quot;description&quot;: &quot;5 động tác đơn giản nhưng hiệu quả để giảm mỡ bụng. Không cần dụng cụ, có thể tập ngay tại nhà chỉ trong 15 phút.&quot;,&#10;      &quot;videoUrl&quot;: &quot;https://storage.googleapis.com/healthtips-videos/belly_fat_workout.mp4&quot;,&#10;      &quot;thumbnailUrl&quot;: &quot;https://storage.googleapis.com/healthtips-thumbnails/belly_fat_workout_thumb.jpg&quot;, &#10;      &quot;categoryId&quot;: &quot;weight_loss&quot;,&#10;      &quot;tags&quot;: [&quot;giảm cân&quot;, &quot;mỡ bụng&quot;, &quot;tập tại nhà&quot;, &quot;cardio&quot;],&#10;      &quot;viewCount&quot;: 3200,&#10;      &quot;likeCount&quot;: 245,&#10;      &quot;duration&quot;: 900,&#10;      &quot;publishDate&quot;: 1704412800000,&#10;      &quot;authorId&quot;: &quot;healthtips_official&quot;&#10;    },&#10;    &quot;video_006&quot;: {&#10;      &quot;id&quot;: &quot;video_006&quot;,&#10;      &quot;title&quot;: &quot;Massage điểm huyệt giảm đau đầu&quot;,&#10;      &quot;description&quot;: &quot;Kỹ thuật massage các điểm huyệt trên mặt và đầu để giảm đau đầu tự nhiên. Hiệu quả nhanh chóng không cần thuốc.&quot;,&#10;      &quot;videoUrl&quot;: &quot;https://storage.googleapis.com/healthtips-videos/headache_massage.mp4&quot;,&#10;      &quot;thumbnailUrl&quot;: &quot;https://storage.googleapis.com/healthtips-thumbnails/headache_massage_thumb.jpg&quot;,&#10;      &quot;categoryId&quot;: &quot;general_health&quot;, &#10;      &quot;tags&quot;: [&quot;đau đầu&quot;, &quot;massage&quot;, &quot;điểm huyệt&quot;, &quot;tự nhiên&quot;],&#10;      &quot;viewCount&quot;: 1890,&#10;      &quot;likeCount&quot;: 134,&#10;      &quot;duration&quot;: 180,&#10;      &quot;publishDate&quot;: 1704499200000,&#10;      &quot;authorId&quot;: &quot;healthtips_official&quot;&#10;    }&#10;  },&#10;  &quot;video_categories&quot;: {&#10;    &quot;nutrition&quot;: {&#10;      &quot;name&quot;: &quot;Dinh dưỡng&quot;,&#10;      &quot;videos&quot;: {&#10;        &quot;video_001&quot;: true,&#10;        &quot;video_004&quot;: true&#10;      }&#10;    },&#10;    &quot;exercise&quot;: {&#10;      &quot;name&quot;: &quot;Thể dục&quot;,&#10;      &quot;videos&quot;: {&#10;        &quot;video_002&quot;: true&#10;      }&#10;    },&#10;    &quot;mental_health&quot;: {&#10;      &quot;name&quot;: &quot;Sức khỏe tinh thần&quot;, &#10;      &quot;videos&quot;: {&#10;        &quot;video_003&quot;: true&#10;      }&#10;    },&#10;    &quot;weight_loss&quot;: {&#10;      &quot;name&quot;: &quot;Giảm cân&quot;,&#10;      &quot;videos&quot;: {&#10;        &quot;video_005&quot;: true&#10;      }&#10;    },&#10;    &quot;general_health&quot;: {&#10;      &quot;name&quot;: &quot;Sức khỏe tổng quát&quot;,&#10;      &quot;videos&quot;: {&#10;        &quot;video_006&quot;: true&#10;      }&#10;    }&#10;  },&#10;  &quot;video_tags&quot;: {&#10;    &quot;uống nước&quot;: {&#10;      &quot;video_001&quot;: true&#10;    },&#10;    &quot;hydration&quot;: {&#10;      &quot;video_001&quot;: true  &#10;    },&#10;    &quot;yoga&quot;: {&#10;      &quot;video_002&quot;: true&#10;    },&#10;    &quot;stress&quot;: {&#10;      &quot;video_003&quot;: true&#10;    },&#10;    &quot;smoothie&quot;: {&#10;      &quot;video_004&quot;: true&#10;    },&#10;    &quot;giảm cân&quot;: {&#10;      &quot;video_005&quot;: true&#10;    },&#10;    &quot;massage&quot;: {&#10;      &quot;video_006&quot;: true&#10;    }&#10;  },&#10;  &quot;user_likes&quot;: {&#10;    &quot;user_demo&quot;: {&#10;      &quot;video_001&quot;: true,&#10;      &quot;video_004&quot;: true&#10;    }&#10;  },&#10;  &quot;user_views&quot;: {&#10;    &quot;user_demo&quot;: {&#10;      &quot;video_001&quot;: 1704500000000,&#10;      &quot;video_002&quot;: 1704501000000,&#10;      &quot;video_004&quot;: 1704502000000&#10;    }&#10;  },&#10;  &quot;user_searches&quot;: {&#10;    &quot;user_demo&quot;: {&#10;      &quot;uống nước&quot;: 1704500000000,&#10;      &quot;yoga&quot;: 1704501000000,&#10;      &quot;giảm cân&quot;: 1704502000000&#10;    }&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>