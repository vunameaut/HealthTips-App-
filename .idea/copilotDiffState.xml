<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.google.gms.google.services)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.vhn.doan&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.vhn.doan&quot;&#10;        minSdk = 26&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        // Cấu hình MultiDex&#10;        multiDexEnabled = true&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        // Cấu hình Java 8+&#10;        sourceCompatibility = JavaVersion.VERSION_1_8&#10;        targetCompatibility = JavaVersion.VERSION_1_8&#10;&#10;        // Cho phép sử dụng các tính năng Java 8&#10;        isCoreLibraryDesugaringEnabled = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    // Cập nhật Firebase BoM lên phiên bản mới&#10;    implementation(platform(&quot;com.google.firebase:firebase-bom:33.5.1&quot;))&#10;&#10;    // Các Firebase libraries khác giữ nguyên&#10;    implementation(&quot;com.google.firebase:firebase-firestore&quot;)&#10;    implementation(&quot;com.google.firebase:firebase-auth&quot;)&#10;    implementation(&quot;com.google.firebase:firebase-analytics&quot;)&#10;    implementation(&quot;com.google.firebase:firebase-storage&quot;)&#10;    implementation(&quot;com.google.firebase:firebase-database&quot;)&#10;&#10;    implementation(libs.appcompat)&#10;    implementation(libs.material)&#10;    implementation(libs.activity)&#10;    implementation(libs.constraintlayout)&#10;&#10;    // Thêm thư viện MultiDex&#10;    implementation(&quot;androidx.multidex:multidex:2.0.1&quot;)&#10;    implementation(libs.firebase.storage)&#10;    implementation(libs.firebase.database)&#10;&#10;    // Thêm SwipeRefreshLayout cho FavoriteFragment&#10;    implementation(&quot;androidx.swiperefreshlayout:swiperefreshlayout:1.1.0&quot;)&#10;&#10;    // Thêm RecyclerView nếu chưa có&#10;    implementation(&quot;androidx.recyclerview:recyclerview:1.3.2&quot;)&#10;&#10;    // Thêm CardView cho layout items&#10;    implementation(&quot;androidx.cardview:cardview:1.0.0&quot;)&#10;&#10;&#10;    implementation(&quot;androidx.work:work-runtime:2.9.0&quot;)&#10;&#10;    // Thêm thư viện Desugaring để hỗ trợ tính năng Java 8+ trên các thiết bị cũ&#10;    coreLibraryDesugaring(&quot;com.android.tools:desugar_jdk_libs:2.0.3&quot;)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.ext.junit)&#10;    androidTestImplementation(libs.espresso.core)&#10;&#10;    // Thư viện Glide để load ảnh&#10;    implementation(&quot;com.github.bumptech.glide:glide:4.16.0&quot;)&#10;    annotationProcessor(&quot;com.github.bumptech.glide:compiler:4.16.0&quot;)&#10;}" />
              <option name="updatedContent" value="plugins {&#13;&#10;    alias(libs.plugins.android.application)&#13;&#10;    alias(libs.plugins.google.gms.google.services)&#13;&#10;}&#13;&#10;&#13;&#10;android {&#13;&#10;    namespace = &quot;com.vhn.doan&quot;&#13;&#10;    compileSdk = 35&#13;&#10;&#13;&#10;    defaultConfig {&#13;&#10;        applicationId = &quot;com.vhn.doan&quot;&#13;&#10;        minSdk = 26&#13;&#10;        targetSdk = 35&#13;&#10;        versionCode = 1&#13;&#10;        versionName = &quot;1.0&quot;&#13;&#10;&#13;&#10;        // Cấu hình MultiDex&#13;&#10;        multiDexEnabled = true&#13;&#10;&#13;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#13;&#10;    }&#13;&#10;&#13;&#10;    buildTypes {&#13;&#10;        release {&#13;&#10;            isMinifyEnabled = false&#13;&#10;            proguardFiles(&#13;&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#13;&#10;                &quot;proguard-rules.pro&quot;&#13;&#10;            )&#13;&#10;        }&#13;&#10;    }&#13;&#10;    compileOptions {&#13;&#10;        // Cấu hình Java 8+&#13;&#10;        sourceCompatibility = JavaVersion.VERSION_1_8&#13;&#10;        targetCompatibility = JavaVersion.VERSION_1_8&#13;&#10;&#13;&#10;        // Cho phép sử dụng các tính năng Java 8&#13;&#10;        isCoreLibraryDesugaringEnabled = true&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;dependencies {&#13;&#10;    // Cập nhật Firebase BoM lên phiên bản mới&#13;&#10;    implementation(platform(&quot;com.google.firebase:firebase-bom:33.5.1&quot;))&#13;&#10;&#13;&#10;    // Các Firebase libraries khác giữ nguyên&#13;&#10;    implementation(&quot;com.google.firebase:firebase-firestore&quot;)&#13;&#10;    implementation(&quot;com.google.firebase:firebase-auth&quot;)&#13;&#10;    implementation(&quot;com.google.firebase:firebase-analytics&quot;)&#13;&#10;    implementation(&quot;com.google.firebase:firebase-storage&quot;)&#13;&#10;    implementation(&quot;com.google.firebase:firebase-database&quot;)&#13;&#10;&#13;&#10;    implementation(libs.appcompat)&#13;&#10;    implementation(libs.material)&#13;&#10;    implementation(libs.activity)&#13;&#10;    implementation(libs.constraintlayout)&#13;&#10;&#13;&#10;    // Thêm thư viện MultiDex&#13;&#10;    implementation(&quot;androidx.multidex:multidex:2.0.1&quot;)&#13;&#10;    implementation(libs.firebase.storage)&#13;&#10;    implementation(libs.firebase.database)&#13;&#10;&#13;&#10;    // Thêm SwipeRefreshLayout cho FavoriteFragment&#13;&#10;    implementation(&quot;androidx.swiperefreshlayout:swiperefreshlayout:1.1.0&quot;)&#13;&#10;&#13;&#10;    // Thêm RecyclerView nếu chưa có&#13;&#10;    implementation(&quot;androidx.recyclerview:recyclerview:1.3.2&quot;)&#13;&#10;&#13;&#10;    // Thêm CardView cho layout items&#13;&#10;    implementation(&quot;androidx.cardview:cardview:1.0.0&quot;)&#13;&#10;&#13;&#10;&#13;&#10;    implementation(&quot;androidx.work:work-runtime:2.9.0&quot;)&#13;&#10;&#13;&#10;    // Thêm thư viện Desugaring để hỗ trợ tính năng Java 8+ trên các thiết bị cũ&#13;&#10;    coreLibraryDesugaring(&quot;com.android.tools:desugar_jdk_libs:2.0.3&quot;)&#13;&#10;&#13;&#10;    testImplementation(libs.junit)&#13;&#10;    androidTestImplementation(libs.ext.junit)&#13;&#10;    androidTestImplementation(libs.espresso.core)&#13;&#10;&#13;&#10;    // Thư viện Glide để load ảnh&#13;&#10;    implementation(&quot;com.github.bumptech.glide:glide:4.16.0&quot;)&#13;&#10;    annotationProcessor(&quot;com.github.bumptech.glide:compiler:4.16.0&quot;)&#13;&#10;&#13;&#10;    // Thêm OkHttp và Gson cho Chat API&#13;&#10;    implementation(&quot;com.squareup.okhttp3:okhttp:4.12.0&quot;)&#13;&#10;    implementation(&quot;com.squareup.okhttp3:logging-interceptor:4.12.0&quot;)&#13;&#10;    implementation(&quot;com.google.code.gson:gson:2.10.1&quot;)&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/ChatApiResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/ChatApiResponse.java" />
              <option name="updatedContent" value="package com.vhn.doan.data;&#10;&#10;import java.util.List;&#10;&#10;/**&#10; * Model cho phản hồi từ OpenRouter API&#10; */&#10;public class ChatApiResponse {&#10;    private List&lt;Choice&gt; choices;&#10;    private String error;&#10;&#10;    public ChatApiResponse() {&#10;    }&#10;&#10;    public List&lt;Choice&gt; getChoices() {&#10;        return choices;&#10;    }&#10;&#10;    public void setChoices(List&lt;Choice&gt; choices) {&#10;        this.choices = choices;&#10;    }&#10;&#10;    public String getError() {&#10;        return error;&#10;    }&#10;&#10;    public void setError(String error) {&#10;        this.error = error;&#10;    }&#10;&#10;    public static class Choice {&#10;        private Message message;&#10;&#10;        public Message getMessage() {&#10;            return message;&#10;        }&#10;&#10;        public void setMessage(Message message) {&#10;            this.message = message;&#10;        }&#10;    }&#10;&#10;    public static class Message {&#10;        private String role;&#10;        private String content;&#10;&#10;        public String getRole() {&#10;            return role;&#10;        }&#10;&#10;        public void setRole(String role) {&#10;            this.role = role;&#10;        }&#10;&#10;        public String getContent() {&#10;            return content;&#10;        }&#10;&#10;        public void setContent(String content) {&#10;            this.content = content;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/ChatMessage.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/ChatMessage.java" />
              <option name="updatedContent" value="package com.vhn.doan.data;&#10;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;/**&#10; * Model cho tin nhắn chat giữa người dùng và AI&#10; */&#10;public class ChatMessage {&#10;    private String id;&#10;    private String userId;&#10;    private String content;&#10;    private boolean isFromUser; // true nếu tin nhắn từ user, false nếu từ AI&#10;    private long timestamp;&#10;    private String topic; // Chủ đề được trích xuất từ nội dung&#10;&#10;    public ChatMessage() {&#10;        // Constructor rỗng cho Firebase&#10;    }&#10;&#10;    public ChatMessage(String userId, String content, boolean isFromUser, long timestamp) {&#10;        this.userId = userId;&#10;        this.content = content;&#10;        this.isFromUser = isFromUser;&#10;        this.timestamp = timestamp;&#10;    }&#10;&#10;    public ChatMessage(String id, String userId, String content, boolean isFromUser, long timestamp, String topic) {&#10;        this.id = id;&#10;        this.userId = userId;&#10;        this.content = content;&#10;        this.isFromUser = isFromUser;&#10;        this.timestamp = timestamp;&#10;        this.topic = topic;&#10;    }&#10;&#10;    // Getters&#10;    public String getId() {&#10;        return id;&#10;    }&#10;&#10;    public String getUserId() {&#10;        return userId;&#10;    }&#10;&#10;    public String getContent() {&#10;        return content;&#10;    }&#10;&#10;    public boolean isFromUser() {&#10;        return isFromUser;&#10;    }&#10;&#10;    public long getTimestamp() {&#10;        return timestamp;&#10;    }&#10;&#10;    public String getTopic() {&#10;        return topic;&#10;    }&#10;&#10;    // Setters&#10;    public void setId(String id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public void setUserId(String userId) {&#10;        this.userId = userId;&#10;    }&#10;&#10;    public void setContent(String content) {&#10;        this.content = content;&#10;    }&#10;&#10;    public void setFromUser(boolean fromUser) {&#10;        isFromUser = fromUser;&#10;    }&#10;&#10;    public void setTimestamp(long timestamp) {&#10;        this.timestamp = timestamp;&#10;    }&#10;&#10;    public void setTopic(String topic) {&#10;        this.topic = topic;&#10;    }&#10;&#10;    /**&#10;     * Chuyển đổi object thành Map để lưu vào Firebase&#10;     */&#10;    public Map&lt;String, Object&gt; toMap() {&#10;        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();&#10;        map.put(&quot;userId&quot;, userId);&#10;        map.put(&quot;content&quot;, content);&#10;        map.put(&quot;isFromUser&quot;, isFromUser);&#10;        map.put(&quot;timestamp&quot;, timestamp);&#10;        map.put(&quot;topic&quot;, topic);&#10;        return map;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;ChatMessage{&quot; +&#10;                &quot;id='&quot; + id + '\'' +&#10;                &quot;, userId='&quot; + userId + '\'' +&#10;                &quot;, content='&quot; + content + '\'' +&#10;                &quot;, isFromUser=&quot; + isFromUser +&#10;                &quot;, timestamp=&quot; + timestamp +&#10;                &quot;, topic='&quot; + topic + '\'' +&#10;                '}';&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/repository/ChatRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/repository/ChatRepository.java" />
              <option name="updatedContent" value="package com.vhn.doan.data.repository;&#10;&#10;import com.vhn.doan.data.ChatMessage;&#10;&#10;import java.util.List;&#10;&#10;/**&#10; * Repository interface cho chức năng Chat&#10; */&#10;public interface ChatRepository {&#10;&#10;    /**&#10;     * Gửi tin nhắn tới AI qua OpenRouter API&#10;     * @param message Nội dung tin nhắn&#10;     * @param callback Callback để nhận kết quả&#10;     */&#10;    void sendMessageToAI(String message, RepositoryCallback&lt;String&gt; callback);&#10;&#10;    /**&#10;     * Lưu tin nhắn vào Firebase&#10;     * @param chatMessage Tin nhắn cần lưu&#10;     * @param callback Callback để nhận kết quả&#10;     */&#10;    void saveChatMessage(ChatMessage chatMessage, RepositoryCallback&lt;ChatMessage&gt; callback);&#10;&#10;    /**&#10;     * Lấy danh sách tin nhắn của người dùng từ Firebase&#10;     * @param userId ID người dùng&#10;     * @param callback Callback để nhận kết quả&#10;     */&#10;    void getChatMessages(String userId, RepositoryCallback&lt;List&lt;ChatMessage&gt;&gt; callback);&#10;&#10;    /**&#10;     * Xóa lịch sử chat của người dùng&#10;     * @param userId ID người dùng&#10;     * @param callback Callback để nhận kết quả&#10;     */&#10;    void clearChatHistory(String userId, RepositoryCallback&lt;Boolean&gt; callback);&#10;&#10;    /**&#10;     * Trích xuất chủ đề từ nội dung tin nhắn&#10;     * @param content Nội dung tin nhắn&#10;     * @return Chủ đề được trích xuất&#10;     */&#10;    String extractTopic(String content);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/repository/ChatRepositoryImpl.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/repository/ChatRepositoryImpl.java" />
              <option name="originalContent" value="package com.vhn.doan.data.repository;&#10;&#10;import android.os.Handler;&#10;import android.os.Looper;&#10;import android.util.Log;&#10;&#10;import com.google.firebase.database.DataSnapshot;&#10;import com.google.firebase.database.DatabaseError;&#10;import com.google.firebase.database.DatabaseReference;&#10;import com.google.firebase.database.FirebaseDatabase;&#10;import com.google.firebase.database.ValueEventListener;&#10;import com.google.gson.Gson;&#10;import com.google.gson.JsonObject;&#10;import com.google.gson.JsonArray;&#10;import com.vhn.doan.data.ChatMessage;&#10;import com.vhn.doan.data.ChatApiResponse;&#10;&#10;import java.io.IOException;&#10;import java.util.ArrayList;&#10;import java.util.Collections;&#10;import java.util.List;&#10;import java.util.concurrent.TimeUnit;&#10;&#10;import okhttp3.Call;&#10;import okhttp3.Callback;&#10;import okhttp3.MediaType;&#10;import okhttp3.OkHttpClient;&#10;import okhttp3.Request;&#10;import okhttp3.RequestBody;&#10;import okhttp3.Response;&#10;&#10;/**&#10; * Implementation của ChatRepository&#10; */&#10;public class ChatRepositoryImpl implements ChatRepository {&#10;&#10;    private static final String TAG = &quot;ChatRepositoryImpl&quot;;&#10;    private static final String OPENROUTER_API_URL = &quot;https://openrouter.ai/api/v1/chat/completions&quot;;&#10;    private static final String API_KEY = &quot;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&quot;;&#10;    private static final String CHAT_MESSAGES_PATH = &quot;chat_messages&quot;;&#10;    private static final String USER_TOPICS_PATH = &quot;user_topics&quot;;&#10;&#10;    private final DatabaseReference database;&#10;    private final OkHttpClient httpClient;&#10;    private final Gson gson;&#10;    private final Handler mainHandler;&#10;&#10;    public ChatRepositoryImpl() {&#10;        this.database = FirebaseDatabase.getInstance().getReference();&#10;        this.httpClient = new OkHttpClient.Builder()&#10;                .connectTimeout(30, TimeUnit.SECONDS)&#10;                .readTimeout(30, TimeUnit.SECONDS)&#10;                .writeTimeout(30, TimeUnit.SECONDS)&#10;                .build();&#10;        this.gson = new Gson();&#10;        this.mainHandler = new Handler(Looper.getMainLooper());&#10;    }&#10;&#10;    @Override&#10;    public void sendMessageToAI(String message, RepositoryCallback&lt;String&gt; callback) {&#10;        try {&#10;            // Tạo JSON request body với format đúng&#10;            JsonObject requestJson = new JsonObject();&#10;            requestJson.addProperty(&quot;model&quot;, &quot;openai/gpt-3.5-turbo&quot;);&#10;&#10;            JsonArray messagesArray = new JsonArray();&#10;&#10;            // System message&#10;            JsonObject systemMessage = new JsonObject();&#10;            systemMessage.addProperty(&quot;role&quot;, &quot;system&quot;);&#10;            systemMessage.addProperty(&quot;content&quot;, &quot;Bạn là trợ lý chuyên về sức khỏe. Chỉ trả lời các câu hỏi liên quan đến sức khỏe, y tế, dinh dưỡng, tập luyện thể dục. Nếu người dùng hỏi ngoài lĩnh vực sức khỏe thì từ chối trả lời một cách lịch sự và gợi ý họ hỏi về sức khỏe.&quot;);&#10;            messagesArray.add(systemMessage);&#10;&#10;            // User message&#10;            JsonObject userMessage = new JsonObject();&#10;            userMessage.addProperty(&quot;role&quot;, &quot;user&quot;);&#10;            userMessage.addProperty(&quot;content&quot;, message);&#10;            messagesArray.add(userMessage);&#10;&#10;            requestJson.add(&quot;messages&quot;, messagesArray);&#10;&#10;            RequestBody body = RequestBody.create(&#10;                    MediaType.parse(&quot;application/json; charset=utf-8&quot;),&#10;                    requestJson.toString()&#10;            );&#10;&#10;            Request request = new Request.Builder()&#10;                    .url(OPENROUTER_API_URL)&#10;                    .post(body)&#10;                    .addHeader(&quot;Authorization&quot;, &quot;Bearer &quot; + API_KEY)&#10;                    .addHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;                    .addHeader(&quot;HTTP-Referer&quot;, &quot;https://healthtips.app&quot;) // Thêm referer&#10;                    .addHeader(&quot;X-Title&quot;, &quot;HealthTips Chat AI&quot;) // Thêm app title&#10;                    .build();&#10;&#10;            Log.d(TAG, &quot;Sending API request: &quot; + requestJson.toString());&#10;&#10;            httpClient.newCall(request).enqueue(new Callback() {&#10;                @Override&#10;                public void onFailure(Call call, IOException e) {&#10;                    Log.e(TAG, &quot;API call failed&quot;, e);&#10;                    // Chuyển về main thread để callback&#10;                    mainHandler.post(() -&gt; {&#10;                        callback.onError(&quot;Không thể kết nối đến AI. Vui lòng kiểm tra kết nối mạng.&quot;);&#10;                    });&#10;                }&#10;&#10;                @Override&#10;                public void onResponse(Call call, Response response) throws IOException {&#10;                    try {&#10;                        String responseBody = response.body() != null ? response.body().string() : &quot;&quot;;&#10;                        Log.d(TAG, &quot;API Response Code: &quot; + response.code());&#10;                        Log.d(TAG, &quot;API Response Body: &quot; + responseBody);&#10;&#10;                        if (response.isSuccessful()) {&#10;                            ChatApiResponse apiResponse = gson.fromJson(responseBody, ChatApiResponse.class);&#10;&#10;                            if (apiResponse != null &amp;&amp; apiResponse.getChoices() != null &amp;&amp; !apiResponse.getChoices().isEmpty()) {&#10;                                String aiMessage = apiResponse.getChoices().get(0).getMessage().getContent();&#10;                                // Chuyển về main thread để callback&#10;                                mainHandler.post(() -&gt; {&#10;                                    callback.onSuccess(aiMessage);&#10;                                });&#10;                            } else {&#10;                                // Chuyển về main thread để callback&#10;                                mainHandler.post(() -&gt; {&#10;                                    callback.onError(&quot;AI không thể trả lời câu hỏi này.&quot;);&#10;                                });&#10;                            }&#10;                        } else {&#10;                            Log.e(TAG, &quot;API Error Response: &quot; + responseBody);&#10;                            String errorMessage;&#10;&#10;                            switch (response.code()) {&#10;                                case 401:&#10;                                    errorMessage = &quot;Lỗi xác thực API. Vui lòng thử lại sau.&quot;;&#10;                                    break;&#10;                                case 429:&#10;                                    errorMessage = &quot;Quá nhiều yêu cầu. Vui lòng chờ một chút rồi thử lại.&quot;;&#10;                                    break;&#10;                                case 500:&#10;                                    errorMessage = &quot;Lỗi server AI. Vui lòng thử lại sau.&quot;;&#10;                                    break;&#10;                                default:&#10;                                    errorMessage = &quot;Có lỗi xảy ra khi gọi AI (Mã: &quot; + response.code() + &quot;)&quot;;&#10;                            }&#10;&#10;                            // Chuyển về main thread để callback&#10;                            mainHandler.post(() -&gt; {&#10;                                callback.onError(errorMessage);&#10;                            });&#10;                        }&#10;                    } catch (Exception e) {&#10;                        Log.e(TAG, &quot;Error parsing API response&quot;, e);&#10;                        // Chuyển về main thread để callback&#10;                        mainHandler.post(() -&gt; {&#10;                            callback.onError(&quot;Có lỗi xảy ra khi xử lý phản hồi từ AI.&quot;);&#10;                        });&#10;                    }&#10;                }&#10;            });&#10;&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Error creating API request&quot;, e);&#10;            callback.onError(&quot;Có lỗi xảy ra khi tạo yêu cầu gửi đến AI.&quot;);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void saveChatMessage(ChatMessage chatMessage, RepositoryCallback&lt;ChatMessage&gt; callback) {&#10;        try {&#10;            String messageId = database.child(CHAT_MESSAGES_PATH)&#10;                    .child(chatMessage.getUserId())&#10;                    .push().getKey();&#10;&#10;            if (messageId != null) {&#10;                chatMessage.setId(messageId);&#10;&#10;                database.child(CHAT_MESSAGES_PATH)&#10;                        .child(chatMessage.getUserId())&#10;                        .child(messageId)&#10;                        .setValue(chatMessage.toMap())&#10;                        .addOnSuccessListener(aVoid -&gt; {&#10;                            Log.d(TAG, &quot;Message saved successfully&quot;);&#10;&#10;                            // Lưu chủ đề nếu có&#10;                            if (chatMessage.getTopic() != null &amp;&amp; !chatMessage.getTopic().isEmpty()) {&#10;                                saveUserTopic(chatMessage.getUserId(), chatMessage.getTopic());&#10;                            }&#10;&#10;                            callback.onSuccess(chatMessage);&#10;                        })&#10;                        .addOnFailureListener(e -&gt; {&#10;                            Log.e(TAG, &quot;Failed to save message&quot;, e);&#10;                            callback.onError(&quot;Không thể lưu tin nhắn: &quot; + e.getMessage());&#10;                        });&#10;            } else {&#10;                callback.onError(&quot;Không thể tạo ID cho tin nhắn&quot;);&#10;            }&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Error saving chat message&quot;, e);&#10;            callback.onError(&quot;Có lỗi xảy ra khi lưu tin nhắn: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void getChatMessages(String userId, RepositoryCallback&lt;List&lt;ChatMessage&gt;&gt; callback) {&#10;        try {&#10;            database.child(CHAT_MESSAGES_PATH)&#10;                    .child(userId)&#10;                    .orderByChild(&quot;timestamp&quot;)&#10;                    .addValueEventListener(new ValueEventListener() {&#10;                        @Override&#10;                        public void onDataChange(DataSnapshot dataSnapshot) {&#10;                            List&lt;ChatMessage&gt; messages = new ArrayList&lt;&gt;();&#10;&#10;                            for (DataSnapshot messageSnapshot : dataSnapshot.getChildren()) {&#10;                                try {&#10;                                    ChatMessage message = new ChatMessage();&#10;                                    message.setId(messageSnapshot.getKey());&#10;                                    message.setUserId(messageSnapshot.child(&quot;userId&quot;).getValue(String.class));&#10;                                    message.setContent(messageSnapshot.child(&quot;content&quot;).getValue(String.class));&#10;                                    message.setFromUser(messageSnapshot.child(&quot;isFromUser&quot;).getValue(Boolean.class));&#10;                                    message.setTimestamp(messageSnapshot.child(&quot;timestamp&quot;).getValue(Long.class));&#10;                                    message.setTopic(messageSnapshot.child(&quot;topic&quot;).getValue(String.class));&#10;&#10;                                    messages.add(message);&#10;                                } catch (Exception e) {&#10;                                    Log.e(TAG, &quot;Error parsing message&quot;, e);&#10;                                }&#10;                            }&#10;&#10;                            // Sắp xếp theo thời gian&#10;                            Collections.sort(messages, (m1, m2) -&gt; Long.compare(m1.getTimestamp(), m2.getTimestamp()));&#10;&#10;                            Log.d(TAG, &quot;Loaded &quot; + messages.size() + &quot; messages&quot;);&#10;                            callback.onSuccess(messages);&#10;                        }&#10;&#10;                        @Override&#10;                        public void onCancelled(DatabaseError databaseError) {&#10;                            Log.e(TAG, &quot;Failed to load messages&quot;, databaseError.toException());&#10;                            callback.onError(&quot;Không thể tải tin nhắn: &quot; + databaseError.getMessage());&#10;                        }&#10;                    });&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Error loading chat messages&quot;, e);&#10;            callback.onError(&quot;Có lỗi xảy ra khi tải tin nhắn: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void clearChatHistory(String userId, RepositoryCallback&lt;Boolean&gt; callback) {&#10;        try {&#10;            database.child(CHAT_MESSAGES_PATH)&#10;                    .child(userId)&#10;                    .removeValue()&#10;                    .addOnSuccessListener(aVoid -&gt; {&#10;                        Log.d(TAG, &quot;Chat history cleared successfully&quot;);&#10;                        callback.onSuccess(true);&#10;                    })&#10;                    .addOnFailureListener(e -&gt; {&#10;                        Log.e(TAG, &quot;Failed to clear chat history&quot;, e);&#10;                        callback.onError(&quot;Không thể xóa lịch sử chat: &quot; + e.getMessage());&#10;                    });&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Error clearing chat history&quot;, e);&#10;            callback.onError(&quot;Có lỗi xảy ra khi xóa lịch sử chat: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public String extractTopic(String content) {&#10;        try {&#10;            // Các từ khóa chủ đề về sức khỏe&#10;            String[] healthTopics = {&#10;                &quot;tim mạch&quot;, &quot;huyết áp&quot;, &quot;cholesterol&quot;, &quot;đường huyết&quot;, &quot;tiểu đường&quot;,&#10;                &quot;dinh dưỡng&quot;, &quot;vitamin&quot;, &quot;protein&quot;, &quot;carb&quot;, &quot;chất béo&quot;,&#10;                &quot;tập luyện&quot;, &quot;thể dục&quot;, &quot;yoga&quot;, &quot;cardio&quot;, &quot;cơ bắp&quot;,&#10;                &quot;giảm cân&quot;, &quot;tăng cân&quot;, &quot;béo phì&quot;, &quot;ăn kiêng&quot;,&#10;                &quot;stress&quot;, &quot;lo âu&quot;, &quot;trầm cảm&quot;, &quot;tâm lý&quot;, &quot;tinh thần&quot;,&#10;                &quot;giấc ngủ&quot;, &quot;mất ngủ&quot;, &quot;ngủ&quot;, &quot;nghỉ ngơi&quot;,&#10;                &quot;da&quot;, &quot;tóc&quot;, &quot;móng&quot;, &quot;mỹ phẩm&quot;, &quot;chăm sóc da&quot;,&#10;                &quot;mang thai&quot;, &quot;sinh sản&quot;, &quot;kinh nguyệt&quot;, &quot;phụ khoa&quot;,&#10;                &quot;trẻ em&quot;, &quot;em bé&quot;, &quot;sức khỏe trẻ&quot;, &quot;phát triển&quot;,&#10;                &quot;người cao tuổi&quot;, &quot;lão hóa&quot;, &quot;xương khớp&quot;, &quot;cột sống&quot;,&#10;                &quot;mắt&quot;, &quot;thị lực&quot;, &quot;tai&quot;, &quot;thính giác&quot;,&#10;                &quot;răng&quot;, &quot;miệng&quot;, &quot;nha khoa&quot;, &quot;vệ sinh răng miệng&quot;,&#10;                &quot;cảm cúm&quot;, &quot;sốt&quot;, &quot;ho&quot;, &quot;viêm họng&quot;, &quot;virus&quot;,&#10;                &quot;thuốc&quot;, &quot;dược phẩm&quot;, &quot;tác dụng phụ&quot;, &quot;liều dùng&quot;&#10;            };&#10;&#10;            content = content.toLowerCase();&#10;&#10;            for (String topic : healthTopics) {&#10;                if (content.contains(topic)) {&#10;                    return topic;&#10;                }&#10;            }&#10;&#10;            // Nếu không tìm thấy chủ đề cụ thể, trả về chủ đề chung&#10;            return &quot;sức khỏe tổng quát&quot;;&#10;&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Error extracting topic&quot;, e);&#10;            return &quot;sức khỏe tổng quát&quot;;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Lưu chủ đề mà người dùng quan tâm vào Firebase&#10;     */&#10;    private void saveUserTopic(String userId, String topic) {&#10;        try {&#10;            database.child(USER_TOPICS_PATH)&#10;                    .child(userId)&#10;                    .child(topic)&#10;                    .setValue(System.currentTimeMillis())&#10;                    .addOnSuccessListener(aVoid -&gt; Log.d(TAG, &quot;User topic saved: &quot; + topic))&#10;                    .addOnFailureListener(e -&gt; Log.e(TAG, &quot;Failed to save user topic&quot;, e));&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Error saving user topic&quot;, e);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.data.repository;&#10;&#10;import android.os.Handler;&#10;import android.os.Looper;&#10;import android.util.Log;&#10;&#10;import com.google.firebase.database.DataSnapshot;&#10;import com.google.firebase.database.DatabaseError;&#10;import com.google.firebase.database.DatabaseReference;&#10;import com.google.firebase.database.FirebaseDatabase;&#10;import com.google.firebase.database.ValueEventListener;&#10;import com.google.gson.Gson;&#10;import com.google.gson.JsonObject;&#10;import com.google.gson.JsonArray;&#10;import com.vhn.doan.data.ChatMessage;&#10;import com.vhn.doan.data.ChatApiResponse;&#10;&#10;import java.io.IOException;&#10;import java.util.ArrayList;&#10;import java.util.Collections;&#10;import java.util.List;&#10;import java.util.concurrent.TimeUnit;&#10;&#10;import okhttp3.Call;&#10;import okhttp3.Callback;&#10;import okhttp3.MediaType;&#10;import okhttp3.OkHttpClient;&#10;import okhttp3.Request;&#10;import okhttp3.RequestBody;&#10;import okhttp3.Response;&#10;&#10;/**&#10; * Implementation của ChatRepository&#10; */&#10;public class ChatRepositoryImpl implements ChatRepository {&#10;&#10;    private static final String TAG = &quot;ChatRepositoryImpl&quot;;&#10;    private static final String OPENROUTER_API_URL = &quot;https://openrouter.ai/api/v1/chat/completions&quot;;&#10;    // Thử với API key mới hoặc kiểm tra lại format&#10;    private static final String API_KEY = &quot;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&quot;;&#10;    private static final String CHAT_MESSAGES_PATH = &quot;chat_messages&quot;;&#10;    private static final String USER_TOPICS_PATH = &quot;user_topics&quot;;&#10;&#10;    private final DatabaseReference database;&#10;    private final OkHttpClient httpClient;&#10;    private final Gson gson;&#10;    private final Handler mainHandler;&#10;&#10;    public ChatRepositoryImpl() {&#10;        this.database = FirebaseDatabase.getInstance().getReference();&#10;        this.httpClient = new OkHttpClient.Builder()&#10;                .connectTimeout(30, TimeUnit.SECONDS)&#10;                .readTimeout(30, TimeUnit.SECONDS)&#10;                .writeTimeout(30, TimeUnit.SECONDS)&#10;                .build();&#10;        this.gson = new Gson();&#10;        this.mainHandler = new Handler(Looper.getMainLooper());&#10;    }&#10;&#10;    @Override&#10;    public void sendMessageToAI(String message, RepositoryCallback&lt;String&gt; callback) {&#10;        try {&#10;            // Tạo JSON request body theo format chính xác của OpenRouter&#10;            JsonObject requestJson = new JsonObject();&#10;            requestJson.addProperty(&quot;model&quot;, &quot;openai/gpt-3.5-turbo&quot;);&#10;            &#10;            // Thêm các parameters bổ sung theo yêu cầu OpenRouter&#10;            requestJson.addProperty(&quot;max_tokens&quot;, 1000);&#10;            requestJson.addProperty(&quot;temperature&quot;, 0.7);&#10;            &#10;            JsonArray messagesArray = new JsonArray();&#10;            &#10;            // System message&#10;            JsonObject systemMessage = new JsonObject();&#10;            systemMessage.addProperty(&quot;role&quot;, &quot;system&quot;);&#10;            systemMessage.addProperty(&quot;content&quot;, &quot;Bạn là trợ lý AI chuyên về sức khỏe. Chỉ trả lời các câu hỏi liên quan đến sức khỏe, y tế, dinh dưỡng, thể dục thể thao. Nếu người dùng hỏi ngoài lĩnh vực sức khỏe thì từ chối một cách lịch sự và đề nghị họ hỏi về sức khỏe.&quot;);&#10;            messagesArray.add(systemMessage);&#10;            &#10;            // User message&#10;            JsonObject userMessage = new JsonObject();&#10;            userMessage.addProperty(&quot;role&quot;, &quot;user&quot;);&#10;            userMessage.addProperty(&quot;content&quot;, message);&#10;            messagesArray.add(userMessage);&#10;            &#10;            requestJson.add(&quot;messages&quot;, messagesArray);&#10;&#10;            String jsonString = gson.toJson(requestJson);&#10;            Log.d(TAG, &quot;Request JSON: &quot; + jsonString);&#10;&#10;            RequestBody body = RequestBody.create(&#10;                    MediaType.parse(&quot;application/json&quot;),&#10;                    jsonString&#10;            );&#10;&#10;            Request request = new Request.Builder()&#10;                    .url(OPENROUTER_API_URL)&#10;                    .post(body)&#10;                    .addHeader(&quot;Authorization&quot;, &quot;Bearer &quot; + API_KEY)&#10;                    .addHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;                    .addHeader(&quot;HTTP-Referer&quot;, &quot;https://healthtips-vn.app&quot;)&#10;                    .addHeader(&quot;X-Title&quot;, &quot;HealthTips Vietnam&quot;)&#10;                    .build();&#10;&#10;            Log.d(TAG, &quot;Sending request to: &quot; + OPENROUTER_API_URL);&#10;            Log.d(TAG, &quot;Authorization header: Bearer &quot; + API_KEY.substring(0, 20) + &quot;...&quot;);&#10;&#10;            httpClient.newCall(request).enqueue(new Callback() {&#10;                @Override&#10;                public void onFailure(Call call, IOException e) {&#10;                    Log.e(TAG, &quot;Network request failed&quot;, e);&#10;                    mainHandler.post(() -&gt; {&#10;                        callback.onError(&quot;Không thể kết nối đến máy chủ AI. Kiểm tra kết nối mạng của bạn.&quot;);&#10;                    });&#10;                }&#10;&#10;                @Override&#10;                public void onResponse(Call call, Response response) throws IOException {&#10;                    String responseBody = &quot;&quot;;&#10;                    try {&#10;                        if (response.body() != null) {&#10;                            responseBody = response.body().string();&#10;                        }&#10;                        &#10;                        Log.d(TAG, &quot;Response Code: &quot; + response.code());&#10;                        Log.d(TAG, &quot;Response Headers: &quot; + response.headers().toString());&#10;                        Log.d(TAG, &quot;Response Body: &quot; + responseBody);&#10;                        &#10;                        if (response.isSuccessful()) {&#10;                            ChatApiResponse apiResponse = gson.fromJson(responseBody, ChatApiResponse.class);&#10;                            &#10;                            if (apiResponse != null &amp;&amp; &#10;                                apiResponse.getChoices() != null &amp;&amp; &#10;                                !apiResponse.getChoices().isEmpty() &amp;&amp;&#10;                                apiResponse.getChoices().get(0).getMessage() != null) {&#10;                                &#10;                                String aiMessage = apiResponse.getChoices().get(0).getMessage().getContent();&#10;                                if (aiMessage != null &amp;&amp; !aiMessage.trim().isEmpty()) {&#10;                                    mainHandler.post(() -&gt; callback.onSuccess(aiMessage.trim()));&#10;                                } else {&#10;                                    mainHandler.post(() -&gt; callback.onError(&quot;AI trả về phản hồi trống.&quot;));&#10;                                }&#10;                            } else {&#10;                                mainHandler.post(() -&gt; callback.onError(&quot;Định dạng phản hồi từ AI không hợp lệ.&quot;));&#10;                            }&#10;                        } else {&#10;                            // Xử lý các lỗi HTTP cụ thể&#10;                            String errorMessage = parseErrorMessage(response.code(), responseBody);&#10;                            Log.e(TAG, &quot;API Error: &quot; + errorMessage);&#10;                            &#10;                            mainHandler.post(() -&gt; callback.onError(errorMessage));&#10;                        }&#10;                    } catch (Exception e) {&#10;                        Log.e(TAG, &quot;Error parsing response&quot;, e);&#10;                        Log.e(TAG, &quot;Response body was: &quot; + responseBody);&#10;                        &#10;                        mainHandler.post(() -&gt; {&#10;                            callback.onError(&quot;Lỗi xử lý phản hồi từ AI. Vui lòng thử lại.&quot;);&#10;                        });&#10;                    }&#10;                }&#10;            });&#10;&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Error creating request&quot;, e);&#10;            callback.onError(&quot;Lỗi tạo yêu cầu gửi đến AI.&quot;);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Phân tích thông báo lỗi từ API response&#10;     */&#10;    private String parseErrorMessage(int responseCode, String responseBody) {&#10;        try {&#10;            // Thử parse JSON error response&#10;            JsonObject errorResponse = gson.fromJson(responseBody, JsonObject.class);&#10;            if (errorResponse.has(&quot;error&quot;)) {&#10;                JsonObject error = errorResponse.getAsJsonObject(&quot;error&quot;);&#10;                if (error.has(&quot;message&quot;)) {&#10;                    String apiErrorMessage = error.get(&quot;message&quot;).getAsString();&#10;                    Log.d(TAG, &quot;API Error Message: &quot; + apiErrorMessage);&#10;                    &#10;                    // Dịch một số lỗi phổ biến&#10;                    if (apiErrorMessage.contains(&quot;No auth credentials&quot;)) {&#10;                        return &quot;Lỗi xác thực API. Vui lòng liên hệ quản trị viên.&quot;;&#10;                    } else if (apiErrorMessage.contains(&quot;Rate limit&quot;)) {&#10;                        return &quot;Đã vượt quá giới hạn yêu cầu. Vui lòng thử lại sau ít phút.&quot;;&#10;                    } else if (apiErrorMessage.contains(&quot;Invalid model&quot;)) {&#10;                        return &quot;Mô hình AI không hợp lệ. Vui lòng thử lại.&quot;;&#10;                    }&#10;                    return &quot;Lỗi từ AI: &quot; + apiErrorMessage;&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Error parsing error response&quot;, e);&#10;        }&#10;        &#10;        // Fallback cho các HTTP status codes&#10;        switch (responseCode) {&#10;            case 401:&#10;                return &quot;Lỗi xác thực. API key có thể đã hết hạn hoặc không hợp lệ.&quot;;&#10;            case 403:&#10;                return &quot;Không có quyền truy cập. Vui lòng kiểm tra cấu hình API.&quot;;&#10;            case 429:&#10;                return &quot;Quá nhiều yêu cầu. Vui lòng chờ một chút rồi thử lại.&quot;;&#10;            case 500:&#10;                return &quot;Lỗi máy chủ AI. Vui lòng thử lại sau.&quot;;&#10;            case 502:&#10;            case 503:&#10;            case 504:&#10;                return &quot;Máy chủ AI tạm thời không khả dụng. Vui lòng thử lại sau.&quot;;&#10;            default:&#10;                return &quot;Lỗi không xác định từ AI (Mã: &quot; + responseCode + &quot;). Vui lòng thử lại.&quot;;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void saveChatMessage(ChatMessage chatMessage, RepositoryCallback&lt;ChatMessage&gt; callback) {&#10;        try {&#10;            String messageId = database.child(CHAT_MESSAGES_PATH)&#10;                    .child(chatMessage.getUserId())&#10;                    .push().getKey();&#10;&#10;            if (messageId != null) {&#10;                chatMessage.setId(messageId);&#10;&#10;                database.child(CHAT_MESSAGES_PATH)&#10;                        .child(chatMessage.getUserId())&#10;                        .child(messageId)&#10;                        .setValue(chatMessage.toMap())&#10;                        .addOnSuccessListener(aVoid -&gt; {&#10;                            Log.d(TAG, &quot;Message saved successfully&quot;);&#10;&#10;                            // Lưu chủ đề nếu có&#10;                            if (chatMessage.getTopic() != null &amp;&amp; !chatMessage.getTopic().isEmpty()) {&#10;                                saveUserTopic(chatMessage.getUserId(), chatMessage.getTopic());&#10;                            }&#10;&#10;                            callback.onSuccess(chatMessage);&#10;                        })&#10;                        .addOnFailureListener(e -&gt; {&#10;                            Log.e(TAG, &quot;Failed to save message&quot;, e);&#10;                            callback.onError(&quot;Không thể lưu tin nhắn: &quot; + e.getMessage());&#10;                        });&#10;            } else {&#10;                callback.onError(&quot;Không thể tạo ID cho tin nhắn&quot;);&#10;            }&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Error saving chat message&quot;, e);&#10;            callback.onError(&quot;Có lỗi xảy ra khi lưu tin nhắn: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void getChatMessages(String userId, RepositoryCallback&lt;List&lt;ChatMessage&gt;&gt; callback) {&#10;        try {&#10;            database.child(CHAT_MESSAGES_PATH)&#10;                    .child(userId)&#10;                    .orderByChild(&quot;timestamp&quot;)&#10;                    .addValueEventListener(new ValueEventListener() {&#10;                        @Override&#10;                        public void onDataChange(DataSnapshot dataSnapshot) {&#10;                            List&lt;ChatMessage&gt; messages = new ArrayList&lt;&gt;();&#10;&#10;                            for (DataSnapshot messageSnapshot : dataSnapshot.getChildren()) {&#10;                                try {&#10;                                    ChatMessage message = new ChatMessage();&#10;                                    message.setId(messageSnapshot.getKey());&#10;                                    message.setUserId(messageSnapshot.child(&quot;userId&quot;).getValue(String.class));&#10;                                    message.setContent(messageSnapshot.child(&quot;content&quot;).getValue(String.class));&#10;                                    message.setFromUser(messageSnapshot.child(&quot;isFromUser&quot;).getValue(Boolean.class));&#10;                                    message.setTimestamp(messageSnapshot.child(&quot;timestamp&quot;).getValue(Long.class));&#10;                                    message.setTopic(messageSnapshot.child(&quot;topic&quot;).getValue(String.class));&#10;&#10;                                    messages.add(message);&#10;                                } catch (Exception e) {&#10;                                    Log.e(TAG, &quot;Error parsing message&quot;, e);&#10;                                }&#10;                            }&#10;&#10;                            // Sắp xếp theo thời gian&#10;                            Collections.sort(messages, (m1, m2) -&gt; Long.compare(m1.getTimestamp(), m2.getTimestamp()));&#10;&#10;                            Log.d(TAG, &quot;Loaded &quot; + messages.size() + &quot; messages&quot;);&#10;                            callback.onSuccess(messages);&#10;                        }&#10;&#10;                        @Override&#10;                        public void onCancelled(DatabaseError databaseError) {&#10;                            Log.e(TAG, &quot;Failed to load messages&quot;, databaseError.toException());&#10;                            callback.onError(&quot;Không thể tải tin nhắn: &quot; + databaseError.getMessage());&#10;                        }&#10;                    });&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Error loading chat messages&quot;, e);&#10;            callback.onError(&quot;Có lỗi xảy ra khi tải tin nhắn: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void clearChatHistory(String userId, RepositoryCallback&lt;Boolean&gt; callback) {&#10;        try {&#10;            database.child(CHAT_MESSAGES_PATH)&#10;                    .child(userId)&#10;                    .removeValue()&#10;                    .addOnSuccessListener(aVoid -&gt; {&#10;                        Log.d(TAG, &quot;Chat history cleared successfully&quot;);&#10;                        callback.onSuccess(true);&#10;                    })&#10;                    .addOnFailureListener(e -&gt; {&#10;                        Log.e(TAG, &quot;Failed to clear chat history&quot;, e);&#10;                        callback.onError(&quot;Không thể xóa lịch sử chat: &quot; + e.getMessage());&#10;                    });&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Error clearing chat history&quot;, e);&#10;            callback.onError(&quot;Có lỗi xảy ra khi xóa lịch sử chat: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public String extractTopic(String content) {&#10;        try {&#10;            // Các từ khóa chủ đề về sức khỏe&#10;            String[] healthTopics = {&#10;                &quot;tim mạch&quot;, &quot;huyết áp&quot;, &quot;cholesterol&quot;, &quot;đường huyết&quot;, &quot;tiểu đường&quot;,&#10;                &quot;dinh dưỡng&quot;, &quot;vitamin&quot;, &quot;protein&quot;, &quot;carb&quot;, &quot;chất béo&quot;,&#10;                &quot;tập luyện&quot;, &quot;thể dục&quot;, &quot;yoga&quot;, &quot;cardio&quot;, &quot;cơ bắp&quot;,&#10;                &quot;giảm cân&quot;, &quot;tăng cân&quot;, &quot;béo phì&quot;, &quot;ăn kiêng&quot;,&#10;                &quot;stress&quot;, &quot;lo âu&quot;, &quot;trầm cảm&quot;, &quot;tâm lý&quot;, &quot;tinh thần&quot;,&#10;                &quot;giấc ngủ&quot;, &quot;mất ngủ&quot;, &quot;ngủ&quot;, &quot;nghỉ ngơi&quot;,&#10;                &quot;da&quot;, &quot;tóc&quot;, &quot;móng&quot;, &quot;mỹ phẩm&quot;, &quot;chăm sóc da&quot;,&#10;                &quot;mang thai&quot;, &quot;sinh sản&quot;, &quot;kinh nguyệt&quot;, &quot;phụ khoa&quot;,&#10;                &quot;trẻ em&quot;, &quot;em bé&quot;, &quot;sức khỏe trẻ&quot;, &quot;phát triển&quot;,&#10;                &quot;người cao tuổi&quot;, &quot;lão hóa&quot;, &quot;xương khớp&quot;, &quot;cột sống&quot;,&#10;                &quot;mắt&quot;, &quot;thị lực&quot;, &quot;tai&quot;, &quot;thính giác&quot;,&#10;                &quot;răng&quot;, &quot;miệng&quot;, &quot;nha khoa&quot;, &quot;vệ sinh răng miệng&quot;,&#10;                &quot;cảm cúm&quot;, &quot;sốt&quot;, &quot;ho&quot;, &quot;viêm họng&quot;, &quot;virus&quot;,&#10;                &quot;thuốc&quot;, &quot;dược phẩm&quot;, &quot;tác dụng phụ&quot;, &quot;liều dùng&quot;&#10;            };&#10;&#10;            content = content.toLowerCase();&#10;&#10;            for (String topic : healthTopics) {&#10;                if (content.contains(topic)) {&#10;                    return topic;&#10;                }&#10;            }&#10;&#10;            // Nếu không tìm thấy chủ đề cụ thể, trả về chủ đề chung&#10;            return &quot;sức khỏe tổng quát&quot;;&#10;&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Error extracting topic&quot;, e);&#10;            return &quot;sức khỏe tổng quát&quot;;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Lưu chủ đề mà người dùng quan tâm vào Firebase&#10;     */&#10;    private void saveUserTopic(String userId, String topic) {&#10;        try {&#10;            database.child(USER_TOPICS_PATH)&#10;                    .child(userId)&#10;                    .child(topic)&#10;                    .setValue(System.currentTimeMillis())&#10;                    .addOnSuccessListener(aVoid -&gt; Log.d(TAG, &quot;User topic saved: &quot; + topic))&#10;                    .addOnFailureListener(e -&gt; Log.e(TAG, &quot;Failed to save user topic&quot;, e));&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Error saving user topic&quot;, e);&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/chat/ChatAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/chat/ChatAdapter.java" />
              <option name="originalContent" value="package com.vhn.doan.presentation.chat;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.data.ChatMessage;&#10;&#10;import java.text.SimpleDateFormat;&#10;import java.util.ArrayList;&#10;import java.util.Date;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;/**&#10; * Adapter cho danh sách tin nhắn chat&#10; */&#10;public class ChatAdapter extends RecyclerView.Adapter&lt;RecyclerView.ViewHolder&gt; {&#10;&#10;    private static final int VIEW_TYPE_USER_MESSAGE = 1;&#10;    private static final int VIEW_TYPE_AI_MESSAGE = 2;&#10;    private static final int VIEW_TYPE_TYPING = 3;&#10;&#10;    private List&lt;ChatMessage&gt; messages;&#10;    private boolean isAiTyping = false;&#10;    private final SimpleDateFormat timeFormat;&#10;&#10;    public ChatAdapter() {&#10;        this.messages = new ArrayList&lt;&gt;();&#10;        this.timeFormat = new SimpleDateFormat(&quot;HH:mm&quot;, Locale.getDefault());&#10;    }&#10;&#10;    @Override&#10;    public int getItemViewType(int position) {&#10;        if (isAiTyping &amp;&amp; position == getItemCount() - 1) {&#10;            return VIEW_TYPE_TYPING;&#10;        }&#10;&#10;        ChatMessage message = messages.get(position);&#10;        return message.isFromUser() ? VIEW_TYPE_USER_MESSAGE : VIEW_TYPE_AI_MESSAGE;&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        LayoutInflater inflater = LayoutInflater.from(parent.getContext());&#10;&#10;        switch (viewType) {&#10;            case VIEW_TYPE_USER_MESSAGE:&#10;                View userView = inflater.inflate(R.layout.item_chat_user_message, parent, false);&#10;                return new UserMessageViewHolder(userView);&#10;&#10;            case VIEW_TYPE_AI_MESSAGE:&#10;                View aiView = inflater.inflate(R.layout.item_chat_ai_message, parent, false);&#10;                return new AiMessageViewHolder(aiView);&#10;&#10;            case VIEW_TYPE_TYPING:&#10;                View typingView = inflater.inflate(R.layout.item_chat_typing, parent, false);&#10;                return new TypingViewHolder(typingView);&#10;&#10;            default:&#10;                throw new IllegalArgumentException(&quot;Unknown view type: &quot; + viewType);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {&#10;        if (holder instanceof TypingViewHolder) {&#10;            // Không cần bind data cho typing indicator&#10;            return;&#10;        }&#10;&#10;        ChatMessage message = messages.get(position);&#10;&#10;        if (holder instanceof UserMessageViewHolder) {&#10;            ((UserMessageViewHolder) holder).bind(message);&#10;        } else if (holder instanceof AiMessageViewHolder) {&#10;            ((AiMessageViewHolder) holder).bind(message);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        int count = messages.size();&#10;        if (isAiTyping) {&#10;            count++;&#10;        }&#10;        return count;&#10;    }&#10;&#10;    /**&#10;     * Cập nhật danh sách tin nhắn&#10;     */&#10;    public void setMessages(List&lt;ChatMessage&gt; messages) {&#10;        this.messages.clear();&#10;        this.messages.addAll(messages);&#10;        notifyDataSetChanged();&#10;    }&#10;&#10;    /**&#10;     * Thêm tin nhắn mới&#10;     */&#10;    public void addMessage(ChatMessage message) {&#10;        this.messages.add(message);&#10;        notifyItemInserted(messages.size() - 1);&#10;    }&#10;&#10;    /**&#10;     * Hiển thị trạng thái AI đang gõ&#10;     */&#10;    public void showAiTyping() {&#10;        if (!isAiTyping) {&#10;            isAiTyping = true;&#10;            notifyItemInserted(getItemCount() - 1);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Ẩn trạng thái AI đang gõ&#10;     */&#10;    public void hideAiTyping() {&#10;        if (isAiTyping) {&#10;            isAiTyping = false;&#10;            notifyItemRemoved(getItemCount());&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Xóa tất cả tin nhắn&#10;     */&#10;    public void clearMessages() {&#10;        int size = messages.size();&#10;        messages.clear();&#10;        notifyItemRangeRemoved(0, size);&#10;    }&#10;&#10;    // ViewHolder cho tin nhắn người dùng&#10;    class UserMessageViewHolder extends RecyclerView.ViewHolder {&#10;        private TextView messageText;&#10;        private TextView timeText;&#10;&#10;        public UserMessageViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            messageText = itemView.findViewById(R.id.tv_user_message);&#10;            timeText = itemView.findViewById(R.id.tv_user_time);&#10;        }&#10;&#10;        public void bind(ChatMessage message) {&#10;            messageText.setText(message.getContent());&#10;            timeText.setText(timeFormat.format(new Date(message.getTimestamp())));&#10;        }&#10;    }&#10;&#10;    // ViewHolder cho tin nhắn AI&#10;    class AiMessageViewHolder extends RecyclerView.ViewHolder {&#10;        private TextView messageText;&#10;        private TextView timeText;&#10;&#10;        public AiMessageViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            messageText = itemView.findViewById(R.id.tv_ai_message);&#10;            timeText = itemView.findViewById(R.id.tv_ai_time);&#10;        }&#10;&#10;        public void bind(ChatMessage message) {&#10;            messageText.setText(message.getContent());&#10;            timeText.setText(timeFormat.format(new Date(message.getTimestamp())));&#10;        }&#10;    }&#10;&#10;    // ViewHolder cho typing indicator&#10;    class TypingViewHolder extends RecyclerView.ViewHolder {&#10;        public TypingViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.chat;&#13;&#10;&#13;&#10;import android.view.LayoutInflater;&#13;&#10;import android.view.View;&#13;&#10;import android.view.ViewGroup;&#13;&#10;import android.widget.TextView;&#13;&#10;&#13;&#10;import androidx.annotation.NonNull;&#13;&#10;import androidx.recyclerview.widget.RecyclerView;&#13;&#10;&#13;&#10;import com.vhn.doan.R;&#13;&#10;import com.vhn.doan.data.ChatMessage;&#13;&#10;&#13;&#10;import java.text.SimpleDateFormat;&#13;&#10;import java.util.ArrayList;&#13;&#10;import java.util.Date;&#13;&#10;import java.util.List;&#13;&#10;import java.util.Locale;&#13;&#10;&#13;&#10;/**&#13;&#10; * Adapter cho danh sách tin nhắn chat&#13;&#10; */&#13;&#10;public class ChatAdapter extends RecyclerView.Adapter&lt;RecyclerView.ViewHolder&gt; {&#13;&#10;&#13;&#10;    private static final int VIEW_TYPE_USER_MESSAGE = 1;&#13;&#10;    private static final int VIEW_TYPE_AI_MESSAGE = 2;&#13;&#10;    private static final int VIEW_TYPE_TYPING = 3;&#13;&#10;&#13;&#10;    private List&lt;ChatMessage&gt; messages;&#13;&#10;    private boolean isAiTyping = false;&#13;&#10;    private final SimpleDateFormat timeFormat;&#13;&#10;&#13;&#10;    public ChatAdapter() {&#13;&#10;        this.messages = new ArrayList&lt;&gt;();&#13;&#10;        this.timeFormat = new SimpleDateFormat(&quot;HH:mm&quot;, Locale.getDefault());&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public int getItemViewType(int position) {&#13;&#10;        if (isAiTyping &amp;&amp; position == getItemCount() - 1) {&#13;&#10;            return VIEW_TYPE_TYPING;&#13;&#10;        }&#13;&#10;&#13;&#10;        ChatMessage message = messages.get(position);&#13;&#10;        return message.isFromUser() ? VIEW_TYPE_USER_MESSAGE : VIEW_TYPE_AI_MESSAGE;&#13;&#10;    }&#13;&#10;&#13;&#10;    @NonNull&#13;&#10;    @Override&#13;&#10;    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#13;&#10;        LayoutInflater inflater = LayoutInflater.from(parent.getContext());&#13;&#10;&#13;&#10;        switch (viewType) {&#13;&#10;            case VIEW_TYPE_USER_MESSAGE:&#13;&#10;                View userView = inflater.inflate(R.layout.item_chat_user_message, parent, false);&#13;&#10;                return new UserMessageViewHolder(userView);&#13;&#10;&#13;&#10;            case VIEW_TYPE_AI_MESSAGE:&#13;&#10;                View aiView = inflater.inflate(R.layout.item_chat_ai_message, parent, false);&#13;&#10;                return new AiMessageViewHolder(aiView);&#13;&#10;&#13;&#10;            case VIEW_TYPE_TYPING:&#13;&#10;                View typingView = inflater.inflate(R.layout.item_chat_typing, parent, false);&#13;&#10;                return new TypingViewHolder(typingView);&#13;&#10;&#13;&#10;            default:&#13;&#10;                throw new IllegalArgumentException(&quot;Unknown view type: &quot; + viewType);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {&#13;&#10;        if (holder instanceof TypingViewHolder) {&#13;&#10;            // Không cần bind data cho typing indicator&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        ChatMessage message = messages.get(position);&#13;&#10;&#13;&#10;        if (holder instanceof UserMessageViewHolder) {&#13;&#10;            ((UserMessageViewHolder) holder).bind(message);&#13;&#10;        } else if (holder instanceof AiMessageViewHolder) {&#13;&#10;            ((AiMessageViewHolder) holder).bind(message);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public int getItemCount() {&#13;&#10;        int count = messages.size();&#13;&#10;        if (isAiTyping) {&#13;&#10;            count++;&#13;&#10;        }&#13;&#10;        return count;&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Cập nhật danh sách tin nhắn&#13;&#10;     */&#13;&#10;    public void setMessages(List&lt;ChatMessage&gt; messages) {&#13;&#10;        this.messages.clear();&#13;&#10;        this.messages.addAll(messages);&#13;&#10;        notifyDataSetChanged();&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Thêm tin nhắn mới&#13;&#10;     */&#13;&#10;    public void addMessage(ChatMessage message) {&#13;&#10;        this.messages.add(message);&#13;&#10;        notifyItemInserted(messages.size() - 1);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Hiển thị trạng thái AI đang gõ&#13;&#10;     */&#13;&#10;    public void showAiTyping() {&#13;&#10;        if (!isAiTyping) {&#13;&#10;            isAiTyping = true;&#13;&#10;            notifyItemInserted(getItemCount() - 1);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Ẩn trạng thái AI đang gõ&#13;&#10;     */&#13;&#10;    public void hideAiTyping() {&#13;&#10;        if (isAiTyping) {&#13;&#10;            isAiTyping = false;&#13;&#10;            notifyItemRemoved(getItemCount());&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Kiểm tra AI có đang gõ không&#13;&#10;     */&#13;&#10;    public boolean isAiTyping() {&#13;&#10;        return isAiTyping;&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Xóa tất cả tin nhắn&#13;&#10;     */&#13;&#10;    public void clearMessages() {&#13;&#10;        int size = messages.size();&#13;&#10;        messages.clear();&#13;&#10;        notifyItemRangeRemoved(0, size);&#13;&#10;    }&#13;&#10;&#13;&#10;    // ViewHolder cho tin nhắn người dùng&#13;&#10;    class UserMessageViewHolder extends RecyclerView.ViewHolder {&#13;&#10;        private TextView messageText;&#13;&#10;        private TextView timeText;&#13;&#10;&#13;&#10;        public UserMessageViewHolder(@NonNull View itemView) {&#13;&#10;            super(itemView);&#13;&#10;            messageText = itemView.findViewById(R.id.tv_user_message);&#13;&#10;            timeText = itemView.findViewById(R.id.tv_user_time);&#13;&#10;        }&#13;&#10;&#13;&#10;        public void bind(ChatMessage message) {&#13;&#10;            messageText.setText(message.getContent());&#13;&#10;            timeText.setText(timeFormat.format(new Date(message.getTimestamp())));&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    // ViewHolder cho tin nhắn AI&#13;&#10;    class AiMessageViewHolder extends RecyclerView.ViewHolder {&#13;&#10;        private TextView messageText;&#13;&#10;        private TextView timeText;&#13;&#10;&#13;&#10;        public AiMessageViewHolder(@NonNull View itemView) {&#13;&#10;            super(itemView);&#13;&#10;            messageText = itemView.findViewById(R.id.tv_ai_message);&#13;&#10;            timeText = itemView.findViewById(R.id.tv_ai_time);&#13;&#10;        }&#13;&#10;&#13;&#10;        public void bind(ChatMessage message) {&#13;&#10;            messageText.setText(message.getContent());&#13;&#10;            timeText.setText(timeFormat.format(new Date(message.getTimestamp())));&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    // ViewHolder cho typing indicator&#13;&#10;    class TypingViewHolder extends RecyclerView.ViewHolder {&#13;&#10;        public TypingViewHolder(@NonNull View itemView) {&#13;&#10;            super(itemView);&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/chat/ChatContract.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/chat/ChatContract.java" />
              <option name="originalContent" value="package com.vhn.doan.presentation.chat;&#10;&#10;import com.vhn.doan.data.ChatMessage;&#10;import com.vhn.doan.presentation.base.BasePresenter;&#10;import com.vhn.doan.presentation.base.BaseView;&#10;&#10;import java.util.List;&#10;&#10;/**&#10; * Contract interface cho Chat feature theo kiến trúc MVP&#10; */&#10;public interface ChatContract {&#10;&#10;    interface View extends BaseView&lt;Presenter&gt; {&#10;        /**&#10;         * Hiển thị danh sách tin nhắn chat&#10;         */&#10;        void showMessages(List&lt;ChatMessage&gt; messages);&#10;&#10;        /**&#10;         * Thêm tin nhắn mới vào danh sách&#10;         */&#10;        void addMessage(ChatMessage message);&#10;&#10;        /**&#10;         * Hiển thị trạng thái đang gửi tin nhắn&#10;         */&#10;        void showSendingMessage();&#10;&#10;        /**&#10;         * Ẩn trạng thái đang gửi tin nhắn&#10;         */&#10;        void hideSendingMessage();&#10;&#10;        /**&#10;         * Hiển thị trạng thái AI đang trả lời&#10;         */&#10;        void showAiTyping();&#10;&#10;        /**&#10;         * Ẩn trạng thái AI đang trả lời&#10;         */&#10;        void hideAiTyping();&#10;&#10;        /**&#10;         * Xóa nội dung trong ô nhập tin nhắn&#10;         */&#10;        void clearMessageInput();&#10;&#10;        /**&#10;         * Cuộn xuống tin nhắn mới nhất&#10;         */&#10;        void scrollToLatestMessage();&#10;&#10;        /**&#10;         * Hiển thị thông báo lỗi khi gửi tin nhắn thất bại&#10;         */&#10;        void showSendMessageError(String error);&#10;&#10;        /**&#10;         * Hiển thị thông báo lỗi khi tải tin nhắn thất bại&#10;         */&#10;        void showLoadMessagesError(String error);&#10;&#10;        /**&#10;         * Hiển thị trạng thái đang tải tin nhắn&#10;         */&#10;        void showLoadingMessages();&#10;&#10;        /**&#10;         * Ẩn trạng thái đang tải tin nhắn&#10;         */&#10;        void hideLoadingMessages();&#10;    }&#10;&#10;    interface Presenter extends BasePresenter&lt;View&gt; {&#10;        /**&#10;         * Tải danh sách tin nhắn từ Firebase&#10;         */&#10;        void loadMessages();&#10;&#10;        /**&#10;         * Gửi tin nhắn mới&#10;         * @param content Nội dung tin nhắn&#10;         */&#10;        void sendMessage(String content);&#10;&#10;        /**&#10;         * Xóa lịch sử chat&#10;         */&#10;        void clearChatHistory();&#10;&#10;        /**&#10;         * Làm mới danh sách tin nhắn&#10;         */&#10;        void refreshMessages();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.chat;&#13;&#10;&#13;&#10;import com.vhn.doan.data.ChatMessage;&#13;&#10;import com.vhn.doan.presentation.base.BasePresenter;&#13;&#10;import com.vhn.doan.presentation.base.BaseView;&#13;&#10;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;/**&#13;&#10; * Contract interface cho Chat feature theo kiến trúc MVP&#13;&#10; */&#13;&#10;public interface ChatContract {&#13;&#10;&#13;&#10;    interface View extends BaseView {&#13;&#10;        /**&#13;&#10;         * Hiển thị danh sách tin nhắn chat&#13;&#10;         */&#13;&#10;        void showMessages(List&lt;ChatMessage&gt; messages);&#13;&#10;&#13;&#10;        /**&#13;&#10;         * Thêm tin nhắn mới vào danh sách&#13;&#10;         */&#13;&#10;        void addMessage(ChatMessage message);&#13;&#10;&#13;&#10;        /**&#13;&#10;         * Hiển thị trạng thái đang gửi tin nhắn&#13;&#10;         */&#13;&#10;        void showSendingMessage();&#13;&#10;&#13;&#10;        /**&#13;&#10;         * Ẩn trạng thái đang gửi tin nhắn&#13;&#10;         */&#13;&#10;        void hideSendingMessage();&#13;&#10;&#13;&#10;        /**&#13;&#10;         * Hiển thị trạng thái AI đang trả lời&#13;&#10;         */&#13;&#10;        void showAiTyping();&#13;&#10;&#13;&#10;        /**&#13;&#10;         * Ẩn trạng thái AI đang trả lời&#13;&#10;         */&#13;&#10;        void hideAiTyping();&#13;&#10;&#13;&#10;        /**&#13;&#10;         * Xóa nội dung trong ô nhập tin nhắn&#13;&#10;         */&#13;&#10;        void clearMessageInput();&#13;&#10;&#13;&#10;        /**&#13;&#10;         * Cuộn xuống tin nhắn mới nhất&#13;&#10;         */&#13;&#10;        void scrollToLatestMessage();&#13;&#10;&#13;&#10;        /**&#13;&#10;         * Hiển thị thông báo lỗi khi gửi tin nhắn thất bại&#13;&#10;         */&#13;&#10;        void showSendMessageError(String error);&#13;&#10;&#13;&#10;        /**&#13;&#10;         * Hiển thị thông báo lỗi khi tải tin nhắn thất bại&#13;&#10;         */&#13;&#10;        void showLoadMessagesError(String error);&#13;&#10;&#13;&#10;        /**&#13;&#10;         * Hiển thị trạng thái đang tải tin nhắn&#13;&#10;         */&#13;&#10;        void showLoadingMessages();&#13;&#10;&#13;&#10;        /**&#13;&#10;         * Ẩn trạng thái đang tải tin nhắn&#13;&#10;         */&#13;&#10;        void hideLoadingMessages();&#13;&#10;&#13;&#10;        /**&#13;&#10;         * Hiển thị thông báo thành công&#13;&#10;         */&#13;&#10;        void showMessage(String message);&#13;&#10;    }&#13;&#10;&#13;&#10;    interface Presenter {&#13;&#10;        /**&#13;&#10;         * Gắn view vào presenter&#13;&#10;         */&#13;&#10;        void attachView(View view);&#13;&#10;&#13;&#10;        /**&#13;&#10;         * Gỡ bỏ view khỏi presenter&#13;&#10;         */&#13;&#10;        void detachView();&#13;&#10;&#13;&#10;        /**&#13;&#10;         * Tải danh sách tin nhắn từ Firebase&#13;&#10;         */&#13;&#10;        void loadMessages();&#13;&#10;&#13;&#10;        /**&#13;&#10;         * Gửi tin nhắn mới&#13;&#10;         * @param content Nội dung tin nhắn&#13;&#10;         */&#13;&#10;        void sendMessage(String content);&#13;&#10;&#13;&#10;        /**&#13;&#10;         * Xóa lịch sử chat&#13;&#10;         */&#13;&#10;        void clearChatHistory();&#13;&#10;&#13;&#10;        /**&#13;&#10;         * Làm mới danh sách tin nhắn&#13;&#10;         */&#13;&#10;        void refreshMessages();&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/chat/ChatFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/chat/ChatFragment.java" />
              <option name="originalContent" value="package com.vhn.doan.presentation.chat;&#10;&#10;import android.os.Bundle;&#10;import android.text.TextUtils;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.ImageButton;&#10;import android.widget.ProgressBar;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.google.android.material.button.MaterialButton;&#10;import com.google.android.material.dialog.MaterialAlertDialogBuilder;&#10;import com.google.android.material.textfield.TextInputEditText;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.data.ChatMessage;&#10;import com.vhn.doan.data.repository.ChatRepositoryImpl;&#10;import com.vhn.doan.presentation.base.BaseFragment;&#10;&#10;import java.util.List;&#10;&#10;/**&#10; * Fragment hiển thị giao diện chat với AI về sức khỏe&#10; */&#10;public class ChatFragment extends BaseFragment&lt;ChatContract.Presenter&gt; implements ChatContract.View {&#10;&#10;    private static final String TAG = &quot;ChatFragment&quot;;&#10;&#10;    // Views&#10;    private RecyclerView rvChatMessages;&#10;    private TextInputEditText etMessageInput;&#10;    private MaterialButton btnSendMessage;&#10;    private ImageButton btnClearChat;&#10;    private View layoutLoading;&#10;    private View layoutEmpty;&#10;    private View layoutStatus;&#10;    private ProgressBar progressSending;&#10;    private TextView tvStatus;&#10;&#10;    // Components&#10;    private ChatAdapter chatAdapter;&#10;    private LinearLayoutManager layoutManager;&#10;&#10;    public static ChatFragment newInstance() {&#10;        return new ChatFragment();&#10;    }&#10;&#10;    @Override&#10;    protected int getLayoutId() {&#10;        return R.layout.fragment_chat;&#10;    }&#10;&#10;    @Override&#10;    protected void initPresenter() {&#10;        ChatRepositoryImpl chatRepository = new ChatRepositoryImpl();&#10;        presenter = new ChatPresenter(chatRepository);&#10;    }&#10;&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {&#10;        View view = super.onCreateView(inflater, container, savedInstanceState);&#10;        initViews(view);&#10;        setupRecyclerView();&#10;        setupListeners();&#10;        return view;&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;        presenter.attachView(this);&#10;    }&#10;&#10;    private void initViews(View view) {&#10;        rvChatMessages = view.findViewById(R.id.rv_chat_messages);&#10;        etMessageInput = view.findViewById(R.id.et_message_input);&#10;        btnSendMessage = view.findViewById(R.id.btn_send_message);&#10;        btnClearChat = view.findViewById(R.id.btn_clear_chat);&#10;        layoutLoading = view.findViewById(R.id.layout_loading);&#10;        layoutEmpty = view.findViewById(R.id.layout_empty);&#10;        layoutStatus = view.findViewById(R.id.layout_status);&#10;        progressSending = view.findViewById(R.id.progress_sending);&#10;        tvStatus = view.findViewById(R.id.tv_status);&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        chatAdapter = new ChatAdapter();&#10;        layoutManager = new LinearLayoutManager(getContext());&#10;        layoutManager.setStackFromEnd(true); // Bắt đầu từ cuối danh sách&#10;&#10;        rvChatMessages.setLayoutManager(layoutManager);&#10;        rvChatMessages.setAdapter(chatAdapter);&#10;        rvChatMessages.setHasFixedSize(false);&#10;    }&#10;&#10;    private void setupListeners() {&#10;        btnSendMessage.setOnClickListener(v -&gt; sendMessage());&#10;&#10;        btnClearChat.setOnClickListener(v -&gt; showClearChatDialog());&#10;&#10;        // Gửi tin nhắn khi nhấn Enter (nếu không phải Shift+Enter)&#10;        etMessageInput.setOnEditorActionListener((v, actionId, event) -&gt; {&#10;            sendMessage();&#10;            return true;&#10;        });&#10;    }&#10;&#10;    private void sendMessage() {&#10;        String message = etMessageInput.getText() != null ? etMessageInput.getText().toString().trim() : &quot;&quot;;&#10;&#10;        if (!TextUtils.isEmpty(message)) {&#10;            presenter.sendMessage(message);&#10;        } else {&#10;            showError(&quot;Vui lòng nhập nội dung tin nhắn&quot;);&#10;        }&#10;    }&#10;&#10;    private void showClearChatDialog() {&#10;        new MaterialAlertDialogBuilder(requireContext())&#10;                .setTitle(&quot;Xóa lịch sử chat&quot;)&#10;                .setMessage(&quot;Bạn có chắc chắn muốn xóa toàn bộ lịch sử cuộc trò chuyện không?&quot;)&#10;                .setPositiveButton(&quot;Xóa&quot;, (dialog, which) -&gt; {&#10;                    presenter.clearChatHistory();&#10;                })&#10;                .setNegativeButton(&quot;Hủy&quot;, null)&#10;                .show();&#10;    }&#10;&#10;    // Implementation của ChatContract.View&#10;&#10;    @Override&#10;    public void showMessages(List&lt;ChatMessage&gt; messages) {&#10;        if (messages == null || messages.isEmpty()) {&#10;            layoutEmpty.setVisibility(View.VISIBLE);&#10;            rvChatMessages.setVisibility(View.GONE);&#10;        } else {&#10;            layoutEmpty.setVisibility(View.GONE);&#10;            rvChatMessages.setVisibility(View.VISIBLE);&#10;            chatAdapter.setMessages(messages);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void addMessage(ChatMessage message) {&#10;        layoutEmpty.setVisibility(View.GONE);&#10;        rvChatMessages.setVisibility(View.VISIBLE);&#10;        chatAdapter.addMessage(message);&#10;    }&#10;&#10;    @Override&#10;    public void showSendingMessage() {&#10;        layoutStatus.setVisibility(View.VISIBLE);&#10;        progressSending.setVisibility(View.VISIBLE);&#10;        tvStatus.setText(&quot;Đang gửi tin nhắn...&quot;);&#10;        btnSendMessage.setEnabled(false);&#10;    }&#10;&#10;    @Override&#10;    public void hideSendingMessage() {&#10;        btnSendMessage.setEnabled(true);&#10;        if (!chatAdapter.isAiTyping) {&#10;            layoutStatus.setVisibility(View.GONE);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showAiTyping() {&#10;        chatAdapter.showAiTyping();&#10;        layoutStatus.setVisibility(View.VISIBLE);&#10;        progressSending.setVisibility(View.VISIBLE);&#10;        tvStatus.setText(&quot;AI đang trả lời...&quot;);&#10;    }&#10;&#10;    @Override&#10;    public void hideAiTyping() {&#10;        chatAdapter.hideAiTyping();&#10;        layoutStatus.setVisibility(View.GONE);&#10;    }&#10;&#10;    @Override&#10;    public void clearMessageInput() {&#10;        if (etMessageInput != null) {&#10;            etMessageInput.setText(&quot;&quot;);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void scrollToLatestMessage() {&#10;        if (chatAdapter.getItemCount() &gt; 0) {&#10;            rvChatMessages.smoothScrollToPosition(chatAdapter.getItemCount() - 1);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showSendMessageError(String error) {&#10;        showError(&quot;Lỗi gửi tin nhắn: &quot; + error);&#10;    }&#10;&#10;    @Override&#10;    public void showLoadMessagesError(String error) {&#10;        showError(&quot;Lỗi tải tin nhắn: &quot; + error);&#10;    }&#10;&#10;    @Override&#10;    public void showLoadingMessages() {&#10;        layoutLoading.setVisibility(View.VISIBLE);&#10;        rvChatMessages.setVisibility(View.GONE);&#10;        layoutEmpty.setVisibility(View.GONE);&#10;    }&#10;&#10;    @Override&#10;    public void hideLoadingMessages() {&#10;        layoutLoading.setVisibility(View.GONE);&#10;    }&#10;&#10;    @Override&#10;    public void showError(String message) {&#10;        if (getContext() != null) {&#10;            Toast.makeText(getContext(), message, Toast.LENGTH_LONG).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showMessage(String message) {&#10;        if (getContext() != null) {&#10;            Toast.makeText(getContext(), message, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showLoading() {&#10;        showLoadingMessages();&#10;    }&#10;&#10;    @Override&#10;    public void hideLoading() {&#10;        hideLoadingMessages();&#10;    }&#10;&#10;    @Override&#10;    public void onDestroyView() {&#10;        if (presenter != null) {&#10;            presenter.detachView();&#10;        }&#10;        super.onDestroyView();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.chat;&#13;&#10;&#13;&#10;import android.os.Bundle;&#13;&#10;import android.text.TextUtils;&#13;&#10;import android.view.LayoutInflater;&#13;&#10;import android.view.View;&#13;&#10;import android.view.ViewGroup;&#13;&#10;import android.widget.ImageButton;&#13;&#10;import android.widget.ProgressBar;&#13;&#10;import android.widget.TextView;&#13;&#10;import android.widget.Toast;&#13;&#10;&#13;&#10;import androidx.annotation.NonNull;&#13;&#10;import androidx.annotation.Nullable;&#13;&#10;import androidx.fragment.app.Fragment;&#13;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#13;&#10;import androidx.recyclerview.widget.RecyclerView;&#13;&#10;&#13;&#10;import com.google.android.material.button.MaterialButton;&#13;&#10;import com.google.android.material.dialog.MaterialAlertDialogBuilder;&#13;&#10;import com.google.android.material.textfield.TextInputEditText;&#13;&#10;import com.vhn.doan.R;&#13;&#10;import com.vhn.doan.data.ChatMessage;&#13;&#10;import com.vhn.doan.data.repository.ChatRepositoryImpl;&#13;&#10;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;/**&#13;&#10; * Fragment hiển thị giao diện chat với AI về sức khỏe&#13;&#10; */&#13;&#10;public class ChatFragment extends Fragment implements ChatContract.View {&#13;&#10;&#13;&#10;    private static final String TAG = &quot;ChatFragment&quot;;&#13;&#10;&#13;&#10;    // Views&#13;&#10;    private RecyclerView rvChatMessages;&#13;&#10;    private TextInputEditText etMessageInput;&#13;&#10;    private MaterialButton btnSendMessage;&#13;&#10;    private ImageButton btnClearChat;&#13;&#10;    private View layoutLoading;&#13;&#10;    private View layoutEmpty;&#13;&#10;    private View layoutStatus;&#13;&#10;    private ProgressBar progressSending;&#13;&#10;    private TextView tvStatus;&#13;&#10;&#13;&#10;    // Components&#13;&#10;    private ChatAdapter chatAdapter;&#13;&#10;    private LinearLayoutManager layoutManager;&#13;&#10;    private ChatContract.Presenter presenter;&#13;&#10;&#13;&#10;    public static ChatFragment newInstance() {&#13;&#10;        return new ChatFragment();&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {&#13;&#10;        return inflater.inflate(R.layout.fragment_chat, container, false);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#13;&#10;        super.onViewCreated(view, savedInstanceState);&#13;&#10;        initViews(view);&#13;&#10;        setupRecyclerView();&#13;&#10;        setupListeners();&#13;&#10;        initPresenter();&#13;&#10;        presenter.attachView(this);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void initViews(View view) {&#13;&#10;        rvChatMessages = view.findViewById(R.id.rv_chat_messages);&#13;&#10;        etMessageInput = view.findViewById(R.id.et_message_input);&#13;&#10;        btnSendMessage = view.findViewById(R.id.btn_send_message);&#13;&#10;        btnClearChat = view.findViewById(R.id.btn_clear_chat);&#13;&#10;        layoutLoading = view.findViewById(R.id.layout_loading);&#13;&#10;        layoutEmpty = view.findViewById(R.id.layout_empty);&#13;&#10;        layoutStatus = view.findViewById(R.id.layout_status);&#13;&#10;        progressSending = view.findViewById(R.id.progress_sending);&#13;&#10;        tvStatus = view.findViewById(R.id.tv_status);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void initPresenter() {&#13;&#10;        ChatRepositoryImpl chatRepository = new ChatRepositoryImpl();&#13;&#10;        presenter = new ChatPresenter(chatRepository);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupRecyclerView() {&#13;&#10;        chatAdapter = new ChatAdapter();&#13;&#10;        layoutManager = new LinearLayoutManager(getContext());&#13;&#10;        layoutManager.setStackFromEnd(true); // Bắt đầu từ cuối danh sách&#13;&#10;&#13;&#10;        rvChatMessages.setLayoutManager(layoutManager);&#13;&#10;        rvChatMessages.setAdapter(chatAdapter);&#13;&#10;        rvChatMessages.setHasFixedSize(false);&#13;&#10;    }&#13;&#10;&#13;&#10;    private void setupListeners() {&#13;&#10;        btnSendMessage.setOnClickListener(v -&gt; sendMessage());&#13;&#10;&#13;&#10;        btnClearChat.setOnClickListener(v -&gt; showClearChatDialog());&#13;&#10;&#13;&#10;        // Gửi tin nhắn khi nhấn Enter (nếu không phải Shift+Enter)&#13;&#10;        etMessageInput.setOnEditorActionListener((v, actionId, event) -&gt; {&#13;&#10;            sendMessage();&#13;&#10;            return true;&#13;&#10;        });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void sendMessage() {&#13;&#10;        String message = etMessageInput.getText() != null ? etMessageInput.getText().toString().trim() : &quot;&quot;;&#13;&#10;&#13;&#10;        if (!TextUtils.isEmpty(message)) {&#13;&#10;            presenter.sendMessage(message);&#13;&#10;        } else {&#13;&#10;            showError(&quot;Vui lòng nhập nội dung tin nhắn&quot;);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void showClearChatDialog() {&#13;&#10;        new MaterialAlertDialogBuilder(requireContext())&#13;&#10;                .setTitle(&quot;Xóa lịch sử chat&quot;)&#13;&#10;                .setMessage(&quot;Bạn có chắc chắn muốn xóa toàn bộ lịch sử cuộc trò chuyện không?&quot;)&#13;&#10;                .setPositiveButton(&quot;Xóa&quot;, (dialog, which) -&gt; {&#13;&#10;                    presenter.clearChatHistory();&#13;&#10;                })&#13;&#10;                .setNegativeButton(&quot;Hủy&quot;, null)&#13;&#10;                .show();&#13;&#10;    }&#13;&#10;&#13;&#10;    // Implementation của ChatContract.View&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void showMessages(List&lt;ChatMessage&gt; messages) {&#13;&#10;        if (messages == null || messages.isEmpty()) {&#13;&#10;            layoutEmpty.setVisibility(View.VISIBLE);&#13;&#10;            rvChatMessages.setVisibility(View.GONE);&#13;&#10;        } else {&#13;&#10;            layoutEmpty.setVisibility(View.GONE);&#13;&#10;            rvChatMessages.setVisibility(View.VISIBLE);&#13;&#10;            chatAdapter.setMessages(messages);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void addMessage(ChatMessage message) {&#13;&#10;        layoutEmpty.setVisibility(View.GONE);&#13;&#10;        rvChatMessages.setVisibility(View.VISIBLE);&#13;&#10;        chatAdapter.addMessage(message);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void showSendingMessage() {&#13;&#10;        layoutStatus.setVisibility(View.VISIBLE);&#13;&#10;        progressSending.setVisibility(View.VISIBLE);&#13;&#10;        tvStatus.setText(&quot;Đang gửi tin nhắn...&quot;);&#13;&#10;        btnSendMessage.setEnabled(false);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void hideSendingMessage() {&#13;&#10;        btnSendMessage.setEnabled(true);&#13;&#10;        if (!chatAdapter.isAiTyping()) {&#13;&#10;            layoutStatus.setVisibility(View.GONE);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void showAiTyping() {&#13;&#10;        chatAdapter.showAiTyping();&#13;&#10;        layoutStatus.setVisibility(View.VISIBLE);&#13;&#10;        progressSending.setVisibility(View.VISIBLE);&#13;&#10;        tvStatus.setText(&quot;AI đang trả lời...&quot;);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void hideAiTyping() {&#13;&#10;        chatAdapter.hideAiTyping();&#13;&#10;        layoutStatus.setVisibility(View.GONE);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void clearMessageInput() {&#13;&#10;        if (etMessageInput != null) {&#13;&#10;            etMessageInput.setText(&quot;&quot;);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void scrollToLatestMessage() {&#13;&#10;        if (chatAdapter.getItemCount() &gt; 0) {&#13;&#10;            rvChatMessages.smoothScrollToPosition(chatAdapter.getItemCount() - 1);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void showSendMessageError(String error) {&#13;&#10;        showError(&quot;Lỗi gửi tin nhắn: &quot; + error);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void showLoadMessagesError(String error) {&#13;&#10;        showError(&quot;Lỗi tải tin nhắn: &quot; + error);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void showLoadingMessages() {&#13;&#10;        layoutLoading.setVisibility(View.VISIBLE);&#13;&#10;        rvChatMessages.setVisibility(View.GONE);&#13;&#10;        layoutEmpty.setVisibility(View.GONE);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void hideLoadingMessages() {&#13;&#10;        layoutLoading.setVisibility(View.GONE);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void showError(String message) {&#13;&#10;        if (getContext() != null) {&#13;&#10;            Toast.makeText(getContext(), message, Toast.LENGTH_LONG).show();&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void showMessage(String message) {&#13;&#10;        if (getContext() != null) {&#13;&#10;            Toast.makeText(getContext(), message, Toast.LENGTH_SHORT).show();&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void showLoading() {&#13;&#10;        showLoadingMessages();&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void hideLoading() {&#13;&#10;        hideLoadingMessages();&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void onDestroyView() {&#13;&#10;        if (presenter != null) {&#13;&#10;            presenter.detachView();&#13;&#10;        }&#13;&#10;        super.onDestroyView();&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/chat/ChatPresenter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/chat/ChatPresenter.java" />
              <option name="originalContent" value="package com.vhn.doan.presentation.chat;&#10;&#10;import android.util.Log;&#10;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.auth.FirebaseUser;&#10;import com.vhn.doan.data.ChatMessage;&#10;import com.vhn.doan.data.repository.ChatRepository;&#10;import com.vhn.doan.data.repository.RepositoryCallback;&#10;import com.vhn.doan.presentation.base.BasePresenter;&#10;&#10;import java.util.List;&#10;&#10;/**&#10; * Presenter cho Chat feature theo kiến trúc MVP&#10; */&#10;public class ChatPresenter extends BasePresenter&lt;ChatContract.View&gt; implements ChatContract.Presenter {&#10;&#10;    private static final String TAG = &quot;ChatPresenter&quot;;&#10;&#10;    private final ChatRepository chatRepository;&#10;    private final FirebaseAuth firebaseAuth;&#10;&#10;    public ChatPresenter(ChatRepository chatRepository) {&#10;        this.chatRepository = chatRepository;&#10;        this.firebaseAuth = FirebaseAuth.getInstance();&#10;    }&#10;&#10;    @Override&#10;    public void loadMessages() {&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#10;        if (currentUser == null) {&#10;            if (getView() != null) {&#10;                getView().showLoadMessagesError(&quot;Bạn cần đăng nhập để sử dụng tính năng chat&quot;);&#10;            }&#10;            return;&#10;        }&#10;&#10;        if (getView() != null) {&#10;            getView().showLoadingMessages();&#10;        }&#10;&#10;        chatRepository.getChatMessages(currentUser.getUid(), new RepositoryCallback&lt;List&lt;ChatMessage&gt;&gt;() {&#10;            @Override&#10;            public void onSuccess(List&lt;ChatMessage&gt; messages) {&#10;                if (getView() != null) {&#10;                    getView().hideLoadingMessages();&#10;                    getView().showMessages(messages);&#10;&#10;                    if (!messages.isEmpty()) {&#10;                        getView().scrollToLatestMessage();&#10;                    }&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                Log.e(TAG, &quot;Failed to load messages: &quot; + error);&#10;                if (getView() != null) {&#10;                    getView().hideLoadingMessages();&#10;                    getView().showLoadMessagesError(error);&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void sendMessage(String content) {&#10;        if (content == null || content.trim().isEmpty()) {&#10;            if (getView() != null) {&#10;                getView().showSendMessageError(&quot;Vui lòng nhập nội dung tin nhắn&quot;);&#10;            }&#10;            return;&#10;        }&#10;&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#10;        if (currentUser == null) {&#10;            if (getView() != null) {&#10;                getView().showSendMessageError(&quot;Bạn cần đăng nhập để gửi tin nhắn&quot;);&#10;            }&#10;            return;&#10;        }&#10;&#10;        String trimmedContent = content.trim();&#10;        long timestamp = System.currentTimeMillis();&#10;        String userId = currentUser.getUid();&#10;&#10;        // Hiển thị tin nhắn của người dùng ngay lập tức&#10;        ChatMessage userMessage = new ChatMessage(userId, trimmedContent, true, timestamp);&#10;        String topic = chatRepository.extractTopic(trimmedContent);&#10;        userMessage.setTopic(topic);&#10;&#10;        if (getView() != null) {&#10;            getView().addMessage(userMessage);&#10;            getView().clearMessageInput();&#10;            getView().scrollToLatestMessage();&#10;            getView().showSendingMessage();&#10;        }&#10;&#10;        // Lưu tin nhắn người dùng vào Firebase&#10;        chatRepository.saveChatMessage(userMessage, new RepositoryCallback&lt;ChatMessage&gt;() {&#10;            @Override&#10;            public void onSuccess(ChatMessage savedMessage) {&#10;                Log.d(TAG, &quot;User message saved successfully&quot;);&#10;                if (getView() != null) {&#10;                    getView().hideSendingMessage();&#10;                    getView().showAiTyping();&#10;                }&#10;&#10;                // Gửi tin nhắn tới AI&#10;                chatRepository.sendMessageToAI(trimmedContent, new RepositoryCallback&lt;String&gt;() {&#10;                    @Override&#10;                    public void onSuccess(String aiResponse) {&#10;                        Log.d(TAG, &quot;AI response received: &quot; + aiResponse);&#10;&#10;                        // Tạo tin nhắn phản hồi từ AI&#10;                        ChatMessage aiMessage = new ChatMessage(userId, aiResponse, false, System.currentTimeMillis());&#10;                        aiMessage.setTopic(topic);&#10;&#10;                        if (getView() != null) {&#10;                            getView().hideAiTyping();&#10;                            getView().addMessage(aiMessage);&#10;                            getView().scrollToLatestMessage();&#10;                        }&#10;&#10;                        // Lưu phản hồi AI vào Firebase&#10;                        chatRepository.saveChatMessage(aiMessage, new RepositoryCallback&lt;ChatMessage&gt;() {&#10;                            @Override&#10;                            public void onSuccess(ChatMessage savedAiMessage) {&#10;                                Log.d(TAG, &quot;AI message saved successfully&quot;);&#10;                            }&#10;&#10;                            @Override&#10;                            public void onError(String error) {&#10;                                Log.e(TAG, &quot;Failed to save AI message: &quot; + error);&#10;                                // Không hiển thị lỗi cho người dùng vì tin nhắn đã được hiển thị&#10;                            }&#10;                        });&#10;                    }&#10;&#10;                    @Override&#10;                    public void onError(String error) {&#10;                        Log.e(TAG, &quot;Failed to get AI response: &quot; + error);&#10;&#10;                        if (getView() != null) {&#10;                            getView().hideAiTyping();&#10;&#10;                            // Hiển thị tin nhắn lỗi từ AI&#10;                            ChatMessage errorMessage = new ChatMessage(userId,&#10;                                &quot;Xin lỗi, tôi không thể trả lời câu hỏi của bạn lúc này. Vui lòng thử lại sau.&quot;,&#10;                                false, System.currentTimeMillis());&#10;                            getView().addMessage(errorMessage);&#10;                            getView().scrollToLatestMessage();&#10;                            getView().showSendMessageError(&quot;Không thể nhận phản hồi từ AI: &quot; + error);&#10;                        }&#10;                    }&#10;                });&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                Log.e(TAG, &quot;Failed to save user message: &quot; + error);&#10;                if (getView() != null) {&#10;                    getView().hideSendingMessage();&#10;                    getView().showSendMessageError(&quot;Không thể lưu tin nhắn: &quot; + error);&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void clearChatHistory() {&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#10;        if (currentUser == null) {&#10;            if (getView() != null) {&#10;                getView().showLoadMessagesError(&quot;Bạn cần đăng nhập để xóa lịch sử chat&quot;);&#10;            }&#10;            return;&#10;        }&#10;&#10;        chatRepository.clearChatHistory(currentUser.getUid(), new RepositoryCallback&lt;Boolean&gt;() {&#10;            @Override&#10;            public void onSuccess(Boolean success) {&#10;                Log.d(TAG, &quot;Chat history cleared successfully&quot;);&#10;                if (getView() != null) {&#10;                    getView().showMessage(&quot;Đã xóa lịch sử chat thành công&quot;);&#10;                    // Tải lại danh sách tin nhắn (sẽ rỗng)&#10;                    loadMessages();&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                Log.e(TAG, &quot;Failed to clear chat history: &quot; + error);&#10;                if (getView() != null) {&#10;                    getView().showError(&quot;Không thể xóa lịch sử chat: &quot; + error);&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void refreshMessages() {&#10;        loadMessages();&#10;    }&#10;&#10;    @Override&#10;    public void attachView(ChatContract.View view) {&#10;        super.attachView(view);&#10;        // Tự động tải tin nhắn khi attach view&#10;        loadMessages();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.chat;&#13;&#10;&#13;&#10;import android.util.Log;&#13;&#10;&#13;&#10;import com.google.firebase.auth.FirebaseAuth;&#13;&#10;import com.google.firebase.auth.FirebaseUser;&#13;&#10;import com.vhn.doan.data.ChatMessage;&#13;&#10;import com.vhn.doan.data.repository.ChatRepository;&#13;&#10;import com.vhn.doan.data.repository.RepositoryCallback;&#13;&#10;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;/**&#13;&#10; * Presenter cho Chat feature theo kiến trúc MVP&#13;&#10; */&#13;&#10;public class ChatPresenter implements ChatContract.Presenter {&#13;&#10;    &#13;&#10;    private static final String TAG = &quot;ChatPresenter&quot;;&#13;&#10;    &#13;&#10;    private final ChatRepository chatRepository;&#13;&#10;    private final FirebaseAuth firebaseAuth;&#13;&#10;    private ChatContract.View view;&#13;&#10;&#13;&#10;    public ChatPresenter(ChatRepository chatRepository) {&#13;&#10;        this.chatRepository = chatRepository;&#13;&#10;        this.firebaseAuth = FirebaseAuth.getInstance();&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void attachView(ChatContract.View view) {&#13;&#10;        this.view = view;&#13;&#10;        // Tự động tải tin nhắn khi attach view&#13;&#10;        loadMessages();&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void detachView() {&#13;&#10;        this.view = null;&#13;&#10;    }&#13;&#10;&#13;&#10;    private boolean isViewAttached() {&#13;&#10;        return view != null;&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void loadMessages() {&#13;&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#13;&#10;        if (currentUser == null) {&#13;&#10;            if (isViewAttached()) {&#13;&#10;                view.showLoadMessagesError(&quot;Bạn cần đăng nhập để sử dụng tính năng chat&quot;);&#13;&#10;            }&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        if (isViewAttached()) {&#13;&#10;            view.showLoadingMessages();&#13;&#10;        }&#13;&#10;&#13;&#10;        chatRepository.getChatMessages(currentUser.getUid(), new RepositoryCallback&lt;List&lt;ChatMessage&gt;&gt;() {&#13;&#10;            @Override&#13;&#10;            public void onSuccess(List&lt;ChatMessage&gt; messages) {&#13;&#10;                if (isViewAttached()) {&#13;&#10;                    view.hideLoadingMessages();&#13;&#10;                    view.showMessages(messages);&#13;&#10;                    &#13;&#10;                    if (!messages.isEmpty()) {&#13;&#10;                        view.scrollToLatestMessage();&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;&#13;&#10;            @Override&#13;&#10;            public void onError(String error) {&#13;&#10;                Log.e(TAG, &quot;Failed to load messages: &quot; + error);&#13;&#10;                if (isViewAttached()) {&#13;&#10;                    view.hideLoadingMessages();&#13;&#10;                    view.showLoadMessagesError(error);&#13;&#10;                }&#13;&#10;            }&#13;&#10;        });&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void sendMessage(String content) {&#13;&#10;        if (content == null || content.trim().isEmpty()) {&#13;&#10;            if (isViewAttached()) {&#13;&#10;                view.showSendMessageError(&quot;Vui lòng nhập nội dung tin nhắn&quot;);&#13;&#10;            }&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#13;&#10;        if (currentUser == null) {&#13;&#10;            if (isViewAttached()) {&#13;&#10;                view.showSendMessageError(&quot;Bạn cần đăng nhập để gửi tin nhắn&quot;);&#13;&#10;            }&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        String trimmedContent = content.trim();&#13;&#10;        long timestamp = System.currentTimeMillis();&#13;&#10;        String userId = currentUser.getUid();&#13;&#10;&#13;&#10;        // Hiển thị tin nhắn của người dùng ngay lập tức&#13;&#10;        ChatMessage userMessage = new ChatMessage(userId, trimmedContent, true, timestamp);&#13;&#10;        String topic = chatRepository.extractTopic(trimmedContent);&#13;&#10;        userMessage.setTopic(topic);&#13;&#10;&#13;&#10;        if (isViewAttached()) {&#13;&#10;            view.addMessage(userMessage);&#13;&#10;            view.clearMessageInput();&#13;&#10;            view.scrollToLatestMessage();&#13;&#10;            view.showSendingMessage();&#13;&#10;        }&#13;&#10;&#13;&#10;        // Lưu tin nhắn người dùng vào Firebase&#13;&#10;        chatRepository.saveChatMessage(userMessage, new RepositoryCallback&lt;ChatMessage&gt;() {&#13;&#10;            @Override&#13;&#10;            public void onSuccess(ChatMessage savedMessage) {&#13;&#10;                Log.d(TAG, &quot;User message saved successfully&quot;);&#13;&#10;                if (isViewAttached()) {&#13;&#10;                    view.hideSendingMessage();&#13;&#10;                    view.showAiTyping();&#13;&#10;                }&#13;&#10;&#13;&#10;                // Gửi tin nhắn tới AI&#13;&#10;                chatRepository.sendMessageToAI(trimmedContent, new RepositoryCallback&lt;String&gt;() {&#13;&#10;                    @Override&#13;&#10;                    public void onSuccess(String aiResponse) {&#13;&#10;                        Log.d(TAG, &quot;AI response received: &quot; + aiResponse);&#13;&#10;                        &#13;&#10;                        // Tạo tin nhắn phản hồi từ AI&#13;&#10;                        ChatMessage aiMessage = new ChatMessage(userId, aiResponse, false, System.currentTimeMillis());&#13;&#10;                        aiMessage.setTopic(topic);&#13;&#10;&#13;&#10;                        if (isViewAttached()) {&#13;&#10;                            view.hideAiTyping();&#13;&#10;                            view.addMessage(aiMessage);&#13;&#10;                            view.scrollToLatestMessage();&#13;&#10;                        }&#13;&#10;&#13;&#10;                        // Lưu phản hồi AI vào Firebase&#13;&#10;                        chatRepository.saveChatMessage(aiMessage, new RepositoryCallback&lt;ChatMessage&gt;() {&#13;&#10;                            @Override&#13;&#10;                            public void onSuccess(ChatMessage savedAiMessage) {&#13;&#10;                                Log.d(TAG, &quot;AI message saved successfully&quot;);&#13;&#10;                            }&#13;&#10;&#13;&#10;                            @Override&#13;&#10;                            public void onError(String error) {&#13;&#10;                                Log.e(TAG, &quot;Failed to save AI message: &quot; + error);&#13;&#10;                                // Không hiển thị lỗi cho người dùng vì tin nhắn đã được hiển thị&#13;&#10;                            }&#13;&#10;                        });&#13;&#10;                    }&#13;&#10;&#13;&#10;                    @Override&#13;&#10;                    public void onError(String error) {&#13;&#10;                        Log.e(TAG, &quot;Failed to get AI response: &quot; + error);&#13;&#10;                        &#13;&#10;                        if (isViewAttached()) {&#13;&#10;                            view.hideAiTyping();&#13;&#10;                            &#13;&#10;                            // Hiển thị tin nhắn lỗi từ AI&#13;&#10;                            ChatMessage errorMessage = new ChatMessage(userId, &#13;&#10;                                &quot;Xin lỗi, tôi không thể trả lời câu hỏi của bạn lúc này. Vui lòng thử lại sau.&quot;, &#13;&#10;                                false, System.currentTimeMillis());&#13;&#10;                            view.addMessage(errorMessage);&#13;&#10;                            view.scrollToLatestMessage();&#13;&#10;                            view.showSendMessageError(&quot;Không thể nhận phản hồi từ AI: &quot; + error);&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                });&#13;&#10;            }&#13;&#10;&#13;&#10;            @Override&#13;&#10;            public void onError(String error) {&#13;&#10;                Log.e(TAG, &quot;Failed to save user message: &quot; + error);&#13;&#10;                if (isViewAttached()) {&#13;&#10;                    view.hideSendingMessage();&#13;&#10;                    view.showSendMessageError(&quot;Không thể lưu tin nhắn: &quot; + error);&#13;&#10;                }&#13;&#10;            }&#13;&#10;        });&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void clearChatHistory() {&#13;&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#13;&#10;        if (currentUser == null) {&#13;&#10;            if (isViewAttached()) {&#13;&#10;                view.showLoadMessagesError(&quot;Bạn cần đăng nhập để xóa lịch sử chat&quot;);&#13;&#10;            }&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        chatRepository.clearChatHistory(currentUser.getUid(), new RepositoryCallback&lt;Boolean&gt;() {&#13;&#10;            @Override&#13;&#10;            public void onSuccess(Boolean success) {&#13;&#10;                Log.d(TAG, &quot;Chat history cleared successfully&quot;);&#13;&#10;                if (isViewAttached()) {&#13;&#10;                    view.showMessage(&quot;Đã xóa lịch sử chat thành công&quot;);&#13;&#10;                    // Tải lại danh sách tin nhắn (sẽ rỗng)&#13;&#10;                    loadMessages();&#13;&#10;                }&#13;&#10;            }&#13;&#10;&#13;&#10;            @Override&#13;&#10;            public void onError(String error) {&#13;&#10;                Log.e(TAG, &quot;Failed to clear chat history: &quot; + error);&#13;&#10;                if (isViewAttached()) {&#13;&#10;                    view.showError(&quot;Không thể xóa lịch sử chat: &quot; + error);&#13;&#10;                }&#13;&#10;            }&#13;&#10;        });&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void refreshMessages() {&#13;&#10;        loadMessages();&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/home/HomeActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/home/HomeActivity.java" />
              <option name="originalContent" value="package com.vhn.doan.presentation.home;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.util.Log;&#10;import android.view.MenuItem;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.fragment.app.Fragment;&#10;&#10;import com.google.android.material.bottomnavigation.BottomNavigationView;&#10;import com.google.android.material.navigation.NavigationBarView;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.presentation.auth.LoginActivity;&#10;import com.vhn.doan.presentation.profile.ProfileFragment;&#10;import com.vhn.doan.presentation.reminder.ReminderFragment;&#10;import com.vhn.doan.services.AuthManager;&#10;import com.vhn.doan.services.ReminderManager;&#10;import com.vhn.doan.utils.UserSessionManager;&#10;&#10;/**&#10; * HomeActivity là màn hình chính của ứng dụng sau khi đăng nhập&#10; * Chứa HomeFragment và các Fragment khác thông qua BottomNavigationView&#10; */&#10;public class HomeActivity extends AppCompatActivity {&#10;&#10;    private static final String TAG = &quot;HomeActivity&quot;;&#10;    private BottomNavigationView bottomNavigationView;&#10;    private AuthManager authManager;&#10;    private ReminderManager reminderManager;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_home);&#10;&#10;        // Khởi tạo AuthManager&#10;        authManager = new AuthManager(this);&#10;&#10;        // Kiểm tra đăng nhập&#10;        if (!authManager.isUserLoggedIn()) {&#10;            // Chuyển về màn hình đăng nhập nếu chưa đăng nhập&#10;            Intent intent = new Intent(this, LoginActivity.class);&#10;            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);&#10;            startActivity(intent);&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        // Khởi tạo ReminderManager&#10;        reminderManager = new ReminderManager(new UserSessionManager(this));&#10;&#10;        // Khởi động ReminderForegroundService&#10;        reminderManager.startReminderService(this);&#10;        Log.d(TAG, &quot;ReminderForegroundService đã được khởi động từ HomeActivity&quot;);&#10;&#10;        // Khởi tạo và thiết lập BottomNavigationView&#10;        setupBottomNavigation();&#10;&#10;        // Mặc định hiển thị HomeFragment khi khởi động&#10;        if (savedInstanceState == null) {&#10;            loadFragment(new HomeFragment());&#10;        }&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        super.onResume();&#10;&#10;        // Khởi động lại ReminderForegroundService khi activity được resume&#10;        if (reminderManager != null) {&#10;            // Khởi động lại service để đảm bảo nó đang chạy&#10;            reminderManager.startReminderService(this);&#10;&#10;            // Khởi động lại tất cả reminders đang active&#10;            reminderManager.restartAllReminders(this);&#10;&#10;            // Kiểm tra và hiển thị reminders đã bị miss&#10;            reminderManager.checkAndShowMissedReminders(this);&#10;&#10;            Log.d(TAG, &quot;Đã khởi động lại và kiểm tra reminders trong onResume&quot;);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Method để xử lý onClick từ XML layout cho nút tạo reminder&#10;     * Sửa lỗi: IllegalStateException: Could not find method onCreateReminderClick&#10;     */&#10;    public void onCreateReminderClick(android.view.View view) {&#10;        // Tìm ReminderFragment hiện tại và gọi method tạo reminder&#10;        Fragment currentFragment = getSupportFragmentManager().findFragmentById(R.id.fragment_container);&#10;        if (currentFragment instanceof ReminderFragment) {&#10;            ReminderFragment reminderFragment = (ReminderFragment) currentFragment;&#10;            reminderFragment.onCreateReminderClick();&#10;        }&#10;    }&#10;&#10;    private void setupBottomNavigation() {&#10;        bottomNavigationView = findViewById(R.id.bottom_navigation);&#10;        bottomNavigationView.setOnItemSelectedListener(new NavigationBarView.OnItemSelectedListener() {&#10;            @Override&#10;            public boolean onNavigationItemSelected(@NonNull MenuItem item) {&#10;                Fragment fragment = null;&#10;                int itemId = item.getItemId();&#10;&#10;                if (itemId == R.id.nav_home) {&#10;                    fragment = HomeFragment.newInstance();&#10;                } else if (itemId == R.id.nav_reminders) {&#10;                    // Kích hoạt ReminderFragment&#10;                    fragment = ReminderFragment.newInstance();&#10;                } else if (itemId == R.id.nav_videos) {&#10;                    // Tạm thời vẫn dùng HomeFragment&#10;                    // Sẽ thay thế bằng ShortVideoFragment khi phát triển&#10;                    fragment = HomeFragment.newInstance();&#10;                    // fragment = ShortVideoFragment.newInstance();&#10;                } else if (itemId == R.id.nav_profile) {&#10;                    // Sử dụng ProfileFragment - chức năng yêu thích đã được tích hợp vào đây&#10;                    fragment = ProfileFragment.newInstance();&#10;                }&#10;&#10;                return loadFragment(fragment);&#10;            }&#10;        });&#10;    }&#10;&#10;    private boolean loadFragment(Fragment fragment) {&#10;        if (fragment != null) {&#10;            getSupportFragmentManager()&#10;                    .beginTransaction()&#10;                    .replace(R.id.fragment_container, fragment)&#10;                    .commit();&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.home;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.util.Log;&#10;import android.view.MenuItem;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.fragment.app.Fragment;&#10;&#10;import com.google.android.material.bottomnavigation.BottomNavigationView;&#10;import com.google.android.material.navigation.NavigationBarView;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.presentation.auth.LoginActivity;&#10;import com.vhn.doan.presentation.chat.ChatFragment;&#10;import com.vhn.doan.presentation.profile.ProfileFragment;&#10;import com.vhn.doan.presentation.reminder.ReminderFragment;&#10;import com.vhn.doan.services.AuthManager;&#10;import com.vhn.doan.services.ReminderManager;&#10;import com.vhn.doan.utils.UserSessionManager;&#10;&#10;/**&#10; * HomeActivity là màn hình chính của ứng dụng sau khi đăng nhập&#10; * Chứa HomeFragment và các Fragment khác thông qua BottomNavigationView&#10; */&#10;public class HomeActivity extends AppCompatActivity {&#10;&#10;    private static final String TAG = &quot;HomeActivity&quot;;&#10;    private BottomNavigationView bottomNavigationView;&#10;    private AuthManager authManager;&#10;    private ReminderManager reminderManager;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_home);&#10;&#10;        // Khởi tạo AuthManager&#10;        authManager = new AuthManager(this);&#10;&#10;        // Kiểm tra đăng nhập&#10;        if (!authManager.isUserLoggedIn()) {&#10;            // Chuyển về màn hình đăng nhập nếu chưa đăng nhập&#10;            Intent intent = new Intent(this, LoginActivity.class);&#10;            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);&#10;            startActivity(intent);&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        // Khởi tạo ReminderManager&#10;        reminderManager = new ReminderManager(new UserSessionManager(this));&#10;&#10;        // Khởi động ReminderForegroundService&#10;        reminderManager.startReminderService(this);&#10;        Log.d(TAG, &quot;ReminderForegroundService đã được khởi động từ HomeActivity&quot;);&#10;&#10;        // Khởi tạo và thiết lập BottomNavigationView&#10;        setupBottomNavigation();&#10;&#10;        // Mặc định hiển thị HomeFragment khi khởi động&#10;        if (savedInstanceState == null) {&#10;            loadFragment(new HomeFragment());&#10;        }&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        super.onResume();&#10;&#10;        // Khởi động lại ReminderForegroundService khi activity được resume&#10;        if (reminderManager != null) {&#10;            // Khởi động lại service để đảm bảo nó đang chạy&#10;            reminderManager.startReminderService(this);&#10;&#10;            // Khởi động lại tất cả reminders đang active&#10;            reminderManager.restartAllReminders(this);&#10;&#10;            // Kiểm tra và hiển thị reminders đã bị miss&#10;            reminderManager.checkAndShowMissedReminders(this);&#10;&#10;            Log.d(TAG, &quot;Đã khởi động lại và kiểm tra reminders trong onResume&quot;);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Method để xử lý onClick từ XML layout cho nút tạo reminder&#10;     * Sửa lỗi: IllegalStateException: Could not find method onCreateReminderClick&#10;     */&#10;    public void onCreateReminderClick(android.view.View view) {&#10;        // Tìm ReminderFragment hiện tại và gọi method tạo reminder&#10;        Fragment currentFragment = getSupportFragmentManager().findFragmentById(R.id.fragment_container);&#10;        if (currentFragment instanceof ReminderFragment) {&#10;            ReminderFragment reminderFragment = (ReminderFragment) currentFragment;&#10;            reminderFragment.onCreateReminderClick();&#10;        }&#10;    }&#10;&#10;    private void setupBottomNavigation() {&#10;        bottomNavigationView = findViewById(R.id.bottom_navigation);&#10;        bottomNavigationView.setOnItemSelectedListener(new NavigationBarView.OnItemSelectedListener() {&#10;            @Override&#10;            public boolean onNavigationItemSelected(@NonNull MenuItem item) {&#10;                Fragment fragment = null;&#10;                int itemId = item.getItemId();&#10;&#10;                if (itemId == R.id.nav_home) {&#10;                    fragment = HomeFragment.newInstance();&#10;                } else if (itemId == R.id.nav_chat) {&#10;                    // Kích hoạt ChatFragment - Trợ lý AI về sức khỏe&#10;                    fragment = ChatFragment.newInstance();&#10;                } else if (itemId == R.id.nav_reminders) {&#10;                    // Kích hoạt ReminderFragment&#10;                    fragment = ReminderFragment.newInstance();&#10;                } else if (itemId == R.id.nav_videos) {&#10;                    // Tạm thời vẫn dùng HomeFragment&#10;                    // Sẽ thay thế bằng ShortVideoFragment khi phát triển&#10;                    fragment = HomeFragment.newInstance();&#10;                    // fragment = ShortVideoFragment.newInstance();&#10;                } else if (itemId == R.id.nav_profile) {&#10;                    // Sử dụng ProfileFragment - chức năng yêu thích đã được tích hợp vào đây&#10;                    fragment = ProfileFragment.newInstance();&#10;                }&#10;&#10;                return loadFragment(fragment);&#10;            }&#10;        });&#10;    }&#10;&#10;    private boolean loadFragment(Fragment fragment) {&#10;        if (fragment != null) {&#10;            getSupportFragmentManager()&#10;                    .beginTransaction()&#10;                    .replace(R.id.fragment_container, fragment)&#10;                    .commit();&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/circle_background_primary.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/circle_background_primary.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;oval&quot;&gt;&#10;    &lt;solid android:color=&quot;?attr/colorPrimary&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/circle_background_secondary.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/circle_background_secondary.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;oval&quot;&gt;&#10;    &lt;solid android:color=&quot;?attr/colorSecondary&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_chat.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_chat.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M20,2H4C2.9,2 2,2.9 2,4v12c0,1.1 0.9,2 2,2h4v3c0,0.6 0.4,1 1,1c0.2,0 0.5,-0.1 0.7,-0.3L14.4,18H20c1.1,0 2,-0.9 2,-2V4C22,2.9 21.1,2 20,2zM20,16h-6l-2,2v-2H4V4h16V16z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_send.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_send.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M2.01,21L23,12 2.01,3 2,10l15,2 -15,2z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_smart_toy.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_smart_toy.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M20.5,6c-2.61,-0.04 -5.25,-0.34 -8.5,-0.34s-5.89,0.3 -8.5,0.34c-0.22,0 -0.45,0.07 -0.63,0.22c-0.18,0.15 -0.32,0.36 -0.32,0.64C2.05,8.11 2.5,9.5 2.5,12s-0.45,3.89 -0.95,5.14c0,0.28 0.14,0.49 0.32,0.64C1.95,17.93 2.18,18 2.4,18c2.61,0.04 5.25,0.34 8.5,0.34s5.89,-0.3 8.5,-0.34c0.22,0 0.45,-0.07 0.63,-0.22c0.18,-0.15 0.32,-0.36 0.32,-0.64C20.95,15.89 20.5,14.5 20.5,12s0.45,-3.89 0.95,-5.14c0,-0.28 -0.14,-0.49 -0.32,-0.64C20.95,6.07 20.72,6 20.5,6zM8.5,15c-0.83,0 -1.5,-0.67 -1.5,-1.5c0,-0.83 0.67,-1.5 1.5,-1.5s1.5,0.67 1.5,1.5C10,14.33 9.33,15 8.5,15zM12,15c-0.83,0 -1.5,-0.67 -1.5,-1.5c0,-0.83 0.67,-1.5 1.5,-1.5s1.5,0.67 1.5,1.5C13.5,14.33 12.83,15 12,15zM15.5,15c-0.83,0 -1.5,-0.67 -1.5,-1.5c0,-0.83 0.67,-1.5 1.5,-1.5s1.5,0.67 1.5,1.5C17,14.33 16.33,15 15.5,15z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_chat.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_chat.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:background=&quot;?android:attr/colorBackground&quot;&gt;&#10;&#10;    &lt;!-- Header --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:padding=&quot;16dp&quot;&#10;        android:background=&quot;?attr/colorPrimary&quot;&#10;        android:elevation=&quot;4dp&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;Trợ lý AI Sức khỏe&quot;&#10;            android:textColor=&quot;@android:color/white&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:gravity=&quot;center_vertical&quot; /&gt;&#10;&#10;        &lt;ImageButton&#10;            android:id=&quot;@+id/btn_clear_chat&quot;&#10;            android:layout_width=&quot;48dp&quot;&#10;            android:layout_height=&quot;48dp&quot;&#10;            android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;            android:src=&quot;@drawable/ic_delete&quot;&#10;            android:contentDescription=&quot;Xóa lịch sử chat&quot;&#10;            android:tint=&quot;@android:color/white&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Chat Messages Area --&gt;&#10;    &lt;FrameLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_weight=&quot;1&quot;&gt;&#10;&#10;        &lt;!-- Messages RecyclerView --&gt;&#10;        &lt;androidx.recyclerview.widget.RecyclerView&#10;            android:id=&quot;@+id/rv_chat_messages&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:paddingTop=&quot;8dp&quot;&#10;            android:paddingBottom=&quot;8dp&quot;&#10;            android:clipToPadding=&quot;false&quot;&#10;            tools:listitem=&quot;@layout/item_chat_user_message&quot; /&gt;&#10;&#10;        &lt;!-- Loading State --&gt;&#10;        &lt;LinearLayout&#10;            android:id=&quot;@+id/layout_loading&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:visibility=&quot;gone&quot;&gt;&#10;&#10;            &lt;ProgressBar&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Đang tải tin nhắn...&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textColor=&quot;?android:attr/textColorSecondary&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Empty State --&gt;&#10;        &lt;LinearLayout&#10;            android:id=&quot;@+id/layout_empty&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:padding=&quot;32dp&quot;&#10;            android:visibility=&quot;gone&quot;&gt;&#10;&#10;            &lt;ImageView&#10;                android:layout_width=&quot;80dp&quot;&#10;                android:layout_height=&quot;80dp&quot;&#10;                android:src=&quot;@drawable/ic_chat&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;&#10;                android:tint=&quot;?android:attr/textColorSecondary&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Chào mừng bạn đến với Trợ lý AI Sức khỏe!&quot;&#10;                android:textSize=&quot;18sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;?android:attr/textColorPrimary&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot;&#10;                android:gravity=&quot;center&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Hãy đặt câu hỏi về sức khỏe để tôi có thể hỗ trợ bạn&quot;&#10;                android:textSize=&quot;14sp&quot;&#10;                android:textColor=&quot;?android:attr/textColorSecondary&quot;&#10;                android:gravity=&quot;center&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/FrameLayout&gt;&#10;&#10;    &lt;!-- Message Input Area --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:padding=&quot;12dp&quot;&#10;        android:background=&quot;?android:attr/colorBackground&quot;&#10;        android:elevation=&quot;8dp&quot;&gt;&#10;&#10;        &lt;com.google.android.material.textfield.TextInputLayout&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:layout_marginEnd=&quot;8dp&quot;&#10;            app:boxStrokeWidth=&quot;1dp&quot;&#10;            app:boxCornerRadiusTopStart=&quot;24dp&quot;&#10;            app:boxCornerRadiusTopEnd=&quot;24dp&quot;&#10;            app:boxCornerRadiusBottomStart=&quot;24dp&quot;&#10;            app:boxCornerRadiusBottomEnd=&quot;24dp&quot;&#10;            app:hintEnabled=&quot;false&quot;&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputEditText&#10;                android:id=&quot;@+id/et_message_input&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:hint=&quot;Nhập câu hỏi về sức khỏe...&quot;&#10;                android:maxLines=&quot;4&quot;&#10;                android:inputType=&quot;textMultiLine|textCapSentences&quot;&#10;                android:paddingStart=&quot;16dp&quot;&#10;                android:paddingEnd=&quot;16dp&quot;&#10;                android:paddingTop=&quot;12dp&quot;&#10;                android:paddingBottom=&quot;12dp&quot; /&gt;&#10;&#10;        &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;        &lt;com.google.android.material.button.MaterialButton&#10;            android:id=&quot;@+id/btn_send_message&quot;&#10;            android:layout_width=&quot;56dp&quot;&#10;            android:layout_height=&quot;56dp&quot;&#10;            android:layout_gravity=&quot;bottom&quot;&#10;            app:icon=&quot;@drawable/ic_send&quot;&#10;            app:iconGravity=&quot;textStart&quot;&#10;            app:iconPadding=&quot;0dp&quot;&#10;            app:cornerRadius=&quot;28dp&quot;&#10;            style=&quot;@style/Widget.Material3.Button.Icon&quot;&#10;            android:contentDescription=&quot;Gửi tin nhắn&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Status Messages --&gt;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/layout_status&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        android:background=&quot;?attr/colorSurfaceVariant&quot;&#10;        android:visibility=&quot;gone&quot;&gt;&#10;&#10;        &lt;ProgressBar&#10;            android:id=&quot;@+id/progress_sending&quot;&#10;            android:layout_width=&quot;16dp&quot;&#10;            android:layout_height=&quot;16dp&quot;&#10;            android:layout_marginEnd=&quot;8dp&quot;&#10;            android:layout_gravity=&quot;center_vertical&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tv_status&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Đang gửi tin nhắn...&quot;&#10;            android:textSize=&quot;12sp&quot;&#10;            android:textColor=&quot;?android:attr/textColorSecondary&quot;&#10;            android:layout_gravity=&quot;center_vertical&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_chat_ai_message.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_chat_ai_message.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;horizontal&quot;&#10;    android:padding=&quot;8dp&quot;&#10;    android:gravity=&quot;start&quot;&gt;&#10;&#10;    &lt;ImageView&#10;        android:layout_width=&quot;40dp&quot;&#10;        android:layout_height=&quot;40dp&quot;&#10;        android:layout_gravity=&quot;bottom&quot;&#10;        android:background=&quot;@drawable/circle_background_secondary&quot;&#10;        android:src=&quot;@drawable/ic_smart_toy&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        android:tint=&quot;@android:color/white&quot;&#10;        android:contentDescription=&quot;AI Assistant&quot; /&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:layout_marginStart=&quot;8dp&quot;&#10;        android:layout_marginEnd=&quot;64dp&quot;&#10;        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            app:cardCornerRadius=&quot;16dp&quot;&#10;            app:cardElevation=&quot;2dp&quot;&#10;            app:cardBackgroundColor=&quot;?attr/colorSurfaceVariant&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tv_ai_message&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:padding=&quot;12dp&quot;&#10;                android:textColor=&quot;?android:attr/textColorPrimary&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:lineSpacingExtra=&quot;2dp&quot;&#10;                android:text=&quot;Đây là phản hồi từ AI về sức khỏe&quot; /&gt;&#10;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tv_ai_time&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_gravity=&quot;start&quot;&#10;            android:layout_marginTop=&quot;4dp&quot;&#10;            android:layout_marginStart=&quot;8dp&quot;&#10;            android:textSize=&quot;12sp&quot;&#10;            android:textColor=&quot;?android:attr/textColorSecondary&quot;&#10;            android:text=&quot;14:31&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_chat_typing.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_chat_typing.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;horizontal&quot;&#10;    android:padding=&quot;8dp&quot;&#10;    android:gravity=&quot;start&quot;&gt;&#10;&#10;    &lt;ImageView&#10;        android:layout_width=&quot;40dp&quot;&#10;        android:layout_height=&quot;40dp&quot;&#10;        android:layout_gravity=&quot;bottom&quot;&#10;        android:background=&quot;@drawable/circle_background_secondary&quot;&#10;        android:src=&quot;@drawable/ic_smart_toy&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        android:tint=&quot;@android:color/white&quot;&#10;        android:contentDescription=&quot;AI Assistant&quot; /&gt;&#10;&#10;    &lt;com.google.android.material.card.MaterialCardView&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginStart=&quot;8dp&quot;&#10;        android:layout_marginEnd=&quot;64dp&quot;&#10;        app:cardCornerRadius=&quot;16dp&quot;&#10;        app:cardElevation=&quot;2dp&quot;&#10;        app:cardBackgroundColor=&quot;?attr/colorSurfaceVariant&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:padding=&quot;16dp&quot;&#10;            android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;AI đang trả lời&quot;&#10;                android:textColor=&quot;?android:attr/textColorSecondary&quot;&#10;                android:textSize=&quot;14sp&quot;&#10;                android:layout_marginEnd=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;ProgressBar&#10;                android:layout_width=&quot;16dp&quot;&#10;                android:layout_height=&quot;16dp&quot;&#10;                android:indeterminateTint=&quot;?attr/colorPrimary&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_chat_user_message.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_chat_user_message.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;horizontal&quot;&#10;    android:padding=&quot;8dp&quot;&#10;    android:gravity=&quot;end&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:layout_marginStart=&quot;64dp&quot;&#10;        android:layout_marginEnd=&quot;8dp&quot;&#10;        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;        &lt;com.google.android.material.card.MaterialCardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            app:cardCornerRadius=&quot;16dp&quot;&#10;            app:cardElevation=&quot;2dp&quot;&#10;            app:cardBackgroundColor=&quot;?attr/colorPrimary&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tv_user_message&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:padding=&quot;12dp&quot;&#10;                android:textColor=&quot;@android:color/white&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:lineSpacingExtra=&quot;2dp&quot;&#10;                android:text=&quot;Đây là tin nhắn từ người dùng&quot; /&gt;&#10;&#10;        &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tv_user_time&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_gravity=&quot;end&quot;&#10;            android:layout_marginTop=&quot;4dp&quot;&#10;            android:layout_marginEnd=&quot;8dp&quot;&#10;            android:textSize=&quot;12sp&quot;&#10;            android:textColor=&quot;?android:attr/textColorSecondary&quot;&#10;            android:text=&quot;14:30&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;ImageView&#10;        android:layout_width=&quot;40dp&quot;&#10;        android:layout_height=&quot;40dp&quot;&#10;        android:layout_gravity=&quot;bottom&quot;&#10;        android:background=&quot;@drawable/circle_background_primary&quot;&#10;        android:src=&quot;@drawable/ic_person&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        android:tint=&quot;@android:color/white&quot;&#10;        android:contentDescription=&quot;Người dùng&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/menu/bottom_navigation_menu.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/menu/bottom_navigation_menu.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_home&quot;&#10;        android:icon=&quot;@android:drawable/ic_menu_compass&quot;&#10;        android:title=&quot;@string/nav_home&quot; /&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_reminders&quot;&#10;        android:icon=&quot;@android:drawable/ic_popup_reminder&quot;&#10;        android:title=&quot;@string/nav_reminders&quot; /&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_videos&quot;&#10;        android:icon=&quot;@drawable/icon_video_short&quot;&#10;        android:title=&quot;@string/nav_videos&quot; /&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_profile&quot;&#10;        android:icon=&quot;@android:drawable/ic_menu_myplaces&quot;&#10;        android:title=&quot;@string/nav_profile&quot; /&gt;&#10;&lt;/menu&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#13;&#10;    &lt;item&#13;&#10;        android:id=&quot;@+id/nav_home&quot;&#13;&#10;        android:icon=&quot;@android:drawable/ic_menu_compass&quot;&#13;&#10;        android:title=&quot;@string/nav_home&quot; /&gt;&#13;&#10;    &lt;item&#13;&#10;        android:id=&quot;@+id/nav_chat&quot;&#13;&#10;        android:icon=&quot;@drawable/ic_chat&quot;&#13;&#10;        android:title=&quot;@string/nav_chat&quot; /&gt;&#13;&#10;    &lt;item&#13;&#10;        android:id=&quot;@+id/nav_reminders&quot;&#13;&#10;        android:icon=&quot;@android:drawable/ic_popup_reminder&quot;&#13;&#10;        android:title=&quot;@string/nav_reminders&quot; /&gt;&#13;&#10;    &lt;item&#13;&#10;        android:id=&quot;@+id/nav_videos&quot;&#13;&#10;        android:icon=&quot;@drawable/icon_video_short&quot;&#13;&#10;        android:title=&quot;@string/nav_videos&quot; /&gt;&#13;&#10;    &lt;item&#13;&#10;        android:id=&quot;@+id/nav_profile&quot;&#13;&#10;        android:icon=&quot;@android:drawable/ic_menu_myplaces&quot;&#13;&#10;        android:title=&quot;@string/nav_profile&quot; /&gt;&#13;&#10;&lt;/menu&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/strings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/strings.xml" />
              <option name="originalContent" value="&lt;resources&gt;&#10;    &lt;!-- Tên ứng dụng --&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;HealthTips&lt;/string&gt;&#10;&#10;    &lt;!-- Các chuỗi cho màn hình đăng nhập --&gt;&#10;    &lt;string name=&quot;login&quot;&gt;Đăng nhập&lt;/string&gt;&#10;    &lt;string name=&quot;register&quot;&gt;Đăng ký&lt;/string&gt;&#10;    &lt;string name=&quot;email&quot;&gt;Email&lt;/string&gt;&#10;    &lt;string name=&quot;password&quot;&gt;Mật khẩu&lt;/string&gt;&#10;    &lt;string name=&quot;confirm_password&quot;&gt;Xác nhận mật khẩu&lt;/string&gt;&#10;    &lt;string name=&quot;forgot_password&quot;&gt;Quên mật khẩu?&lt;/string&gt;&#10;    &lt;string name=&quot;dont_have_account&quot;&gt;Chưa có tài khoản? Đăng ký&lt;/string&gt;&#10;    &lt;string name=&quot;already_have_account&quot;&gt;Đã có tài khoản? Đăng nhập&lt;/string&gt;&#10;&#10;    &lt;!-- Các chuỗi cho màn hình quên mật khẩu --&gt;&#10;    &lt;string name=&quot;reset_password&quot;&gt;Đặt lại mật khẩu&lt;/string&gt;&#10;    &lt;string name=&quot;reset_password_instructions&quot;&gt;Nhập email của bạn để nhận hướng dẫn đặt lại mật khẩu&lt;/string&gt;&#10;    &lt;string name=&quot;send_reset_email&quot;&gt;Gửi email đặt lại&lt;/string&gt;&#10;    &lt;string name=&quot;back_to_login&quot;&gt;Quay lại đăng nhập&lt;/string&gt;&#10;&#10;    &lt;!-- Các chuỗi cho màn hình trang chủ --&gt;&#10;    &lt;string name=&quot;categories&quot;&gt;Danh mục&lt;/string&gt;&#10;    &lt;string name=&quot;latest_tips&quot;&gt;Mẹo mới nhất&lt;/string&gt;&#10;    &lt;string name=&quot;most_viewed&quot;&gt;Xem nhiều nhất&lt;/string&gt;&#10;    &lt;string name=&quot;most_liked&quot;&gt;Yêu thích nhất&lt;/string&gt;&#10;    &lt;string name=&quot;see_all&quot;&gt;Xem tất cả&lt;/string&gt;&#10;    &lt;string name=&quot;search&quot;&gt;Tìm kiếm&lt;/string&gt;&#10;    &lt;string name=&quot;offline_mode&quot;&gt;Đang ở chế độ ngoại tuyến&lt;/string&gt;&#10;&#10;    &lt;!-- Các chuỗi cho bottom navigation --&gt;&#10;    &lt;string name=&quot;nav_home&quot;&gt;Trang chủ&lt;/string&gt;&#10;    &lt;string name=&quot;nav_reminders&quot;&gt;Nhắc nhở&lt;/string&gt;&#10;    &lt;string name=&quot;nav_videos&quot;&gt;Video ngắn&lt;/string&gt;&#10;    &lt;string name=&quot;nav_favorites&quot;&gt;Yêu thích&lt;/string&gt;&#10;    &lt;string name=&quot;nav_profile&quot;&gt;Hồ sơ&lt;/string&gt;&#10;&#10;    &lt;!-- Các chuỗi cho màn hình chi tiết --&gt;&#10;    &lt;string name=&quot;related_tips&quot;&gt;Mẹo liên quan&lt;/string&gt;&#10;    &lt;string name=&quot;share&quot;&gt;Chia sẻ&lt;/string&gt;&#10;    &lt;string name=&quot;save&quot;&gt;Lưu&lt;/string&gt;&#10;    &lt;string name=&quot;views&quot;&gt;lượt xem&lt;/string&gt;&#10;    &lt;string name=&quot;likes&quot;&gt;lượt thích&lt;/string&gt;&#10;&#10;    &lt;!-- Thông báo lỗi và thành công --&gt;&#10;    &lt;string name=&quot;error_login&quot;&gt;Đăng nhập thất bại&lt;/string&gt;&#10;    &lt;string name=&quot;error_register&quot;&gt;Đăng ký thất bại&lt;/string&gt;&#10;    &lt;string name=&quot;error_reset_password&quot;&gt;Không thể đặt lại mật khẩu&lt;/string&gt;&#10;    &lt;string name=&quot;success_login&quot;&gt;Đăng nhập thành công&lt;/string&gt;&#10;    &lt;string name=&quot;success_register&quot;&gt;Đăng ký thành công&lt;/string&gt;&#10;    &lt;string name=&quot;success_reset_password&quot;&gt;Đã gửi email đặt lại mật khẩu&lt;/string&gt;&#10;    &lt;string name=&quot;error_network&quot;&gt;Lỗi kết nối mạng&lt;/string&gt;&#10;&#10;    &lt;!-- Các chuỗi cho màn hình nhắc nhở --&gt;&#10;    &lt;string name=&quot;no_time_set&quot;&gt;Chưa đặt thời gian&lt;/string&gt;&#10;    &lt;string name=&quot;reminder_title&quot;&gt;Tiêu đề nhắc nhở&lt;/string&gt;&#10;    &lt;string name=&quot;reminder_description&quot;&gt;Mô tả nhắc nhở&lt;/string&gt;&#10;    &lt;string name=&quot;reminder_time&quot;&gt;Thời gian nhắc nhở&lt;/string&gt;&#10;    &lt;string name=&quot;reminder_repeat&quot;&gt;Lặp lại&lt;/string&gt;&#10;    &lt;string name=&quot;reminder_active&quot;&gt;Kích hoạt&lt;/string&gt;&#10;    &lt;string name=&quot;create_reminder&quot;&gt;Tạo nhắc nhở&lt;/string&gt;&#10;    &lt;string name=&quot;edit_reminder&quot;&gt;Chỉnh sửa nhắc nhở&lt;/string&gt;&#10;    &lt;string name=&quot;delete_reminder&quot;&gt;Xóa nhắc nhở&lt;/string&gt;&#10;    &lt;string name=&quot;no_reminders&quot;&gt;Chưa có nhắc nhở nào&lt;/string&gt;&#10;&#10;    &lt;!-- Chuỗi cho loại lặp lại --&gt;&#10;    &lt;string name=&quot;repeat_none&quot;&gt;Không lặp&lt;/string&gt;&#10;    &lt;string name=&quot;repeat_daily&quot;&gt;Hàng ngày&lt;/string&gt;&#10;    &lt;string name=&quot;repeat_weekly&quot;&gt;Hàng tuần&lt;/string&gt;&#10;    &lt;string name=&quot;repeat_monthly&quot;&gt;Hàng tháng&lt;/string&gt;&#10;&#10;    &lt;!-- Chuỗi cho notification --&gt;&#10;    &lt;string name=&quot;notification_channel_name&quot;&gt;Nhắc nhở sức khỏe&lt;/string&gt;&#10;    &lt;string name=&quot;notification_channel_description&quot;&gt;Thông báo nhắc nhở về sức khỏe&lt;/string&gt;&#10;    &lt;string name=&quot;notification_reminder_title&quot;&gt;Nhắc nhở: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;notification_mark_complete&quot;&gt;Đánh dấu hoàn thành&lt;/string&gt;&#10;&#10;    &lt;!-- Các chuỗi bổ sung cho màn hình chi tiết bài viết --&gt;&#10;    &lt;string name=&quot;like&quot;&gt;Thích&lt;/string&gt;&#10;    &lt;string name=&quot;unlike&quot;&gt;Bỏ thích&lt;/string&gt;&#10;    &lt;string name=&quot;add_to_favorite&quot;&gt;Thêm vào yêu thích&lt;/string&gt;&#10;    &lt;string name=&quot;remove_from_favorite&quot;&gt;Xóa khỏi yêu thích&lt;/string&gt;&#10;    &lt;string name=&quot;health_tip_image&quot;&gt;Hình ảnh mẹo sức khỏe&lt;/string&gt;&#10;    &lt;string name=&quot;share_tip&quot;&gt;Chia sẻ mẹo sức khỏe&lt;/string&gt;&#10;    &lt;string name=&quot;added_to_favorites&quot;&gt;Đã thêm vào danh sách yêu thích&lt;/string&gt;&#10;    &lt;string name=&quot;removed_from_favorites&quot;&gt;Đã xóa khỏi danh sách yêu thích&lt;/string&gt;&#10;&#10;    &lt;!-- Các chuỗi cho màn hình danh mục --&gt;&#10;    &lt;string name=&quot;categories_title&quot;&gt;Tất cả chủ đề sức khỏe&lt;/string&gt;&#10;    &lt;string name=&quot;categories_subtitle&quot;&gt;Khám phá các chủ đề sức khỏe phong phú&lt;/string&gt;&#10;    &lt;string name=&quot;empty_categories_title&quot;&gt;Không tìm thấy danh mục&lt;/string&gt;&#10;    &lt;string name=&quot;empty_categories_message&quot;&gt;Hiện không có danh mục nào để hiển thị&lt;/string&gt;&#10;    &lt;string name=&quot;empty_categories_description&quot;&gt;Các danh mục sẽ xuất hiện ở đây&lt;/string&gt;&#10;&#10;    &lt;!-- Các chuỗi chung --&gt;&#10;    &lt;string name=&quot;ok&quot;&gt;OK&lt;/string&gt;&#10;    &lt;string name=&quot;cancel&quot;&gt;Hủy&lt;/string&gt;&#10;    &lt;string name=&quot;yes&quot;&gt;Có&lt;/string&gt;&#10;    &lt;string name=&quot;no&quot;&gt;Không&lt;/string&gt;&#10;    &lt;string name=&quot;loading&quot;&gt;Đang tải...&lt;/string&gt;&#10;    &lt;string name=&quot;error&quot;&gt;Lỗi&lt;/string&gt;&#10;    &lt;string name=&quot;success&quot;&gt;Thành công&lt;/string&gt;&#10;    &lt;string name=&quot;favorite&quot;&gt;Yêu thích&lt;/string&gt;&#10;    &lt;string name=&quot;no_favorites&quot;&gt;Bạn chưa có mục yêu thích nào&lt;/string&gt;&#10;    &lt;string name=&quot;back&quot;&gt;Quay lại&lt;/string&gt;&#10;&#10;    &lt;!-- Các chuỗi cho màn hình chi tiết danh mục --&gt;&#10;    &lt;string name=&quot;empty_tips_description&quot;&gt;Chưa có mẹo nào trong danh mục này&lt;/string&gt;&#10;    &lt;string name=&quot;empty_tips_title&quot;&gt;Danh sách trống&lt;/string&gt;&#10;    &lt;string name=&quot;empty_tips_message&quot;&gt;Danh mục này hiện không có mẹo sức khỏe nào&lt;/string&gt;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;resources&gt;&#13;&#10;    &lt;!-- Tên ứng dụng --&gt;&#13;&#10;    &lt;string name=&quot;app_name&quot;&gt;HealthTips&lt;/string&gt;&#13;&#10;&#13;&#10;    &lt;!-- Các chuỗi cho màn hình đăng nhập --&gt;&#13;&#10;    &lt;string name=&quot;login&quot;&gt;Đăng nhập&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;register&quot;&gt;Đăng ký&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;email&quot;&gt;Email&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;password&quot;&gt;Mật khẩu&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;confirm_password&quot;&gt;Xác nhận mật khẩu&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;forgot_password&quot;&gt;Quên mật khẩu?&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;dont_have_account&quot;&gt;Chưa có tài khoản? Đăng ký&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;already_have_account&quot;&gt;Đã có tài khoản? Đăng nhập&lt;/string&gt;&#13;&#10;&#13;&#10;    &lt;!-- Các chuỗi cho màn hình quên mật khẩu --&gt;&#13;&#10;    &lt;string name=&quot;reset_password&quot;&gt;Đặt lại mật khẩu&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;reset_password_instructions&quot;&gt;Nhập email của bạn để nhận hướng dẫn đặt lại mật khẩu&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;send_reset_email&quot;&gt;Gửi email đặt lại&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;back_to_login&quot;&gt;Quay lại đăng nhập&lt;/string&gt;&#13;&#10;&#13;&#10;    &lt;!-- Các chuỗi cho màn hình trang chủ --&gt;&#13;&#10;    &lt;string name=&quot;categories&quot;&gt;Danh mục&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;latest_tips&quot;&gt;Mẹo mới nhất&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;most_viewed&quot;&gt;Xem nhiều nhất&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;most_liked&quot;&gt;Yêu thích nhất&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;see_all&quot;&gt;Xem tất cả&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;search&quot;&gt;Tìm kiếm&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;offline_mode&quot;&gt;Đang ở chế độ ngoại tuyến&lt;/string&gt;&#13;&#10;&#13;&#10;    &lt;!-- Các chuỗi cho bottom navigation --&gt;&#13;&#10;    &lt;string name=&quot;nav_home&quot;&gt;Trang chủ&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;nav_chat&quot;&gt;Chat AI&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;nav_reminders&quot;&gt;Nhắc nhở&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;nav_videos&quot;&gt;Video ngắn&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;nav_favorites&quot;&gt;Yêu thích&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;nav_profile&quot;&gt;Hồ sơ&lt;/string&gt;&#13;&#10;&#13;&#10;    &lt;!-- Các chuỗi cho màn hình chi tiết --&gt;&#13;&#10;    &lt;string name=&quot;related_tips&quot;&gt;Mẹo liên quan&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;share&quot;&gt;Chia sẻ&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;save&quot;&gt;Lưu&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;views&quot;&gt;lượt xem&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;likes&quot;&gt;lượt thích&lt;/string&gt;&#13;&#10;&#13;&#10;    &lt;!-- Thông báo lỗi và thành công --&gt;&#13;&#10;    &lt;string name=&quot;error_login&quot;&gt;Đăng nhập thất bại&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;error_register&quot;&gt;Đăng ký thất bại&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;error_reset_password&quot;&gt;Không thể đặt lại mật khẩu&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;success_login&quot;&gt;Đăng nhập thành công&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;success_register&quot;&gt;Đăng ký thành công&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;success_reset_password&quot;&gt;Đã gửi email đặt lại mật khẩu&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;error_network&quot;&gt;Lỗi kết nối mạng&lt;/string&gt;&#13;&#10;&#13;&#10;    &lt;!-- Các chuỗi cho màn hình nhắc nhở --&gt;&#13;&#10;    &lt;string name=&quot;no_time_set&quot;&gt;Chưa đặt thời gian&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;reminder_title&quot;&gt;Tiêu đề nhắc nhở&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;reminder_description&quot;&gt;Mô tả nhắc nhở&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;reminder_time&quot;&gt;Thời gian nhắc nhở&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;reminder_repeat&quot;&gt;Lặp lại&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;reminder_active&quot;&gt;Kích hoạt&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;create_reminder&quot;&gt;Tạo nhắc nhở&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;edit_reminder&quot;&gt;Chỉnh sửa nhắc nhở&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;delete_reminder&quot;&gt;Xóa nhắc nhở&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;no_reminders&quot;&gt;Chưa có nhắc nhở nào&lt;/string&gt;&#13;&#10;&#13;&#10;    &lt;!-- Chuỗi cho loại lặp lại --&gt;&#13;&#10;    &lt;string name=&quot;repeat_none&quot;&gt;Không lặp&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;repeat_daily&quot;&gt;Hàng ngày&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;repeat_weekly&quot;&gt;Hàng tuần&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;repeat_monthly&quot;&gt;Hàng tháng&lt;/string&gt;&#13;&#10;&#13;&#10;    &lt;!-- Chuỗi cho notification --&gt;&#13;&#10;    &lt;string name=&quot;notification_channel_name&quot;&gt;Nhắc nhở sức khỏe&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;notification_channel_description&quot;&gt;Thông báo nhắc nhở về sức khỏe&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;notification_reminder_title&quot;&gt;Nhắc nhở: %1$s&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;notification_mark_complete&quot;&gt;Đánh dấu hoàn thành&lt;/string&gt;&#13;&#10;&#13;&#10;    &lt;!-- Các chuỗi bổ sung cho màn hình chi tiết bài viết --&gt;&#13;&#10;    &lt;string name=&quot;like&quot;&gt;Thích&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;unlike&quot;&gt;Bỏ thích&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;add_to_favorite&quot;&gt;Thêm vào yêu thích&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;remove_from_favorite&quot;&gt;Xóa khỏi yêu thích&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;health_tip_image&quot;&gt;Hình ảnh mẹo sức khỏe&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;share_tip&quot;&gt;Chia sẻ mẹo sức khỏe&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;added_to_favorites&quot;&gt;Đã thêm vào danh sách yêu thích&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;removed_from_favorites&quot;&gt;Đã xóa khỏi danh sách yêu thích&lt;/string&gt;&#13;&#10;&#13;&#10;    &lt;!-- Các chuỗi cho màn hình danh mục --&gt;&#13;&#10;    &lt;string name=&quot;categories_title&quot;&gt;Tất cả chủ đề sức khỏe&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;categories_subtitle&quot;&gt;Khám phá các chủ đề sức khỏe phong phú&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;empty_categories_title&quot;&gt;Không tìm thấy danh mục&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;empty_categories_message&quot;&gt;Hiện không có danh mục nào để hiển thị&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;empty_categories_description&quot;&gt;Các danh mục sẽ xuất hiện ở đây&lt;/string&gt;&#13;&#10;&#13;&#10;    &lt;!-- Các chuỗi chung --&gt;&#13;&#10;    &lt;string name=&quot;ok&quot;&gt;OK&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;cancel&quot;&gt;Hủy&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;yes&quot;&gt;Có&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;no&quot;&gt;Không&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;loading&quot;&gt;Đang tải...&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;error&quot;&gt;Lỗi&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;success&quot;&gt;Thành công&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;favorite&quot;&gt;Yêu thích&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;no_favorites&quot;&gt;Bạn chưa có mục yêu thích nào&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;back&quot;&gt;Quay lại&lt;/string&gt;&#13;&#10;&#13;&#10;    &lt;!-- Các chuỗi cho màn hình chi tiết danh mục --&gt;&#13;&#10;    &lt;string name=&quot;empty_tips_description&quot;&gt;Chưa có mẹo nào trong danh mục này&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;empty_tips_title&quot;&gt;Danh sách trống&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;empty_tips_message&quot;&gt;Danh mục này hiện không có mẹo sức khỏe nào&lt;/string&gt;&#13;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>