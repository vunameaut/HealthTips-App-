<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/Conversation.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/Conversation.java" />
              <option name="originalContent" value="package com.vhn.doan.data;&#10;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;/**&#10; * Model cho một cuộc trò chuyện với AI&#10; */&#10;public class Conversation {&#10;    private String id;&#10;    private String userId;&#10;    private String title; // Tiêu đề cuộc trò chuyện (tự động tạo từ tin nhắn đầu tiên)&#10;    private String lastMessage; // Tin nhắn cuối cùng trong cuộc trò chuyện&#10;    private long lastMessageTime; // Thời gian tin nhắn cuối cùng&#10;    private boolean isFromUser; // Tin nhắn cuối cùng có phải từ user không&#10;    private int messageCount; // Số lượng tin nhắn trong cuộc trò chuyện&#10;    private long createdTime; // Thời gian tạo cuộc trò chuyện&#10;    private String topic; // Chủ đề chính của cuộc trò chuyện&#10;    private boolean isPinned; // Cuộc trò chuyện có được ghim không&#10;    private boolean isMuted; // Cuộc trò chuyện có bị tắt thông báo không&#10;    private boolean isRead; // Cuộc trò chuyện đã được đọc chưa&#10;&#10;    public Conversation() {&#10;        // Constructor rỗng cho Firebase&#10;    }&#10;&#10;    public Conversation(String userId, String title, long createdTime) {&#10;        this.userId = userId;&#10;        this.title = title;&#10;        this.createdTime = createdTime;&#10;        this.lastMessageTime = createdTime;&#10;        this.messageCount = 0;&#10;    }&#10;&#10;    public Conversation(String id, String userId, String title, String lastMessage,&#10;                       long lastMessageTime, boolean isFromUser, int messageCount,&#10;                       long createdTime, String topic, boolean isPinned, boolean isMuted, boolean isRead) {&#10;        this.id = id;&#10;        this.userId = userId;&#10;        this.title = title;&#10;        this.lastMessage = lastMessage;&#10;        this.lastMessageTime = lastMessageTime;&#10;        this.isFromUser = isFromUser;&#10;        this.messageCount = messageCount;&#10;        this.createdTime = createdTime;&#10;        this.topic = topic;&#10;        this.isPinned = isPinned;&#10;        this.isMuted = isMuted;&#10;        this.isRead = isRead;&#10;    }&#10;&#10;    // Getters&#10;    public String getId() {&#10;        return id;&#10;    }&#10;&#10;    public String getUserId() {&#10;        return userId;&#10;    }&#10;&#10;    public String getTitle() {&#10;        return title;&#10;    }&#10;&#10;    public String getLastMessage() {&#10;        return lastMessage;&#10;    }&#10;&#10;    public long getLastMessageTime() {&#10;        return lastMessageTime;&#10;    }&#10;&#10;    public boolean isFromUser() {&#10;        return isFromUser;&#10;    }&#10;&#10;    public int getMessageCount() {&#10;        return messageCount;&#10;    }&#10;&#10;    public long getCreatedTime() {&#10;        return createdTime;&#10;    }&#10;&#10;    public String getTopic() {&#10;        return topic;&#10;    }&#10;&#10;    public boolean isPinned() {&#10;        return isPinned;&#10;    }&#10;&#10;    public boolean isMuted() {&#10;        return isMuted;&#10;    }&#10;&#10;    public boolean isRead() {&#10;        return isRead;&#10;    }&#10;&#10;    // Setters&#10;    public void setId(String id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public void setUserId(String userId) {&#10;        this.userId = userId;&#10;    }&#10;&#10;    public void setTitle(String title) {&#10;        this.title = title;&#10;    }&#10;&#10;    public void setLastMessage(String lastMessage) {&#10;        this.lastMessage = lastMessage;&#10;    }&#10;&#10;    public void setLastMessageTime(long lastMessageTime) {&#10;        this.lastMessageTime = lastMessageTime;&#10;    }&#10;&#10;    public void setFromUser(boolean fromUser) {&#10;        isFromUser = fromUser;&#10;    }&#10;&#10;    public void setMessageCount(int messageCount) {&#10;        this.messageCount = messageCount;&#10;    }&#10;&#10;    public void setCreatedTime(long createdTime) {&#10;        this.createdTime = createdTime;&#10;    }&#10;&#10;    public void setTopic(String topic) {&#10;        this.topic = topic;&#10;    }&#10;&#10;    public void setPinned(boolean pinned) {&#10;        isPinned = pinned;&#10;    }&#10;&#10;    public void setMuted(boolean muted) {&#10;        isMuted = muted;&#10;    }&#10;&#10;    public void setRead(boolean read) {&#10;        isRead = read;&#10;    }&#10;&#10;    /**&#10;     * Chuyển đổi object thành Map để lưu vào Firebase&#10;     */&#10;    public Map&lt;String, Object&gt; toMap() {&#10;        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();&#10;        map.put(&quot;userId&quot;, userId);&#10;        map.put(&quot;title&quot;, title);&#10;        map.put(&quot;lastMessage&quot;, lastMessage);&#10;        map.put(&quot;lastMessageTime&quot;, lastMessageTime);&#10;        map.put(&quot;isFromUser&quot;, isFromUser);&#10;        map.put(&quot;messageCount&quot;, messageCount);&#10;        map.put(&quot;createdTime&quot;, createdTime);&#10;        map.put(&quot;topic&quot;, topic);&#10;        map.put(&quot;isPinned&quot;, isPinned);&#10;        map.put(&quot;isMuted&quot;, isMuted);&#10;        map.put(&quot;isRead&quot;, isRead);&#10;        return map;&#10;    }&#10;&#10;    /**&#10;     * Tạo tiêu đề tự động từ nội dung tin nhắn đầu tiên&#10;     */&#10;    public static String generateTitle(String firstMessage) {&#10;        if (firstMessage == null || firstMessage.trim().isEmpty()) {&#10;            return &quot;Cuộc trò chuyện mới&quot;;&#10;        }&#10;&#10;        String trimmed = firstMessage.trim();&#10;        &#10;        // Loại bỏ các ký tự đặc biệt và emoji&#10;        trimmed = trimmed.replaceAll(&quot;[^\\p{L}\\p{N}\\s\\?\\!\\.]&quot;, &quot;&quot;);&#10;        &#10;        // Cắt tại dấu câu đầu tiên để tạo tiêu đề ngắn gọn&#10;        String[] sentences = trimmed.split(&quot;[.!?]&quot;);&#10;        if (sentences.length &gt; 0 &amp;&amp; !sentences[0].trim().isEmpty()) {&#10;            trimmed = sentences[0].trim();&#10;        }&#10;        &#10;        // Lấy tối đa 20 ký tự đầu tiên để ngắn gọn hơn&#10;        if (trimmed.length() &lt;= 20) {&#10;            return trimmed;&#10;        } else {&#10;            // Cắt tại từ cuối cùng để tránh cắt giữa từ&#10;            String shortened = trimmed.substring(0, 20);&#10;            int lastSpace = shortened.lastIndexOf(' ');&#10;            if (lastSpace &gt; 10) { // Đảm bảo tiêu đề không quá ngắn&#10;                return trimmed.substring(0, lastSpace) + &quot;...&quot;;&#10;            } else {&#10;                return shortened + &quot;...&quot;;&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Conversation{&quot; +&#10;                &quot;id='&quot; + id + '\'' +&#10;                &quot;, userId='&quot; + userId + '\'' +&#10;                &quot;, title='&quot; + title + '\'' +&#10;                &quot;, lastMessage='&quot; + lastMessage + '\'' +&#10;                &quot;, lastMessageTime=&quot; + lastMessageTime +&#10;                &quot;, isFromUser=&quot; + isFromUser +&#10;                &quot;, messageCount=&quot; + messageCount +&#10;                &quot;, createdTime=&quot; + createdTime +&#10;                &quot;, topic='&quot; + topic + '\'' +&#10;                &quot;, isPinned=&quot; + isPinned +&#10;                &quot;, isMuted=&quot; + isMuted +&#10;                &quot;, isRead=&quot; + isRead +&#10;                '}';&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.data;&#10;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;/**&#10; * Model cho một cuộc trò chuyện với AI&#10; */&#10;public class Conversation {&#10;    private String id;&#10;    private String userId;&#10;    private String title; // Tiêu đề cuộc trò chuyện (tự động tạo từ tin nhắn đầu tiên)&#10;    private String lastMessage; // Tin nhắn cuối cùng trong cuộc trò chuyện&#10;    private long lastMessageTime; // Thời gian tin nhắn cuối cùng&#10;    private boolean isFromUser; // Tin nhắn cuối cùng có phải từ user không&#10;    private int messageCount; // Số lượng tin nhắn trong cuộc trò chuyện&#10;    private long createdTime; // Thời gian tạo cuộc trò chuyện&#10;    private String topic; // Chủ đề chính của cuộc trò chuyện&#10;    private boolean isPinned; // Cuộc trò chuyện có được ghim không&#10;    private boolean isMuted; // Cuộc trò chuyện có bị tắt thông báo không&#10;    private boolean isRead; // Cuộc trò chuyện đã được đọc chưa&#10;&#10;    public Conversation() {&#10;        // Constructor rỗng cho Firebase&#10;    }&#10;&#10;    public Conversation(String userId, String title, long createdTime) {&#10;        this.userId = userId;&#10;        this.title = title;&#10;        this.createdTime = createdTime;&#10;        this.lastMessageTime = createdTime;&#10;        this.messageCount = 0;&#10;    }&#10;&#10;    public Conversation(String id, String userId, String title, String lastMessage,&#10;                       long lastMessageTime, boolean isFromUser, int messageCount,&#10;                       long createdTime, String topic, boolean isPinned, boolean isMuted, boolean isRead) {&#10;        this.id = id;&#10;        this.userId = userId;&#10;        this.title = title;&#10;        this.lastMessage = lastMessage;&#10;        this.lastMessageTime = lastMessageTime;&#10;        this.isFromUser = isFromUser;&#10;        this.messageCount = messageCount;&#10;        this.createdTime = createdTime;&#10;        this.topic = topic;&#10;        this.isPinned = isPinned;&#10;        this.isMuted = isMuted;&#10;        this.isRead = isRead;&#10;    }&#10;&#10;    // Getters&#10;    public String getId() {&#10;        return id;&#10;    }&#10;&#10;    public String getUserId() {&#10;        return userId;&#10;    }&#10;&#10;    public String getTitle() {&#10;        return title;&#10;    }&#10;&#10;    public String getLastMessage() {&#10;        return lastMessage;&#10;    }&#10;&#10;    public long getLastMessageTime() {&#10;        return lastMessageTime;&#10;    }&#10;&#10;    public boolean isFromUser() {&#10;        return isFromUser;&#10;    }&#10;&#10;    public int getMessageCount() {&#10;        return messageCount;&#10;    }&#10;&#10;    public long getCreatedTime() {&#10;        return createdTime;&#10;    }&#10;&#10;    public String getTopic() {&#10;        return topic;&#10;    }&#10;&#10;    public boolean isPinned() {&#10;        return isPinned;&#10;    }&#10;&#10;    public boolean isMuted() {&#10;        return isMuted;&#10;    }&#10;&#10;    public boolean isRead() {&#10;        return isRead;&#10;    }&#10;&#10;    // Setters&#10;    public void setId(String id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public void setUserId(String userId) {&#10;        this.userId = userId;&#10;    }&#10;&#10;    public void setTitle(String title) {&#10;        this.title = title;&#10;    }&#10;&#10;    public void setLastMessage(String lastMessage) {&#10;        this.lastMessage = lastMessage;&#10;    }&#10;&#10;    public void setLastMessageTime(long lastMessageTime) {&#10;        this.lastMessageTime = lastMessageTime;&#10;    }&#10;&#10;    public void setFromUser(boolean fromUser) {&#10;        isFromUser = fromUser;&#10;    }&#10;&#10;    public void setMessageCount(int messageCount) {&#10;        this.messageCount = messageCount;&#10;    }&#10;&#10;    public void setCreatedTime(long createdTime) {&#10;        this.createdTime = createdTime;&#10;    }&#10;&#10;    public void setTopic(String topic) {&#10;        this.topic = topic;&#10;    }&#10;&#10;    public void setPinned(boolean pinned) {&#10;        isPinned = pinned;&#10;    }&#10;&#10;    public void setMuted(boolean muted) {&#10;        isMuted = muted;&#10;    }&#10;&#10;    public void setRead(boolean read) {&#10;        isRead = read;&#10;    }&#10;&#10;    /**&#10;     * Chuyển đổi object thành Map để lưu vào Firebase&#10;     */&#10;    public Map&lt;String, Object&gt; toMap() {&#10;        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();&#10;        map.put(&quot;userId&quot;, userId);&#10;        map.put(&quot;title&quot;, title);&#10;        map.put(&quot;lastMessage&quot;, lastMessage);&#10;        map.put(&quot;lastMessageTime&quot;, lastMessageTime);&#10;        map.put(&quot;isFromUser&quot;, isFromUser);&#10;        map.put(&quot;messageCount&quot;, messageCount);&#10;        map.put(&quot;createdTime&quot;, createdTime);&#10;        map.put(&quot;topic&quot;, topic);&#10;        map.put(&quot;isPinned&quot;, isPinned);&#10;        map.put(&quot;isMuted&quot;, isMuted);&#10;        map.put(&quot;isRead&quot;, isRead);&#10;        return map;&#10;    }&#10;&#10;    /**&#10;     * Tạo tiêu đề tự động từ nội dung tin nhắn đầu tiên&#10;     */&#10;    public static String generateTitle(String firstMessage) {&#10;        if (firstMessage == null || firstMessage.trim().isEmpty()) {&#10;            return &quot;Cuộc trò chuyện mới&quot;;&#10;        }&#10;&#10;        String trimmed = firstMessage.trim();&#10;        &#10;        // Loại bỏ các ký tự đặc biệt và emoji&#10;        trimmed = trimmed.replaceAll(&quot;[^\\p{L}\\p{N}\\s\\?\\!\\.]&quot;, &quot;&quot;);&#10;        &#10;        // Cắt tại dấu câu đầu tiên để tạo tiêu đề ngắn gọn&#10;        String[] sentences = trimmed.split(&quot;[.!?]&quot;);&#10;        if (sentences.length &gt; 0 &amp;&amp; !sentences[0].trim().isEmpty()) {&#10;            String firstSentence = sentences[0].trim();&#10;            // Nếu câu đầu tiên đủ ngắn, sử dụng luôn không cần dấu ...&#10;            if (firstSentence.length() &lt;= 25) {&#10;                return firstSentence;&#10;            }&#10;            trimmed = firstSentence;&#10;        }&#10;        &#10;        // Lấy tối đa 25 ký tự để có thể hiển thị đầy đủ hơn&#10;        if (trimmed.length() &lt;= 25) {&#10;            return trimmed;&#10;        } else {&#10;            // Cắt tại từ cuối cùng để tránh cắt giữa từ&#10;            String shortened = trimmed.substring(0, 25);&#10;            int lastSpace = shortened.lastIndexOf(' ');&#10;            if (lastSpace &gt; 15) { // Đảm bảo tiêu đề không quá ngắn&#10;                return trimmed.substring(0, lastSpace) + &quot;...&quot;;&#10;            } else {&#10;                return shortened + &quot;...&quot;;&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Conversation{&quot; +&#10;                &quot;id='&quot; + id + '\'' +&#10;                &quot;, userId='&quot; + userId + '\'' +&#10;                &quot;, title='&quot; + title + '\'' +&#10;                &quot;, lastMessage='&quot; + lastMessage + '\'' +&#10;                &quot;, lastMessageTime=&quot; + lastMessageTime +&#10;                &quot;, isFromUser=&quot; + isFromUser +&#10;                &quot;, messageCount=&quot; + messageCount +&#10;                &quot;, createdTime=&quot; + createdTime +&#10;                &quot;, topic='&quot; + topic + '\'' +&#10;                &quot;, isPinned=&quot; + isPinned +&#10;                &quot;, isMuted=&quot; + isMuted +&#10;                &quot;, isRead=&quot; + isRead +&#10;                '}';&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/chat/ChatListFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/chat/ChatListFragment.java" />
              <option name="originalContent" value="package com.vhn.doan.presentation.chat;&#10;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.Toast;&#10;import android.widget.PopupMenu;&#10;import android.widget.EditText;&#10;import androidx.appcompat.app.AlertDialog;&#10;import android.content.ClipData;&#10;import android.content.ClipboardManager;&#10;import android.content.Context;&#10;import android.content.Intent;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.google.android.material.button.MaterialButton;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.data.Conversation;&#10;import com.vhn.doan.data.repository.ChatRepositoryImpl;&#10;&#10;import java.util.List;&#10;&#10;/**&#10; * Fragment hiển thị danh sách các cuộc trò chuyện chat AI&#10; */&#10;public class ChatListFragment extends Fragment implements ChatListContract.View {&#10;&#10;    private static final String TAG = &quot;ChatListFragment&quot;;&#10;&#10;    // Views&#10;    private RecyclerView rvConversations;&#10;    private MaterialButton btnNewChat;&#10;    private MaterialButton btnStartNewChat;&#10;    private MaterialButton btnLoadMore;&#10;    private View layoutLoading;&#10;    private View layoutEmpty;&#10;    private View layoutLoadMore;&#10;    private View layoutLoadingMore;&#10;&#10;    // Components&#10;    private ConversationAdapter conversationAdapter;&#10;    private ChatListContract.Presenter presenter;&#10;&#10;    public static ChatListFragment newInstance() {&#10;        return new ChatListFragment();&#10;    }&#10;&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_chat_list, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;        initViews(view);&#10;        setupRecyclerView();&#10;        setupListeners();&#10;        initPresenter();&#10;        presenter.attachView(this);&#10;    }&#10;&#10;    private void initViews(View view) {&#10;        rvConversations = view.findViewById(R.id.rv_conversations);&#10;        btnNewChat = view.findViewById(R.id.btn_new_chat);&#10;        btnStartNewChat = view.findViewById(R.id.btn_start_new_chat);&#10;        btnLoadMore = view.findViewById(R.id.btn_load_more);&#10;        layoutLoading = view.findViewById(R.id.layout_loading);&#10;        layoutEmpty = view.findViewById(R.id.layout_empty);&#10;        layoutLoadMore = view.findViewById(R.id.layout_load_more);&#10;        layoutLoadingMore = view.findViewById(R.id.layout_loading_more);&#10;    }&#10;&#10;    private void initPresenter() {&#10;        ChatRepositoryImpl chatRepository = new ChatRepositoryImpl();&#10;        presenter = new ChatListPresenter(chatRepository);&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        conversationAdapter = new ConversationAdapter();&#10;        rvConversations.setLayoutManager(new LinearLayoutManager(getContext()));&#10;        rvConversations.setAdapter(conversationAdapter);&#10;&#10;        conversationAdapter.setOnConversationClickListener(conversation -&gt; {&#10;            if (presenter != null) {&#10;                presenter.onConversationClicked(conversation);&#10;            }&#10;        });&#10;&#10;        // Thêm listener cho long click để hiển thị menu ngữ cảnh&#10;        conversationAdapter.setOnConversationLongClickListener(this::showConversationContextMenu);&#10;    }&#10;&#10;    private void setupListeners() {&#10;        btnNewChat.setOnClickListener(v -&gt; {&#10;            if (presenter != null) {&#10;                presenter.onNewChatClicked();&#10;            }&#10;        });&#10;&#10;        btnStartNewChat.setOnClickListener(v -&gt; {&#10;            if (presenter != null) {&#10;                presenter.onNewChatClicked();&#10;            }&#10;        });&#10;&#10;        btnLoadMore.setOnClickListener(v -&gt; {&#10;            if (presenter != null) {&#10;                presenter.onLoadMoreClicked();&#10;            }&#10;        });&#10;    }&#10;&#10;    // Implementation của ChatListContract.View&#10;&#10;    @Override&#10;    public void showConversations(List&lt;Conversation&gt; conversations) {&#10;        conversationAdapter.setConversations(conversations);&#10;    }&#10;&#10;    @Override&#10;    public void addMoreConversations(List&lt;Conversation&gt; conversations) {&#10;        conversationAdapter.addConversations(conversations);&#10;    }&#10;&#10;    @Override&#10;    public void showLoadingConversations() {&#10;        layoutLoading.setVisibility(View.VISIBLE);&#10;        rvConversations.setVisibility(View.GONE);&#10;        layoutEmpty.setVisibility(View.GONE);&#10;    }&#10;&#10;    @Override&#10;    public void hideLoadingConversations() {&#10;        layoutLoading.setVisibility(View.GONE);&#10;        rvConversations.setVisibility(View.VISIBLE);&#10;    }&#10;&#10;    @Override&#10;    public void showLoadingMore() {&#10;        layoutLoadingMore.setVisibility(View.VISIBLE);&#10;        btnLoadMore.setVisibility(View.GONE);&#10;    }&#10;&#10;    @Override&#10;    public void hideLoadingMore() {&#10;        layoutLoadingMore.setVisibility(View.GONE);&#10;        btnLoadMore.setVisibility(View.VISIBLE);&#10;    }&#10;&#10;    @Override&#10;    public void showLoadMoreButton(boolean show) {&#10;        layoutLoadMore.setVisibility(show ? View.VISIBLE : View.GONE);&#10;        if (show) {&#10;            btnLoadMore.setVisibility(View.VISIBLE);&#10;            layoutLoadingMore.setVisibility(View.GONE);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showEmptyState() {&#10;        layoutEmpty.setVisibility(View.VISIBLE);&#10;        rvConversations.setVisibility(View.GONE);&#10;    }&#10;&#10;    @Override&#10;    public void hideEmptyState() {&#10;        layoutEmpty.setVisibility(View.GONE);&#10;        rvConversations.setVisibility(View.VISIBLE);&#10;    }&#10;&#10;    @Override&#10;    public void showLoadConversationsError(String error) {&#10;        showError(&quot;Lỗi tải cuộc trò chuyện: &quot; + error);&#10;    }&#10;&#10;    @Override&#10;    public void showLoadMoreError(String error) {&#10;        showError(&quot;Lỗi tải thêm: &quot; + error);&#10;    }&#10;&#10;    @Override&#10;    public void navigateToChatDetail(String conversationId, String conversationTitle) {&#10;        // TODO: Chuyển đến ChatDetailFragment với conversationId&#10;        if (getActivity() != null) {&#10;            ChatDetailFragment chatDetailFragment = ChatDetailFragment.newInstance(conversationId, conversationTitle);&#10;&#10;            getActivity().getSupportFragmentManager()&#10;                    .beginTransaction()&#10;                    .replace(R.id.fragment_container, chatDetailFragment)&#10;                    .addToBackStack(null)&#10;                    .commit();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void navigateToNewChat() {&#10;        // TODO: Chuyển đến NewChatFragment hoặc ChatDetailFragment với conversationId mới&#10;        if (getActivity() != null) {&#10;            NewChatFragment newChatFragment = NewChatFragment.newInstance();&#10;&#10;            getActivity().getSupportFragmentManager()&#10;                    .beginTransaction()&#10;                    .replace(R.id.fragment_container, newChatFragment)&#10;                    .addToBackStack(null)&#10;                    .commit();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showMessage(String message) {&#10;        if (getContext() != null) {&#10;            Toast.makeText(getContext(), message, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showError(String message) {&#10;        if (getContext() != null) {&#10;            Toast.makeText(getContext(), message, Toast.LENGTH_LONG).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showLoading() {&#10;        showLoadingConversations();&#10;    }&#10;&#10;    @Override&#10;    public void hideLoading() {&#10;        hideLoadingConversations();&#10;    }&#10;&#10;    @Override&#10;    public void onDestroyView() {&#10;        if (presenter != null) {&#10;            presenter.detachView();&#10;        }&#10;        super.onDestroyView();&#10;    }&#10;&#10;    /**&#10;     * Method để refresh danh sách từ bên ngoài&#10;     */&#10;    public void refreshConversations() {&#10;        if (presenter != null) {&#10;            presenter.refreshConversations();&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Hiển thị menu ngữ cảnh khi nhấn giữ vào cuộc trò chuyện&#10;     */&#10;    private void showConversationContextMenu(Conversation conversation, View anchorView) {&#10;        if (getContext() == null) return;&#10;&#10;        PopupMenu popupMenu = new PopupMenu(getContext(), anchorView);&#10;        popupMenu.getMenuInflater().inflate(R.menu.menu_conversation_context, popupMenu.getMenu());&#10;&#10;        // Cập nhật trạng thái menu items dựa trên trạng thái cuộc trò chuyện&#10;        updateMenuItemsState(popupMenu, conversation);&#10;&#10;        popupMenu.setOnMenuItemClickListener(item -&gt; {&#10;            int itemId = item.getItemId();&#10;&#10;&#10;&#10;            return false;&#10;        });&#10;&#10;        popupMenu.show();&#10;    }&#10;&#10;    /**&#10;     * Cập nhật trạng thái các menu items dựa trên trạng thái cuộc trò chuyện&#10;     */&#10;    private void updateMenuItemsState(PopupMenu popupMenu, Conversation conversation) {&#10;        // Cập nhật text cho pin/unpin&#10;        if (conversation.isPinned()) {&#10;            popupMenu.getMenu().findItem(R.id.action_pin_conversation)&#10;                    .setTitle(R.string.unpin_conversation);&#10;        } else {&#10;            popupMenu.getMenu().findItem(R.id.action_pin_conversation)&#10;                    .setTitle(R.string.pin_conversation);&#10;        }&#10;&#10;        &#10;    }&#10;&#10;    /**&#10;     * Hiển thị dialog đổi tên cuộc trò chuyện&#10;     */&#10;    private void showRenameConversationDialog(Conversation conversation) {&#10;        if (getContext() == null) return;&#10;&#10;        EditText editText = new EditText(getContext());&#10;        editText.setText(conversation.getTitle());&#10;        editText.setSelectAllOnFocus(true);&#10;&#10;        new AlertDialog.Builder(getContext())&#10;                .setTitle(R.string.rename_conversation)&#10;                .setMessage(R.string.enter_new_name)&#10;                .setView(editText)&#10;                .setPositiveButton(R.string.rename, (dialog, which) -&gt; {&#10;                    String newName = editText.getText().toString().trim();&#10;                    if (!newName.isEmpty() &amp;&amp; presenter != null) {&#10;                        presenter.renameConversation(conversation, newName);&#10;                    }&#10;                })&#10;                .setNegativeButton(R.string.cancel, null)&#10;                .show();&#10;    }&#10;&#10;    /**&#10;     * Hiển thị dialog xác nhận xóa cuộc trò chuyện&#10;     */&#10;    private void showDeleteConversationDialog(Conversation conversation) {&#10;        if (getContext() == null) return;&#10;&#10;        new AlertDialog.Builder(getContext())&#10;                .setTitle(R.string.delete_conversation_confirm)&#10;                .setMessage(R.string.delete_conversation_confirm_message)&#10;                .setPositiveButton(R.string.delete, (dialog, which) -&gt; {&#10;                    if (presenter != null) {&#10;                        presenter.deleteConversation(conversation);&#10;                    }&#10;                })&#10;                .setNegativeButton(R.string.cancel, null)&#10;                .show();&#10;    }&#10;&#10;    /**&#10;     * Bật/tắt ghim cuộc trò chuyện&#10;     */&#10;    private void togglePinConversation(Conversation conversation) {&#10;        if (presenter != null) {&#10;            presenter.togglePinConversation(conversation);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Bật/tắt thông báo cuộc trò chuyện&#10;     */&#10;    private void toggleMuteConversation(Conversation conversation) {&#10;        if (presenter != null) {&#10;            presenter.toggleMuteConversation(conversation);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Chia sẻ nội dung cuộc trò chuyện&#10;     */&#10;    private void shareConversation(Conversation conversation) {&#10;        if (getContext() == null || presenter == null) return;&#10;&#10;        // Tạo nội dung chia sẻ&#10;        String shareText = &quot;Cuộc trò chuyện: &quot; + conversation.getTitle() + &quot;\n\n&quot;;&#10;        if (conversation.getLastMessage() != null) {&#10;            shareText += &quot;Tin nhắn cuối: &quot; + conversation.getLastMessage();&#10;        }&#10;        shareText += &quot;\n\nỨng dụng HealthTips - Chat AI về sức khỏe&quot;;&#10;&#10;        Intent shareIntent = new Intent(Intent.ACTION_SEND);&#10;        shareIntent.setType(&quot;text/plain&quot;);&#10;        shareIntent.putExtra(Intent.EXTRA_TEXT, shareText);&#10;        shareIntent.putExtra(Intent.EXTRA_SUBJECT, &quot;Cuộc trò chuyện từ HealthTips&quot;);&#10;&#10;        try {&#10;            startActivity(Intent.createChooser(shareIntent, getString(R.string.share_conversation)));&#10;        } catch (Exception e) {&#10;            showError(&quot;Không thể chia sẻ cuộc trò chuyện&quot;);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Sao chép tin nhắn của cuộc trò chuyện&#10;     */&#10;    private void copyConversationMessages(Conversation conversation) {&#10;        if (getContext() == null || presenter == null) return;&#10;&#10;        // Tạo nội dung sao chép&#10;        String copyText = &quot;Cuộc trò chuyện: &quot; + conversation.getTitle() + &quot;\n\n&quot;;&#10;        if (conversation.getLastMessage() != null) {&#10;            copyText += conversation.getLastMessage();&#10;        }&#10;&#10;        ClipboardManager clipboard = (ClipboardManager) getContext().getSystemService(Context.CLIPBOARD_SERVICE);&#10;        ClipData clip = ClipData.newPlainText(&quot;Conversation&quot;, copyText);&#10;&#10;        if (clipboard != null) {&#10;            clipboard.setPrimaryClip(clip);&#10;            showMessage(getString(R.string.messages_copied));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Đánh dấu cuộc trò chuyện là đã đọc&#10;     */&#10;    private void markConversationAsRead(Conversation conversation) {&#10;        if (presenter != null) {&#10;            presenter.markConversationAsRead(conversation);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.chat;&#10;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.Toast;&#10;import android.widget.PopupMenu;&#10;import android.widget.EditText;&#10;import androidx.appcompat.app.AlertDialog;&#10;import android.content.ClipData;&#10;import android.content.ClipboardManager;&#10;import android.content.Context;&#10;import android.content.Intent;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.google.android.material.button.MaterialButton;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.data.Conversation;&#10;import com.vhn.doan.data.repository.ChatRepositoryImpl;&#10;&#10;import java.util.List;&#10;&#10;/**&#10; * Fragment hiển thị danh sách các cuộc trò chuyện chat AI&#10; */&#10;public class ChatListFragment extends Fragment implements ChatListContract.View {&#10;&#10;    private static final String TAG = &quot;ChatListFragment&quot;;&#10;&#10;    // Views&#10;    private RecyclerView rvConversations;&#10;    private MaterialButton btnNewChat;&#10;    private MaterialButton btnStartNewChat;&#10;    private MaterialButton btnLoadMore;&#10;    private View layoutLoading;&#10;    private View layoutEmpty;&#10;    private View layoutLoadMore;&#10;    private View layoutLoadingMore;&#10;&#10;    // Components&#10;    private ConversationAdapter conversationAdapter;&#10;    private ChatListContract.Presenter presenter;&#10;&#10;    public static ChatListFragment newInstance() {&#10;        return new ChatListFragment();&#10;    }&#10;&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_chat_list, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;        initViews(view);&#10;        setupRecyclerView();&#10;        setupListeners();&#10;        initPresenter();&#10;        presenter.attachView(this);&#10;    }&#10;&#10;    private void initViews(View view) {&#10;        rvConversations = view.findViewById(R.id.rv_conversations);&#10;        btnNewChat = view.findViewById(R.id.btn_new_chat);&#10;        btnStartNewChat = view.findViewById(R.id.btn_start_new_chat);&#10;        btnLoadMore = view.findViewById(R.id.btn_load_more);&#10;        layoutLoading = view.findViewById(R.id.layout_loading);&#10;        layoutEmpty = view.findViewById(R.id.layout_empty);&#10;        layoutLoadMore = view.findViewById(R.id.layout_load_more);&#10;        layoutLoadingMore = view.findViewById(R.id.layout_loading_more);&#10;    }&#10;&#10;    private void initPresenter() {&#10;        ChatRepositoryImpl chatRepository = new ChatRepositoryImpl();&#10;        presenter = new ChatListPresenter(chatRepository);&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        conversationAdapter = new ConversationAdapter();&#10;        rvConversations.setLayoutManager(new LinearLayoutManager(getContext()));&#10;        rvConversations.setAdapter(conversationAdapter);&#10;&#10;        conversationAdapter.setOnConversationClickListener(conversation -&gt; {&#10;            if (presenter != null) {&#10;                presenter.onConversationClicked(conversation);&#10;            }&#10;        });&#10;&#10;        // Thêm listener cho long click để hiển thị menu ngữ cảnh&#10;        conversationAdapter.setOnConversationLongClickListener(this::showConversationContextMenu);&#10;    }&#10;&#10;    private void setupListeners() {&#10;        btnNewChat.setOnClickListener(v -&gt; {&#10;            if (presenter != null) {&#10;                presenter.onNewChatClicked();&#10;            }&#10;        });&#10;&#10;        btnStartNewChat.setOnClickListener(v -&gt; {&#10;            if (presenter != null) {&#10;                presenter.onNewChatClicked();&#10;            }&#10;        });&#10;&#10;        btnLoadMore.setOnClickListener(v -&gt; {&#10;            if (presenter != null) {&#10;                presenter.onLoadMoreClicked();&#10;            }&#10;        });&#10;    }&#10;&#10;    // Implementation của ChatListContract.View&#10;&#10;    @Override&#10;    public void showConversations(List&lt;Conversation&gt; conversations) {&#10;        conversationAdapter.setConversations(conversations);&#10;    }&#10;&#10;    @Override&#10;    public void addMoreConversations(List&lt;Conversation&gt; conversations) {&#10;        conversationAdapter.addConversations(conversations);&#10;    }&#10;&#10;    @Override&#10;    public void showLoadingConversations() {&#10;        layoutLoading.setVisibility(View.VISIBLE);&#10;        rvConversations.setVisibility(View.GONE);&#10;        layoutEmpty.setVisibility(View.GONE);&#10;    }&#10;&#10;    @Override&#10;    public void hideLoadingConversations() {&#10;        layoutLoading.setVisibility(View.GONE);&#10;        rvConversations.setVisibility(View.VISIBLE);&#10;    }&#10;&#10;    @Override&#10;    public void showLoadingMore() {&#10;        layoutLoadingMore.setVisibility(View.VISIBLE);&#10;        btnLoadMore.setVisibility(View.GONE);&#10;    }&#10;&#10;    @Override&#10;    public void hideLoadingMore() {&#10;        layoutLoadingMore.setVisibility(View.GONE);&#10;        btnLoadMore.setVisibility(View.VISIBLE);&#10;    }&#10;&#10;    @Override&#10;    public void showLoadMoreButton(boolean show) {&#10;        layoutLoadMore.setVisibility(show ? View.VISIBLE : View.GONE);&#10;        if (show) {&#10;            btnLoadMore.setVisibility(View.VISIBLE);&#10;            layoutLoadingMore.setVisibility(View.GONE);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showEmptyState() {&#10;        layoutEmpty.setVisibility(View.VISIBLE);&#10;        rvConversations.setVisibility(View.GONE);&#10;    }&#10;&#10;    @Override&#10;    public void hideEmptyState() {&#10;        layoutEmpty.setVisibility(View.GONE);&#10;        rvConversations.setVisibility(View.VISIBLE);&#10;    }&#10;&#10;    @Override&#10;    public void showLoadConversationsError(String error) {&#10;        showError(&quot;Lỗi tải cuộc trò chuyện: &quot; + error);&#10;    }&#10;&#10;    @Override&#10;    public void showLoadMoreError(String error) {&#10;        showError(&quot;Lỗi tải thêm: &quot; + error);&#10;    }&#10;&#10;    @Override&#10;    public void navigateToChatDetail(String conversationId, String conversationTitle) {&#10;        // TODO: Chuyển đến ChatDetailFragment với conversationId&#10;        if (getActivity() != null) {&#10;            ChatDetailFragment chatDetailFragment = ChatDetailFragment.newInstance(conversationId, conversationTitle);&#10;&#10;            getActivity().getSupportFragmentManager()&#10;                    .beginTransaction()&#10;                    .replace(R.id.fragment_container, chatDetailFragment)&#10;                    .addToBackStack(null)&#10;                    .commit();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void navigateToNewChat() {&#10;        // TODO: Chuyển đến NewChatFragment hoặc ChatDetailFragment với conversationId mới&#10;        if (getActivity() != null) {&#10;            NewChatFragment newChatFragment = NewChatFragment.newInstance();&#10;&#10;            getActivity().getSupportFragmentManager()&#10;                    .beginTransaction()&#10;                    .replace(R.id.fragment_container, newChatFragment)&#10;                    .addToBackStack(null)&#10;                    .commit();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showMessage(String message) {&#10;        if (getContext() != null) {&#10;            Toast.makeText(getContext(), message, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showError(String message) {&#10;        if (getContext() != null) {&#10;            Toast.makeText(getContext(), message, Toast.LENGTH_LONG).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showLoading() {&#10;        showLoadingConversations();&#10;    }&#10;&#10;    @Override&#10;    public void hideLoading() {&#10;        hideLoadingConversations();&#10;    }&#10;&#10;    @Override&#10;    public void onDestroyView() {&#10;        if (presenter != null) {&#10;            presenter.detachView();&#10;        }&#10;        super.onDestroyView();&#10;    }&#10;&#10;    /**&#10;     * Method để refresh danh sách từ bên ngoài&#10;     */&#10;    public void refreshConversations() {&#10;        if (presenter != null) {&#10;            presenter.refreshConversations();&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Hiển thị menu ngữ cảnh khi nhấn giữ vào cuộc trò chuyện&#10;     */&#10;    private void showConversationContextMenu(Conversation conversation, View anchorView) {&#10;        if (getContext() == null) return;&#10;&#10;        PopupMenu popupMenu = new PopupMenu(getContext(), anchorView);&#10;        popupMenu.getMenuInflater().inflate(R.menu.menu_conversation_context, popupMenu.getMenu());&#10;&#10;        // Cập nhật trạng thái menu items dựa trên trạng thái cuộc trò chuyện&#10;        updateMenuItemsState(popupMenu, conversation);&#10;&#10;        popupMenu.setOnMenuItemClickListener(item -&gt; {&#10;            int itemId = item.getItemId();&#10;&#10;            if (itemId == R.id.action_rename_conversation) {&#10;                // Đổi tên cuộc trò chuyện&#10;                showRenameConversationDialog(conversation);&#10;                return true;&#10;            } else if (itemId == R.id.action_pin_conversation) {&#10;                // Ghim/bỏ ghim cuộc trò chuyện&#10;                if (presenter != null) {&#10;                    presenter.togglePinConversation(conversation);&#10;                }&#10;                return true;&#10;            } else if (itemId == R.id.action_delete_conversation) {&#10;                // Xóa cuộc trò chuyện&#10;                showDeleteConversationDialog(conversation);&#10;                return true;&#10;            }&#10;&#10;            return false;&#10;        });&#10;&#10;        popupMenu.show();&#10;    }&#10;&#10;    /**&#10;     * Cập nhật trạng thái các menu items dựa trên trạng thái cuộc trò chuyện&#10;     */&#10;    private void updateMenuItemsState(PopupMenu popupMenu, Conversation conversation) {&#10;        // Cập nhật text cho pin/unpin&#10;        if (conversation.isPinned()) {&#10;            popupMenu.getMenu().findItem(R.id.action_pin_conversation)&#10;                    .setTitle(R.string.unpin_conversation);&#10;        } else {&#10;            popupMenu.getMenu().findItem(R.id.action_pin_conversation)&#10;                    .setTitle(R.string.pin_conversation);&#10;        }&#10;&#10;        &#10;    }&#10;&#10;    /**&#10;     * Hiển thị dialog đổi tên cuộc trò chuyện&#10;     */&#10;    private void showRenameConversationDialog(Conversation conversation) {&#10;        if (getContext() == null) return;&#10;&#10;        EditText editText = new EditText(getContext());&#10;        editText.setText(conversation.getTitle());&#10;        editText.setSelectAllOnFocus(true);&#10;&#10;        new AlertDialog.Builder(getContext())&#10;                .setTitle(R.string.rename_conversation)&#10;                .setMessage(R.string.enter_new_name)&#10;                .setView(editText)&#10;                .setPositiveButton(R.string.rename, (dialog, which) -&gt; {&#10;                    String newName = editText.getText().toString().trim();&#10;                    if (!newName.isEmpty() &amp;&amp; presenter != null) {&#10;                        presenter.renameConversation(conversation, newName);&#10;                    }&#10;                })&#10;                .setNegativeButton(R.string.cancel, null)&#10;                .show();&#10;    }&#10;&#10;    /**&#10;     * Hiển thị dialog xác nhận xóa cuộc trò chuyện&#10;     */&#10;    private void showDeleteConversationDialog(Conversation conversation) {&#10;        if (getContext() == null) return;&#10;&#10;        new AlertDialog.Builder(getContext())&#10;                .setTitle(R.string.delete_conversation_confirm)&#10;                .setMessage(R.string.delete_conversation_confirm_message)&#10;                .setPositiveButton(R.string.delete, (dialog, which) -&gt; {&#10;                    if (presenter != null) {&#10;                        presenter.deleteConversation(conversation);&#10;                    }&#10;                })&#10;                .setNegativeButton(R.string.cancel, null)&#10;                .show();&#10;    }&#10;&#10;    /**&#10;     * Bật/tắt ghim cuộc trò chuyện&#10;     */&#10;    private void togglePinConversation(Conversation conversation) {&#10;        if (presenter != null) {&#10;            presenter.togglePinConversation(conversation);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Bật/tắt thông báo cuộc trò chuyện&#10;     */&#10;    private void toggleMuteConversation(Conversation conversation) {&#10;        if (presenter != null) {&#10;            presenter.toggleMuteConversation(conversation);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Chia sẻ nội dung cuộc trò chuyện&#10;     */&#10;    private void shareConversation(Conversation conversation) {&#10;        if (getContext() == null || presenter == null) return;&#10;&#10;        // Tạo nội dung chia sẻ&#10;        String shareText = &quot;Cuộc trò chuyện: &quot; + conversation.getTitle() + &quot;\n\n&quot;;&#10;        if (conversation.getLastMessage() != null) {&#10;            shareText += &quot;Tin nhắn cuối: &quot; + conversation.getLastMessage();&#10;        }&#10;        shareText += &quot;\n\nỨng dụng HealthTips - Chat AI về sức khỏe&quot;;&#10;&#10;        Intent shareIntent = new Intent(Intent.ACTION_SEND);&#10;        shareIntent.setType(&quot;text/plain&quot;);&#10;        shareIntent.putExtra(Intent.EXTRA_TEXT, shareText);&#10;        shareIntent.putExtra(Intent.EXTRA_SUBJECT, &quot;Cuộc trò chuyện từ HealthTips&quot;);&#10;&#10;        try {&#10;            startActivity(Intent.createChooser(shareIntent, getString(R.string.share_conversation)));&#10;        } catch (Exception e) {&#10;            showError(&quot;Không thể chia sẻ cuộc trò chuyện&quot;);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Sao chép tin nhắn của cuộc trò chuyện&#10;     */&#10;    private void copyConversationMessages(Conversation conversation) {&#10;        if (getContext() == null || presenter == null) return;&#10;&#10;        // Tạo nội dung sao chép&#10;        String copyText = &quot;Cuộc trò chuyện: &quot; + conversation.getTitle() + &quot;\n\n&quot;;&#10;        if (conversation.getLastMessage() != null) {&#10;            copyText += conversation.getLastMessage();&#10;        }&#10;&#10;        ClipboardManager clipboard = (ClipboardManager) getContext().getSystemService(Context.CLIPBOARD_SERVICE);&#10;        ClipData clip = ClipData.newPlainText(&quot;Conversation&quot;, copyText);&#10;&#10;        if (clipboard != null) {&#10;            clipboard.setPrimaryClip(clip);&#10;            showMessage(getString(R.string.messages_copied));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Đánh dấu cuộc trò chuyện là đã đọc&#10;     */&#10;    private void markConversationAsRead(Conversation conversation) {&#10;        if (presenter != null) {&#10;            presenter.markConversationAsRead(conversation);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/chat/ChatListPresenter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/chat/ChatListPresenter.java" />
              <option name="originalContent" value="package com.vhn.doan.presentation.chat;&#10;&#10;import android.util.Log;&#10;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.auth.FirebaseUser;&#10;import com.vhn.doan.data.Conversation;&#10;import com.vhn.doan.data.repository.ChatRepository;&#10;import com.vhn.doan.data.repository.RepositoryCallback;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;/**&#10; * Presenter cho ChatList feature - Quản lý danh sách cuộc trò chuyện&#10; */&#10;public class ChatListPresenter implements ChatListContract.Presenter {&#10;&#10;    private static final String TAG = &quot;ChatListPresenter&quot;;&#10;    private static final int DEFAULT_CONVERSATIONS_LIMIT = 8;&#10;    private static final int LOAD_MORE_CONVERSATIONS_LIMIT = 3;&#10;&#10;    private final ChatRepository chatRepository;&#10;    private final FirebaseAuth firebaseAuth;&#10;    private ChatListContract.View view;&#10;&#10;    // State management&#10;    private List&lt;Conversation&gt; conversationsList;&#10;    private Long lastConversationTime;&#10;    private boolean isLoading = false;&#10;    private boolean isLoadingMore = false;&#10;    private boolean hasMoreConversations = true;&#10;&#10;    public ChatListPresenter(ChatRepository chatRepository) {&#10;        this.chatRepository = chatRepository;&#10;        this.firebaseAuth = FirebaseAuth.getInstance();&#10;        this.conversationsList = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    @Override&#10;    public void attachView(ChatListContract.View view) {&#10;        this.view = view;&#10;        // Tự động tải danh sách cuộc trò chuyện khi attach view&#10;        loadConversations();&#10;    }&#10;&#10;    @Override&#10;    public void detachView() {&#10;        this.view = null;&#10;    }&#10;&#10;    private boolean isViewAttached() {&#10;        return view != null;&#10;    }&#10;&#10;    @Override&#10;    public void loadConversations() {&#10;        if (isLoading) {&#10;            Log.d(TAG, &quot;Already loading conversations, skip&quot;);&#10;            return;&#10;        }&#10;&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#10;        if (currentUser == null) {&#10;            if (isViewAttached()) {&#10;                view.showLoadConversationsError(&quot;Bạn cần đăng nhập để xem danh sách cuộc trò chuyện&quot;);&#10;            }&#10;            return;&#10;        }&#10;&#10;        isLoading = true;&#10;        lastConversationTime = null; // Reset phân trang&#10;        hasMoreConversations = true;&#10;&#10;        if (isViewAttached()) {&#10;            view.showLoadingConversations();&#10;            view.hideEmptyState();&#10;        }&#10;&#10;        chatRepository.getConversations(currentUser.getUid(), DEFAULT_CONVERSATIONS_LIMIT, null,&#10;            new RepositoryCallback&lt;List&lt;Conversation&gt;&gt;() {&#10;                @Override&#10;                public void onSuccess(List&lt;Conversation&gt; conversations) {&#10;                    isLoading = false;&#10;&#10;                    if (isViewAttached()) {&#10;                        view.hideLoadingConversations();&#10;&#10;                        if (conversations == null || conversations.isEmpty()) {&#10;                            view.showEmptyState();&#10;                            view.showLoadMoreButton(false);&#10;                        } else {&#10;                            view.hideEmptyState();&#10;                            view.showConversations(conversations);&#10;&#10;                            // Cập nhật state cho phân trang&#10;                            conversationsList.clear();&#10;                            conversationsList.addAll(conversations);&#10;&#10;                            if (!conversations.isEmpty()) {&#10;                                lastConversationTime = conversations.get(conversations.size() - 1).getLastMessageTime();&#10;                            }&#10;&#10;                            // Kiểm tra xem có thêm cuộc trò chuyện để load không&#10;                            checkHasMoreConversations();&#10;                        }&#10;                    }&#10;                }&#10;&#10;                @Override&#10;                public void onError(String error) {&#10;                    isLoading = false;&#10;                    Log.e(TAG, &quot;Failed to load conversations: &quot; + error);&#10;&#10;                    if (isViewAttached()) {&#10;                        view.hideLoadingConversations();&#10;                        view.showLoadConversationsError(error);&#10;                    }&#10;                }&#10;            });&#10;    }&#10;&#10;    @Override&#10;    public void loadMoreConversations() {&#10;        if (isLoadingMore || !hasMoreConversations) {&#10;            Log.d(TAG, &quot;Skip load more: isLoadingMore=&quot; + isLoadingMore + &quot;, hasMore=&quot; + hasMoreConversations);&#10;            return;&#10;        }&#10;&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#10;        if (currentUser == null) {&#10;            if (isViewAttached()) {&#10;                view.showLoadMoreError(&quot;Bạn cần đăng nhập để tải thêm cuộc trò chuyện&quot;);&#10;            }&#10;            return;&#10;        }&#10;&#10;        isLoadingMore = true;&#10;&#10;        if (isViewAttached()) {&#10;            view.showLoadingMore();&#10;        }&#10;&#10;        chatRepository.getConversations(currentUser.getUid(), LOAD_MORE_CONVERSATIONS_LIMIT, lastConversationTime,&#10;            new RepositoryCallback&lt;List&lt;Conversation&gt;&gt;() {&#10;                @Override&#10;                public void onSuccess(List&lt;Conversation&gt; conversations) {&#10;                    isLoadingMore = false;&#10;&#10;                    if (isViewAttached()) {&#10;                        view.hideLoadingMore();&#10;&#10;                        if (conversations != null &amp;&amp; !conversations.isEmpty()) {&#10;                            view.addMoreConversations(conversations);&#10;&#10;                            // Cập nhật state&#10;                            conversationsList.addAll(conversations);&#10;                            lastConversationTime = conversations.get(conversations.size() - 1).getLastMessageTime();&#10;&#10;                            // Kiểm tra xem còn thêm cuộc trò chuyện không&#10;                            checkHasMoreConversations();&#10;                        } else {&#10;                            // Không còn cuộc trò chuyện nào để tải&#10;                            hasMoreConversations = false;&#10;                            view.showLoadMoreButton(false);&#10;                        }&#10;                    }&#10;                }&#10;&#10;                @Override&#10;                public void onError(String error) {&#10;                    isLoadingMore = false;&#10;                    Log.e(TAG, &quot;Failed to load more conversations: &quot; + error);&#10;&#10;                    if (isViewAttached()) {&#10;                        view.hideLoadingMore();&#10;                        view.showLoadMoreError(error);&#10;                    }&#10;                }&#10;            });&#10;    }&#10;&#10;    @Override&#10;    public void refreshConversations() {&#10;        // Reset tất cả state và tải lại từ đầu&#10;        conversationsList.clear();&#10;        lastConversationTime = null;&#10;        hasMoreConversations = true;&#10;        isLoading = false;&#10;        isLoadingMore = false;&#10;&#10;        loadConversations();&#10;    }&#10;&#10;    @Override&#10;    public void onConversationClicked(Conversation conversation) {&#10;        if (conversation == null || conversation.getId() == null) {&#10;            if (isViewAttached()) {&#10;                view.showError(&quot;Thông tin cuộc trò chuyện không hợp lệ&quot;);&#10;            }&#10;            return;&#10;        }&#10;&#10;        Log.d(TAG, &quot;Conversation clicked: &quot; + conversation.getId() + &quot; - &quot; + conversation.getTitle());&#10;&#10;        if (isViewAttached()) {&#10;            view.navigateToChatDetail(conversation.getId(), conversation.getTitle());&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onNewChatClicked() {&#10;        if (isViewAttached()) {&#10;            view.navigateToNewChat();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onLoadMoreClicked() {&#10;        if (!isLoadingMore &amp;&amp; hasMoreConversations) {&#10;            loadMoreConversations();&#10;        }&#10;    }&#10;&#10;    // ========== CONTEXT MENU ACTIONS IMPLEMENTATION ==========&#10;&#10;    @Override&#10;    public void renameConversation(Conversation conversation, String newName) {&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#10;        if (currentUser == null) {&#10;            if (isViewAttached()) {&#10;                view.showError(&quot;Bạn cần đăng nhập để đổi tên cuộc trò chuyện&quot;);&#10;            }&#10;            return;&#10;        }&#10;&#10;        if (newName == null || newName.trim().isEmpty()) {&#10;            if (isViewAttached()) {&#10;                view.showError(&quot;Tên cuộc trò chuyện không được để trống&quot;);&#10;            }&#10;            return;&#10;        }&#10;&#10;        // Cập nhật tên cuộc trò chuyện&#10;        conversation.setTitle(newName.trim());&#10;&#10;        chatRepository.updateConversation(conversation, new RepositoryCallback&lt;Conversation&gt;() {&#10;            @Override&#10;            public void onSuccess(Conversation updatedConversation) {&#10;                Log.d(TAG, &quot;Conversation renamed successfully: &quot; + updatedConversation.getTitle());&#10;&#10;                if (isViewAttached()) {&#10;                    view.showMessage(&quot;Đã đổi tên cuộc trò chuyện&quot;);&#10;                    // Cập nhật trong danh sách local&#10;                    updateConversationInList(updatedConversation);&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                Log.e(TAG, &quot;Failed to rename conversation: &quot; + error);&#10;                if (isViewAttached()) {&#10;                    view.showError(&quot;Không thể đổi tên cuộc trò chuyện: &quot; + error);&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void togglePinConversation(Conversation conversation) {&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#10;        if (currentUser == null) {&#10;            if (isViewAttached()) {&#10;                view.showError(&quot;Bạn cần đăng nhập để ghim cuộc trò chuyện&quot;);&#10;            }&#10;            return;&#10;        }&#10;&#10;        // Nếu đang ghim và hiện tại chưa được ghim&#10;        if (!conversation.isPinned()) {&#10;            // Kiểm tra số lượng cuộc trò chuyện đã được ghim&#10;            long pinnedCount = conversationsList.stream().filter(Conversation::isPinned).count();&#10;            if (pinnedCount &gt;= 5) {&#10;                if (isViewAttached()) {&#10;                    view.showError(&quot;Bạn chỉ có thể ghim tối đa 5 cuộc trò chuyện&quot;);&#10;                }&#10;                return;&#10;            }&#10;        }&#10;&#10;        // Toggle trạng thái pin&#10;        boolean newPinState = !conversation.isPinned();&#10;        conversation.setPinned(newPinState);&#10;&#10;        chatRepository.updateConversation(conversation, new RepositoryCallback&lt;Conversation&gt;() {&#10;            @Override&#10;            public void onSuccess(Conversation updatedConversation) {&#10;                String message = newPinState ? &quot;Đã ghim cuộc trò chuyện&quot; : &quot;Đã bỏ ghim cuộc trò chuyện&quot;;&#10;                Log.d(TAG, message + &quot;: &quot; + updatedConversation.getTitle());&#10;                &#10;                if (isViewAttached()) {&#10;                    view.showMessage(message);&#10;                    // Cập nhật trong danh sách local&#10;                    updateConversationInList(updatedConversation);&#10;                    // Sắp xếp lại danh sách để đưa cuộc trò chuyện được ghim lên đầu&#10;                    sortConversationsWithPinnedFirst();&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                Log.e(TAG, &quot;Failed to toggle pin conversation: &quot; + error);&#10;                // Revert lại trạng thái cũ&#10;                conversation.setPinned(!newPinState);&#10;                if (isViewAttached()) {&#10;                    view.showError(&quot;Không thể cập nhật trạng thái ghim: &quot; + error);&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void toggleMuteConversation(Conversation conversation) {&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#10;        if (currentUser == null) {&#10;            if (isViewAttached()) {&#10;                view.showError(&quot;Bạn cần đăng nhập để tắt/bật thông báo&quot;);&#10;            }&#10;            return;&#10;        }&#10;&#10;        // Toggle trạng thái mute&#10;        boolean newMuteState = !conversation.isMuted();&#10;        conversation.setMuted(newMuteState);&#10;&#10;        chatRepository.updateConversation(conversation, new RepositoryCallback&lt;Conversation&gt;() {&#10;            @Override&#10;            public void onSuccess(Conversation updatedConversation) {&#10;                String message = newMuteState ? &quot;Đã tắt thông báo&quot; : &quot;Đã bật thông báo&quot;;&#10;                Log.d(TAG, message + &quot; cho cuộc trò chuyện: &quot; + updatedConversation.getTitle());&#10;&#10;                if (isViewAttached()) {&#10;                    view.showMessage(message);&#10;                    // Cập nhật trong danh sách local&#10;                    updateConversationInList(updatedConversation);&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                Log.e(TAG, &quot;Failed to toggle mute conversation: &quot; + error);&#10;                // Revert lại trạng thái cũ&#10;                conversation.setMuted(!newMuteState);&#10;                if (isViewAttached()) {&#10;                    view.showError(&quot;Không thể cập nhật trạng thái thông báo: &quot; + error);&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void deleteConversation(Conversation conversation) {&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#10;        if (currentUser == null) {&#10;            if (isViewAttached()) {&#10;                view.showError(&quot;Bạn cần đăng nhập để xóa cuộc trò chuyện&quot;);&#10;            }&#10;            return;&#10;        }&#10;&#10;        if (conversation.getId() == null) {&#10;            if (isViewAttached()) {&#10;                view.showError(&quot;Thông tin cuộc trò chuyện không hợp lệ&quot;);&#10;            }&#10;            return;&#10;        }&#10;&#10;        chatRepository.deleteConversation(conversation.getId(), new RepositoryCallback&lt;Boolean&gt;() {&#10;            @Override&#10;            public void onSuccess(Boolean success) {&#10;                Log.d(TAG, &quot;Conversation deleted successfully: &quot; + conversation.getTitle());&#10;&#10;                if (isViewAttached()) {&#10;                    view.showMessage(&quot;Đã xóa cuộc trò chuyện&quot;);&#10;                    // Xóa khỏi danh sách local&#10;                    removeConversationFromList(conversation);&#10;&#10;                    // Nếu danh sách trống, hiển thị empty state&#10;                    if (conversationsList.isEmpty()) {&#10;                        view.showEmptyState();&#10;                    }&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                Log.e(TAG, &quot;Failed to delete conversation: &quot; + error);&#10;                if (isViewAttached()) {&#10;                    view.showError(&quot;Không thể xóa cuộc trò chuyện: &quot; + error);&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void markConversationAsRead(Conversation conversation) {&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#10;        if (currentUser == null) {&#10;            if (isViewAttached()) {&#10;                view.showError(&quot;Bạn cần đăng nhập để đánh dấu đã đọc&quot;);&#10;            }&#10;            return;&#10;        }&#10;&#10;        // Đánh dấu đã đọc&#10;        conversation.setRead(true);&#10;&#10;        chatRepository.updateConversation(conversation, new RepositoryCallback&lt;Conversation&gt;() {&#10;            @Override&#10;            public void onSuccess(Conversation updatedConversation) {&#10;                Log.d(TAG, &quot;Conversation marked as read: &quot; + updatedConversation.getTitle());&#10;&#10;                if (isViewAttached()) {&#10;                    view.showMessage(&quot;Đã đánh dấu là đã đọc&quot;);&#10;                    // Cập nhật trong danh sách local&#10;                    updateConversationInList(updatedConversation);&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                Log.e(TAG, &quot;Failed to mark conversation as read: &quot; + error);&#10;                // Revert lại trạng thái cũ&#10;                conversation.setRead(false);&#10;                if (isViewAttached()) {&#10;                    view.showError(&quot;Không thể đánh dấu đã đọc: &quot; + error);&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    // ========== HELPER METHODS ==========&#10;&#10;    /**&#10;     * Kiểm tra xem còn cuộc trò chuyện nào để load không&#10;     */&#10;    private void checkHasMoreConversations() {&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#10;        if (currentUser == null || lastConversationTime == null) {&#10;            hasMoreConversations = false;&#10;            if (isViewAttached()) {&#10;                view.showLoadMoreButton(false);&#10;            }&#10;            return;&#10;        }&#10;&#10;        chatRepository.hasMoreConversations(currentUser.getUid(), lastConversationTime, new RepositoryCallback&lt;Boolean&gt;() {&#10;            @Override&#10;            public void onSuccess(Boolean hasMore) {&#10;                hasMoreConversations = hasMore;&#10;                if (isViewAttached()) {&#10;                    view.showLoadMoreButton(hasMore);&#10;                }&#10;                Log.d(TAG, &quot;Has more conversations: &quot; + hasMore);&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                Log.e(TAG, &quot;Error checking more conversations: &quot; + error);&#10;                // Trong trường hợp lỗi, giả định không còn cuộc trò chuyện nào&#10;                hasMoreConversations = false;&#10;                if (isViewAttached()) {&#10;                    view.showLoadMoreButton(false);&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    /**&#10;     * Cập nhật một cuộc trò chuyện trong danh sách local&#10;     */&#10;    private void updateConversationInList(Conversation updatedConversation) {&#10;        for (int i = 0; i &lt; conversationsList.size(); i++) {&#10;            if (conversationsList.get(i).getId().equals(updatedConversation.getId())) {&#10;                conversationsList.set(i, updatedConversation);&#10;                if (isViewAttached()) {&#10;                    view.showConversations(new ArrayList&lt;&gt;(conversationsList));&#10;                }&#10;                break;&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Xóa một cuộc trò chuyện khỏi danh sách local&#10;     */&#10;    private void removeConversationFromList(Conversation conversation) {&#10;        conversationsList.removeIf(c -&gt; c.getId().equals(conversation.getId()));&#10;        if (isViewAttached()) {&#10;            view.showConversations(new ArrayList&lt;&gt;(conversationsList));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Sắp xếp danh sách cuộc trò chuyện với các cuộc trò chuyện được ghim lên đầu&#10;     */&#10;    private void sortConversationsWithPinnedFirst() {&#10;        conversationsList.sort((c1, c2) -&gt; {&#10;            if (c1.isPinned() &amp;&amp; !c2.isPinned()) {&#10;                return -1;&#10;            } else if (!c1.isPinned() &amp;&amp; c2.isPinned()) {&#10;                return 1;&#10;            } else {&#10;                return 0;&#10;            }&#10;        });&#10;&#10;        if (isViewAttached()) {&#10;            view.showConversations(new ArrayList&lt;&gt;(conversationsList));&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.chat;&#10;&#10;import android.util.Log;&#10;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.auth.FirebaseUser;&#10;import com.vhn.doan.data.Conversation;&#10;import com.vhn.doan.data.repository.ChatRepository;&#10;import com.vhn.doan.data.repository.RepositoryCallback;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;/**&#10; * Presenter cho ChatList feature - Quản lý danh sách cuộc trò chuyện&#10; */&#10;public class ChatListPresenter implements ChatListContract.Presenter {&#10;&#10;    private static final String TAG = &quot;ChatListPresenter&quot;;&#10;    private static final int DEFAULT_CONVERSATIONS_LIMIT = 8;&#10;    private static final int LOAD_MORE_CONVERSATIONS_LIMIT = 3;&#10;&#10;    private final ChatRepository chatRepository;&#10;    private final FirebaseAuth firebaseAuth;&#10;    private ChatListContract.View view;&#10;&#10;    // State management&#10;    private List&lt;Conversation&gt; conversationsList;&#10;    private Long lastConversationTime;&#10;    private boolean isLoading = false;&#10;    private boolean isLoadingMore = false;&#10;    private boolean hasMoreConversations = true;&#10;&#10;    public ChatListPresenter(ChatRepository chatRepository) {&#10;        this.chatRepository = chatRepository;&#10;        this.firebaseAuth = FirebaseAuth.getInstance();&#10;        this.conversationsList = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    @Override&#10;    public void attachView(ChatListContract.View view) {&#10;        this.view = view;&#10;        // Tự động tải danh sách cuộc trò chuyện khi attach view&#10;        loadConversations();&#10;    }&#10;&#10;    @Override&#10;    public void detachView() {&#10;        this.view = null;&#10;    }&#10;&#10;    private boolean isViewAttached() {&#10;        return view != null;&#10;    }&#10;&#10;    @Override&#10;    public void loadConversations() {&#10;        if (isLoading) {&#10;            Log.d(TAG, &quot;Already loading conversations, skip&quot;);&#10;            return;&#10;        }&#10;&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#10;        if (currentUser == null) {&#10;            if (isViewAttached()) {&#10;                view.showLoadConversationsError(&quot;Bạn cần đăng nhập để xem danh sách cuộc trò chuyện&quot;);&#10;            }&#10;            return;&#10;        }&#10;&#10;        isLoading = true;&#10;        lastConversationTime = null; // Reset phân trang&#10;        hasMoreConversations = true;&#10;&#10;        if (isViewAttached()) {&#10;            view.showLoadingConversations();&#10;            view.hideEmptyState();&#10;        }&#10;&#10;        chatRepository.getConversations(currentUser.getUid(), DEFAULT_CONVERSATIONS_LIMIT, null,&#10;            new RepositoryCallback&lt;List&lt;Conversation&gt;&gt;() {&#10;                @Override&#10;                public void onSuccess(List&lt;Conversation&gt; conversations) {&#10;                    isLoading = false;&#10;&#10;                    if (isViewAttached()) {&#10;                        view.hideLoadingConversations();&#10;&#10;                        if (conversations == null || conversations.isEmpty()) {&#10;                            view.showEmptyState();&#10;                            view.showLoadMoreButton(false);&#10;                        } else {&#10;                            view.hideEmptyState();&#10;                            view.showConversations(conversations);&#10;&#10;                            // Cập nhật state cho phân trang&#10;                            conversationsList.clear();&#10;                            conversationsList.addAll(conversations);&#10;&#10;                            if (!conversations.isEmpty()) {&#10;                                lastConversationTime = conversations.get(conversations.size() - 1).getLastMessageTime();&#10;                            }&#10;&#10;                            // Kiểm tra xem có thêm cuộc trò chuyện để load không&#10;                            checkHasMoreConversations();&#10;                        }&#10;                    }&#10;                }&#10;&#10;                @Override&#10;                public void onError(String error) {&#10;                    isLoading = false;&#10;                    Log.e(TAG, &quot;Failed to load conversations: &quot; + error);&#10;&#10;                    if (isViewAttached()) {&#10;                        view.hideLoadingConversations();&#10;                        view.showLoadConversationsError(error);&#10;                    }&#10;                }&#10;            });&#10;    }&#10;&#10;    @Override&#10;    public void loadMoreConversations() {&#10;        if (isLoadingMore || !hasMoreConversations) {&#10;            Log.d(TAG, &quot;Skip load more: isLoadingMore=&quot; + isLoadingMore + &quot;, hasMore=&quot; + hasMoreConversations);&#10;            return;&#10;        }&#10;&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#10;        if (currentUser == null) {&#10;            if (isViewAttached()) {&#10;                view.showLoadMoreError(&quot;Bạn cần đăng nhập để tải thêm cuộc trò chuyện&quot;);&#10;            }&#10;            return;&#10;        }&#10;&#10;        isLoadingMore = true;&#10;&#10;        if (isViewAttached()) {&#10;            view.showLoadingMore();&#10;        }&#10;&#10;        chatRepository.getConversations(currentUser.getUid(), LOAD_MORE_CONVERSATIONS_LIMIT, lastConversationTime,&#10;            new RepositoryCallback&lt;List&lt;Conversation&gt;&gt;() {&#10;                @Override&#10;                public void onSuccess(List&lt;Conversation&gt; conversations) {&#10;                    isLoadingMore = false;&#10;&#10;                    if (isViewAttached()) {&#10;                        view.hideLoadingMore();&#10;&#10;                        if (conversations != null &amp;&amp; !conversations.isEmpty()) {&#10;                            view.addMoreConversations(conversations);&#10;&#10;                            // Cập nhật state&#10;                            conversationsList.addAll(conversations);&#10;                            lastConversationTime = conversations.get(conversations.size() - 1).getLastMessageTime();&#10;&#10;                            // Kiểm tra xem còn thêm cuộc trò chuyện không&#10;                            checkHasMoreConversations();&#10;                        } else {&#10;                            // Không còn cuộc trò chuyện nào để tải&#10;                            hasMoreConversations = false;&#10;                            view.showLoadMoreButton(false);&#10;                        }&#10;                    }&#10;                }&#10;&#10;                @Override&#10;                public void onError(String error) {&#10;                    isLoadingMore = false;&#10;                    Log.e(TAG, &quot;Failed to load more conversations: &quot; + error);&#10;&#10;                    if (isViewAttached()) {&#10;                        view.hideLoadingMore();&#10;                        view.showLoadMoreError(error);&#10;                    }&#10;                }&#10;            });&#10;    }&#10;&#10;    @Override&#10;    public void refreshConversations() {&#10;        // Reset tất cả state và tải lại từ đầu&#10;        conversationsList.clear();&#10;        lastConversationTime = null;&#10;        hasMoreConversations = true;&#10;        isLoading = false;&#10;        isLoadingMore = false;&#10;&#10;        loadConversations();&#10;    }&#10;&#10;    @Override&#10;    public void onConversationClicked(Conversation conversation) {&#10;        if (conversation == null || conversation.getId() == null) {&#10;            if (isViewAttached()) {&#10;                view.showError(&quot;Thông tin cuộc trò chuyện không hợp lệ&quot;);&#10;            }&#10;            return;&#10;        }&#10;&#10;        Log.d(TAG, &quot;Conversation clicked: &quot; + conversation.getId() + &quot; - &quot; + conversation.getTitle());&#10;&#10;        if (isViewAttached()) {&#10;            view.navigateToChatDetail(conversation.getId(), conversation.getTitle());&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onNewChatClicked() {&#10;        if (isViewAttached()) {&#10;            view.navigateToNewChat();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onLoadMoreClicked() {&#10;        if (!isLoadingMore &amp;&amp; hasMoreConversations) {&#10;            loadMoreConversations();&#10;        }&#10;    }&#10;&#10;    // ========== CONTEXT MENU ACTIONS IMPLEMENTATION ==========&#10;&#10;    @Override&#10;    public void renameConversation(Conversation conversation, String newName) {&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#10;        if (currentUser == null) {&#10;            if (isViewAttached()) {&#10;                view.showError(&quot;Bạn cần đăng nhập để đổi tên cuộc trò chuyện&quot;);&#10;            }&#10;            return;&#10;        }&#10;&#10;        if (newName == null || newName.trim().isEmpty()) {&#10;            if (isViewAttached()) {&#10;                view.showError(&quot;Tên cuộc trò chuyện không được để trống&quot;);&#10;            }&#10;            return;&#10;        }&#10;&#10;        // Cập nhật tên cuộc trò chuyện&#10;        conversation.setTitle(newName.trim());&#10;&#10;        chatRepository.updateConversation(conversation, new RepositoryCallback&lt;Conversation&gt;() {&#10;            @Override&#10;            public void onSuccess(Conversation updatedConversation) {&#10;                Log.d(TAG, &quot;Conversation renamed successfully: &quot; + updatedConversation.getTitle());&#10;&#10;                if (isViewAttached()) {&#10;                    view.showMessage(&quot;Đã đổi tên cuộc trò chuyện&quot;);&#10;                    // Cập nhật trong danh sách local&#10;                    updateConversationInList(updatedConversation);&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                Log.e(TAG, &quot;Failed to rename conversation: &quot; + error);&#10;                if (isViewAttached()) {&#10;                    view.showError(&quot;Không thể đổi tên cuộc trò chuyện: &quot; + error);&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void togglePinConversation(Conversation conversation) {&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#10;        if (currentUser == null) {&#10;            if (isViewAttached()) {&#10;                view.showError(&quot;Bạn cần đăng nhập để ghim cuộc trò chuyện&quot;);&#10;            }&#10;            return;&#10;        }&#10;&#10;        // Nếu đang ghim và hiện tại chưa được ghim&#10;        if (!conversation.isPinned()) {&#10;            // Kiểm tra số lượng cuộc trò chuyện đã được ghim&#10;            long pinnedCount = conversationsList.stream().filter(Conversation::isPinned).count();&#10;            if (pinnedCount &gt;= 5) {&#10;                if (isViewAttached()) {&#10;                    view.showError(&quot;Bạn chỉ có thể ghim tối đa 5 cuộc trò chuyện&quot;);&#10;                }&#10;                return;&#10;            }&#10;        }&#10;&#10;        // Toggle trạng thái pin&#10;        boolean newPinState = !conversation.isPinned();&#10;        conversation.setPinned(newPinState);&#10;&#10;        chatRepository.updateConversation(conversation, new RepositoryCallback&lt;Conversation&gt;() {&#10;            @Override&#10;            public void onSuccess(Conversation updatedConversation) {&#10;                String message = newPinState ? &quot;Đã ghim cuộc trò chuyện&quot; : &quot;Đã bỏ ghim cuộc trò chuyện&quot;;&#10;                Log.d(TAG, message + &quot;: &quot; + updatedConversation.getTitle());&#10;                &#10;                if (isViewAttached()) {&#10;                    view.showMessage(message);&#10;                    &#10;                    // Nếu bỏ ghim, reload lại danh sách để đảm bảo dữ liệu đồng bộ&#10;                    if (!newPinState) {&#10;                        Log.d(TAG, &quot;Unpinned conversation - reloading conversations list&quot;);&#10;                        loadConversations();&#10;                    } else {&#10;                        // Nếu ghim, chỉ cập nhật local và sắp xếp lại&#10;                        updateConversationInList(updatedConversation);&#10;                        sortConversationsWithPinnedFirst();&#10;                    }&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                Log.e(TAG, &quot;Failed to toggle pin conversation: &quot; + error);&#10;                // Revert lại trạng thái cũ&#10;                conversation.setPinned(!newPinState);&#10;                if (isViewAttached()) {&#10;                    view.showError(&quot;Không thể cập nhật trạng thái ghim: &quot; + error);&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void toggleMuteConversation(Conversation conversation) {&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#10;        if (currentUser == null) {&#10;            if (isViewAttached()) {&#10;                view.showError(&quot;Bạn cần đăng nhập để tắt/bật thông báo&quot;);&#10;            }&#10;            return;&#10;        }&#10;&#10;        // Toggle trạng thái mute&#10;        boolean newMuteState = !conversation.isMuted();&#10;        conversation.setMuted(newMuteState);&#10;&#10;        chatRepository.updateConversation(conversation, new RepositoryCallback&lt;Conversation&gt;() {&#10;            @Override&#10;            public void onSuccess(Conversation updatedConversation) {&#10;                String message = newMuteState ? &quot;Đã tắt thông báo&quot; : &quot;Đã bật thông báo&quot;;&#10;                Log.d(TAG, message + &quot; cho cuộc trò chuyện: &quot; + updatedConversation.getTitle());&#10;&#10;                if (isViewAttached()) {&#10;                    view.showMessage(message);&#10;                    // Cập nhật trong danh sách local&#10;                    updateConversationInList(updatedConversation);&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                Log.e(TAG, &quot;Failed to toggle mute conversation: &quot; + error);&#10;                // Revert lại trạng thái cũ&#10;                conversation.setMuted(!newMuteState);&#10;                if (isViewAttached()) {&#10;                    view.showError(&quot;Không thể cập nhật trạng thái thông báo: &quot; + error);&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void deleteConversation(Conversation conversation) {&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#10;        if (currentUser == null) {&#10;            if (isViewAttached()) {&#10;                view.showError(&quot;Bạn cần đăng nhập để xóa cuộc trò chuyện&quot;);&#10;            }&#10;            return;&#10;        }&#10;&#10;        if (conversation.getId() == null) {&#10;            if (isViewAttached()) {&#10;                view.showError(&quot;Thông tin cuộc trò chuyện không hợp lệ&quot;);&#10;            }&#10;            return;&#10;        }&#10;&#10;        chatRepository.deleteConversation(conversation.getId(), new RepositoryCallback&lt;Boolean&gt;() {&#10;            @Override&#10;            public void onSuccess(Boolean success) {&#10;                Log.d(TAG, &quot;Conversation deleted successfully: &quot; + conversation.getTitle());&#10;&#10;                if (isViewAttached()) {&#10;                    view.showMessage(&quot;Đã xóa cuộc trò chuyện&quot;);&#10;                    // Xóa khỏi danh sách local&#10;                    removeConversationFromList(conversation);&#10;&#10;                    // Nếu danh sách trống, hiển thị empty state&#10;                    if (conversationsList.isEmpty()) {&#10;                        view.showEmptyState();&#10;                    }&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                Log.e(TAG, &quot;Failed to delete conversation: &quot; + error);&#10;                if (isViewAttached()) {&#10;                    view.showError(&quot;Không thể xóa cuộc trò chuyện: &quot; + error);&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void markConversationAsRead(Conversation conversation) {&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#10;        if (currentUser == null) {&#10;            if (isViewAttached()) {&#10;                view.showError(&quot;Bạn cần đăng nhập để đánh dấu đã đọc&quot;);&#10;            }&#10;            return;&#10;        }&#10;&#10;        // Đánh dấu đã đọc&#10;        conversation.setRead(true);&#10;&#10;        chatRepository.updateConversation(conversation, new RepositoryCallback&lt;Conversation&gt;() {&#10;            @Override&#10;            public void onSuccess(Conversation updatedConversation) {&#10;                Log.d(TAG, &quot;Conversation marked as read: &quot; + updatedConversation.getTitle());&#10;&#10;                if (isViewAttached()) {&#10;                    view.showMessage(&quot;Đã đánh dấu là đã đọc&quot;);&#10;                    // Cập nhật trong danh sách local&#10;                    updateConversationInList(updatedConversation);&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                Log.e(TAG, &quot;Failed to mark conversation as read: &quot; + error);&#10;                // Revert lại trạng thái cũ&#10;                conversation.setRead(false);&#10;                if (isViewAttached()) {&#10;                    view.showError(&quot;Không thể đánh dấu đã đọc: &quot; + error);&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    // ========== HELPER METHODS ==========&#10;&#10;    /**&#10;     * Kiểm tra xem còn cuộc trò chuyện nào để load không&#10;     */&#10;    private void checkHasMoreConversations() {&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#10;        if (currentUser == null || lastConversationTime == null) {&#10;            hasMoreConversations = false;&#10;            if (isViewAttached()) {&#10;                view.showLoadMoreButton(false);&#10;            }&#10;            return;&#10;        }&#10;&#10;        chatRepository.hasMoreConversations(currentUser.getUid(), lastConversationTime, new RepositoryCallback&lt;Boolean&gt;() {&#10;            @Override&#10;            public void onSuccess(Boolean hasMore) {&#10;                hasMoreConversations = hasMore;&#10;                if (isViewAttached()) {&#10;                    view.showLoadMoreButton(hasMore);&#10;                }&#10;                Log.d(TAG, &quot;Has more conversations: &quot; + hasMore);&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                Log.e(TAG, &quot;Error checking more conversations: &quot; + error);&#10;                // Trong trường hợp lỗi, giả định không còn cuộc trò chuyện nào&#10;                hasMoreConversations = false;&#10;                if (isViewAttached()) {&#10;                    view.showLoadMoreButton(false);&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    /**&#10;     * Cập nhật một cuộc trò chuyện trong danh sách local&#10;     */&#10;    private void updateConversationInList(Conversation updatedConversation) {&#10;        for (int i = 0; i &lt; conversationsList.size(); i++) {&#10;            if (conversationsList.get(i).getId().equals(updatedConversation.getId())) {&#10;                conversationsList.set(i, updatedConversation);&#10;                if (isViewAttached()) {&#10;                    view.showConversations(new ArrayList&lt;&gt;(conversationsList));&#10;                }&#10;                break;&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Xóa một cuộc trò chuyện khỏi danh sách local&#10;     */&#10;    private void removeConversationFromList(Conversation conversation) {&#10;        conversationsList.removeIf(c -&gt; c.getId().equals(conversation.getId()));&#10;        if (isViewAttached()) {&#10;            view.showConversations(new ArrayList&lt;&gt;(conversationsList));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Sắp xếp danh sách cuộc trò chuyện với các cuộc trò chuyện được ghim lên đầu&#10;     */&#10;    private void sortConversationsWithPinnedFirst() {&#10;        conversationsList.sort((c1, c2) -&gt; {&#10;            if (c1.isPinned() &amp;&amp; !c2.isPinned()) {&#10;                return -1;&#10;            } else if (!c1.isPinned() &amp;&amp; c2.isPinned()) {&#10;                return 1;&#10;            } else {&#10;                return 0;&#10;            }&#10;        });&#10;&#10;        if (isViewAttached()) {&#10;            view.showConversations(new ArrayList&lt;&gt;(conversationsList));&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_conversation.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_conversation.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;com.google.android.material.card.MaterialCardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_marginHorizontal=&quot;12dp&quot;&#10;    android:layout_marginVertical=&quot;4dp&quot;&#10;    app:cardCornerRadius=&quot;8dp&quot;&#10;    app:cardElevation=&quot;2dp&quot;&#10;    app:cardBackgroundColor=&quot;?attr/colorSurface&quot;&#10;    android:foreground=&quot;?attr/selectableItemBackground&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;!-- Avatar/Icon --&gt;&#10;        &lt;ImageView&#10;            android:layout_width=&quot;48dp&quot;&#10;            android:layout_height=&quot;48dp&quot;&#10;            android:layout_gravity=&quot;center_vertical&quot;&#10;            android:background=&quot;@drawable/circle_background_secondary&quot;&#10;            android:src=&quot;@drawable/ic_smart_toy&quot;&#10;            android:padding=&quot;12dp&quot;&#10;            android:tint=&quot;@android:color/white&quot;&#10;            android:contentDescription=&quot;AI Assistant&quot; /&gt;&#10;&#10;        &lt;!-- Content --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:layout_marginStart=&quot;12dp&quot;&#10;            android:orientation=&quot;vertical&quot;&gt;&#10;&#10;            &lt;!-- Title and Time Row --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&#10;                android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tv_conversation_title&quot;&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:textColor=&quot;?android:attr/textColorPrimary&quot;&#10;                    android:maxLines=&quot;1&quot;&#10;                    android:ellipsize=&quot;end&quot;&#10;                    tools:text=&quot;Làm thế nào để giảm cân hiệu quả?&quot; /&gt;&#10;&#10;                &lt;!-- Pin Icon --&gt;&#10;                &lt;ImageView&#10;                    android:id=&quot;@+id/iv_pin_indicator&quot;&#10;                    android:layout_width=&quot;16dp&quot;&#10;                    android:layout_height=&quot;16dp&quot;&#10;                    android:src=&quot;@drawable/ic_pin&quot;&#10;                    android:tint=&quot;?attr/colorPrimary&quot;&#10;                    android:layout_marginStart=&quot;4dp&quot;&#10;                    android:layout_marginEnd=&quot;4dp&quot;&#10;                    android:visibility=&quot;gone&quot;&#10;                    android:contentDescription=&quot;Cuộc trò chuyện được ghim&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tv_conversation_time&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:textSize=&quot;12sp&quot;&#10;                    android:textColor=&quot;?android:attr/textColorSecondary&quot;&#10;                    android:layout_marginStart=&quot;8dp&quot;&#10;                    tools:text=&quot;14:30&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;            &lt;!-- Last Message Row --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&#10;                android:layout_marginTop=&quot;4dp&quot;&#10;                android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tv_last_message&quot;&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:textColor=&quot;?android:attr/textColorSecondary&quot;&#10;                    android:maxLines=&quot;2&quot;&#10;                    android:ellipsize=&quot;end&quot;&#10;                    android:lineSpacingExtra=&quot;2dp&quot;&#10;                    tools:text=&quot;AI: Để giảm cân hiệu quả, bạn cần kết hợp chế độ ăn uống lành mạnh với việc tập thể dục đều đặn...&quot; /&gt;&#10;&#10;                &lt;!-- Message Count Badge --&gt;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tv_message_count&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:background=&quot;@drawable/circle_background_primary&quot;&#10;                    android:textColor=&quot;@android:color/white&quot;&#10;                    android:textSize=&quot;12sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:paddingHorizontal=&quot;8dp&quot;&#10;                    android:paddingVertical=&quot;4dp&quot;&#10;                    android:layout_marginStart=&quot;8dp&quot;&#10;                    android:minWidth=&quot;24dp&quot;&#10;                    android:gravity=&quot;center&quot;&#10;                    android:visibility=&quot;gone&quot;&#10;                    tools:text=&quot;5&quot;&#10;                    tools:visibility=&quot;visible&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Unread Indicator --&gt;&#10;        &lt;View&#10;            android:id=&quot;@+id/view_unread_indicator&quot;&#10;            android:layout_width=&quot;8dp&quot;&#10;            android:layout_height=&quot;8dp&quot;&#10;            android:layout_gravity=&quot;center_vertical&quot;&#10;            android:layout_marginStart=&quot;8dp&quot;&#10;            android:background=&quot;@drawable/circle_background_primary&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/com.google.android.material.card.MaterialCardView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;com.google.android.material.card.MaterialCardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_marginHorizontal=&quot;12dp&quot;&#10;    android:layout_marginVertical=&quot;4dp&quot;&#10;    app:cardCornerRadius=&quot;8dp&quot;&#10;    app:cardElevation=&quot;2dp&quot;&#10;    app:cardBackgroundColor=&quot;?attr/colorSurface&quot;&#10;    android:foreground=&quot;?attr/selectableItemBackground&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;!-- Avatar/Icon --&gt;&#10;        &lt;ImageView&#10;            android:layout_width=&quot;48dp&quot;&#10;            android:layout_height=&quot;48dp&quot;&#10;            android:layout_gravity=&quot;center_vertical&quot;&#10;            android:background=&quot;@drawable/circle_background_secondary&quot;&#10;            android:src=&quot;@drawable/ic_smart_toy&quot;&#10;            android:padding=&quot;12dp&quot;&#10;            android:tint=&quot;@android:color/white&quot;&#10;            android:contentDescription=&quot;AI Assistant&quot; /&gt;&#10;&#10;        &lt;!-- Content --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:layout_marginStart=&quot;12dp&quot;&#10;            android:orientation=&quot;vertical&quot;&gt;&#10;&#10;            &lt;!-- Title and Time Row --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&#10;                android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tv_conversation_title&quot;&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:textColor=&quot;?android:attr/textColorPrimary&quot;&#10;                    android:maxLines=&quot;2&quot;&#10;                    android:ellipsize=&quot;end&quot;&#10;                    android:lineSpacingExtra=&quot;2dp&quot;&#10;                    tools:text=&quot;Làm thế nào để giảm cân hiệu quả?&quot; /&gt;&#10;&#10;                &lt;!-- Pin Icon --&gt;&#10;                &lt;ImageView&#10;                    android:id=&quot;@+id/iv_pin_indicator&quot;&#10;                    android:layout_width=&quot;16dp&quot;&#10;                    android:layout_height=&quot;16dp&quot;&#10;                    android:src=&quot;@drawable/ic_pin&quot;&#10;                    android:tint=&quot;?attr/colorPrimary&quot;&#10;                    android:layout_marginStart=&quot;4dp&quot;&#10;                    android:layout_marginEnd=&quot;4dp&quot;&#10;                    android:visibility=&quot;gone&quot;&#10;                    android:contentDescription=&quot;Cuộc trò chuyện được ghim&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tv_conversation_time&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:textSize=&quot;12sp&quot;&#10;                    android:textColor=&quot;?android:attr/textColorSecondary&quot;&#10;                    android:layout_marginStart=&quot;8dp&quot;&#10;                    tools:text=&quot;14:30&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;            &lt;!-- Last Message Row --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&#10;                android:layout_marginTop=&quot;4dp&quot;&#10;                android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tv_last_message&quot;&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:textColor=&quot;?android:attr/textColorSecondary&quot;&#10;                    android:maxLines=&quot;2&quot;&#10;                    android:ellipsize=&quot;end&quot;&#10;                    android:lineSpacingExtra=&quot;2dp&quot;&#10;                    tools:text=&quot;AI: Để giảm cân hiệu quả, bạn cần kết hợp chế độ ăn uống lành mạnh với việc tập thể dục đều đặn...&quot; /&gt;&#10;&#10;                &lt;!-- Message Count Badge --&gt;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tv_message_count&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:background=&quot;@drawable/circle_background_primary&quot;&#10;                    android:textColor=&quot;@android:color/white&quot;&#10;                    android:textSize=&quot;12sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:paddingHorizontal=&quot;8dp&quot;&#10;                    android:paddingVertical=&quot;4dp&quot;&#10;                    android:layout_marginStart=&quot;8dp&quot;&#10;                    android:minWidth=&quot;24dp&quot;&#10;                    android:gravity=&quot;center&quot;&#10;                    android:visibility=&quot;gone&quot;&#10;                    tools:text=&quot;5&quot;&#10;                    tools:visibility=&quot;visible&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Unread Indicator --&gt;&#10;        &lt;View&#10;            android:id=&quot;@+id/view_unread_indicator&quot;&#10;            android:layout_width=&quot;8dp&quot;&#10;            android:layout_height=&quot;8dp&quot;&#10;            android:layout_gravity=&quot;center_vertical&quot;&#10;            android:layout_marginStart=&quot;8dp&quot;&#10;            android:background=&quot;@drawable/circle_background_primary&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/com.google.android.material.card.MaterialCardView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>