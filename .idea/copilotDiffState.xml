<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;!-- Quyền truy cập Internet --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#10;&#10;    &lt;!-- Quyền cho thông báo và alarm --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.POST_NOTIFICATIONS&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.SCHEDULE_EXACT_ALARM&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.USE_EXACT_ALARM&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot; /&gt;&#10;&#10;    &lt;!-- Quyền tắt tối ưu hóa pin để hoạt động trong Doze mode --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS&quot; /&gt;&#10;&#10;    &lt;!-- Quyền foreground service cho WorkManager --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.FOREGROUND_SERVICE&quot; /&gt;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_logo&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_logo_foreground&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.Doan&quot;&#10;        android:name=&quot;androidx.multidex.MultiDexApplication&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;&#10;        &lt;!-- Activities --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.presentation.auth.LoginActivity&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.presentation.auth.ForgotPasswordActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.presentation.auth.RegisterActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.presentation.home.HomeActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.presentation.category.detail.CategoryDetailListActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.presentation.healthtip.detail.HealthTipDetailActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.HealthTipDetail&quot; /&gt;&#10;&#10;        &lt;!-- Debug Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.presentation.debug.ReminderTestActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;Debug Thông Báo&quot; /&gt;&#10;&#10;        &lt;!-- Broadcast Receivers cho Reminder --&gt;&#10;        &lt;receiver&#10;            android:name=&quot;.receivers.ReminderBroadcastReceiver&quot;&#10;            android:enabled=&quot;true&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;receiver&#10;            android:name=&quot;.receivers.ReminderActionReceiver&quot;&#10;            android:enabled=&quot;true&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;!-- Receiver để khởi động lại reminder sau khi boot --&gt;&#10;        &lt;receiver&#10;            android:name=&quot;.receivers.BootReceiver&quot;&#10;            android:enabled=&quot;true&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter android:priority=&quot;1000&quot;&gt;&#10;                &lt;action android:name=&quot;android.intent.action.BOOT_COMPLETED&quot; /&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MY_PACKAGE_REPLACED&quot; /&gt;&#10;                &lt;action android:name=&quot;android.intent.action.PACKAGE_REPLACED&quot; /&gt;&#10;                &lt;data android:scheme=&quot;package&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/receiver&gt;&#10;&#10;        &lt;!-- Services --&gt;&#10;        &lt;service&#10;            android:name=&quot;.services.ReminderForegroundService&quot;&#10;            android:enabled=&quot;true&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:foregroundServiceType=&quot;specialUse&quot; /&gt;&#10;&#10;            android:foregroundServiceType=&quot;specialUse&quot; /&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;!-- Quyền truy cập Internet --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#10;&#10;    &lt;!-- Quyền cho thông báo và alarm --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.POST_NOTIFICATIONS&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.SCHEDULE_EXACT_ALARM&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.USE_EXACT_ALARM&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot; /&gt;&#10;&#10;    &lt;!-- Quyền tắt tối ưu hóa pin để hoạt động trong Doze mode --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS&quot; /&gt;&#10;&#10;    &lt;!-- Quyền foreground service cho WorkManager --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.FOREGROUND_SERVICE&quot; /&gt;&#10;    &lt;!-- Quyền foreground service đặc biệt cho Android 14+ (API 34+) --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.FOREGROUND_SERVICE_SPECIAL_USE&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_logo&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_logo_foreground&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.Doan&quot;&#10;        android:name=&quot;androidx.multidex.MultiDexApplication&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;&#10;        &lt;!-- Activities --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.presentation.auth.LoginActivity&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.presentation.auth.ForgotPasswordActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.presentation.auth.RegisterActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.presentation.home.HomeActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.presentation.category.detail.CategoryDetailListActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.presentation.healthtip.detail.HealthTipDetailActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.HealthTipDetail&quot; /&gt;&#10;&#10;        &lt;!-- Debug Activity --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.presentation.debug.ReminderTestActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;Debug Thông Báo&quot; /&gt;&#10;&#10;        &lt;!-- Broadcast Receivers cho Reminder --&gt;&#10;        &lt;receiver&#10;            android:name=&quot;.receivers.ReminderBroadcastReceiver&quot;&#10;            android:enabled=&quot;true&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;receiver&#10;            android:name=&quot;.receivers.ReminderActionReceiver&quot;&#10;            android:enabled=&quot;true&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;!-- Receiver để khởi động lại reminder sau khi boot --&gt;&#10;        &lt;receiver&#10;            android:name=&quot;.receivers.BootReceiver&quot;&#10;            android:enabled=&quot;true&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter android:priority=&quot;1000&quot;&gt;&#10;                &lt;action android:name=&quot;android.intent.action.BOOT_COMPLETED&quot; /&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MY_PACKAGE_REPLACED&quot; /&gt;&#10;                &lt;action android:name=&quot;android.intent.action.PACKAGE_REPLACED&quot; /&gt;&#10;                &lt;data android:scheme=&quot;package&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/receiver&gt;&#10;&#10;        &lt;!-- Services --&gt;&#10;        &lt;service&#10;            android:name=&quot;.services.ReminderForegroundService&quot;&#10;            android:enabled=&quot;true&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:foregroundServiceType=&quot;specialUse&quot;&gt;&#10;            &lt;!-- Thêm property cho specialUse theo yêu cầu Android 14+ --&gt;&#10;            &lt;property &#10;                android:name=&quot;android.app.PROPERTY_SPECIAL_USE_FGS_SUBTYPE&quot;&#10;                android:value=&quot;explanation_needed&quot; /&gt;&#10;        &lt;/service&gt;&#10;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/Reminder.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/data/Reminder.java" />
              <option name="originalContent" value="package com.vhn.doan.data;&#10;&#10;import com.google.firebase.database.PropertyName;&#10;import com.google.firebase.database.ServerValue;&#10;import com.google.firebase.database.Exclude;&#10;import java.util.Calendar;&#10;import java.util.Date;&#10;import java.util.Map;&#10;&#10;/**&#10; * Model class đại diện cho một nhắc nhở sức khỏe&#10; * Được tối ưu hóa để tương thích với Firebase Realtime Database&#10; */&#10;public class Reminder {&#10;    private String id;&#10;    private String userId;&#10;    private String title;&#10;    private String description;&#10;    private Long reminderTime; // Sử dụng Long thay vì Date để tương thích Firebase&#10;    private int repeatType; // 0: Không lặp, 1: Hàng ngày, 2: Hàng tuần, 3: Hàng tháng&#10;    private boolean isActive;&#10;    private Long createdAt; // Sử dụng Long thay vì Date&#10;    private Long updatedAt; // Sử dụng Long thay vì Date&#10;    private String healthTipId; // ID của mẹo sức khỏe liên quan (nếu có)&#10;&#10;    /**&#10;     * Các method bổ sung cho Reminder&#10;     */&#10;&#10;    // Field bổ sung cho lastNotified và completed&#10;    private Long lastNotified;&#10;    private boolean completed = false;&#10;&#10;    // Enum cho loại lặp lại&#10;    public static class RepeatType {&#10;        public static final int NO_REPEAT = 0;&#10;        public static final int DAILY = 1;&#10;        public static final int WEEKLY = 2;&#10;        public static final int MONTHLY = 3;&#10;    }&#10;&#10;    // Constructor mặc định (cần thiết cho Firebase)&#10;    public Reminder() {&#10;        long currentTime = System.currentTimeMillis();&#10;        this.createdAt = currentTime;&#10;        this.updatedAt = currentTime;&#10;        this.isActive = true;&#10;        this.repeatType = RepeatType.NO_REPEAT;&#10;    }&#10;&#10;    // Constructor đầy đủ&#10;    public Reminder(String id, String userId, String title, String description,&#10;                   Date reminderTime, int repeatType, boolean isActive, String healthTipId) {&#10;        this.id = id;&#10;        this.userId = userId;&#10;        this.title = title;&#10;        this.description = description;&#10;        this.reminderTime = reminderTime != null ? reminderTime.getTime() : null;&#10;        this.repeatType = repeatType;&#10;        this.isActive = isActive;&#10;        this.healthTipId = healthTipId;&#10;        long currentTime = System.currentTimeMillis();&#10;        this.createdAt = currentTime;&#10;        this.updatedAt = currentTime;&#10;    }&#10;&#10;    // Getters với Firebase annotations&#10;    public String getId() {&#10;        return id;&#10;    }&#10;&#10;    public String getUserId() {&#10;        return userId;&#10;    }&#10;&#10;    public String getTitle() {&#10;        return title;&#10;    }&#10;&#10;    public String getDescription() {&#10;        return description;&#10;    }&#10;&#10;    // Firebase getter - trả về Long&#10;    public Long getReminderTime() {&#10;        return reminderTime;&#10;    }&#10;&#10;    // UI helper method - trả về Date&#10;    @Exclude&#10;    public Date getReminderTimeAsDate() {&#10;        return reminderTime != null ? new Date(reminderTime) : null;&#10;    }&#10;&#10;    public int getRepeatType() {&#10;        return repeatType;&#10;    }&#10;&#10;    @PropertyName(&quot;isActive&quot;)&#10;    public boolean isActive() {&#10;        return isActive;&#10;    }&#10;&#10;    // Firebase getter - trả về Long&#10;    public Long getCreatedAt() {&#10;        return createdAt;&#10;    }&#10;&#10;    // UI helper method - trả về Date&#10;    @Exclude&#10;    public Date getCreatedAtAsDate() {&#10;        return createdAt != null ? new Date(createdAt) : null;&#10;    }&#10;&#10;    // Firebase getter - trả về Long&#10;    public Long getUpdatedAt() {&#10;        return updatedAt;&#10;    }&#10;&#10;    // UI helper method - trả về Date&#10;    @Exclude&#10;    public Date getUpdatedAtAsDate() {&#10;        return updatedAt != null ? new Date(updatedAt) : null;&#10;    }&#10;&#10;    public String getHealthTipId() {&#10;        return healthTipId;&#10;    }&#10;&#10;    // Field bổ sung cho lastNotified và completed&#10;    public Long getLastNotified() {&#10;        return lastNotified;&#10;    }&#10;&#10;    public boolean isCompleted() {&#10;        return completed;&#10;    }&#10;&#10;    // Setters&#10;    public void setId(String id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public void setUserId(String userId) {&#10;        this.userId = userId;&#10;    }&#10;&#10;    public void setTitle(String title) {&#10;        this.title = title;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    public void setDescription(String description) {&#10;        this.description = description;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    // Firebase setter - nhận Long&#10;    public void setReminderTime(Long reminderTime) {&#10;        this.reminderTime = reminderTime;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    // UI helper method - nhận Date&#10;    @Exclude&#10;    public void setReminderTimeFromDate(Date reminderTime) {&#10;        this.reminderTime = reminderTime != null ? reminderTime.getTime() : null;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    public void setRepeatType(int repeatType) {&#10;        this.repeatType = repeatType;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    @PropertyName(&quot;isActive&quot;)&#10;    public void setActive(boolean active) {&#10;        isActive = active;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    // Firebase setter - nhận Long&#10;    public void setCreatedAt(Long createdAt) {&#10;        this.createdAt = createdAt;&#10;    }&#10;&#10;    // UI helper method - nhận Date&#10;    @Exclude&#10;    public void setCreatedAtFromDate(Date createdAt) {&#10;        this.createdAt = createdAt != null ? createdAt.getTime() : null;&#10;    }&#10;&#10;    // Firebase setter - nhận Long&#10;    public void setUpdatedAt(Long updatedAt) {&#10;        this.updatedAt = updatedAt;&#10;    }&#10;&#10;    // UI helper method - nhận Date&#10;    @Exclude&#10;    public void setUpdatedAtFromDate(Date updatedAt) {&#10;        this.updatedAt = updatedAt != null ? updatedAt.getTime() : null;&#10;    }&#10;&#10;    public void setHealthTipId(String healthTipId) {&#10;        this.healthTipId = healthTipId;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    public void setLastNotified(Long lastNotified) {&#10;        this.lastNotified = lastNotified;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    public void setCompleted(boolean completed) {&#10;        this.completed = completed;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    /**&#10;     * Tính toán thời gian nhắc nhở tiếp theo dựa trên loại lặp lại&#10;     */&#10;    @Exclude&#10;    public Date getNextReminderTime() {&#10;        if (reminderTime == null || repeatType == RepeatType.NO_REPEAT) {&#10;            return getReminderTimeAsDate();&#10;        }&#10;&#10;        Calendar calendar = Calendar.getInstance();&#10;        calendar.setTime(getReminderTimeAsDate());&#10;&#10;        switch (repeatType) {&#10;            case RepeatType.DAILY:&#10;                calendar.add(Calendar.DAY_OF_MONTH, 1);&#10;                break;&#10;            case RepeatType.WEEKLY:&#10;                calendar.add(Calendar.WEEK_OF_YEAR, 1);&#10;                break;&#10;            case RepeatType.MONTHLY:&#10;                calendar.add(Calendar.MONTH, 1);&#10;                break;&#10;            default:&#10;                return getReminderTimeAsDate();&#10;        }&#10;&#10;        return calendar.getTime();&#10;    }&#10;&#10;    /**&#10;     * Kiểm tra xem nhắc nhở có đã đến giờ hay chưa&#10;     */&#10;    @Exclude&#10;    public boolean isDue() {&#10;        if (reminderTime == null || !isActive) {&#10;            return false;&#10;        }&#10;        return System.currentTimeMillis() &gt;= reminderTime;&#10;    }&#10;&#10;    /**&#10;     * Lấy tên hiển thị cho loại lặp lại&#10;     */&#10;    @Exclude&#10;    public String getRepeatTypeDisplayName() {&#10;        switch (repeatType) {&#10;            case RepeatType.NO_REPEAT:&#10;                return &quot;Không lặp lại&quot;;&#10;            case RepeatType.DAILY:&#10;                return &quot;Hàng ngày&quot;;&#10;            case RepeatType.WEEKLY:&#10;                return &quot;Hàng tuần&quot;;&#10;            case RepeatType.MONTHLY:&#10;                return &quot;Hàng tháng&quot;;&#10;            default:&#10;                return &quot;Không xác định&quot;;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Lấy Map để ghi vào Firebase với ServerValue.TIMESTAMP&#10;     */&#10;    @Exclude&#10;    public Map&lt;String, Object&gt; toFirebaseMap() {&#10;        Map&lt;String, Object&gt; map = new java.util.HashMap&lt;&gt;();&#10;        map.put(&quot;id&quot;, id);&#10;        map.put(&quot;userId&quot;, userId);&#10;        map.put(&quot;title&quot;, title);&#10;        map.put(&quot;description&quot;, description);&#10;        map.put(&quot;reminderTime&quot;, reminderTime);&#10;        map.put(&quot;repeatType&quot;, repeatType);&#10;        map.put(&quot;isActive&quot;, isActive);&#10;        map.put(&quot;healthTipId&quot;, healthTipId);&#10;        map.put(&quot;createdAt&quot;, createdAt != null ? createdAt : ServerValue.TIMESTAMP);&#10;        map.put(&quot;updatedAt&quot;, ServerValue.TIMESTAMP);&#10;        return map;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Reminder{&quot; +&#10;                &quot;id='&quot; + id + '\'' +&#10;                &quot;, title='&quot; + title + '\'' +&#10;                &quot;, reminderTime=&quot; + getReminderTimeAsDate() +&#10;                &quot;, isActive=&quot; + isActive +&#10;                '}';&#10;    }&#10;&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.data;&#10;&#10;import com.google.firebase.database.PropertyName;&#10;import com.google.firebase.database.ServerValue;&#10;import com.google.firebase.database.Exclude;&#10;import java.io.Serializable;&#10;import java.util.Calendar;&#10;import java.util.Date;&#10;import java.util.Map;&#10;&#10;/**&#10; * Model class đại diện cho một nhắc nhở sức khỏe&#10; * Được tối ưu hóa để tương thích với Firebase Realtime Database&#10; */&#10;public class Reminder implements Serializable {&#10;    private String id;&#10;    private String userId;&#10;    private String title;&#10;    private String description;&#10;    private Long reminderTime; // Sử dụng Long thay vì Date để tương thích Firebase&#10;    private int repeatType; // 0: Không lặp, 1: Hàng ngày, 2: Hàng tuần, 3: Hàng tháng&#10;    private boolean isActive;&#10;    private Long createdAt; // Sử dụng Long thay vì Date&#10;    private Long updatedAt; // Sử dụng Long thay vì Date&#10;    private String healthTipId; // ID của mẹo sức khỏe liên quan (nếu có)&#10;&#10;    /**&#10;     * Các method bổ sung cho Reminder&#10;     */&#10;&#10;    // Field bổ sung cho lastNotified và completed&#10;    private Long lastNotified;&#10;    private boolean completed = false;&#10;&#10;    // Enum cho loại lặp lại&#10;    public static class RepeatType {&#10;        public static final int NO_REPEAT = 0;&#10;        public static final int DAILY = 1;&#10;        public static final int WEEKLY = 2;&#10;        public static final int MONTHLY = 3;&#10;    }&#10;&#10;    // Constructor mặc định (cần thiết cho Firebase)&#10;    public Reminder() {&#10;        long currentTime = System.currentTimeMillis();&#10;        this.createdAt = currentTime;&#10;        this.updatedAt = currentTime;&#10;        this.isActive = true;&#10;        this.repeatType = RepeatType.NO_REPEAT;&#10;    }&#10;&#10;    // Constructor đầy đủ&#10;    public Reminder(String id, String userId, String title, String description,&#10;                   Date reminderTime, int repeatType, boolean isActive, String healthTipId) {&#10;        this.id = id;&#10;        this.userId = userId;&#10;        this.title = title;&#10;        this.description = description;&#10;        this.reminderTime = reminderTime != null ? reminderTime.getTime() : null;&#10;        this.repeatType = repeatType;&#10;        this.isActive = isActive;&#10;        this.healthTipId = healthTipId;&#10;        long currentTime = System.currentTimeMillis();&#10;        this.createdAt = currentTime;&#10;        this.updatedAt = currentTime;&#10;    }&#10;&#10;    // Getters với Firebase annotations&#10;    public String getId() {&#10;        return id;&#10;    }&#10;&#10;    public String getUserId() {&#10;        return userId;&#10;    }&#10;&#10;    public String getTitle() {&#10;        return title;&#10;    }&#10;&#10;    public String getDescription() {&#10;        return description;&#10;    }&#10;&#10;    // Firebase getter - trả về Long&#10;    public Long getReminderTime() {&#10;        return reminderTime;&#10;    }&#10;&#10;    // UI helper method - trả về Date&#10;    @Exclude&#10;    public Date getReminderTimeAsDate() {&#10;        return reminderTime != null ? new Date(reminderTime) : null;&#10;    }&#10;&#10;    public int getRepeatType() {&#10;        return repeatType;&#10;    }&#10;&#10;    @PropertyName(&quot;isActive&quot;)&#10;    public boolean isActive() {&#10;        return isActive;&#10;    }&#10;&#10;    // Firebase getter - trả về Long&#10;    public Long getCreatedAt() {&#10;        return createdAt;&#10;    }&#10;&#10;    // UI helper method - trả về Date&#10;    @Exclude&#10;    public Date getCreatedAtAsDate() {&#10;        return createdAt != null ? new Date(createdAt) : null;&#10;    }&#10;&#10;    // Firebase getter - trả về Long&#10;    public Long getUpdatedAt() {&#10;        return updatedAt;&#10;    }&#10;&#10;    // UI helper method - trả về Date&#10;    @Exclude&#10;    public Date getUpdatedAtAsDate() {&#10;        return updatedAt != null ? new Date(updatedAt) : null;&#10;    }&#10;&#10;    public String getHealthTipId() {&#10;        return healthTipId;&#10;    }&#10;&#10;    // Field bổ sung cho lastNotified và completed&#10;    public Long getLastNotified() {&#10;        return lastNotified;&#10;    }&#10;&#10;    public boolean isCompleted() {&#10;        return completed;&#10;    }&#10;&#10;    // Setters&#10;    public void setId(String id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public void setUserId(String userId) {&#10;        this.userId = userId;&#10;    }&#10;&#10;    public void setTitle(String title) {&#10;        this.title = title;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    public void setDescription(String description) {&#10;        this.description = description;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    // Firebase setter - nhận Long&#10;    public void setReminderTime(Long reminderTime) {&#10;        this.reminderTime = reminderTime;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    // UI helper method - nhận Date&#10;    @Exclude&#10;    public void setReminderTimeFromDate(Date reminderTime) {&#10;        this.reminderTime = reminderTime != null ? reminderTime.getTime() : null;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    public void setRepeatType(int repeatType) {&#10;        this.repeatType = repeatType;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    @PropertyName(&quot;isActive&quot;)&#10;    public void setActive(boolean active) {&#10;        isActive = active;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    // Firebase setter - nhận Long&#10;    public void setCreatedAt(Long createdAt) {&#10;        this.createdAt = createdAt;&#10;    }&#10;&#10;    // UI helper method - nhận Date&#10;    @Exclude&#10;    public void setCreatedAtFromDate(Date createdAt) {&#10;        this.createdAt = createdAt != null ? createdAt.getTime() : null;&#10;    }&#10;&#10;    // Firebase setter - nhận Long&#10;    public void setUpdatedAt(Long updatedAt) {&#10;        this.updatedAt = updatedAt;&#10;    }&#10;&#10;    // UI helper method - nhận Date&#10;    @Exclude&#10;    public void setUpdatedAtFromDate(Date updatedAt) {&#10;        this.updatedAt = updatedAt != null ? updatedAt.getTime() : null;&#10;    }&#10;&#10;    public void setHealthTipId(String healthTipId) {&#10;        this.healthTipId = healthTipId;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    public void setLastNotified(Long lastNotified) {&#10;        this.lastNotified = lastNotified;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    public void setCompleted(boolean completed) {&#10;        this.completed = completed;&#10;        this.updatedAt = System.currentTimeMillis();&#10;    }&#10;&#10;    /**&#10;     * Tính toán thời gian nhắc nhở tiếp theo dựa trên loại lặp lại&#10;     */&#10;    @Exclude&#10;    public Date getNextReminderTime() {&#10;        if (reminderTime == null || repeatType == RepeatType.NO_REPEAT) {&#10;            return getReminderTimeAsDate();&#10;        }&#10;&#10;        Calendar calendar = Calendar.getInstance();&#10;        calendar.setTime(getReminderTimeAsDate());&#10;&#10;        switch (repeatType) {&#10;            case RepeatType.DAILY:&#10;                calendar.add(Calendar.DAY_OF_MONTH, 1);&#10;                break;&#10;            case RepeatType.WEEKLY:&#10;                calendar.add(Calendar.WEEK_OF_YEAR, 1);&#10;                break;&#10;            case RepeatType.MONTHLY:&#10;                calendar.add(Calendar.MONTH, 1);&#10;                break;&#10;            default:&#10;                return getReminderTimeAsDate();&#10;        }&#10;&#10;        return calendar.getTime();&#10;    }&#10;&#10;    /**&#10;     * Kiểm tra xem nhắc nhở có đã đến giờ hay chưa&#10;     */&#10;    @Exclude&#10;    public boolean isDue() {&#10;        if (reminderTime == null || !isActive) {&#10;            return false;&#10;        }&#10;        return System.currentTimeMillis() &gt;= reminderTime;&#10;    }&#10;&#10;    /**&#10;     * Lấy tên hiển thị cho loại lặp lại&#10;     */&#10;    @Exclude&#10;    public String getRepeatTypeDisplayName() {&#10;        switch (repeatType) {&#10;            case RepeatType.NO_REPEAT:&#10;                return &quot;Không lặp lại&quot;;&#10;            case RepeatType.DAILY:&#10;                return &quot;Hàng ngày&quot;;&#10;            case RepeatType.WEEKLY:&#10;                return &quot;Hàng tuần&quot;;&#10;            case RepeatType.MONTHLY:&#10;                return &quot;Hàng tháng&quot;;&#10;            default:&#10;                return &quot;Không xác định&quot;;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Lấy Map để ghi vào Firebase với ServerValue.TIMESTAMP&#10;     */&#10;    @Exclude&#10;    public Map&lt;String, Object&gt; toFirebaseMap() {&#10;        Map&lt;String, Object&gt; map = new java.util.HashMap&lt;&gt;();&#10;        map.put(&quot;id&quot;, id);&#10;        map.put(&quot;userId&quot;, userId);&#10;        map.put(&quot;title&quot;, title);&#10;        map.put(&quot;description&quot;, description);&#10;        map.put(&quot;reminderTime&quot;, reminderTime);&#10;        map.put(&quot;repeatType&quot;, repeatType);&#10;        map.put(&quot;isActive&quot;, isActive);&#10;        map.put(&quot;healthTipId&quot;, healthTipId);&#10;        map.put(&quot;createdAt&quot;, createdAt != null ? createdAt : ServerValue.TIMESTAMP);&#10;        map.put(&quot;updatedAt&quot;, ServerValue.TIMESTAMP);&#10;        return map;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Reminder{&quot; +&#10;                &quot;id='&quot; + id + '\'' +&#10;                &quot;, title='&quot; + title + '\'' +&#10;                &quot;, reminderTime=&quot; + getReminderTimeAsDate() +&#10;                &quot;, isActive=&quot; + isActive +&#10;                '}';&#10;    }&#10;&#10;    /**&#10;     * Kiểm tra xem reminder có lặp lại hay không&#10;     */&#10;    @Exclude&#10;    public boolean isRepeating() {&#10;        return repeatType != RepeatType.NO_REPEAT;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/profile/FavoritePostsFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/profile/FavoritePostsFragment.java" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.profile;&#10;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.recyclerview.widget.GridLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.presentation.base.BaseFragment;&#10;&#10;/**&#10; * Fragment hiển thị danh sách bài viết yêu thích của người dùng&#10; */&#10;public class FavoritePostsFragment extends BaseFragment {&#10;&#10;    private RecyclerView recyclerView;&#10;&#10;    public static FavoritePostsFragment newInstance() {&#10;        return new FavoritePostsFragment();&#10;    }&#10;&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,&#10;                             Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_grid_content, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;        setupRecyclerView();&#10;        // TODO: Load dữ liệu bài viết yêu thích từ Firebase&#10;    }&#10;&#10;    @Override&#10;    protected void initViews(View view) {&#10;        recyclerView = view.findViewById(R.id.recyclerView);&#10;    }&#10;&#10;    @Override&#10;    protected void setupListeners() {&#10;        // Không cần thiết lập listener ở đây&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        GridLayoutManager layoutManager = new GridLayoutManager(getContext(), 3);&#10;        recyclerView.setLayoutManager(layoutManager);&#10;        &#10;        // Tạm thời sử dụng adapter rỗng, sẽ cập nhật sau khi có dữ liệu thực tế&#10;        // GridContentAdapter adapter = new GridContentAdapter(new ArrayList&lt;&gt;());&#10;        // recyclerView.setAdapter(adapter);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/profile/LikedVideosFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/profile/LikedVideosFragment.java" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.profile;&#10;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.recyclerview.widget.GridLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.presentation.base.BaseFragment;&#10;&#10;/**&#10; * Fragment hiển thị danh sách video đã like của người dùng&#10; */&#10;public class LikedVideosFragment extends BaseFragment {&#10;&#10;    private RecyclerView recyclerView;&#10;&#10;    public static LikedVideosFragment newInstance() {&#10;        return new LikedVideosFragment();&#10;    }&#10;&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,&#10;                             Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_grid_content, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;        setupRecyclerView();&#10;        // TODO: Load dữ liệu video đã like từ Firebase&#10;    }&#10;&#10;    @Override&#10;    protected void initViews(View view) {&#10;        recyclerView = view.findViewById(R.id.recyclerView);&#10;    }&#10;&#10;    @Override&#10;    protected void setupListeners() {&#10;        // Không cần thiết lập listener ở đây&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        GridLayoutManager layoutManager = new GridLayoutManager(getContext(), 3);&#10;        recyclerView.setLayoutManager(layoutManager);&#10;        &#10;        // Tạm thời sử dụng adapter rỗng, sẽ cập nhật sau khi có dữ liệu thực tế&#10;        // GridContentAdapter adapter = new GridContentAdapter(new ArrayList&lt;&gt;());&#10;        // recyclerView.setAdapter(adapter);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/profile/ProfileFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/profile/ProfileFragment.java" />
              <option name="originalContent" value="package com.vhn.doan.presentation.profile;&#10;&#10;import android.app.AlertDialog;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.ImageButton;&#10;import android.widget.ImageView;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.appcompat.app.AppCompatDelegate;&#10;import androidx.viewpager2.widget.ViewPager2;&#10;&#10;import com.google.android.material.bottomsheet.BottomSheetDialog;&#10;import com.google.android.material.tabs.TabLayout;&#10;import com.google.android.material.tabs.TabLayoutMediator;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.auth.FirebaseUser;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.presentation.auth.LoginActivity;&#10;import com.vhn.doan.presentation.base.BaseFragment;&#10;&#10;/**&#10; * Fragment hiển thị thông tin profile người dùng&#10; * Tuân thủ kiến trúc MVP pattern với Firebase Authentication&#10; */&#10;public class ProfileFragment extends BaseFragment implements ProfileContract.View {&#10;&#10;    private ProfileContract.Presenter presenter;&#10;    private TextView profileName, profileUsername, profileBio;&#10;    private ImageButton btnToggleTheme, btnMenu;&#10;    private ImageView profileImage;&#10;    private TabLayout tabLayout;&#10;    private ViewPager2 viewPager;&#10;    private FirebaseAuth firebaseAuth;&#10;&#10;    public ProfileFragment() {&#10;        // Required empty public constructor&#10;    }&#10;&#10;    public static ProfileFragment newInstance() {&#10;        return new ProfileFragment();&#10;    }&#10;&#10;    @Override&#10;    public void onCreate(@Nullable Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        // Khởi tạo Firebase Auth&#10;        firebaseAuth = FirebaseAuth.getInstance();&#10;        // TODO: Inject presenter through Dagger 2 trong tương lai&#10;        // presenter = DaggerProfileComponent.create().getPresenter();&#10;    }&#10;&#10;    @Nullable&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_simple_profile, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;&#10;        // Load thông tin người dùng ngay sau khi view được tạo&#10;        loadUserProfile();&#10;&#10;        // Thiết lập TabLayout và ViewPager2&#10;        setupTabLayoutWithViewPager();&#10;&#10;        // Attach presenter nếu có&#10;        if (presenter != null) {&#10;            presenter.attachView(this);&#10;            presenter.loadUserProfile();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onDestroyView() {&#10;        super.onDestroyView();&#10;        if (presenter != null) {&#10;            presenter.detachView();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    protected void initViews(View view) {&#10;        // Khởi tạo các view components từ layout mới&#10;        profileImage = view.findViewById(R.id.profile_image);&#10;        profileName = view.findViewById(R.id.profile_name);&#10;        profileUsername = view.findViewById(R.id.profile_username);&#10;        profileBio = view.findViewById(R.id.profile_bio);&#10;&#10;&#10;        btnToggleTheme = view.findViewById(R.id.btn_toggle_theme);&#10;        btnMenu = view.findViewById(R.id.btn_menu);&#10;&#10;        tabLayout = view.findViewById(R.id.tab_layout);&#10;        viewPager = view.findViewById(R.id.view_pager);&#10;    }&#10;&#10;    @Override&#10;    protected void setupListeners() {&#10;        // Thiết lập listener cho các nút&#10;        btnToggleTheme.setOnClickListener(v -&gt; toggleDarkMode());&#10;        btnMenu.setOnClickListener(v -&gt; showMenuOptions());&#10;    }&#10;&#10;    private void setupTabLayoutWithViewPager() {&#10;        // Khởi tạo adapter cho ViewPager&#10;        ProfileViewPagerAdapter adapter = new ProfileViewPagerAdapter(this);&#10;        viewPager.setAdapter(adapter);&#10;&#10;        // Liên kết TabLayout với ViewPager&#10;        new TabLayoutMediator(tabLayout, viewPager, (tab, position) -&gt; {&#10;            switch (position) {&#10;                case 0:&#10;                    tab.setText(&quot;Bài viết yêu thích&quot;);&#10;                    break;&#10;                case 1:&#10;                    tab.setText(&quot;Video đã like&quot;);&#10;                    break;&#10;            }&#10;        }).attach();&#10;    }&#10;&#10;    private void toggleDarkMode() {&#10;        int currentNightMode = AppCompatDelegate.getDefaultNightMode();&#10;        if (currentNightMode == AppCompatDelegate.MODE_NIGHT_YES) {&#10;            // Đang ở chế độ tối, chuyển sang chế độ sáng&#10;            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO);&#10;            if (getContext() != null) {&#10;                Toast.makeText(getContext(), &quot;Đã chuyển sang chế độ sáng&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        } else {&#10;            // Đang ở chế độ sáng, chuyển sang chế độ tối&#10;            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);&#10;            if (getContext() != null) {&#10;                Toast.makeText(getContext(), &quot;Đã chuyển sang chế độ tối&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        }&#10;    }&#10;&#10;    private void showMenuOptions() {&#10;        // Sử dụng BottomSheetDialog thay vì AlertDialog&#10;        BottomSheetDialog bottomSheetDialog = new BottomSheetDialog(getContext());&#10;        View bottomSheetView = getLayoutInflater().inflate(R.layout.layout_bottom_sheet_menu, null);&#10;        bottomSheetDialog.setContentView(bottomSheetView);&#10;&#10;        // Khởi tạo các view trong BottomSheetDialog&#10;        TextView txtSetting = bottomSheetView.findViewById(R.id.txt_setting);&#10;        TextView txtLogout = bottomSheetView.findViewById(R.id.txt_logout);&#10;&#10;        // Thiết lập sự kiện click cho các tùy chọn&#10;        txtSetting.setOnClickListener(v -&gt; {&#10;            openSettings();&#10;            bottomSheetDialog.dismiss();&#10;        });&#10;&#10;        txtLogout.setOnClickListener(v -&gt; {&#10;            showLogoutConfirmDialog();&#10;            bottomSheetDialog.dismiss();&#10;        });&#10;&#10;        // Hiển thị BottomSheetDialog&#10;        bottomSheetDialog.show();&#10;    }&#10;&#10;    private void openSettings() {&#10;        // Xử lý mở màn hình cài đặt&#10;        if (getContext() != null) {&#10;            Toast.makeText(getContext(), &quot;Chức năng cài đặt đang phát triển&quot;, Toast.LENGTH_SHORT).show();&#10;            // TODO: Navigate to settings screen&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Tải thông tin profile người dùng từ Firebase&#10;     */&#10;    private void loadUserProfile() {&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#10;        if (currentUser != null) {&#10;            // Hiển thị thông tin người dùng lên giao diện&#10;            String displayName = currentUser.getDisplayName();&#10;            String email = currentUser.getEmail();&#10;&#10;            profileName.setText(displayName != null ? displayName : &quot;Người dùng&quot;);&#10;            profileUsername.setText(&quot;@&quot; + (email != null ? email.split(&quot;@&quot;)[0] : &quot;user&quot;));&#10;            profileBio.setText(&quot;Mô tả của người dùng chưa được cập nhật. Hãy thêm mô tả để mọi người biết thêm về bạn.&quot;);&#10;        } else {&#10;            // Nếu chưa đăng nhập, hiển thị thông báo&#10;            profileName.setText(&quot;Chưa đăng nhập&quot;);&#10;            profileUsername.setText(&quot;@guest&quot;);&#10;            profileBio.setText(&quot;Vui lòng đăng nhập để xem thông tin cá nhân&quot;);&#10;        }&#10;    }&#10;&#10;    public void showLogoutConfirmDialog() {&#10;        if (getContext() != null) {&#10;            new AlertDialog.Builder(getContext())&#10;                    .setTitle(&quot;Xác nhận đăng xuất&quot;)&#10;                    .setMessage(&quot;Bạn có chắc chắn muốn đăng xuất không?&quot;)&#10;                    .setPositiveButton(&quot;Đăng xuất&quot;, (dialog, which) -&gt; performLogout())&#10;                    .setNegativeButton(&quot;Hủy&quot;, (dialog, which) -&gt; dialog.dismiss())&#10;                    .show();&#10;        }&#10;    }&#10;&#10;    private void performLogout() {&#10;        try {&#10;            // Hiển thị loading&#10;            showLoading(true);&#10;&#10;            // Đăng xuất Firebase&#10;            firebaseAuth.signOut();&#10;&#10;            // Ẩn loading&#10;            showLoading(false);&#10;&#10;            // Hiển thị thông báo thành công&#10;            if (getContext() != null) {&#10;                Toast.makeText(getContext(), &quot;Đăng xuất thành công&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;&#10;            // Chuyển về màn hình đăng nhập&#10;            navigateToLogin();&#10;&#10;        } catch (Exception e) {&#10;            showLoading(false);&#10;            if (getContext() != null) {&#10;                Toast.makeText(getContext(), &quot;Lỗi đăng xuất: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;            }&#10;        }&#10;    }&#10;&#10;    private void navigateToLogin() {&#10;        if (getActivity() != null) {&#10;            Intent intent = new Intent(getActivity(), LoginActivity.class);&#10;            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);&#10;            startActivity(intent);&#10;            getActivity().finish();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void displayUserProfile(String userInfo) {&#10;        // Phương thức này sẽ được presenter gọi để hiển thị thông tin người dùng&#10;        if (profileBio != null) {&#10;            profileBio.setText(userInfo);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showError(String message) {&#10;        if (getContext() != null) {&#10;            Toast.makeText(getContext(), message, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showLoading(boolean isLoading) {&#10;        // TODO: Hiển thị hoặc ẩn loading indicator&#10;    }&#10;&#10;    private String buildUserInfoString(FirebaseUser user) {&#10;        StringBuilder sb = new StringBuilder();&#10;        if (user.getDisplayName() != null) {&#10;            sb.append(&quot;Tên: &quot;).append(user.getDisplayName()).append(&quot;\n&quot;);&#10;        }&#10;        if (user.getEmail() != null) {&#10;            sb.append(&quot;Email: &quot;).append(user.getEmail()).append(&quot;\n&quot;);&#10;        }&#10;        if (user.getPhoneNumber() != null) {&#10;            sb.append(&quot;SĐT: &quot;).append(user.getPhoneNumber()).append(&quot;\n&quot;);&#10;        }&#10;        return sb.toString();&#10;    }&#10;&#10;    @Override&#10;    public void onLogoutSuccess() {&#10;        if (getContext() != null) {&#10;            Toast.makeText(getContext(), &quot;Đăng xuất thành công&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;&#10;        // Chuyển về màn hình đăng nhập&#10;        navigateToLogin();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.profile;&#10;&#10;import android.app.AlertDialog;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.ImageButton;&#10;import android.widget.ImageView;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.appcompat.app.AppCompatDelegate;&#10;import androidx.viewpager2.widget.ViewPager2;&#10;&#10;import com.google.android.material.bottomsheet.BottomSheetDialog;&#10;import com.google.android.material.tabs.TabLayout;&#10;import com.google.android.material.tabs.TabLayoutMediator;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.auth.FirebaseUser;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.presentation.auth.LoginActivity;&#10;import com.vhn.doan.presentation.base.BaseFragment;&#10;&#10;/**&#10; * Fragment hiển thị thông tin profile người dùng&#10; * Tuân thủ kiến trúc MVP pattern với Firebase Authentication&#10; */&#10;public class ProfileFragment extends BaseFragment implements ProfileContract.View {&#10;&#10;    private ProfileContract.Presenter presenter;&#10;    private TextView profileName, profileUsername, profileBio;&#10;    private ImageButton btnToggleTheme, btnMenu;&#10;    private ImageView profileImage;&#10;    private TabLayout tabLayout;&#10;    private ViewPager2 viewPager;&#10;    private FirebaseAuth firebaseAuth;&#10;&#10;    public ProfileFragment() {&#10;        // Required empty public constructor&#10;    }&#10;&#10;    public static ProfileFragment newInstance() {&#10;        return new ProfileFragment();&#10;    }&#10;&#10;    @Override&#10;    public void onCreate(@Nullable Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        // Khởi tạo Firebase Auth&#10;        firebaseAuth = FirebaseAuth.getInstance();&#10;        // TODO: Inject presenter through Dagger 2 trong tương lai&#10;        // presenter = DaggerProfileComponent.create().getPresenter();&#10;    }&#10;&#10;    @Nullable&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_simple_profile, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;&#10;        // Load thông tin người dùng ngay sau khi view được tạo&#10;        loadUserProfile();&#10;&#10;        // Thiết lập TabLayout và ViewPager2&#10;        setupTabLayoutWithViewPager();&#10;&#10;        // Attach presenter nếu có&#10;        if (presenter != null) {&#10;            presenter.attachView(this);&#10;            presenter.loadUserProfile();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onDestroyView() {&#10;        super.onDestroyView();&#10;        if (presenter != null) {&#10;            presenter.detachView();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    protected void initViews(View view) {&#10;        // Khởi tạo các view components từ layout mới&#10;        profileImage = view.findViewById(R.id.profile_image);&#10;        profileName = view.findViewById(R.id.profile_name);&#10;        profileUsername = view.findViewById(R.id.profile_username);&#10;        profileBio = view.findViewById(R.id.profile_bio);&#10;&#10;&#10;        btnToggleTheme = view.findViewById(R.id.btn_toggle_theme);&#10;        btnMenu = view.findViewById(R.id.btn_menu);&#10;&#10;        tabLayout = view.findViewById(R.id.tab_layout);&#10;        viewPager = view.findViewById(R.id.view_pager);&#10;    }&#10;&#10;    @Override&#10;    protected void setupListeners() {&#10;        // Thiết lập listener cho các nút&#10;        btnToggleTheme.setOnClickListener(v -&gt; toggleDarkMode());&#10;        btnMenu.setOnClickListener(v -&gt; showMenuOptions());&#10;    }&#10;&#10;    private void setupTabLayoutWithViewPager() {&#10;        // Khởi tạo adapter cho ViewPager&#10;        ProfileViewPagerAdapter adapter = new ProfileViewPagerAdapter(this);&#10;        viewPager.setAdapter(adapter);&#10;&#10;        // Liên kết TabLayout với ViewPager&#10;        new TabLayoutMediator(tabLayout, viewPager, (tab, position) -&gt; {&#10;            switch (position) {&#10;                case 0:&#10;                    tab.setText(&quot;Bài viết yêu thích&quot;);&#10;                    break;&#10;                case 1:&#10;                    tab.setText(&quot;Video đã like&quot;);&#10;                    break;&#10;            }&#10;        }).attach();&#10;    }&#10;&#10;    private void toggleDarkMode() {&#10;        int currentNightMode = AppCompatDelegate.getDefaultNightMode();&#10;        if (currentNightMode == AppCompatDelegate.MODE_NIGHT_YES) {&#10;            // Đang ở chế độ tối, chuyển sang chế độ sáng&#10;            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO);&#10;            if (getContext() != null) {&#10;                Toast.makeText(getContext(), &quot;Đã chuyển sang chế độ sáng&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        } else {&#10;            // Đang ở chế độ sáng, chuyển sang chế độ tối&#10;            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);&#10;            if (getContext() != null) {&#10;                Toast.makeText(getContext(), &quot;Đã chuyển sang chế độ tối&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        }&#10;    }&#10;&#10;    private void showMenuOptions() {&#10;        if (getContext() == null) return;&#10;&#10;        // Sử dụng BottomSheetDialog với theme bo góc&#10;        BottomSheetDialog bottomSheetDialog = new BottomSheetDialog(getContext(), R.style.BottomSheetDialogTheme);&#10;        View bottomSheetView = getLayoutInflater().inflate(R.layout.layout_bottom_sheet_menu, null);&#10;        bottomSheetDialog.setContentView(bottomSheetView);&#10;&#10;        // Khởi tạo các view trong BottomSheetDialog&#10;        TextView txtSetting = bottomSheetView.findViewById(R.id.txt_setting);&#10;        TextView txtLogout = bottomSheetView.findViewById(R.id.txt_logout);&#10;&#10;        // Thiết lập sự kiện click cho các tùy chọn&#10;        txtSetting.setOnClickListener(v -&gt; {&#10;            openSettings();&#10;            bottomSheetDialog.dismiss();&#10;        });&#10;&#10;        txtLogout.setOnClickListener(v -&gt; {&#10;            showLogoutConfirmDialog();&#10;            bottomSheetDialog.dismiss();&#10;        });&#10;&#10;        // Hiển thị BottomSheetDialog&#10;        bottomSheetDialog.show();&#10;    }&#10;&#10;    private void openSettings() {&#10;        // Xử lý mở màn hình cài đặt&#10;        if (getContext() != null) {&#10;            Toast.makeText(getContext(), &quot;Chức năng cài đặt đang phát triển&quot;, Toast.LENGTH_SHORT).show();&#10;            // TODO: Navigate to settings screen&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Tải thông tin profile người dùng từ Firebase&#10;     */&#10;    private void loadUserProfile() {&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#10;        if (currentUser != null) {&#10;            // Hiển thị thông tin người dùng lên giao diện&#10;            String displayName = currentUser.getDisplayName();&#10;            String email = currentUser.getEmail();&#10;&#10;            profileName.setText(displayName != null ? displayName : &quot;Người dùng&quot;);&#10;            profileUsername.setText(&quot;@&quot; + (email != null ? email.split(&quot;@&quot;)[0] : &quot;user&quot;));&#10;            profileBio.setText(&quot;Mô tả của người dùng chưa được cập nhật. Hãy thêm mô tả để mọi người biết thêm về bạn.&quot;);&#10;        } else {&#10;            // Nếu chưa đăng nhập, hiển thị thông báo&#10;            profileName.setText(&quot;Chưa đăng nhập&quot;);&#10;            profileUsername.setText(&quot;@guest&quot;);&#10;            profileBio.setText(&quot;Vui lòng đăng nhập để xem thông tin cá nhân&quot;);&#10;        }&#10;    }&#10;&#10;    public void showLogoutConfirmDialog() {&#10;        if (getContext() != null) {&#10;            new AlertDialog.Builder(getContext())&#10;                    .setTitle(&quot;Xác nhận đăng xuất&quot;)&#10;                    .setMessage(&quot;Bạn có chắc chắn muốn đăng xuất không?&quot;)&#10;                    .setPositiveButton(&quot;Đăng xuất&quot;, (dialog, which) -&gt; performLogout())&#10;                    .setNegativeButton(&quot;Hủy&quot;, (dialog, which) -&gt; dialog.dismiss())&#10;                    .show();&#10;        }&#10;    }&#10;&#10;    private void performLogout() {&#10;        try {&#10;            // Hiển thị loading&#10;            showLoading(true);&#10;&#10;            // Đăng xuất Firebase&#10;            firebaseAuth.signOut();&#10;&#10;            // Ẩn loading&#10;            showLoading(false);&#10;&#10;            // Hiển thị thông báo thành công&#10;            if (getContext() != null) {&#10;                Toast.makeText(getContext(), &quot;Đăng xuất thành công&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;&#10;            // Chuyển về màn hình đăng nhập&#10;            navigateToLogin();&#10;&#10;        } catch (Exception e) {&#10;            showLoading(false);&#10;            if (getContext() != null) {&#10;                Toast.makeText(getContext(), &quot;Lỗi đăng xuất: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;            }&#10;        }&#10;    }&#10;&#10;    private void navigateToLogin() {&#10;        if (getActivity() != null) {&#10;            Intent intent = new Intent(getActivity(), LoginActivity.class);&#10;            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);&#10;            startActivity(intent);&#10;            getActivity().finish();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void displayUserProfile(String userInfo) {&#10;        // Phương thức này sẽ được presenter gọi để hiển thị thông tin người dùng&#10;        if (profileBio != null) {&#10;            profileBio.setText(userInfo);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showError(String message) {&#10;        if (getContext() != null) {&#10;            Toast.makeText(getContext(), message, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void showLoading(boolean isLoading) {&#10;        // TODO: Hiển thị hoặc ẩn loading indicator&#10;    }&#10;&#10;    private String buildUserInfoString(FirebaseUser user) {&#10;        StringBuilder sb = new StringBuilder();&#10;        if (user.getDisplayName() != null) {&#10;            sb.append(&quot;Tên: &quot;).append(user.getDisplayName()).append(&quot;\n&quot;);&#10;        }&#10;        if (user.getEmail() != null) {&#10;            sb.append(&quot;Email: &quot;).append(user.getEmail()).append(&quot;\n&quot;);&#10;        }&#10;        if (user.getPhoneNumber() != null) {&#10;            sb.append(&quot;SĐT: &quot;).append(user.getPhoneNumber()).append(&quot;\n&quot;);&#10;        }&#10;        return sb.toString();&#10;    }&#10;&#10;    @Override&#10;    public void onLogoutSuccess() {&#10;        if (getContext() != null) {&#10;            Toast.makeText(getContext(), &quot;Đăng xuất thành công&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;&#10;        // Chuyển về màn hình đăng nhập&#10;        navigateToLogin();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/profile/ProfileViewPagerAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/profile/ProfileViewPagerAdapter.java" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.profile;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.viewpager2.adapter.FragmentStateAdapter;&#10;&#10;/**&#10; * Adapter cho ViewPager2 trong profile fragment để chuyển đổi giữa các tab&#10; */&#10;public class ProfileViewPagerAdapter extends FragmentStateAdapter {&#10;&#10;    private static final int TAB_COUNT = 2;&#10;    private static final int TAB_FAVORITE_POSTS = 0;&#10;    private static final int TAB_LIKED_VIDEOS = 1;&#10;&#10;    public ProfileViewPagerAdapter(@NonNull Fragment fragment) {&#10;        super(fragment);&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public Fragment createFragment(int position) {&#10;        switch (position) {&#10;            case TAB_FAVORITE_POSTS:&#10;                return FavoritePostsFragment.newInstance();&#10;            case TAB_LIKED_VIDEOS:&#10;                return LikedVideosFragment.newInstance();&#10;            default:&#10;                return FavoritePostsFragment.newInstance();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return TAB_COUNT;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/profile/SimpleProfileFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/presentation/profile/SimpleProfileFragment.java" />
              <option name="originalContent" value="package com.vhn.doan.presentation.profile;&#10;&#10;import android.app.AlertDialog;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.ImageButton;&#10;import android.widget.ImageView;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.appcompat.app.AppCompatDelegate;&#10;import androidx.viewpager2.widget.ViewPager2;&#10;&#10;import com.google.android.material.bottomsheet.BottomSheetDialog;&#10;import com.google.android.material.tabs.TabLayout;&#10;import com.google.android.material.tabs.TabLayoutMediator;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.auth.FirebaseUser;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.presentation.auth.LoginActivity;&#10;import com.vhn.doan.presentation.base.BaseFragment;&#10;&#10;/**&#10; * Fragment đơn giản cho profile người dùng&#10; * Phiên bản đơn giản theo thiết kế giống TikTok&#10; */&#10;public class SimpleProfileFragment extends BaseFragment {&#10;&#10;    private TextView profileName, profileUsername, profileBio;&#10;    private ImageButton btnToggleTheme, btnMenu;&#10;    private ImageView profileImage;&#10;    private TabLayout tabLayout;&#10;    private ViewPager2 viewPager;&#10;    private FirebaseAuth firebaseAuth;&#10;&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,&#10;                             Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_simple_profile, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;        initFirebase();&#10;        loadUserInfo();&#10;        setupTabLayoutWithViewPager();&#10;    }&#10;&#10;    private void initFirebase() {&#10;        firebaseAuth = FirebaseAuth.getInstance();&#10;    }&#10;&#10;    @Override&#10;    protected void initViews(View view) {&#10;        // Khởi tạo các view components từ layout mới&#10;        profileImage = view.findViewById(R.id.profile_image);&#10;        profileName = view.findViewById(R.id.profile_name);&#10;        profileUsername = view.findViewById(R.id.profile_username);&#10;        profileBio = view.findViewById(R.id.profile_bio);&#10;&#10;        btnToggleTheme = view.findViewById(R.id.btn_toggle_theme);&#10;        btnMenu = view.findViewById(R.id.btn_menu);&#10;&#10;        tabLayout = view.findViewById(R.id.tab_layout);&#10;        viewPager = view.findViewById(R.id.view_pager);&#10;    }&#10;&#10;    @Override&#10;    protected void setupListeners() {&#10;        btnToggleTheme.setOnClickListener(v -&gt; toggleDarkMode());&#10;        btnMenu.setOnClickListener(v -&gt; showMenuOptions());&#10;    }&#10;&#10;    private void setupTabLayoutWithViewPager() {&#10;        // Khởi tạo adapter cho ViewPager&#10;        ProfileViewPagerAdapter adapter = new ProfileViewPagerAdapter(this);&#10;        viewPager.setAdapter(adapter);&#10;&#10;        // Liên kết TabLayout với ViewPager&#10;        new TabLayoutMediator(tabLayout, viewPager, (tab, position) -&gt; {&#10;            switch (position) {&#10;                case 0:&#10;                    tab.setText(&quot;Bài viết yêu thích&quot;);&#10;                    break;&#10;                case 1:&#10;                    tab.setText(&quot;Video đã like&quot;);&#10;                    break;&#10;            }&#10;        }).attach();&#10;    }&#10;&#10;    private void toggleDarkMode() {&#10;        int currentNightMode = AppCompatDelegate.getDefaultNightMode();&#10;        if (currentNightMode == AppCompatDelegate.MODE_NIGHT_YES) {&#10;            // Đang ở chế độ tối, chuyển sang chế độ sáng&#10;            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO);&#10;            if (getContext() != null) {&#10;                Toast.makeText(getContext(), &quot;Đã chuyển sang chế độ sáng&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        } else {&#10;            // Đang ở chế độ sáng, chuyển sang chế độ tối&#10;            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);&#10;            if (getContext() != null) {&#10;                Toast.makeText(getContext(), &quot;Đã chuyển sang chế độ tối&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        }&#10;    }&#10;&#10;    private void showMenuOptions() {&#10;        if (getContext() == null) return;&#10;&#10;        // Sử dụng BottomSheetDialog thay vì AlertDialog&#10;        BottomSheetDialog bottomSheetDialog = new BottomSheetDialog(getContext());&#10;        View bottomSheetView = getLayoutInflater().inflate(R.layout.layout_bottom_sheet_menu, null);&#10;        bottomSheetDialog.setContentView(bottomSheetView);&#10;&#10;        // Bo góc cho bottom sheet&#10;        if (bottomSheetDialog.getWindow() != null) {&#10;            bottomSheetView.setBackgroundResource(R.drawable.bg_bottom_sheet);&#10;        }&#10;&#10;        // Khởi tạo các view trong BottomSheetDialog&#10;        TextView txtSetting = bottomSheetView.findViewById(R.id.txt_setting);&#10;        TextView txtLogout = bottomSheetView.findViewById(R.id.txt_logout);&#10;&#10;        // Thiết lập sự kiện click cho các tùy chọn&#10;        txtSetting.setOnClickListener(v -&gt; {&#10;            Toast.makeText(getContext(), &quot;Chức năng cài đặt đang phát triển&quot;, Toast.LENGTH_SHORT).show();&#10;            bottomSheetDialog.dismiss();&#10;        });&#10;&#10;        txtLogout.setOnClickListener(v -&gt; {&#10;            showLogoutConfirmDialog();&#10;            bottomSheetDialog.dismiss();&#10;        });&#10;&#10;        // Hiển thị BottomSheetDialog&#10;        bottomSheetDialog.show();&#10;    }&#10;&#10;    private void loadUserInfo() {&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#10;        if (currentUser != null) {&#10;            // Hiển thị thông tin người dùng&#10;            String displayName = currentUser.getDisplayName();&#10;            String email = currentUser.getEmail();&#10;&#10;            profileName.setText(displayName != null ? displayName : &quot;Người dùng&quot;);&#10;            profileUsername.setText(&quot;@&quot; + (email != null ? email.split(&quot;@&quot;)[0] : &quot;user&quot;));&#10;            profileBio.setText(&quot;Mô tả của người dùng chưa được cập nhật. Hãy thêm mô tả để mọi người biết thêm về bạn.&quot;);&#10;        } else {&#10;            profileName.setText(&quot;Chưa đăng nhập&quot;);&#10;            profileUsername.setText(&quot;@guest&quot;);&#10;            profileBio.setText(&quot;Vui lòng đăng nhập để xem thông tin cá nhân&quot;);&#10;        }&#10;    }&#10;&#10;    private void showLogoutConfirmDialog() {&#10;        if (getContext() != null) {&#10;            new AlertDialog.Builder(getContext())&#10;                    .setTitle(&quot;Xác nhận đăng xuất&quot;)&#10;                    .setMessage(&quot;Bạn có chắc chắn muốn đăng xuất không?&quot;)&#10;                    .setPositiveButton(&quot;Đăng xuất&quot;, (dialog, which) -&gt; performLogout())&#10;                    .setNegativeButton(&quot;Hủy&quot;, (dialog, which) -&gt; dialog.dismiss())&#10;                    .show();&#10;        }&#10;    }&#10;&#10;    private void performLogout() {&#10;        try {&#10;            // Hiển thị loading&#10;            showLoading(true);&#10;&#10;            // Đăng xuất Firebase&#10;            firebaseAuth.signOut();&#10;&#10;            // Ẩn loading&#10;            showLoading(false);&#10;&#10;            // Hiển thị thông báo thành công&#10;            if (getContext() != null) {&#10;                Toast.makeText(getContext(), &quot;Đăng xuất thành công&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;&#10;            // Chuyển về màn hình đăng nhập&#10;            navigateToLogin();&#10;&#10;        } catch (Exception e) {&#10;            showLoading(false);&#10;            if (getContext() != null) {&#10;                Toast.makeText(getContext(), &quot;Lỗi đăng xuất: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;            }&#10;        }&#10;    }&#10;&#10;    private void navigateToLogin() {&#10;        if (getActivity() != null) {&#10;            Intent intent = new Intent(getActivity(), LoginActivity.class);&#10;            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);&#10;            startActivity(intent);&#10;            getActivity().finish();&#10;        }&#10;    }&#10;&#10;    public void showLoading(boolean isLoading) {&#10;        // TODO: Hiển thị hoặc ẩn loading indicator&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.presentation.profile;&#10;&#10;import android.app.AlertDialog;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.ImageButton;&#10;import android.widget.ImageView;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.appcompat.app.AppCompatDelegate;&#10;import androidx.viewpager2.widget.ViewPager2;&#10;&#10;import com.google.android.material.bottomsheet.BottomSheetDialog;&#10;import com.google.android.material.tabs.TabLayout;&#10;import com.google.android.material.tabs.TabLayoutMediator;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.auth.FirebaseUser;&#10;import com.vhn.doan.R;&#10;import com.vhn.doan.presentation.auth.LoginActivity;&#10;import com.vhn.doan.presentation.base.BaseFragment;&#10;&#10;/**&#10; * Fragment đơn giản cho profile người dùng&#10; * Phiên bản đơn giản theo thiết kế giống TikTok&#10; */&#10;public class SimpleProfileFragment extends BaseFragment {&#10;&#10;    private TextView profileName, profileUsername, profileBio;&#10;    private ImageButton btnToggleTheme, btnMenu;&#10;    private ImageView profileImage;&#10;    private TabLayout tabLayout;&#10;    private ViewPager2 viewPager;&#10;    private FirebaseAuth firebaseAuth;&#10;&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,&#10;                             Bundle savedInstanceState) {&#10;        return inflater.inflate(R.layout.fragment_simple_profile, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;        initFirebase();&#10;        loadUserInfo();&#10;        setupTabLayoutWithViewPager();&#10;    }&#10;&#10;    private void initFirebase() {&#10;        firebaseAuth = FirebaseAuth.getInstance();&#10;    }&#10;&#10;    @Override&#10;    protected void initViews(View view) {&#10;        // Khởi tạo các view components từ layout mới&#10;        profileImage = view.findViewById(R.id.profile_image);&#10;        profileName = view.findViewById(R.id.profile_name);&#10;        profileUsername = view.findViewById(R.id.profile_username);&#10;        profileBio = view.findViewById(R.id.profile_bio);&#10;&#10;        btnToggleTheme = view.findViewById(R.id.btn_toggle_theme);&#10;        btnMenu = view.findViewById(R.id.btn_menu);&#10;&#10;        tabLayout = view.findViewById(R.id.tab_layout);&#10;        viewPager = view.findViewById(R.id.view_pager);&#10;    }&#10;&#10;    @Override&#10;    protected void setupListeners() {&#10;        btnToggleTheme.setOnClickListener(v -&gt; toggleDarkMode());&#10;        btnMenu.setOnClickListener(v -&gt; showMenuOptions());&#10;    }&#10;&#10;    private void setupTabLayoutWithViewPager() {&#10;        // Khởi tạo adapter cho ViewPager&#10;        ProfileViewPagerAdapter adapter = new ProfileViewPagerAdapter(this);&#10;        viewPager.setAdapter(adapter);&#10;&#10;        // Liên kết TabLayout với ViewPager&#10;        new TabLayoutMediator(tabLayout, viewPager, (tab, position) -&gt; {&#10;            switch (position) {&#10;                case 0:&#10;                    tab.setText(&quot;Bài viết yêu thích&quot;);&#10;                    break;&#10;                case 1:&#10;                    tab.setText(&quot;Video đã like&quot;);&#10;                    break;&#10;            }&#10;        }).attach();&#10;    }&#10;&#10;    private void toggleDarkMode() {&#10;        int currentNightMode = AppCompatDelegate.getDefaultNightMode();&#10;        if (currentNightMode == AppCompatDelegate.MODE_NIGHT_YES) {&#10;            // Đang ở chế độ tối, chuyển sang chế độ sáng&#10;            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO);&#10;            if (getContext() != null) {&#10;                Toast.makeText(getContext(), &quot;Đã chuyển sang chế độ sáng&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        } else {&#10;            // Đang ở chế độ sáng, chuyển sang chế độ tối&#10;            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);&#10;            if (getContext() != null) {&#10;                Toast.makeText(getContext(), &quot;Đã chuyển sang chế độ tối&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        }&#10;    }&#10;&#10;    private void showMenuOptions() {&#10;        if (getContext() == null) return;&#10;&#10;        // Sử dụng BottomSheetDialog thay vì AlertDialog&#10;        BottomSheetDialog bottomSheetDialog = new BottomSheetDialog(getContext(), R.style.BottomSheetDialogTheme);&#10;        View bottomSheetView = getLayoutInflater().inflate(R.layout.layout_bottom_sheet_menu, null);&#10;        bottomSheetDialog.setContentView(bottomSheetView);&#10;&#10;        // Khởi tạo các view trong BottomSheetDialog&#10;        TextView txtSetting = bottomSheetView.findViewById(R.id.txt_setting);&#10;        TextView txtLogout = bottomSheetView.findViewById(R.id.txt_logout);&#10;&#10;        // Thiết lập sự kiện click cho các tùy chọn&#10;        txtSetting.setOnClickListener(v -&gt; {&#10;            Toast.makeText(getContext(), &quot;Chức năng cài đặt đang phát triển&quot;, Toast.LENGTH_SHORT).show();&#10;            bottomSheetDialog.dismiss();&#10;        });&#10;&#10;        txtLogout.setOnClickListener(v -&gt; {&#10;            showLogoutConfirmDialog();&#10;            bottomSheetDialog.dismiss();&#10;        });&#10;&#10;        // Hiển thị BottomSheetDialog&#10;        bottomSheetDialog.show();&#10;    }&#10;&#10;    private void loadUserInfo() {&#10;        FirebaseUser currentUser = firebaseAuth.getCurrentUser();&#10;        if (currentUser != null) {&#10;            // Hiển thị thông tin người dùng&#10;            String displayName = currentUser.getDisplayName();&#10;            String email = currentUser.getEmail();&#10;&#10;            profileName.setText(displayName != null ? displayName : &quot;Người dùng&quot;);&#10;            profileUsername.setText(&quot;@&quot; + (email != null ? email.split(&quot;@&quot;)[0] : &quot;user&quot;));&#10;            profileBio.setText(&quot;Mô tả của người dùng chưa được cập nhật. Hãy thêm mô tả để mọi người biết thêm về bạn.&quot;);&#10;        } else {&#10;            profileName.setText(&quot;Chưa đăng nhập&quot;);&#10;            profileUsername.setText(&quot;@guest&quot;);&#10;            profileBio.setText(&quot;Vui lòng đăng nhập để xem thông tin cá nhân&quot;);&#10;        }&#10;    }&#10;&#10;    private void showLogoutConfirmDialog() {&#10;        if (getContext() != null) {&#10;            new AlertDialog.Builder(getContext())&#10;                    .setTitle(&quot;Xác nhận đăng xuất&quot;)&#10;                    .setMessage(&quot;Bạn có chắc chắn muốn đăng xuất không?&quot;)&#10;                    .setPositiveButton(&quot;Đăng xuất&quot;, (dialog, which) -&gt; performLogout())&#10;                    .setNegativeButton(&quot;Hủy&quot;, (dialog, which) -&gt; dialog.dismiss())&#10;                    .show();&#10;        }&#10;    }&#10;&#10;    private void performLogout() {&#10;        try {&#10;            // Hiển thị loading&#10;            showLoading(true);&#10;&#10;            // Đăng xuất Firebase&#10;            firebaseAuth.signOut();&#10;&#10;            // Ẩn loading&#10;            showLoading(false);&#10;&#10;            // Hiển thị thông báo thành công&#10;            if (getContext() != null) {&#10;                Toast.makeText(getContext(), &quot;Đăng xuất thành công&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;&#10;            // Chuyển về màn hình đăng nhập&#10;            navigateToLogin();&#10;&#10;        } catch (Exception e) {&#10;            showLoading(false);&#10;            if (getContext() != null) {&#10;                Toast.makeText(getContext(), &quot;Lỗi đăng xuất: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;            }&#10;        }&#10;    }&#10;&#10;    private void navigateToLogin() {&#10;        if (getActivity() != null) {&#10;            Intent intent = new Intent(getActivity(), LoginActivity.class);&#10;            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);&#10;            startActivity(intent);&#10;            getActivity().finish();&#10;        }&#10;    }&#10;&#10;    public void showLoading(boolean isLoading) {&#10;        // TODO: Hiển thị hoặc ẩn loading indicator&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/utils/PermissionHelper.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/utils/PermissionHelper.java" />
              <option name="originalContent" value="package com.vhn.doan.utils;&#10;&#10;import android.Manifest;&#10;import android.app.AlertDialog;&#10;import android.content.Context;&#10;import android.content.Intent;&#10;import android.content.pm.PackageManager;&#10;import android.os.Build;&#10;import android.os.PowerManager;&#10;import androidx.core.app.ActivityCompat;&#10;import androidx.core.content.ContextCompat;&#10;import androidx.fragment.app.Fragment;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;/**&#10; * Helper class để quản lý quyền ứng dụng&#10; */&#10;public class PermissionHelper {&#10;&#10;    // Mã yêu cầu quyền cho reminder&#10;    public static final int PERMISSION_REQUEST_REMINDER = 1001;&#10;&#10;    // Quyền cần thiết cho tính năng reminder - chỉ cần thông báo&#10;    private static final String[] REMINDER_PERMISSIONS = {&#10;            Manifest.permission.POST_NOTIFICATIONS&#10;    };&#10;&#10;    // Map để lưu trữ callback theo fragment hashCode&#10;    private static final Map&lt;Integer, PermissionCallback&gt; callbackMap = new HashMap&lt;&gt;();&#10;&#10;    /**&#10;     * Interface callback cho việc xử lý kết quả quyền&#10;     */&#10;    public interface PermissionCallback {&#10;        void onPermissionsGranted();&#10;        void onPermissionsDenied(List&lt;String&gt; deniedPermissions);&#10;    }&#10;&#10;    /**&#10;     * Kiểm tra xem tất cả quyền reminder đã được cấp chưa (bao gồm tối ưu hóa pin)&#10;     */&#10;    public static boolean hasReminderPermissions(Context context) {&#10;        // Kiểm tra quyền thông báo cơ bản&#10;        boolean hasNotificationPermission = hasBasicNotificationPermission(context);&#10;&#10;        // Kiểm tra tối ưu hóa pin&#10;        boolean isBatteryOptimizationIgnored = isBatteryOptimizationIgnored(context);&#10;&#10;        return hasNotificationPermission &amp;&amp; isBatteryOptimizationIgnored;&#10;    }&#10;&#10;    /**&#10;     * Kiểm tra quyền thông báo cơ bản&#10;     */&#10;    public static boolean hasBasicNotificationPermission(Context context) {&#10;        // Đối với Android 13+ mới cần kiểm tra POST_NOTIFICATIONS&#10;        if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.TIRAMISU) {&#10;            return true; // Không cần quyền thông báo cho Android &lt; 13&#10;        }&#10;&#10;        return ContextCompat.checkSelfPermission(context, Manifest.permission.POST_NOTIFICATIONS)&#10;                == PackageManager.PERMISSION_GRANTED;&#10;    }&#10;&#10;    /**&#10;     * ✅ THÊM: Kiểm tra xem app có bị tối ưu hóa pin không&#10;     */&#10;    public static boolean isBatteryOptimizationIgnored(Context context) {&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {&#10;            PowerManager powerManager = (PowerManager) context.getSystemService(Context.POWER_SERVICE);&#10;            return powerManager.isIgnoringBatteryOptimizations(context.getPackageName());&#10;        }&#10;        return true; // Android &lt; 6.0 không có Doze Mode&#10;    }&#10;&#10;    /**&#10;     * Lấy danh sách quyền chưa được cấp (bao gồm tối ưu hóa pin)&#10;     */&#10;    public static List&lt;String&gt; getMissingReminderPermissions(Context context) {&#10;        List&lt;String&gt; missingPermissions = new ArrayList&lt;&gt;();&#10;&#10;        // Kiểm tra quyền thông báo&#10;        if (!hasBasicNotificationPermission(context)) {&#10;            missingPermissions.add(Manifest.permission.POST_NOTIFICATIONS);&#10;        }&#10;&#10;        // Kiểm tra tối ưu hóa pin&#10;        if (!isBatteryOptimizationIgnored(context)) {&#10;            missingPermissions.add(&quot;BATTERY_OPTIMIZATION&quot;);&#10;        }&#10;&#10;        return missingPermissions;&#10;    }&#10;&#10;    /**&#10;     * Hiển thị dialog giải thích tại sao cần quyền và yêu cầu cấp quyền (cập nhật)&#10;     */&#10;    public static void showPermissionExplanationDialog(Fragment fragment,&#10;                                                      PermissionCallback callback) {&#10;        if (fragment.getContext() == null) {&#10;            return;&#10;        }&#10;&#10;        List&lt;String&gt; missingPermissions = getMissingReminderPermissions(fragment.getContext());&#10;        if (missingPermissions.isEmpty()) {&#10;            callback.onPermissionsGranted();&#10;            return;&#10;        }&#10;&#10;        String message = buildPermissionMessage(missingPermissions);&#10;&#10;        new AlertDialog.Builder(fragment.getContext())&#10;                .setTitle(&quot;Cần cấp quyền&quot;)&#10;                .setMessage(message)&#10;                .setPositiveButton(&quot;Cấp quyền&quot;, (dialog, which) -&gt; {&#10;                    dialog.dismiss();&#10;                    requestPermissions(fragment, missingPermissions, callback);&#10;                })&#10;                .setNegativeButton(&quot;Hủy&quot;, (dialog, which) -&gt; {&#10;                    dialog.dismiss();&#10;                    callback.onPermissionsDenied(missingPermissions);&#10;                })&#10;                .setCancelable(false)&#10;                .show();&#10;    }&#10;&#10;    /**&#10;     * Yêu cầu cấp quyền (cập nhật để xử lý tối ưu hóa pin)&#10;     */&#10;    private static void requestPermissions(Fragment fragment,&#10;                                         List&lt;String&gt; permissions,&#10;                                         PermissionCallback callback) {&#10;        // Lưu callback vào map với key là hashCode của fragment&#10;        int fragmentKey = fragment.hashCode();&#10;        callbackMap.put(fragmentKey, callback);&#10;&#10;        // Kiểm tra xem có cần yêu cầu tối ưu hóa pin không&#10;        boolean needsBatteryOptimization = permissions.contains(&quot;BATTERY_OPTIMIZATION&quot;);&#10;        boolean needsNotificationPermission = permissions.contains(Manifest.permission.POST_NOTIFICATIONS);&#10;&#10;        if (needsBatteryOptimization) {&#10;            // Ưu tiên xử lý tối ưu hóa pin trước&#10;            requestIgnoreBatteryOptimization(fragment, callback);&#10;        } else if (needsNotificationPermission) {&#10;            // Chỉ yêu cầu quyền thông báo&#10;            String[] permissionArray = {Manifest.permission.POST_NOTIFICATIONS};&#10;            fragment.requestPermissions(permissionArray, PERMISSION_REQUEST_REMINDER);&#10;        } else {&#10;            // Không có quyền nào cần yêu cầu&#10;            callback.onPermissionsGranted();&#10;        }&#10;    }&#10;&#10;    /**&#10;     * ✅ THÊM: Yêu cầu tắt tối ưu hóa pin&#10;     */&#10;    private static void requestIgnoreBatteryOptimization(Fragment fragment, PermissionCallback callback) {&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {&#10;            try {&#10;                String packageName = fragment.requireContext().getPackageName();&#10;                Intent intent = new Intent(android.provider.Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS);&#10;                intent.setData(android.net.Uri.parse(&quot;package:&quot; + packageName));&#10;                fragment.startActivity(intent);&#10;&#10;                // Hiển thị thông báo hướng dẫn&#10;                new AlertDialog.Builder(fragment.getContext())&#10;                    .setTitle(&quot;Tối ưu hóa pin&quot;)&#10;                    .setMessage(&quot;Vui lòng chọn \&quot;Cho phép\&quot; để đảm bảo nhắc nhở hoạt động khi app ở chế độ nền.\n\nSau khi cài đặt xong, vui lòng quay lại app.&quot;)&#10;                    .setPositiveButton(&quot;Đã hiểu&quot;, (dialog, which) -&gt; {&#10;                        // Kiểm tra lại sau khi người dùng quay lại&#10;                        checkPermissionsAfterBatteryOptimization(fragment, callback);&#10;                    })&#10;                    .setCancelable(false)&#10;                    .show();&#10;&#10;            } catch (Exception e) {&#10;                android.util.Log.e(&quot;PermissionHelper&quot;, &quot;Lỗi khi mở cài đặt tối ưu hóa pin&quot;, e);&#10;                callback.onPermissionsDenied(java.util.Arrays.asList(&quot;BATTERY_OPTIMIZATION&quot;));&#10;            }&#10;        } else {&#10;            callback.onPermissionsGranted();&#10;        }&#10;    }&#10;&#10;    /**&#10;     * ✅ THÊM: Kiểm tra quyền sau khi cài đặt tối ưu hóa pin&#10;     */&#10;    private static void checkPermissionsAfterBatteryOptimization(Fragment fragment, PermissionCallback callback) {&#10;        if (fragment.getContext() == null) return;&#10;&#10;        // Kiểm tra lại tất cả quyền&#10;        List&lt;String&gt; stillMissingPermissions = getMissingReminderPermissions(fragment.getContext());&#10;&#10;        if (stillMissingPermissions.isEmpty()) {&#10;            callback.onPermissionsGranted();&#10;        } else if (stillMissingPermissions.contains(Manifest.permission.POST_NOTIFICATIONS)) {&#10;            // Vẫn cần quyền thông báo&#10;            String[] permissionArray = {Manifest.permission.POST_NOTIFICATIONS};&#10;            fragment.requestPermissions(permissionArray, PERMISSION_REQUEST_REMINDER);&#10;        } else {&#10;            callback.onPermissionsDenied(stillMissingPermissions);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Tạo thông điệp giải thích về quyền cần thiết (cập nhật)&#10;     */&#10;    private static String buildPermissionMessage(List&lt;String&gt; missingPermissions) {&#10;        StringBuilder message = new StringBuilder();&#10;        message.append(&quot;Ứng dụng cần các quyền sau để nhắc nhở hoạt động ổn định:\n\n&quot;);&#10;&#10;        for (String permission : missingPermissions) {&#10;            switch (permission) {&#10;                case Manifest.permission.POST_NOTIFICATIONS:&#10;                    message.append(&quot;• Thông báo: Để hiển thị nhắc nhở đúng thời gian\n&quot;);&#10;                    break;&#10;                case &quot;BATTERY_OPTIMIZATION&quot;:&#10;                    message.append(&quot;• Tắt tối ưu hóa pin: Để nhắc nhở hoạt động khi app ở chế độ nền\n&quot;);&#10;                    break;&#10;            }&#10;        }&#10;&#10;        message.append(&quot;\nBạn có muốn cấp quyền để sử dụng đầy đủ tính năng không?&quot;);&#10;        return message.toString();&#10;    }&#10;&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.utils;&#13;&#10;&#13;&#10;import android.Manifest;&#13;&#10;import android.app.AlertDialog;&#13;&#10;import android.content.Context;&#13;&#10;import android.content.Intent;&#13;&#10;import android.content.pm.PackageManager;&#13;&#10;import android.os.Build;&#13;&#10;import android.os.PowerManager;&#13;&#10;import androidx.core.app.ActivityCompat;&#13;&#10;import androidx.core.content.ContextCompat;&#13;&#10;import androidx.fragment.app.Fragment;&#13;&#10;import java.util.ArrayList;&#13;&#10;import java.util.List;&#13;&#10;import java.util.HashMap;&#13;&#10;import java.util.Map;&#13;&#10;&#13;&#10;/**&#13;&#10; * Helper class để quản lý quyền ứng dụng&#13;&#10; */&#13;&#10;public class PermissionHelper {&#13;&#10;&#13;&#10;    // Mã yêu cầu quyền cho reminder&#13;&#10;    public static final int PERMISSION_REQUEST_REMINDER = 1001;&#13;&#10;&#13;&#10;    // Quyền cần thiết cho tính năng reminder - chỉ cần thông báo&#13;&#10;    private static final String[] REMINDER_PERMISSIONS = {&#13;&#10;            Manifest.permission.POST_NOTIFICATIONS&#13;&#10;    };&#13;&#10;&#13;&#10;    // Map để lưu trữ callback theo fragment hashCode&#13;&#10;    private static final Map&lt;Integer, PermissionCallback&gt; callbackMap = new HashMap&lt;&gt;();&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Interface callback cho việc xử lý kết quả quyền&#13;&#10;     */&#13;&#10;    public interface PermissionCallback {&#13;&#10;        void onPermissionsGranted();&#13;&#10;        void onPermissionsDenied(List&lt;String&gt; deniedPermissions);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Kiểm tra xem tất cả quyền reminder đã được cấp chưa (bao gồm tối ưu hóa pin)&#13;&#10;     */&#13;&#10;    public static boolean hasReminderPermissions(Context context) {&#13;&#10;        // Kiểm tra quyền thông báo cơ bản&#13;&#10;        boolean hasNotificationPermission = hasBasicNotificationPermission(context);&#13;&#10;&#13;&#10;        // Kiểm tra tối ưu hóa pin&#13;&#10;        boolean isBatteryOptimizationIgnored = isBatteryOptimizationIgnored(context);&#13;&#10;&#13;&#10;        return hasNotificationPermission &amp;&amp; isBatteryOptimizationIgnored;&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Kiểm tra quyền thông báo cơ bản&#13;&#10;     */&#13;&#10;    public static boolean hasBasicNotificationPermission(Context context) {&#13;&#10;        // Đối với Android 13+ mới cần kiểm tra POST_NOTIFICATIONS&#13;&#10;        if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.TIRAMISU) {&#13;&#10;            return true; // Không cần quyền thông báo cho Android &lt; 13&#13;&#10;        }&#13;&#10;&#13;&#10;        return ContextCompat.checkSelfPermission(context, Manifest.permission.POST_NOTIFICATIONS)&#13;&#10;                == PackageManager.PERMISSION_GRANTED;&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * ✅ THÊM: Kiểm tra xem app có bị tối ưu hóa pin không&#13;&#10;     */&#13;&#10;    public static boolean isBatteryOptimizationIgnored(Context context) {&#13;&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {&#13;&#10;            PowerManager powerManager = (PowerManager) context.getSystemService(Context.POWER_SERVICE);&#13;&#10;            return powerManager.isIgnoringBatteryOptimizations(context.getPackageName());&#13;&#10;        }&#13;&#10;        return true; // Android &lt; 6.0 không có Doze Mode&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Lấy danh sách quyền chưa được cấp (bao gồm tối ưu hóa pin)&#13;&#10;     */&#13;&#10;    public static List&lt;String&gt; getMissingReminderPermissions(Context context) {&#13;&#10;        List&lt;String&gt; missingPermissions = new ArrayList&lt;&gt;();&#13;&#10;&#13;&#10;        // Kiểm tra quyền thông báo&#13;&#10;        if (!hasBasicNotificationPermission(context)) {&#13;&#10;            missingPermissions.add(Manifest.permission.POST_NOTIFICATIONS);&#13;&#10;        }&#13;&#10;&#13;&#10;        // Kiểm tra tối ưu hóa pin&#13;&#10;        if (!isBatteryOptimizationIgnored(context)) {&#13;&#10;            missingPermissions.add(&quot;BATTERY_OPTIMIZATION&quot;);&#13;&#10;        }&#13;&#10;&#13;&#10;        return missingPermissions;&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Hiển thị dialog giải thích tại sao cần quyền và yêu cầu cấp quyền (cập nhật)&#13;&#10;     */&#13;&#10;    public static void showPermissionExplanationDialog(Fragment fragment,&#13;&#10;                                                      PermissionCallback callback) {&#13;&#10;        if (fragment.getContext() == null) {&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        List&lt;String&gt; missingPermissions = getMissingReminderPermissions(fragment.getContext());&#13;&#10;        if (missingPermissions.isEmpty()) {&#13;&#10;            callback.onPermissionsGranted();&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        String message = buildPermissionMessage(missingPermissions);&#13;&#10;&#13;&#10;        new AlertDialog.Builder(fragment.getContext())&#13;&#10;                .setTitle(&quot;Cần cấp quyền&quot;)&#13;&#10;                .setMessage(message)&#13;&#10;                .setPositiveButton(&quot;Cấp quyền&quot;, (dialog, which) -&gt; {&#13;&#10;                    dialog.dismiss();&#13;&#10;                    requestPermissions(fragment, missingPermissions, callback);&#13;&#10;                })&#13;&#10;                .setNegativeButton(&quot;Hủy&quot;, (dialog, which) -&gt; {&#13;&#10;                    dialog.dismiss();&#13;&#10;                    callback.onPermissionsDenied(missingPermissions);&#13;&#10;                })&#13;&#10;                .setCancelable(false)&#13;&#10;                .show();&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Yêu cầu cấp quyền (cập nhật để xử lý tối ưu hóa pin)&#13;&#10;     */&#13;&#10;    private static void requestPermissions(Fragment fragment,&#13;&#10;                                         List&lt;String&gt; permissions,&#13;&#10;                                         PermissionCallback callback) {&#13;&#10;        // Lưu callback vào map với key là hashCode của fragment&#13;&#10;        int fragmentKey = fragment.hashCode();&#13;&#10;        callbackMap.put(fragmentKey, callback);&#13;&#10;&#13;&#10;        // Kiểm tra xem có cần yêu cầu tối ưu hóa pin không&#13;&#10;        boolean needsBatteryOptimization = permissions.contains(&quot;BATTERY_OPTIMIZATION&quot;);&#13;&#10;        boolean needsNotificationPermission = permissions.contains(Manifest.permission.POST_NOTIFICATIONS);&#13;&#10;&#13;&#10;        if (needsBatteryOptimization) {&#13;&#10;            // Ưu tiên xử lý tối ưu hóa pin trước&#13;&#10;            requestIgnoreBatteryOptimization(fragment, callback);&#13;&#10;        } else if (needsNotificationPermission) {&#13;&#10;            // Chỉ yêu cầu quyền thông báo&#13;&#10;            String[] permissionArray = {Manifest.permission.POST_NOTIFICATIONS};&#13;&#10;            fragment.requestPermissions(permissionArray, PERMISSION_REQUEST_REMINDER);&#13;&#10;        } else {&#13;&#10;            // Không có quyền nào cần yêu cầu&#13;&#10;            callback.onPermissionsGranted();&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * ✅ THÊM: Yêu cầu tắt tối ưu hóa pin&#13;&#10;     */&#13;&#10;    private static void requestIgnoreBatteryOptimization(Fragment fragment, PermissionCallback callback) {&#13;&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {&#13;&#10;            try {&#13;&#10;                String packageName = fragment.requireContext().getPackageName();&#13;&#10;                Intent intent = new Intent(android.provider.Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS);&#13;&#10;                intent.setData(android.net.Uri.parse(&quot;package:&quot; + packageName));&#13;&#10;                fragment.startActivity(intent);&#13;&#10;&#13;&#10;                // Hiển thị thông báo hướng dẫn&#13;&#10;                new AlertDialog.Builder(fragment.getContext())&#13;&#10;                    .setTitle(&quot;Tối ưu hóa pin&quot;)&#13;&#10;                    .setMessage(&quot;Vui lòng chọn \&quot;Cho phép\&quot; để đảm bảo nhắc nhở hoạt động khi app ở chế độ nền.\n\nSau khi cài đặt xong, vui lòng quay lại app.&quot;)&#13;&#10;                    .setPositiveButton(&quot;Đã hiểu&quot;, (dialog, which) -&gt; {&#13;&#10;                        // Kiểm tra lại sau khi người dùng quay lại&#13;&#10;                        checkPermissionsAfterBatteryOptimization(fragment, callback);&#13;&#10;                    })&#13;&#10;                    .setCancelable(false)&#13;&#10;                    .show();&#13;&#10;&#13;&#10;            } catch (Exception e) {&#13;&#10;                android.util.Log.e(&quot;PermissionHelper&quot;, &quot;Lỗi khi mở cài đặt tối ưu hóa pin&quot;, e);&#13;&#10;                callback.onPermissionsDenied(java.util.Arrays.asList(&quot;BATTERY_OPTIMIZATION&quot;));&#13;&#10;            }&#13;&#10;        } else {&#13;&#10;            callback.onPermissionsGranted();&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * ✅ THÊM: Kiểm tra quyền sau khi cài đặt tối ưu hóa pin&#13;&#10;     */&#13;&#10;    private static void checkPermissionsAfterBatteryOptimization(Fragment fragment, PermissionCallback callback) {&#13;&#10;        if (fragment.getContext() == null) return;&#13;&#10;&#13;&#10;        // Kiểm tra lại tất cả quyền&#13;&#10;        List&lt;String&gt; stillMissingPermissions = getMissingReminderPermissions(fragment.getContext());&#13;&#10;&#13;&#10;        if (stillMissingPermissions.isEmpty()) {&#13;&#10;            callback.onPermissionsGranted();&#13;&#10;        } else if (stillMissingPermissions.contains(Manifest.permission.POST_NOTIFICATIONS)) {&#13;&#10;            // Vẫn cần quyền thông báo&#13;&#10;            String[] permissionArray = {Manifest.permission.POST_NOTIFICATIONS};&#13;&#10;            fragment.requestPermissions(permissionArray, PERMISSION_REQUEST_REMINDER);&#13;&#10;        } else {&#13;&#10;            callback.onPermissionsDenied(stillMissingPermissions);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Tạo thông điệp giải thích về quyền cần thiết (cập nhật)&#13;&#10;     */&#13;&#10;    private static String buildPermissionMessage(List&lt;String&gt; missingPermissions) {&#13;&#10;        StringBuilder message = new StringBuilder();&#13;&#10;        message.append(&quot;Ứng dụng cần các quyền sau để nhắc nhở hoạt động ổn định:\n\n&quot;);&#13;&#10;&#13;&#10;        for (String permission : missingPermissions) {&#13;&#10;            switch (permission) {&#13;&#10;                case Manifest.permission.POST_NOTIFICATIONS:&#13;&#10;                    message.append(&quot;• Thông báo: Để hiển thị nhắc nhở đúng thời gian\n&quot;);&#13;&#10;                    break;&#13;&#10;                case &quot;BATTERY_OPTIMIZATION&quot;:&#13;&#10;                    message.append(&quot;• Tắt tối ưu hóa pin: Để nhắc nhở hoạt động khi app ở chế độ nền\n&quot;);&#13;&#10;                    break;&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        message.append(&quot;\nBạn có muốn cấp quyền để sử dụng đầy đủ tính năng không?&quot;);&#13;&#10;        return message.toString();&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Xử lý kết quả yêu cầu quyền&#13;&#10;     */&#13;&#10;    public static void handlePermissionResult(Fragment fragment,&#13;&#10;                                            int requestCode,&#13;&#10;                                            String[] permissions,&#13;&#10;                                            int[] grantResults) {&#13;&#10;        if (requestCode != PERMISSION_REQUEST_REMINDER) {&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        // Lấy callback từ map&#13;&#10;        int fragmentKey = fragment.hashCode();&#13;&#10;        PermissionCallback callback = callbackMap.get(fragmentKey);&#13;&#10;        if (callback == null) {&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        List&lt;String&gt; deniedPermissions = new ArrayList&lt;&gt;();&#13;&#10;        for (int i = 0; i &lt; permissions.length; i++) {&#13;&#10;            if (grantResults[i] != PackageManager.PERMISSION_GRANTED) {&#13;&#10;                deniedPermissions.add(permissions[i]);&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        if (deniedPermissions.isEmpty()) {&#13;&#10;            callback.onPermissionsGranted();&#13;&#10;        } else {&#13;&#10;            callback.onPermissionsDenied(deniedPermissions);&#13;&#10;        }&#13;&#10;&#13;&#10;        // Xóa callback khỏi map&#13;&#10;        callbackMap.remove(fragmentKey);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Kiểm tra xem có nên hiển thị giải thích quyền hay không&#13;&#10;     */&#13;&#10;    public static boolean shouldShowRequestPermissionRationale(Fragment fragment, String permission) {&#13;&#10;        return fragment.shouldShowRequestPermissionRationale(permission);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Kiểm tra xem có quyền thông báo hay không&#13;&#10;     */&#13;&#10;    public static boolean hasNotificationPermission(Context context) {&#13;&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) {&#13;&#10;            return ContextCompat.checkSelfPermission(context,&#13;&#10;                Manifest.permission.POST_NOTIFICATIONS) == PackageManager.PERMISSION_GRANTED;&#13;&#10;        }&#13;&#10;        return true; // Android &lt; 13 không cần quyền thông báo runtime&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Yêu cầu quyền thông báo&#13;&#10;     */&#13;&#10;    public static void requestNotificationPermission(Fragment fragment, NotificationPermissionCallback callback) {&#13;&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) {&#13;&#10;            // Lưu callback&#13;&#10;            int fragmentKey = fragment.hashCode();&#13;&#10;            notificationCallbackMap.put(fragmentKey, callback);&#13;&#10;&#13;&#10;            // Yêu cầu quyền&#13;&#10;            fragment.requestPermissions(&#13;&#10;                new String[]{Manifest.permission.POST_NOTIFICATIONS},&#13;&#10;                PERMISSION_REQUEST_REMINDER&#13;&#10;            );&#13;&#10;        } else {&#13;&#10;            // Android &lt; 13 tự động có quyền&#13;&#10;            callback.onResult(true);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Interface callback cho quyền thông báo&#13;&#10;     */&#13;&#10;    public interface NotificationPermissionCallback {&#13;&#10;        void onResult(boolean granted);&#13;&#10;    }&#13;&#10;&#13;&#10;    // Map để lưu notification permission callbacks&#13;&#10;    private static final Map&lt;Integer, NotificationPermissionCallback&gt; notificationCallbackMap = new HashMap&lt;&gt;();&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/workers/ReminderWorker.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/vhn/doan/workers/ReminderWorker.java" />
              <option name="originalContent" value="package com.vhn.doan.workers;&#10;&#10;import android.content.Context;&#10;import android.content.Intent;&#10;import android.os.PowerManager;&#10;import android.util.Log;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.work.Worker;&#10;import androidx.work.WorkerParameters;&#10;&#10;import com.vhn.doan.data.Reminder;&#10;import com.vhn.doan.data.repository.ReminderRepository;&#10;import com.vhn.doan.data.repository.ReminderRepositoryImpl;&#10;import com.vhn.doan.data.repository.RepositoryCallback;&#10;import com.vhn.doan.data.repository.RepositoryCallback;&#10;import com.vhn.doan.services.NotificationService;&#10;&#10;/**&#10; * WorkManager Worker để xử lý thông báo nhắc nhở&#10; * Hoạt động mạnh mẽ hơn AlarmManager trong việc xử lý Doze mode&#10; */&#10;public class ReminderWorker extends Worker {&#10;&#10;    private static final String TAG = &quot;ReminderWorker&quot;;&#10;&#10;    // Input data keys&#10;    public static final String KEY_REMINDER_ID = &quot;reminder_id&quot;;&#10;    public static final String KEY_TITLE = &quot;title&quot;;&#10;    public static final String KEY_MESSAGE = &quot;message&quot;;&#10;&#10;    public ReminderWorker(@NonNull Context context, @NonNull WorkerParameters workerParams) {&#10;        super(context, workerParams);&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public Result doWork() {&#10;        Log.d(TAG, &quot;ReminderWorker started&quot;);&#10;&#10;        // Acquire wake lock để đảm bảo thiết bị không sleep&#10;        PowerManager powerManager = (PowerManager) getApplicationContext().getSystemService(Context.POWER_SERVICE);&#10;        PowerManager.WakeLock wakeLock = powerManager.newWakeLock(&#10;            PowerManager.PARTIAL_WAKE_LOCK,&#10;            &quot;HealthTips:ReminderWorker&quot;&#10;        );&#10;&#10;        try {&#10;            wakeLock.acquire(30 * 1000); // 30 giây timeout&#10;&#10;            String reminderId = getInputData().getString(KEY_REMINDER_ID);&#10;            String title = getInputData().getString(KEY_TITLE);&#10;            String message = getInputData().getString(KEY_MESSAGE);&#10;&#10;            Log.d(TAG, &quot;Processing reminder - ID: &quot; + reminderId + &quot;, Title: &quot; + title);&#10;&#10;            if (reminderId == null || title == null || message == null) {&#10;                Log.w(TAG, &quot;Missing reminder data&quot;);&#10;                return Result.failure();&#10;            }&#10;&#10;            // Hiển thị thông báo ngay lập tức&#10;            NotificationService.showReminderNotification(getApplicationContext(), title, message, reminderId);&#10;            Log.d(TAG, &quot;Notification shown successfully&quot;);&#10;&#10;            // Cập nhật trạng thái reminder&#10;            updateReminderStatus(reminderId);&#10;&#10;            return Result.success();&#10;&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Error in ReminderWorker&quot;, e);&#10;            return Result.failure();&#10;        } finally {&#10;            if (wakeLock.isHeld()) {&#10;                wakeLock.release();&#10;            }&#10;        }&#10;    }&#10;&#10;    private void updateReminderStatus(String reminderId) {&#10;        reminderRepository.getReminderById(reminderId, new RepositoryCallback&lt;Reminder&gt;() {&#10;        reminderRepository.getReminderById(reminderId, new RepositoryCallback&lt;Reminder&gt;() {&#10;            @Override&#10;            public void onSuccess(Reminder reminder) {&#10;                if (reminder != null) {&#10;                    Log.d(TAG, &quot;Successfully retrieved reminder for update: &quot; + reminder.getTitle());&#10;&#10;                    // Cập nhật lần thông báo cuối&#10;                    reminder.setLastNotified(System.currentTimeMillis());&#10;&#10;                    // Nếu không phải reminder lặp lại, đánh dấu là đã hoàn thành&#10;                    if (!reminder.isRepeating()) {&#10;                        reminder.setCompleted(true);&#10;                        reminder.setActive(false);&#10;                    }&#10;                    reminderRepository.updateReminder(reminder, new RepositoryCallback&lt;Void&gt;() {&#10;                    reminderRepository.updateReminder(reminder, new RepositoryCallback&lt;Void&gt;() {&#10;                        @Override&#10;                        public void onSuccess(Void result) {&#10;                            Log.d(TAG, &quot;Reminder status updated successfully&quot;);&#10;                        }&#10;&#10;                        @Override&#10;                        public void onError(String error) {&#10;                            Log.e(TAG, &quot;Failed to update reminder status: &quot; + error);&#10;                        }&#10;                    });&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                Log.e(TAG, &quot;Failed to retrieve reminder for update: &quot; + error);&#10;            }&#10;        });&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vhn.doan.workers;&#10;&#10;import android.content.Context;&#10;import android.content.Intent;&#10;import android.os.PowerManager;&#10;import android.util.Log;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.work.Worker;&#10;import androidx.work.WorkerParameters;&#10;&#10;import com.vhn.doan.data.Reminder;&#10;import com.vhn.doan.data.repository.ReminderRepository;&#10;import com.vhn.doan.data.repository.ReminderRepositoryImpl;&#10;import com.vhn.doan.services.NotificationService;&#10;&#10;/**&#10; * WorkManager Worker để xử lý thông báo nhắc nhở&#10; * Hoạt động mạnh mẽ hơn AlarmManager trong việc xử lý Doze mode&#10; */&#10;public class ReminderWorker extends Worker {&#10;&#10;    private static final String TAG = &quot;ReminderWorker&quot;;&#10;&#10;    // Input data keys&#10;    public static final String KEY_REMINDER_ID = &quot;reminder_id&quot;;&#10;    public static final String KEY_TITLE = &quot;title&quot;;&#10;    public static final String KEY_MESSAGE = &quot;message&quot;;&#10;&#10;    public ReminderWorker(@NonNull Context context, @NonNull WorkerParameters workerParams) {&#10;        super(context, workerParams);&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public Result doWork() {&#10;        Log.d(TAG, &quot;ReminderWorker started&quot;);&#10;&#10;        // Acquire wake lock để đảm bảo thiết bị không sleep&#10;        PowerManager powerManager = (PowerManager) getApplicationContext().getSystemService(Context.POWER_SERVICE);&#10;        PowerManager.WakeLock wakeLock = powerManager.newWakeLock(&#10;            PowerManager.PARTIAL_WAKE_LOCK,&#10;            &quot;HealthTips:ReminderWorker&quot;&#10;        );&#10;&#10;        try {&#10;            wakeLock.acquire(30 * 1000); // 30 giây timeout&#10;&#10;            String reminderId = getInputData().getString(KEY_REMINDER_ID);&#10;            String title = getInputData().getString(KEY_TITLE);&#10;            String message = getInputData().getString(KEY_MESSAGE);&#10;&#10;            Log.d(TAG, &quot;Processing reminder - ID: &quot; + reminderId + &quot;, Title: &quot; + title);&#10;&#10;            if (reminderId == null || title == null || message == null) {&#10;                Log.w(TAG, &quot;Missing reminder data&quot;);&#10;                return Result.failure();&#10;            }&#10;&#10;            // Hiển thị thông báo ngay lập tức&#10;            NotificationService.showReminderNotification(getApplicationContext(), title, message, reminderId);&#10;            Log.d(TAG, &quot;Notification shown successfully&quot;);&#10;&#10;            // Cập nhật trạng thái reminder&#10;            updateReminderStatus(reminderId);&#10;&#10;            return Result.success();&#10;&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Error in ReminderWorker&quot;, e);&#10;            return Result.failure();&#10;        } finally {&#10;            if (wakeLock.isHeld()) {&#10;                wakeLock.release();&#10;            }&#10;        }&#10;    }&#10;&#10;    private void updateReminderStatus(String reminderId) {&#10;        ReminderRepository reminderRepository = new ReminderRepositoryImpl();&#10;        reminderRepository.getReminderById(reminderId, new ReminderRepository.RepositoryCallback&lt;Reminder&gt;() {&#10;            @Override&#10;            public void onSuccess(Reminder reminder) {&#10;                if (reminder != null) {&#10;                    Log.d(TAG, &quot;Successfully retrieved reminder for update: &quot; + reminder.getTitle());&#10;&#10;                    // Cập nhật lần thông báo cuối&#10;                    reminder.setLastNotified(System.currentTimeMillis());&#10;&#10;                    // Nếu không phải reminder lặp lại, đánh dấu là đã hoàn thành&#10;                    if (!reminder.isRepeating()) {&#10;                        reminder.setCompleted(true);&#10;                        reminder.setActive(false);&#10;                    }&#10;&#10;                    reminderRepository.updateReminder(reminder, new ReminderRepository.RepositoryCallback&lt;Void&gt;() {&#10;                        @Override&#10;                        public void onSuccess(Void result) {&#10;                            Log.d(TAG, &quot;Reminder status updated successfully&quot;);&#10;                        }&#10;&#10;                        @Override&#10;                        public void onError(String error) {&#10;                            Log.e(TAG, &quot;Failed to update reminder status: &quot; + error);&#10;                        }&#10;                    });&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onError(String error) {&#10;                Log.e(TAG, &quot;Failed to retrieve reminder for update: &quot; + error);&#10;            }&#10;        });&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/bg_bottom_sheet.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/bg_bottom_sheet.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;?attr/colorSurface&quot; /&gt;&#10;    &lt;corners&#10;        android:topLeftRadius=&quot;16dp&quot;&#10;        android:topRightRadius=&quot;16dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/bg_reminder_due.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/bg_reminder_due.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &#10;    &lt;!-- Màu nền nhấn mạnh cho nhắc nhở đã đến giờ --&gt;&#10;    &lt;solid android:color=&quot;#1AFF5722&quot; /&gt;&#10;    &#10;    &lt;!-- Bo góc --&gt;&#10;    &lt;corners android:radius=&quot;8dp&quot; /&gt;&#10;    &#10;    &lt;!-- Đường viền đỏ cam để làm nổi bật --&gt;&#10;    &lt;stroke&#10;        android:width=&quot;2dp&quot;&#10;        android:color=&quot;@color/status_due&quot; /&gt;&#10;        &#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/bg_reminder_normal.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/bg_reminder_normal.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &#10;    &lt;!-- Màu nền bình thường --&gt;&#10;    &lt;solid android:color=&quot;@android:color/transparent&quot; /&gt;&#10;    &#10;    &lt;!-- Bo góc --&gt;&#10;    &lt;corners android:radius=&quot;8dp&quot; /&gt;&#10;    &#10;    &lt;!-- Đường viền nhẹ --&gt;&#10;    &lt;stroke&#10;        android:width=&quot;1dp&quot;&#10;        android:color=&quot;@color/divider_color&quot; /&gt;&#10;        &#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/bg_repeat_type.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/bg_repeat_type.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &#10;    &lt;!-- Màu nền trong suốt với tông màu chính --&gt;&#10;    &lt;solid android:color=&quot;#1A4CAF50&quot; /&gt;&#10;    &#10;    &lt;!-- Bo góc tròn --&gt;&#10;    &lt;corners android:radius=&quot;12dp&quot; /&gt;&#10;    &#10;    &lt;!-- Đường viền màu chính --&gt;&#10;    &lt;stroke&#10;        android:width=&quot;1dp&quot;&#10;        android:color=&quot;@color/primary_color&quot; /&gt;&#10;        &#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/circle_background.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/circle_background.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;oval&quot;&gt;&#10;    &lt;stroke&#10;        android:width=&quot;2dp&quot;&#10;        android:color=&quot;?attr/colorPrimaryDark&quot; /&gt;&#10;    &lt;solid android:color=&quot;@android:color/transparent&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_add.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_add.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M19,13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_check.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_check.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnPrimary&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M9,16.17L4.83,12l-1.42,1.41L9,19 21,7l-1.41,-1.41z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_delete.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_delete.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M6,19c0,1.1 0.9,2 2,2h8c1.1,0 2,-0.9 2,-2V7H6v12zM19,4h-3.5l-1,-1h-5l-1,1H5v2h14V4z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_filter_list.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_filter_list.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M10,18h4v-2h-4v2zM3,6v2h18L21,6L3,6zM6,13h12v-2L6,11v2z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_filter_list_off.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_filter_list_off.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M10.83,8H21V6H8.83l2,2zM12.83,12H21v-2H10.83l2,2zM14.83,16H21v-2h-4.17l2,2zM2.81,2.81L1.39,4.22l4.44,4.44H3v2h4.83l2,2H6v2h5.83l2,2H10v2h5.83l1.95,1.95l1.41-1.41L2.81,2.81z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_logout.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_logout.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;?attr/colorControlNormal&quot;&#10;        android:pathData=&quot;M17,7l-1.41,1.41L18.17,11H8v2h10.17l-2.58,2.58L17,17l5,-5zM4,5h8V3H4c-1.1,0 -2,0.9 -2,2v14c0,1.1 0.9,2 2,2h8v-2H4V5z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_menu.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_menu.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;?attr/colorControlNormal&quot;&#10;        android:pathData=&quot;M3,18h18v-2L3,16v2zM3,13h18v-2L3,11v2zM3,6v2h18L21,6L3,6z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_settings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_settings.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;?attr/colorControlNormal&quot;&#10;        android:pathData=&quot;M19.14,12.94c0.04,-0.3 0.06,-0.61 0.06,-0.94c0,-0.32 -0.02,-0.64 -0.07,-0.94l2.03,-1.58c0.18,-0.14 0.23,-0.41 0.12,-0.61l-1.92,-3.32c-0.12,-0.22 -0.37,-0.29 -0.59,-0.22l-2.39,0.96c-0.5,-0.38 -1.03,-0.7 -1.62,-0.94L14.4,2.81c-0.04,-0.24 -0.24,-0.41 -0.48,-0.41h-3.84c-0.24,0 -0.43,0.17 -0.47,0.41L9.25,5.35C8.66,5.59 8.12,5.92 7.63,6.29L5.24,5.33c-0.22,-0.08 -0.47,0 -0.59,0.22L2.74,8.87C2.62,9.08 2.66,9.34 2.86,9.48l2.03,1.58C4.84,11.36 4.8,11.69 4.8,12s0.02,0.64 0.07,0.94l-2.03,1.58c-0.18,0.14 -0.23,0.41 -0.12,0.61l1.92,3.32c0.12,0.22 0.37,0.29 0.59,0.22l2.39,-0.96c0.5,0.38 1.03,0.7 1.62,0.94l0.36,2.54c0.05,0.24 0.24,0.41 0.48,0.41h3.84c0.24,0 0.44,-0.17 0.47,-0.41l0.36,-2.54c0.59,-0.24 1.13,-0.56 1.62,-0.94l2.39,0.96c0.22,0.08 0.47,0 0.59,-0.22l1.92,-3.32c0.12,-0.22 0.07,-0.47 -0.12,-0.61L19.14,12.94zM12,15.6c-1.98,0 -3.6,-1.62 -3.6,-3.6s1.62,-3.6 3.6,-3.6s3.6,1.62 3.6,3.6S13.98,15.6 12,15.6z&quot; /&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_share.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_share.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;?attr/colorControlNormal&quot;&#10;        android:pathData=&quot;M17.6,6.4C16.2,4.9 14.2,4 12,4c-4.4,0 -8,3.6 -8,8s3.6,8 8,8c3.7,0 6.8,-2.5 7.7,-6h-2.1c-0.8,2.3 -3,4 -5.6,4c-3.3,0 -6,-2.7 -6,-6s2.7,-6 6,-6c1.7,0 3.1,0.7 4.2,1.8L13,11h7V4L17.6,6.4z&quot; /&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_theme_toggle.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_theme_toggle.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;?attr/colorControlNormal&quot;&#10;        android:pathData=&quot;M12,3c-4.97,0 -9,4.03 -9,9s4.03,9 9,9s9,-4.03 9,-9c0,-0.46 -0.04,-0.92 -0.1,-1.36c-0.98,1.37 -2.58,2.26 -4.4,2.26c-2.98,0 -5.4,-2.42 -5.4,-5.4c0,-1.81 0.89,-3.42 2.26,-4.4C12.92,3.04 12.46,3 12,3L12,3z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_grid_content.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_grid_content.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/recyclerView&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:clipToPadding=&quot;false&quot;&#10;        android:paddingStart=&quot;1dp&quot;&#10;        android:paddingTop=&quot;1dp&quot;&#10;        android:paddingEnd=&quot;1dp&quot;&#10;        android:paddingBottom=&quot;1dp&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_simple_profile.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_simple_profile.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;?attr/colorSurface&quot;&#10;    android:fitsSystemWindows=&quot;true&quot;&gt;&#10;&#10;    &lt;com.google.android.material.appbar.AppBarLayout&#10;        android:id=&quot;@+id/appBarLayout&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:background=&quot;?attr/colorSurface&quot;&#10;        app:elevation=&quot;0dp&quot;&gt;&#10;&#10;        &lt;!-- Toolbar với nút chuyển đổi chế độ sáng/tối và menu --&gt;&#10;        &lt;androidx.appcompat.widget.Toolbar&#10;            android:id=&quot;@+id/toolbar&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;?attr/actionBarSize&quot;&#10;            android:background=&quot;?attr/colorSurface&quot;&#10;            app:contentInsetStart=&quot;0dp&quot;&#10;            app:contentInsetEnd=&quot;0dp&quot;&#10;            app:layout_scrollFlags=&quot;scroll|enterAlways&quot;&gt;&#10;&#10;            &lt;androidx.constraintlayout.widget.ConstraintLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;                &lt;!-- Nút chuyển đổi chế độ sáng/tối --&gt;&#10;                &lt;ImageButton&#10;                    android:id=&quot;@+id/btn_toggle_theme&quot;&#10;                    android:layout_width=&quot;48dp&quot;&#10;                    android:layout_height=&quot;48dp&quot;&#10;                    android:layout_marginStart=&quot;8dp&quot;&#10;                    android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;                    android:contentDescription=&quot;Chuyển đổi chế độ sáng/tối&quot;&#10;                    android:padding=&quot;12dp&quot;&#10;                    android:src=&quot;@drawable/ic_theme_toggle&quot;&#10;                    app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;                    app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;                    app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;                    app:tint=&quot;?attr/colorControlNormal&quot; /&gt;&#10;&#10;                &lt;!-- Nút menu 3 gạch ngang --&gt;&#10;                &lt;ImageButton&#10;                    android:id=&quot;@+id/btn_menu&quot;&#10;                    android:layout_width=&quot;48dp&quot;&#10;                    android:layout_height=&quot;48dp&quot;&#10;                    android:layout_marginEnd=&quot;8dp&quot;&#10;                    android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;                    android:contentDescription=&quot;Menu&quot;&#10;                    android:padding=&quot;12dp&quot;&#10;                    android:src=&quot;@drawable/ic_menu&quot;&#10;                    app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;                    app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;                    app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;                    app:tint=&quot;?attr/colorControlNormal&quot; /&gt;&#10;&#10;            &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;&#10;        &lt;/androidx.appcompat.widget.Toolbar&gt;&#10;&#10;        &lt;androidx.constraintlayout.widget.ConstraintLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:paddingBottom=&quot;8dp&quot;&#10;            app:layout_scrollFlags=&quot;scroll|enterAlways&quot;&gt;&#10;&#10;            &lt;!-- Profile Header --&gt;&#10;            &lt;ImageView&#10;                android:id=&quot;@+id/profile_image&quot;&#10;                android:layout_width=&quot;100dp&quot;&#10;                android:layout_height=&quot;100dp&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                android:src=&quot;@drawable/default_avatar&quot;&#10;                android:background=&quot;@drawable/circle_background&quot;&#10;                android:padding=&quot;2dp&quot;&#10;                android:scaleType=&quot;centerCrop&quot;&#10;                app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;                app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;                app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/profile_name&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                android:text=&quot;Tên Người Dùng&quot;&#10;                android:textAppearance=&quot;@style/TextAppearance.Material3.HeadlineSmall&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;                app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;                app:layout_constraintTop_toBottomOf=&quot;@+id/profile_image&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/profile_username&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;4dp&quot;&#10;                android:text=&quot;\@username&quot;&#10;                android:textAppearance=&quot;@style/TextAppearance.Material3.BodyMedium&quot;&#10;                android:textColor=&quot;?android:attr/textColorSecondary&quot;&#10;                app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;                app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;                app:layout_constraintTop_toBottomOf=&quot;@+id/profile_name&quot; /&gt;&#10;&#10;            &lt;!-- Bio --&gt;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/profile_bio&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginStart=&quot;32dp&quot;&#10;                android:layout_marginTop=&quot;12dp&quot;&#10;                android:layout_marginEnd=&quot;32dp&quot;&#10;                android:ellipsize=&quot;end&quot;&#10;                android:gravity=&quot;center&quot;&#10;                android:maxLines=&quot;3&quot;&#10;                android:text=&quot;Mô tả ngắn về bản thân. Đây là bio của người dùng, có thể hiển thị vài dòng thông tin.&quot;&#10;                android:textAppearance=&quot;@style/TextAppearance.Material3.BodySmall&quot;&#10;                app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;                app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;                app:layout_constraintTop_toBottomOf=&quot;@+id/profile_username&quot; /&gt;&#10;&#10;            &lt;!-- Stats --&gt;&#10;            &lt;LinearLayout&#10;                android:id=&quot;@+id/stats_container&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;16dp&quot;&#10;                android:gravity=&quot;center&quot;&#10;                android:orientation=&quot;horizontal&quot;&#10;                android:paddingStart=&quot;16dp&quot;&#10;                android:paddingEnd=&quot;16dp&quot;&#10;                app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;                app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;                app:layout_constraintTop_toBottomOf=&quot;@+id/profile_bio&quot;&gt;&#10;&#10;                &lt;!-- Posts Count --&gt;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:gravity=&quot;center&quot;&#10;                    android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/posts_count&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;120&quot;&#10;                        android:textAppearance=&quot;@style/TextAppearance.Material3.TitleMedium&quot;&#10;                        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Bài viết&quot;&#10;                        android:textAppearance=&quot;@style/TextAppearance.Material3.BodySmall&quot;&#10;                        android:textColor=&quot;?android:attr/textColorSecondary&quot; /&gt;&#10;                &lt;/LinearLayout&gt;&#10;&#10;                &lt;!-- Followers Count --&gt;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:gravity=&quot;center&quot;&#10;                    android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/followers_count&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;1.5K&quot;&#10;                        android:textAppearance=&quot;@style/TextAppearance.Material3.TitleMedium&quot;&#10;                        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Người theo dõi&quot;&#10;                        android:textAppearance=&quot;@style/TextAppearance.Material3.BodySmall&quot;&#10;                        android:textColor=&quot;?android:attr/textColorSecondary&quot; /&gt;&#10;                &lt;/LinearLayout&gt;&#10;&#10;                &lt;!-- Following Count --&gt;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:gravity=&quot;center&quot;&#10;                    android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/following_count&quot;&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;350&quot;&#10;                        android:textAppearance=&quot;@style/TextAppearance.Material3.TitleMedium&quot;&#10;                        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Đang theo dõi&quot;&#10;                        android:textAppearance=&quot;@style/TextAppearance.Material3.BodySmall&quot;&#10;                        android:textColor=&quot;?android:attr/textColorSecondary&quot; /&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/LinearLayout&gt;&#10;&#10;            &lt;!-- Action Buttons --&gt;&#10;            &lt;LinearLayout&#10;                android:id=&quot;@+id/profile_actions&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginStart=&quot;24dp&quot;&#10;                android:layout_marginTop=&quot;16dp&quot;&#10;                android:layout_marginEnd=&quot;24dp&quot;&#10;                android:gravity=&quot;center&quot;&#10;                android:orientation=&quot;horizontal&quot;&#10;                app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;                app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;                app:layout_constraintTop_toBottomOf=&quot;@+id/stats_container&quot;&gt;&#10;&#10;                &lt;com.google.android.material.button.MaterialButton&#10;                    android:id=&quot;@+id/btn_share_profile&quot;&#10;                    style=&quot;@style/Widget.Material3.Button.OutlinedButton&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Chia sẻ hồ sơ&quot;&#10;                    android:textAllCaps=&quot;false&quot;&#10;                    app:icon=&quot;@drawable/ic_share&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;&#10;        &lt;com.google.android.material.tabs.TabLayout&#10;            android:id=&quot;@+id/tab_layout&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:background=&quot;?attr/colorSurface&quot;&#10;            app:tabGravity=&quot;fill&quot;&#10;            app:tabIndicatorColor=&quot;?attr/colorPrimary&quot;&#10;            app:tabIndicatorHeight=&quot;3dp&quot;&#10;            app:tabMode=&quot;fixed&quot;&#10;            app:tabSelectedTextColor=&quot;?attr/colorPrimary&quot;&#10;            app:tabTextAppearance=&quot;@style/TextAppearance.Material3.BodyMedium&quot;&#10;            app:tabTextColor=&quot;?android:attr/textColorSecondary&quot; /&gt;&#10;&#10;    &lt;/com.google.android.material.appbar.AppBarLayout&gt;&#10;&#10;    &lt;androidx.viewpager2.widget.ViewPager2&#10;        android:id=&quot;@+id/view_pager&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot; /&gt;&#10;&#10;&lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;?attr/colorSurface&quot;&#10;    android:fitsSystemWindows=&quot;true&quot;&gt;&#10;&#10;    &lt;com.google.android.material.appbar.AppBarLayout&#10;        android:id=&quot;@+id/appBarLayout&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:background=&quot;?attr/colorSurface&quot;&#10;        app:elevation=&quot;0dp&quot;&gt;&#10;&#10;        &lt;!-- Toolbar với nút chuyển đổi chế độ sáng/tối và menu --&gt;&#10;        &lt;androidx.appcompat.widget.Toolbar&#10;            android:id=&quot;@+id/toolbar&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;?attr/actionBarSize&quot;&#10;            android:background=&quot;?attr/colorSurface&quot;&#10;            app:contentInsetStart=&quot;0dp&quot;&#10;            app:contentInsetEnd=&quot;0dp&quot;&#10;            app:layout_scrollFlags=&quot;scroll|enterAlways&quot;&gt;&#10;&#10;            &lt;androidx.constraintlayout.widget.ConstraintLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;                &lt;!-- Nút chuyển đổi chế độ sáng/tối --&gt;&#10;                &lt;ImageButton&#10;                    android:id=&quot;@+id/btn_toggle_theme&quot;&#10;                    android:layout_width=&quot;48dp&quot;&#10;                    android:layout_height=&quot;48dp&quot;&#10;                    android:layout_marginStart=&quot;8dp&quot;&#10;                    android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;                    android:contentDescription=&quot;Chuyển đổi chế độ sáng/tối&quot;&#10;                    android:padding=&quot;12dp&quot;&#10;                    android:src=&quot;@drawable/ic_theme_toggle&quot;&#10;                    app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;                    app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;                    app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;                    app:tint=&quot;?attr/colorControlNormal&quot; /&gt;&#10;&#10;                &lt;!-- Nút menu 3 gạch ngang --&gt;&#10;                &lt;ImageButton&#10;                    android:id=&quot;@+id/btn_menu&quot;&#10;                    android:layout_width=&quot;48dp&quot;&#10;                    android:layout_height=&quot;48dp&quot;&#10;                    android:layout_marginEnd=&quot;8dp&quot;&#10;                    android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;                    android:contentDescription=&quot;Menu&quot;&#10;                    android:padding=&quot;12dp&quot;&#10;                    android:src=&quot;@drawable/ic_menu&quot;&#10;                    app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;                    app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;                    app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;                    app:tint=&quot;?attr/colorControlNormal&quot; /&gt;&#10;&#10;            &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;&#10;        &lt;/androidx.appcompat.widget.Toolbar&gt;&#10;&#10;        &lt;androidx.constraintlayout.widget.ConstraintLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:paddingBottom=&quot;8dp&quot;&#10;            app:layout_scrollFlags=&quot;scroll|enterAlways&quot;&gt;&#10;&#10;            &lt;!-- Profile Header --&gt;&#10;            &lt;ImageView&#10;                android:id=&quot;@+id/profile_image&quot;&#10;                android:layout_width=&quot;100dp&quot;&#10;                android:layout_height=&quot;100dp&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                android:src=&quot;@drawable/default_avatar&quot;&#10;                android:background=&quot;@drawable/circle_background&quot;&#10;                android:padding=&quot;2dp&quot;&#10;                android:scaleType=&quot;centerCrop&quot;&#10;                app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;                app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;                app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/profile_name&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                android:text=&quot;Tên Người Dùng&quot;&#10;                android:textAppearance=&quot;@style/TextAppearance.Material3.HeadlineSmall&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;                app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;                app:layout_constraintTop_toBottomOf=&quot;@+id/profile_image&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/profile_username&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginTop=&quot;4dp&quot;&#10;                android:text=&quot;\@username&quot;&#10;                android:textAppearance=&quot;@style/TextAppearance.Material3.BodyMedium&quot;&#10;                android:textColor=&quot;?android:attr/textColorSecondary&quot;&#10;                app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;                app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;                app:layout_constraintTop_toBottomOf=&quot;@+id/profile_name&quot; /&gt;&#10;&#10;            &lt;!-- Bio --&gt;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/profile_bio&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginStart=&quot;32dp&quot;&#10;                android:layout_marginTop=&quot;12dp&quot;&#10;                android:layout_marginEnd=&quot;32dp&quot;&#10;                android:ellipsize=&quot;end&quot;&#10;                android:gravity=&quot;center&quot;&#10;                android:maxLines=&quot;3&quot;&#10;                android:text=&quot;Mô tả ngắn về bản thân. Đây là bio của người dùng, có thể hiển thị vài dòng thông tin.&quot;&#10;                android:textAppearance=&quot;@style/TextAppearance.Material3.BodySmall&quot;&#10;                app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;                app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;                app:layout_constraintTop_toBottomOf=&quot;@+id/profile_username&quot; /&gt;&#10;&#10;            &lt;!-- TabLayout nằm ngay sau bio --&gt;&#10;        &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;&#10;        &lt;com.google.android.material.tabs.TabLayout&#10;            android:id=&quot;@+id/tab_layout&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:background=&quot;?attr/colorSurface&quot;&#10;            app:tabGravity=&quot;fill&quot;&#10;            app:tabIndicatorColor=&quot;?attr/colorPrimary&quot;&#10;            app:tabIndicatorHeight=&quot;3dp&quot;&#10;            app:tabMode=&quot;fixed&quot;&#10;            app:tabSelectedTextColor=&quot;?attr/colorPrimary&quot;&#10;            app:tabTextAppearance=&quot;@style/TextAppearance.Material3.BodyMedium&quot;&#10;            app:tabTextColor=&quot;?android:attr/textColorSecondary&quot; /&gt;&#10;&#10;    &lt;/com.google.android.material.appbar.AppBarLayout&gt;&#10;&#10;    &lt;androidx.viewpager2.widget.ViewPager2&#10;        android:id=&quot;@+id/view_pager&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot; /&gt;&#10;&#10;&lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/layout_bottom_sheet_menu.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/layout_bottom_sheet_menu.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:background=&quot;?attr/colorSurface&quot;&#10;    android:paddingBottom=&quot;24dp&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:paddingVertical=&quot;16dp&quot;&#10;        android:text=&quot;Menu&quot;&#10;        android:textAppearance=&quot;@style/TextAppearance.Material3.TitleMedium&quot;&#10;        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;    &lt;View&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;1dp&quot;&#10;        android:background=&quot;?android:attr/listDivider&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/txt_setting&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:background=&quot;?attr/selectableItemBackground&quot;&#10;        android:clickable=&quot;true&quot;&#10;        android:drawableStart=&quot;@drawable/ic_settings&quot;&#10;        android:drawablePadding=&quot;16dp&quot;&#10;        android:drawableTint=&quot;?attr/colorControlNormal&quot;&#10;        android:focusable=&quot;true&quot;&#10;        android:padding=&quot;16dp&quot;&#10;        android:text=&quot;Cài đặt&quot;&#10;        android:textAppearance=&quot;@style/TextAppearance.Material3.BodyLarge&quot; /&gt;&#10;&#10;    &lt;View&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;1dp&quot;&#10;        android:background=&quot;?android:attr/listDivider&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/txt_logout&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:background=&quot;?attr/selectableItemBackground&quot;&#10;        android:clickable=&quot;true&quot;&#10;        android:drawableStart=&quot;@drawable/ic_logout&quot;&#10;        android:drawablePadding=&quot;16dp&quot;&#10;        android:drawableTint=&quot;?attr/colorError&quot;&#10;        android:focusable=&quot;true&quot;&#10;        android:padding=&quot;16dp&quot;&#10;        android:text=&quot;Đăng xuất&quot;&#10;        android:textAppearance=&quot;@style/TextAppearance.Material3.BodyLarge&quot;&#10;        android:textColor=&quot;?attr/colorError&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:background=&quot;@drawable/bg_bottom_sheet&quot;&#10;    android:paddingBottom=&quot;24dp&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:paddingVertical=&quot;16dp&quot;&#10;        android:text=&quot;Menu&quot;&#10;        android:textAppearance=&quot;@style/TextAppearance.Material3.TitleMedium&quot;&#10;        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;    &lt;View&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;1dp&quot;&#10;        android:background=&quot;?android:attr/listDivider&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/txt_setting&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:background=&quot;?attr/selectableItemBackground&quot;&#10;        android:clickable=&quot;true&quot;&#10;        android:drawableStart=&quot;@drawable/ic_settings&quot;&#10;        android:drawablePadding=&quot;16dp&quot;&#10;        android:drawableTint=&quot;?attr/colorControlNormal&quot;&#10;        android:focusable=&quot;true&quot;&#10;        android:padding=&quot;16dp&quot;&#10;        android:text=&quot;Cài đặt&quot;&#10;        android:textAppearance=&quot;@style/TextAppearance.Material3.BodyLarge&quot; /&gt;&#10;&#10;    &lt;View&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;1dp&quot;&#10;        android:background=&quot;?android:attr/listDivider&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/txt_logout&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:background=&quot;?attr/selectableItemBackground&quot;&#10;        android:clickable=&quot;true&quot;&#10;        android:drawableStart=&quot;@drawable/ic_logout&quot;&#10;        android:drawablePadding=&quot;16dp&quot;&#10;        android:drawableTint=&quot;?attr/colorError&quot;&#10;        android:focusable=&quot;true&quot;&#10;        android:padding=&quot;16dp&quot;&#10;        android:text=&quot;Đăng xuất&quot;&#10;        android:textAppearance=&quot;@style/TextAppearance.Material3.BodyLarge&quot;&#10;        android:textColor=&quot;?attr/colorError&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/styles.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/styles.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;!-- Style chung cho ứng dụng --&gt;&#10;    &lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.MaterialComponents.DayNight.NoActionBar&quot;&gt;&#10;        &lt;!-- Các thuộc tính chung --&gt;&#10;        &lt;item name=&quot;colorPrimary&quot;&gt;@color/primary_button_end&lt;/item&gt;&#10;        &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/primary_button_start&lt;/item&gt;&#10;        &lt;item name=&quot;colorAccent&quot;&gt;@color/accent&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowBackground&quot;&gt;@color/background_dark&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/text_primary&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorSecondary&quot;&gt;@color/text_secondary&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Style cho TextInputLayout --&gt;&#10;    &lt;style name=&quot;AppTextInputLayout&quot; parent=&quot;Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&gt;&#10;        &lt;item name=&quot;boxStrokeColor&quot;&gt;@color/primary_button_end&lt;/item&gt;&#10;        &lt;item name=&quot;boxStrokeWidth&quot;&gt;1dp&lt;/item&gt;&#10;        &lt;item name=&quot;boxBackgroundColor&quot;&gt;@color/background_dark_alt&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorHint&quot;&gt;@color/text_secondary&lt;/item&gt;&#10;        &lt;item name=&quot;hintTextColor&quot;&gt;@color/primary_button_end&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Style cho nút chính --&gt;&#10;    &lt;style name=&quot;PrimaryButton&quot; parent=&quot;Widget.MaterialComponents.Button&quot;&gt;&#10;        &lt;item name=&quot;android:background&quot;&gt;@drawable/bg_primary_button&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/primary_button_text&lt;/item&gt;&#10;        &lt;item name=&quot;android:textSize&quot;&gt;16sp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingTop&quot;&gt;12dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingBottom&quot;&gt;12dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingStart&quot;&gt;24dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingEnd&quot;&gt;24dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Style cho nút phụ --&gt;&#10;    &lt;style name=&quot;SecondaryButton&quot; parent=&quot;Widget.MaterialComponents.Button.OutlinedButton&quot;&gt;&#10;        &lt;item name=&quot;android:background&quot;&gt;@drawable/bg_secondary_button&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/secondary_button_text&lt;/item&gt;&#10;        &lt;item name=&quot;android:textSize&quot;&gt;16sp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingTop&quot;&gt;12dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingBottom&quot;&gt;12dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingStart&quot;&gt;24dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingEnd&quot;&gt;24dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Style cho Bottom Sheet Dialog với bo góc --&gt;&#10;    &lt;style name=&quot;BottomSheetDialogTheme&quot; parent=&quot;Theme.Design.Light.BottomSheetDialog&quot;&gt;&#10;        &lt;item name=&quot;bottomSheetStyle&quot;&gt;@style/BottomSheetStyle&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;BottomSheetStyle&quot; parent=&quot;Widget.Design.BottomSheet.Modal&quot;&gt;&#10;        &lt;item name=&quot;android:background&quot;&gt;@android:color/transparent&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;&lt;/resources&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;!-- Style chung cho ứng dụng --&gt;&#10;    &lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.MaterialComponents.DayNight.NoActionBar&quot;&gt;&#10;        &lt;!-- Các thuộc tính chung --&gt;&#10;        &lt;item name=&quot;colorPrimary&quot;&gt;@color/primary_button_end&lt;/item&gt;&#10;        &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/primary_button_start&lt;/item&gt;&#10;        &lt;item name=&quot;colorAccent&quot;&gt;@color/accent&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowBackground&quot;&gt;@color/background_dark&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/text_primary&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorSecondary&quot;&gt;@color/text_secondary&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Style cho TextInputLayout --&gt;&#10;    &lt;style name=&quot;AppTextInputLayout&quot; parent=&quot;Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&gt;&#10;        &lt;item name=&quot;boxStrokeColor&quot;&gt;@color/primary_button_end&lt;/item&gt;&#10;        &lt;item name=&quot;boxStrokeWidth&quot;&gt;1dp&lt;/item&gt;&#10;        &lt;item name=&quot;boxBackgroundColor&quot;&gt;@color/background_dark_alt&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorHint&quot;&gt;@color/text_secondary&lt;/item&gt;&#10;        &lt;item name=&quot;hintTextColor&quot;&gt;@color/primary_button_end&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Style cho nút chính --&gt;&#10;    &lt;style name=&quot;PrimaryButton&quot; parent=&quot;Widget.MaterialComponents.Button&quot;&gt;&#10;        &lt;item name=&quot;android:background&quot;&gt;@drawable/bg_primary_button&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/primary_button_text&lt;/item&gt;&#10;        &lt;item name=&quot;android:textSize&quot;&gt;16sp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingTop&quot;&gt;12dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingBottom&quot;&gt;12dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingStart&quot;&gt;24dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingEnd&quot;&gt;24dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Style cho nút phụ --&gt;&#10;    &lt;style name=&quot;SecondaryButton&quot; parent=&quot;Widget.MaterialComponents.Button.OutlinedButton&quot;&gt;&#10;        &lt;item name=&quot;android:background&quot;&gt;@drawable/bg_secondary_button&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/secondary_button_text&lt;/item&gt;&#10;        &lt;item name=&quot;android:textSize&quot;&gt;16sp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingTop&quot;&gt;12dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingBottom&quot;&gt;12dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingStart&quot;&gt;24dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingEnd&quot;&gt;24dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &#10;    &lt;!-- Style cho Bottom Sheet Dialog với bo góc --&gt;&#10;    &lt;style name=&quot;BottomSheetDialogTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.BottomSheetDialog&quot;&gt;&#10;        &lt;item name=&quot;bottomSheetStyle&quot;&gt;@style/BottomSheetStyle&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowIsFloating&quot;&gt;false&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowSoftInputMode&quot;&gt;adjustResize&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &#10;    &lt;style name=&quot;BottomSheetStyle&quot; parent=&quot;Widget.MaterialComponents.BottomSheet.Modal&quot;&gt;&#10;        &lt;item name=&quot;shapeAppearanceOverlay&quot;&gt;@style/BottomSheetShape&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &#10;    &lt;style name=&quot;BottomSheetShape&quot;&gt;&#10;        &lt;item name=&quot;cornerFamily&quot;&gt;rounded&lt;/item&gt;&#10;        &lt;item name=&quot;cornerSizeTopRight&quot;&gt;16dp&lt;/item&gt;&#10;        &lt;item name=&quot;cornerSizeTopLeft&quot;&gt;16dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>